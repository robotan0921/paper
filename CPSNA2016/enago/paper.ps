%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: paper.dvi
%%CreationDate: Tue Apr 12 17:00:24 2016
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: NimbusSanL-Bold NimbusRomNo9L-Medi SFRM0900
%%+ NimbusRomNo9L-Regu NimbusRomNo9L-ReguItal CMSY7 SFRM0800 SFRM0700
%%+ CMMI9 SFRM0600 CMSY8 CMSY9 CMR9 CMMI8 MSAM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips paper.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.04.12:0900
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: MSAM10
%!PS-AdobeFont-1.0: MSAM10 003.002
%%Title: MSAM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSAM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSAM10 known{/MSAM10 findfont dup/UniqueID known{dup
/UniqueID get 5031981 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSAM10 def
/FontBBox {8 -463 1331 1003 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSAM10.) readonly def
/FullName (MSAM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 88 /check put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE2340939CE40EE9186A0DCC3D3
D661293EC5BB40766B73935EB54125526067D631E1E3D1D6569AB3546CB257C3
4C12CA4AE98C3F99898F1448AC0B416B8E5C3EEF3D74B5FD6A1BE3C23B160E78
79A9E0AC4FC82364F946003C1B2E0EF3CEA944727E7502B65BA1331D36C159E2
1D107580F28A32E04CB876822CEF478BF4464CE4F7AE824FC786E099A1BE2A3C
7D2BFE2A748AB092AEBC2021DBFD5C40E912BC5856F3EF8615147350E75D2BF9
E428D7948E2128053FDB1F90CA9C7D6581E25A6645879F50577FE7F0B32B873F
13F97C524E19F1CFE3883C0DE1DF80FB61111978B0C2D028A99A712D3DC27D8F
C83C4EC335F0DB9912DD2AF009FAA56C5BD5855BA92851629EF6C47E6AC303A6
1A231558746ED8A78C76E476ED71246A2E15C51F465AB21A22ACACB03014B06F
201876D3C6F49E2D38D8C4FE8011F7BB148FC3227E0BFA51C0F9AAD64F0C6095
77B3D875476B666F9FB9A46763C49272FC504CC0E817A1533409D293D6D62CC8
DFDA666BC9DC70C4510BFB0DD2BC94B33D457EACFD754761B696163DB4C547B5
FF8994977A7C9910AF486487CE0320FA1E705BAF4B14FB937229D80F58D01E6E
9D9716EA3EDA84840B5D6BDE216A25814ABC4DE4C6818266C33CD4C3DA4F23BF
DAE6ABDC6D64E7EC7DE918DDB0B05D8413D32D99D15FE112C1D393D21806E0C9
7CE0F0977AA36617B8DD50937C5B0B5698947B0A71A167072FE1B3AD6F274D97
484926DF52CE7D9D2A4928A188E1F867C298E6DB475C0CBE09F0523D8BC6FE24
E1CED78178EE1E9D66A906B72505339E62499C0E4B6B5A2D596C4F8F4312F582
9413DC88D6EDFEAAE0C86BEE44CBDDD79BC02C844B80324B1FE3512E73C213BF
ECD22E7E13F98AB56E4D693B1D6045045E2F01DCC2AA1F70A4699B7D718A743F
D749133029EAD1870DF0B00EDEEDFD33642A88EB10DDF4CBBF8A7D8F7781179F
A91CF398747D52769A054CDACAEDC330FB79ECC96CF43C29515F5895D3A8C1E6
828F776844C88090405F868A872EF54467B72825B001B46F6496817A9B928BEC
ED212D4368368778F2D1B66D005F2D6E3DF4AB9B9791AF2CECCA3AE524781A41
5052FD21CB81D934F0F12CF8C8FFC656BAFBE897C5E86A21D3F42A38F7916693
ADD1DBF48F534DA16099FFCF3E3DBCB254BF49D8F72FAC2F9548477F9AFA414E
65A29F24FA16A9E0955A9A6CCC47198E6332ECD1A791F2E36E6656852179A94C
E3CF4477A9A6CF507B8184ECA5C0304FA15ABD8B0C379EAC19B9D16A630D96DB
A6DA819C2E481AE4870BCAB5963C0F9D837C97E207F7ED58B776799586B9F755
B705AC31C09C3F74AFBCDACF092B05F9E2B072C1B17EE6347523D3D5E1D404AC
636C33DD94121C3711C3D05F48E12DF8489F894E4913263176E81927BF5E3A94
99D124F64D00BCC288F03FD14F89E6352083333EC6C2044E2F81C477DD4CA9A9
55135915C27654B09BC9099FA966AD440417945879399B39C7BF20385456878F
9AAE7343912927476C2C88A445C03E3B77381F3F9A82FEECADCCF8C307144775
144279EB14E0F0443F8200C0FABD54A075EDCB83EAB07A7CAF6EAB17C6CDB239
077DC62173A54E93BE2911F4A45F72B80DD9C41B301B292EFA78D361AD74BD7D
2E94D44A2D79BB7B89708E094A21CCB28D80E0FCA707D742CC02BB81FE4B0E06
4A5E93DF0414BAC27ADDB044A0D444692973994CD028E1C62F1FFA4776554914
2D55B0F81C06A2633A4AE42AD00422A619E339F2E6F0C6FC74F70552974509A0
812F1007FD7055E9ABB8CB39F799F847993DB9593A76C388F9BC883D4A0DE2CD
BFD0F7F2A5F1C50791EB4363104B49088E6EA2C5E61EF256A9FF232357D62D78
0C876D200E4136F7B0570A3B0988F3E23443081591DDB861745B4F6F0FF7D854
8F558F995A283B346E266DB6FFB54E0761046152A864F710113B6BF12967D022
2947517E1CE2079849CF8EB01BB2B96EEC2575AAAD1AA1E019D7E72BCFDF2979
8E2A6EE0C1525389C16411E5DBD416467B9900F07223117A77E0B4C3B0D49A96
C2E3A61AF9C9B1CEB80AC6357FC0CA446FF87BA0CCCD81924F6209198BD6E1A6
9EECEF233B17CC4E9F0654024F7E857EAB409F4B9B9ADE4090F2B715443A80EA
130369A193A32A4DA3730F13E3C9E717CCC9E74611D787277B73EFCE14FCC3B8
6B11AD88F42705F65E9C747B472F379ECDCB7F8F9C3FEA64402972623EA0998F
255892C43CEFD7ED08957C495AAACDA59E9398B43788DF27F7433F72377C8F88
F54F5E3A5564244827EBF92227B94F4FE896FEC6519769AAD567E618DFF61B7D
B93EE0FFA2EA58BE1FDAA0025259789FDB31A1019661C18080567EB5C6306596
F97F039E3C9ABF9E40B4725A96F8170B49B73B68E308786FE99B0C005DE01894
7CC93C196E1F830570D51F0AD29BF27CCE45AD7D3B4332C9D50F1E9C2D04E033
1E197DB9BE1D44566F738CD26A13B8EBC8FD49E999D35F042E8A24F025414F14
D9D11ED702250F1295722F68A022196A0E38B9ADDDBA997283ABAA62898EF32B
C765387E238CA3475ED5C6EF2803CE32B5A90A8287C70386F46B84C332E8C00F
85A8CC2DE78D433A325B7862AD4D93B3EE2CABC4B688833BF263E26879AF213C
934FAFEBE8D804E2BC8433B81ED5DA99F08C2C11B93019D3D9C1C952F20C68A7
E141DEA2CB983DAC5A2B9426A98262FEB13C420EAA315C890F0B907BEA099C1A
10B0AB255AF99694C722166DCDA72FD58CFBA3328FC5EF83A52A750C5E613E74
A8572CB8B78ABDAC27B798E727E3E5AF9451416493FE3F4E95157B4ABDF3A910
64369E34A2B40176A5E0E30F472E33A41B8C7BA4CB1BFB9173783909161370AA
EA40C83C60AAE242358688CE13193C9DDC3544A959A1E6A16FCC4BFAA65A63C7
5AEF208FC201F88DD047B5E6EFBD4BB256F973269BA1B06CCFC186D48BCCB4F6
A0F512B1D6541417BB6045045CBE72B72AA2549C345B1BB466335226A0E76A10
9645C25A0FB4CD8455C7C10C0F4E7E9914D2010BA1C95C6BAE4E62C8B6A8BDB4
92281B366208ABD9C010B3660C5E150D63D6927255CF9081C0898E9B206FAB57
B306669AB87AF405C537CA7D3411DBC41C53EEFD8071C094486158E97BAFE90E
BA29BEB83BA60776D33BF9CAF9C7FEB66D4B93DA27E499B006D243FF59CB33F6
AFC65D10B74CC522BF4AD45E3451B395AD5029B148A1C9B710D5CF02B65F9189
0822C0A33C4D07F2DEFDD5B4F6E063891F0456F1BCA4540F9DCD3B0F9F39696A
52336AFCF0A33A029AEEB448CE120B9D939487EC8274AD4E1D5F5AF4C14EC910
680C5E312735DFA3A5B1835370A76DFA63A05379021A64EE55E25AD5218398A3
6DD66D1B474A2E7C6E236E0E4A9BD0E4F7AD1807C6478225C58327BFE1822000
26713D01CAD6951F456504D79867D523605ECD78F2D5DA05994BA4812BF65E7E
34ACB732150ECB3D212D03387C71677F617D76A9A42C708C89D61614F280A5FB
0BFA84A17CF9DF333C9E13DEE82A5ADC9D2E588338D247889ECFB090CC63CF9B
8D92B1CB784B65BE80E3B57998F9ABEE702E07BC127D272C67B0A97734E405C1
FAA87E6B9DDB8ECAD2B9DCD56D687DFF71BDF29BBDA0A0812695F81C5EBB83F8
0A810D6560F28D7CA1F89A11F253E1B3B4EBAF511454E4BF2C46A333BC186558
8D73374455A32DE993526063AE70EAA647454ECC62BFC5A53357F2955E4A8A02
E20AA64AB6511CEFC5A32874C8F2BC2424C6B85BAE80191216A22D93BF2813EA
18A1A961543D7C58C4F4B263D76AD6C61270F2A77468B3E59BA9D861E5AA6CE1
B7A9C4C2A13E80C4052283DF3529210B3F6E90C2EFF205866865E7E96F34513B
05A45939728619E02FF1410C0D220F6D615718893E7370A0B91675BCF681B2D9
56112D9D37ECB819017472DCD38FE4724834869F82985A69E33BF862DB420DEB
AA1CDF83099114501C037873E86E0D33FC954E12D40038FBDC78E7159B738516
A078AA386D9424B8D4913B7848D8439D2ACAFB7C81C9AB192D77F316D299D11B
24F67141B1E0FDB564B70FE68070BE6BC00F22C11A1291BA6401C722487BFE19
D7869DA874C9059677DBEF958B7AA06EB924A17B3EFE9014493EA1FA8C4C67B2
B5DC483ACFAAE88F2DFF9FAAA7825854671ECFD522540C9F6C3817C11D3B63CA
8ECF710EAC4F27506B67B972633D0821BD15F4511F305A5677F2919DEBF7DE88
4F60E36360A7856B6B6A8A866832534279AF45B4232877F45C92ABDFE0910F7C
F86825A1B6012FF93479BDC9639C01CF2C783356B33127AEC7039D40529EE54A
756D8B7524E069DA60A38AFE592B8B228ABE22B7BC9CD9B23277FBB567B1377C
77E21AE6F55ADF4F8864F4260562F0384165444385D5A8C5966EBF191900B898
85240634EBE8A5DA382E0EE3583B1B5D102B6EBFAD60AB9C335919EFBAA55A6E
36CE4887299E395EB5766080FC0B6F93B1247F28842FB817084C9C090616AA72
25F4ED6996D36CD9675009C615BA26BD4904F3130991023E4116A7E6BCB26C10
7106241DE039BA7F26E137040BAF587AE03A476526F025C70F16EF23474C0EEB
6E27D8562C7C733CF470EA198494A505A8F871E8EBA31D4F0D9F0AEB9D0EF63B
738B582F7BD73DEFD5D83707BBC7854B6FC7FA6E2636F0B68C4858B247F70C4D
F602764B9465975E9AF28C2046EAD743CC350E747D6524B9CD7F325946B9287B
F7D46E4342A71B0409B2BF5FA4D340DD549F6A5B05D2784EC5A248560F4E214B
C5304217B3AF8451C190FE1C312527746E45DE39D8D43CBEED9A19FFE143CA61
3B65344C26E189D790A0211556C609F107C78F55CA120F3449A697D1305DAD2C
D3EAB88E2CBDC022A4E036E232237C1C16ECFA62D6CF8EA3B6610B58C75EEEE9
676201206E4A8B8C7CF5EF409F2C0544DAAC926497B1FBCDEA07DF042ED870D3
9D74709FDB8CD2CAC4726655371EDDAE78A5D9E0811ED4DCE8C23DAE1ED44D06
F4DF09BD9A00C1DE178E766E05CD3CA64301C592BC01EA4F6D1973586547B170
A3338C60FA1148DC5F3F7B7DB5EAC870239BD137CC85AD54380379F5C30B0754
D0A0FD8DDDC7CE725B58F37DE7DF077916C912F2808D0E4CA32808D0439A148E
3B1E18B9C88C8B4DF23FF5C53B2881D7C23D1C239F08137BBD8FEA326E7CD1BC
C80027A40463BD58758F4402D3DCDFED46C2E3C405E1B1E8DD0062E1272AB5C8
91953946FBB4B9EB0A74D0F7F4FAAD798571EEDBF0CD4C92A6916909297F27B7
5135990685B849E8244D2EE73D5C7BEF1D3042CA8353210EB4293A2B2F1BCCEA
7FF2AA91F52D343BFBF5E91F2381AE5B6803C46605D471B7BD122153E87D872D
EBF37727370BB683A194C4C4DE13F54AECB116BEB3E0750E10AF272E0C015641
0F9264A21BA79821B29D8CB78746C314E6893765AB9BB7BB1730D758F687E615
D2AEED695331E99591AFA000AA540ABD36ACA911E91E20912AB819A80D5183A4
CB88E08E0E9911612639C05043942AC8EA0072E9CB7154C415C0FB37DFE3F01E
638D5052C87A8359DD979C44B730F06019191C5BED15E6E79FAF312ED8EB0B02
3E712A0F6C89A6F7C122A561F133FB4D2A98EE09B11ADEA53702C92C210334E6
8D5F3E1BCC0E81CE178ED749B00FF4089C1AC412DC5F6696C9D8B9D2EB24B35C
3C1F8F63EA348A95622AF76CDD5C4DFE06A8C7534A55FAF937777E864C98062C
CEAA3ECB5E518C75FEAA240910646EF782303BF34FBF8162C8650D5A6F0EADB4
FAD9AED7994003F74E09A3CFD8900A33160CD1D49AA1C7BB5E42A2B0AB5A9D20
A5AEE02435D84A2622ED87454A2867E112A9AC72653A7865E2DDB9C236384228
94DE4A396FA798ED1F370AE5247E0E703D4D4225ACC1EF410631555D7DBC814F
F84353CD407284FBEA1D371CA578165B888D771ABEF7C3ADE33DF899E55FB0C6
A99A97A474739D07FF17DDBA267EC6C0A6154094D6E7354FEEF9723F23CA6E86
D8467D66FC5DEA43D700C9712BCDBCB15EDB628F4B840A76D761CC213376A0CF
3F137F399AF2F349C1D7FC9EE28CE88F416F1069D6907C3E917AECDD245A1BBF
4375A03755C145042232F87BD3F097746E41A70FAE7761AB26D1FDBABBFB56FE
D8C80879557D3849CBFC7D25D84D137ADBB5FD4F6FEF8CC9D54824EC85DDF553
FC992F823952FC7591D08F035BDAFC9317F144C94E828F09E29A02F0D6639DF5
08D32902957CF0BE88694AA031FA8BCA9E73D48A60FBEF090FEFF955FEF964DA
F53A9B58D2732F986DD20814A1C11963E4FF24011CB93D616CF4A6DEA6ACC5B5
354626A142D85BFC4F03DBC32F26253B97414C9CFDF3C3EBDD68FE0B7908AF88
1961CDBB6A94155524361C0B95E42AF0DC1542752B2129938BCD020CA19D64E1
0EB5DE254B638D700EF4BA620D924D65E95A329AC2657D2CCA597A4FEF7F1347
05419CFB59A93578682671B9A2910BBAF099C877288C19A4EBEBCB3C64415248
C00D0295332B6388384F27779F0B0A2D05A9F3BBCB3C1F587EAE05AE4D2C5319
478E8D848ED75B368FF45ED8B2D572AAE502493D2A3660F8400E1AAF9B27AB35
99FA7E39E250E91A67101F20FAE8BFC13A07FD2F7FD3A45002C02AD891458739
10D221602C35139358B1F23E0DDEADDF0AC07B1689EE95DB17A3B6888D9BEB65
C7A9BA2CD903B2F8348489A57F5A7191D1627A2C76A856C9E178B17A40293F98
E9CACD819DBAFBD0FFEC6EF5BAA6D8AFF764786470A5B02860DA35A5B3A2BBE7
45E6E4882CCF3A980B0C35F6C170D7269F7263FBBBF4051A51437A218711AA18
A408F16E7C9FD7D61AC4E859A91CA4B18D5BC3B0F6EF0287298B75C11FBD9FA4
1BF203A988C21BC2C550839E432350ECB4471F8553F7B4E42128DCA6B1239DAF
6C9D4A8B8AB7FA8AB013EC3060F02D6DB609F59E0BDE4D05891811A41F7E47EE
7166D88DDCFF5BFE1AB84D873C38009A857DB436100CACD8DEB98548A2FD3770
B44D6194717757468A9C84238E5B83AD19921E31485ACC168C25DA73D95767E2
27EDA7FBEC3FA6C8C58DED3649994CC965F81327D8547181CE06A73A6D696552
6A6EB8009B1C40A46791E8DD0AD66E125F61CA6810BB4B74E266703F9DE0E322
41D93C72DF010EE7DF3B7AF46CAAA9463E68D5C8B792D3197C4EED52CD16D5E4
493C1F8944901537C4E6AC73E5D6621CBD177B50CFD7F86E786D6E6EC176F6C1
3D7E9346C2859A185793A764E960F236A1798FF5E3A740ADDEF422FDA93FE058
53A9989A0A7252337DDCE50B6A040E49421069081644A51C80D37BF73CB30254
BC1D8A551F71FFE93F068070448334307A87526A86A3A7D53AEABC3506E78DD1
849BFF403701D6059D6CC2CCFCBAC8BEBF440B8D3152C63908C6882E56EAAF71
2984E440F40B5F355DAC74EB02738BCB094E40A55A48A26BA9970D09EF48EDB9
C0C6BA95EC2A5E98325594AC418DFF541515964C77B8D2C8E953703063F17F36
D042EFFB97936DA27FC3601DDD601709B71382EC67BB58C8D07254A6BBF7FFF4
EADB3B735D143E4654A5F06ECF67F0305606CD0619022A5DEC8206D4F9B8D3B0
1CB47BCDCCC4F1898958555F5218EBA0BB9F6BDA92E8A8F645C51D69C597141A
DACC7696EC47C399F6BC4CC2760FF9366A7D1F2ADE54B913F1ED476D606ACA25
83D3958E9EE0547A5C54C359AD40D487FEED3555A936A7F9A2098050930339C0
DB023D22CC949331C13287D1108A4F840235AF8E613FD6176485B22A31B165EA
8DE2F2534E57BC3E63D44604D095AAF56667F587FBFB99FACB6315A21101C80A
6029178A3D776FC5AA14492040D51A0BD36BBD5918337528F0047916B4EE34FF
056DA6CA570021A31C2D05D04ED8D323365ACDEB4390E27385600A336667A83B
351634798A723608BC13FDCEBE9A4BE37EE4A4C1375034688DACBC2F496DDF60
E000D86E61EC7394E1D166BEE3AAD6787916F603DC67D4856D776F19FECBD332
66498C4573988F9B131467E9148A436BAD55085A1E19534417A7D4F5D4BB397A
4ABFB96A8346CF4164DB12015292BFBCE474B05BF886430411E8E937B6F09D74
42A2C0EB14BFC76003DFF172AC44D730214DEE512BF257C8688FBED139C01604
2C34B2E4C33219B9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI8
%!PS-AdobeFont-1.0: CMMI8 003.002
%%Title: CMMI8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI8 known{/CMMI8 findfont dup/UniqueID known{dup
/UniqueID get 5087383 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI8 def
/FontBBox {-24 -250 1110 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI8.) readonly def
/FullName (CMMI8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBA9B440A6DD72BF8
97084C906B05FAD969086ED21AF0AA1471613182B26117D7494DD9F9270EF3ED
8DA4D957225F75D060237B6DAAD5A0AE3E702B3D1C437835B93B8AF1F9E7D966
E739CF3AD5E256F90286A34069E5BB4122F94F18F3485658D0D25B938522A879
8215A417CA2CBD20F71C5C5FCDE21EEA7BB27876D93BA667868A419287FE59BC
F538980597DBBA743DBBDBEBC61E3286DA7977833DC8BFC5E52FF5DF5EFD9A92
D070EB769E31E760A50FDE012DC0057835E8B9B046FCC83F1A0C40326AFB4E3A
0CC3BFA35FCC64E32854F32EB7DF10A19F95830136BBB8139DE1663B7FD790CE
464EA431AC109FCA0E03F3E0D355FAE20AC8774D6B1CE233C27680C77DDA7356
560A27C75993E8C980CD1E3B0683F7E8A05119B3AD567DAB4851B66E418687B7
F9B21B3BEF607918D5973421B68E65DFD8B6C8DFDCF1CAFE2637D365148EBCE3
FA4CC00052A2A522205EA3AE3461CEE02042E1A3F11467CB6C8C849B200CCE3D
0BC188EC7B934CBBC0AE2BF5DEA228181DBF0F774119F313516E7D97FF532621
9278F856C166CA6547504F34991D588A0631A5CD06363F3FEE9FA0772C783447
ECD0A200929CB58EBFB6B72008E4082B5D14AA560C24915B9463A92F38237886
C35CBB2D4DD6D0CA8C1D4EC46093041C6181C2F6586EE3E7D4E647A107B6DB23
DAD9AB5A0C2905455FE58075EFF6B48597078BFCCDD84812B98986F34987CE49
7EFB19814F2A58B0233A59331F6F8EB66401F04EE7B1ECAD9BC90A2BCEBE213D
DDDB1F75C83609ED6A669A0CED58B2E269E76ECF73616D94F13CF827C9BF354A
E82202988DCFE856786B8AE569AFF3105B55C72C58D310FFC0E10B2ABAC8DB06
40D5F72E54770E9DED1AF4616008595B8481E3D9AF4191CC9A5BFD9DDD01C9F1
FE7165D21E488DB40879E863D470CB31CA06E5B5F1F8C3CCE04B697CEB0F3557
ECAA358D2EC2B370519CE06138FA702314BA01F1F33881825EAE1230098BB3C9
59666983275CA4E8D9DB34979F86535577E79393A72F84B0F768FE8C92692907
15E9FE9894E98A0EBEA490CBC8C7E5A9F3E43B24C2C5A4BCD71DAAD3CC0B8B82
AC13933543E295C163F61C9FD18371CB514493F90BF7FB460C029B8DD2E2BF05
FD66B451DF277864DE1EE42100BF29E01A50258C2758F3EDE211BB3457B8243C
20BE72983FD6FA2581C5A953D94381E32E80D6D6095F2E93A5455C101BA71E8C
E560D4694E4C167EFA25FB1E9D214AEA745CE34CAA5468FAEF8F6BDB6C6BE8F4
3D58836C26A2392E4C4DECE284A90DDB3858A16D6135FED655A600929DE71605
6CA32F6851A2A6F71A9DF3D5D657593BB729CBCA2F4B059365B7263DC08AB211
9C547096E6427F6AA53CB2EB87DF0AFE2ABCDBD15D7EF228D3396413B83C6B4A
79E41F9BA55A2688F62A10472675E5658F151F9FD6634EC94EC0682C17448024
CC1633077C07A93E4DA8749D974FB8F4332B5DECF97D749C10DB60D4C90ACBFA
E65AE928C88BAE19234690EEABDB30BEDCEF2660D7464D5071058C30C572A2BC
7DEE5384BD7614A4BEC4C84E18CF7EC81C810256E8CE6520466C033E2A36D3D3
5D6074B3857415011D8D9D49A474D994571CDBB89AF92BEA879BEBAF67663F5C
17ACAE809C2231EDD0A76641BA52FA7B19A2798D54A4A9B62C42F9905851229F
2CEE0191C8AA5AC12BB0CE9E5E3E862683AB57DBB4AAD6AC0FA8BA4F408D41E0
755F72B82B7C18EC6B13995BF7AFD66AF4BA0EA7523DA8B75EE751744EBA9CA4
4E8BC1FB37734503A5B24FB9F2C2D07A47CFC477F02413D55BD7DC180B0344E8
50248801FA6BE26C97F397797F5F9DF762967E7CD92CCB8B2E587C92177619A4
BF8046CBC72C6E69DC78B8CB6B7381A290080EF59F5B9F29C1167B261C932E9D
010D2D14BB425D157F22BC0305770AECC5BC80000F8CCFB9930255A68F299ED9
D3B5B83A2CC00E3305EB281E1A7054734661B175C6CA0AF168790985F173DF03
A8693B677BAFE23C3CF833FF6463B136FC370E4F0C29E322DBEF637F62C33CD9
B0A8338FD67EC628E3BF2FCBF7CF0347D5CBA1DBE6DE878DD670176B85F69EF2
3C5CCA1BD2B8A385F113EF1CE522F5A6AE053B9C1E39408C9459DE3E7FE2C4ED
77F026B0081BB80D40185458139C16333EA27F43EF1204BFBF80BC5301B2A3AD
B10F7EFBB4F5B7E04DA1167F68BB6D4049440B0F57385FF0A95E72760C6A12F8
1335BB31CB74081FBAA319180DC00113CF50CC5A41D2E751E055DA1429CD75BB
0060C21CED634FDA106C49A12B356129D010E29F2919301AA7F80222AF3905ED
672FF85C9897A70241E8DDB9A53034B6BB44E140D9E739848E7A782F24B98AC8
00DA09EBE4532787E5CF3ED815705F659D8E52DC2C2D4949374A3BF192BEEB99
1D9A90A4F3250BF8A1FD40D91F5B34AF2CC561FD02FED712500B24330D87DA9E
4AA46B6E34BCB40B1F73A1DDE07E002B9478E9651D2BF85E67585B6ED812BE03
A594874A235B1C1840C4BF4BA6D863583D8C12DB49EF7F8CC24DCBB6B21FBCA9
378F3E2DC406291AB324571F76E0805DF8826090F0E8B50599CA58D124653D16
16C782B01C91A6F3DA6346482E3163D28D95EA49866360147296838A3FD0CC53
920F91D895F839CB61FFD2FBA296CA4C6304EEE579782AE5FD33D0FA652BA7E2
CEC7C01DD0D3E0D56E6177EE5F609A396F7FC8EADABB465DBA7F384E215C4DCB
E64F807A50A461545107F9C3F7D7CC7D33E6EBD6D9228B1DCBFEF160703E6129
0DCED8D45DD54E2A36E698A616E7906A50901E453BDB2A363EB77144E9EA6F2B
6BD927495EB0EBA5755165707CCFBF8759CE5856881117C7F3EF6D494EDDA7EF
E499BCA56C86467AC573DA9C2724FCC74BEB331E736FB093DCB67DAD42296655
415D110F2729BD1D55E5C9CCE2E724116F45FB2E66AE0F790258851A5C808762
68B8A110BD326F8D3EC45004E7CC08DA42F6CB80A6B6E7C286F139534A275BCD
2F812993DD9C9A1AEB5E7E4BDB4805DFF3A7030263AB060C9B74F0C25C5B9005
965284884450CC2815DF28D5F9B0496DC7A3AA85E1E42741E1538797175C28D9
FD904699C771FB066397FFDEE8E8DD1ABBDF67E6BFEF95BB700A7C1BA91354C5
42EC3864F6E19B379E79A1CC3C786C0DA146C6B0B8E507ED58DBB1F12F613A98
0E1F8967991427A22ED323901C4B83336CD343212131E8B59C2F5D232702ACC5
7891BFD4EBA5D0FA35AEF9F3520CA82D121BF6885BBDAF15248A9E4649ADB94D
0735CC4D14E1D7275427D00C8E709579612F7F74DB6FC218C10C278CC63E2AE2
37EC996B10C0229D687F0DB5E38A8C4DAFB3DD8A9E7ED37186FEFC97790A1EA6
636A88FA9FB4D282234BAAD301A1F3AD33F252C5EEC49410562FC52809CEC466
A0F6D148E9AF19D6DA2337C8283FBFF6005C37AAEB0B7F7217A8DC6F949B9984
72DEF163E4D5ECE4288404448C96A7FF0AC76F732D50AD63A1D286C9180E80E7
C218B1F48E3034FCABA6BF262CEECC284AC29E9F3CA1CFC1639A681ED66C1FBA
666F073D45C84A286E05FF809D4764FE819B6A330E73695CCF2F448B4D4EB4B3
F63E94EC289807A2F9A1159CF328C002B467B19D6E9454CCE36FC19E0A214190
B251818DD456EF658B0398E275514B72D9C1DA5F806EABCF1DD56BC025D69FC8
A0C2FAAC1892B64D2AF79EA2F57F103CA623E440307600D50E783FAA998EBD40
51D23A0CEFF8D8649B48B982DC38D613F882DCCAE5F51233A641B3CFD783F830
D984F116DEA3ED8F0D3369AE629A006BAD4523F8E3C7C6B39A6C972508B67AE9
32613F28CCFFC4BBC86CF31A0C25C786554F7A1F3DE97F5CFD1A941F775067A4
784385E2D02EE1FF886701B1E87D966D3F500E15591A5012E645837FE2DBE3E6
A3D375C6CA0ADBF96B33EC3FCFFFD888D7344B31D40427B8A8BED0FEC6FBE038
1FB5F0714C4B5A0E607E215B5B7F76ACF0FEAA4C9790EB7E13C0E3933B7C63FE
5B934EA34F4B741C3667BF1735C685CECA63507E6FB9EB06AA010311F12AC1AB
4CE3FE8D1EA1EDB3C700BEBA516FC71D740B1CA1A60D4578003973CC3EE21DB1
58FB1CF7E2EAEB2A4A6C742EBC3575EE6378531C6EFA6E6986E68B8E25CEEA67
A59623FC1ED2ADDA9D72DBA627D179E47DC7F5551E07EA4D54ADB6CC8109D340
7279F288E552EFD79C17DA3431E53EED66D16F24BF86468C2FE7EFF421560500
12FB048D6CE2F370BE4E560F8B4AA12362ACFEBC839351C1D5100C625B14CFDC
747B66082D4AD5474A63EA0054E9C3E6295AF6B133348487B0471395857F4B73
4BF8337DCE2FE2E1A4EAD7E7BEDC822BDDCE42B79B308C11897C98E3ADE253CD
09CEEEC0CB1DB66AB072E36E1E04911F40B535B0FD85982C21B8A587D65C38D2
DBC5A07A0A26DFFF7460F10781069490AC1B611CF7312A14B4AA6005A4582C5D
336BCC30EB47749193BE8D457A43F54204B070DF5AC2057B6437E23705C7FE8F
7BB150560F7044BE3E48EFDDA539FEEFB0D2A7856CD4E405FCE0F5EB190D91AE
578E2EDEB9ECA218573BB1A8EF116043A27DD17A4047BCCC7C5F3C563A910778
45ABCA32C7347E6180ACC86F9D665FF025DD8AF514FC3724B5C3510F3C37E0AC
5101D1667C6ED4E8F37F06CC2BDF66CB5A9FB7C52CAD26344FD1557571336A1E
1E340EBA149B4EB99016D1A411FB874914AAB2A415CE3F5FDFBBF5AFD7959B9F
CB127BDC68D2A2F3F07FF3D4FF32046C0371CD2E68A6471E46B08413FC3C7A80
A107EEE57979DB387B2206D2810DB310B7232B2DAA385256C8A58964B512003F
A0C24ED21809E2576229627278118107B9C32345C1EE8C0CFB452CA362379369
31320DEB5371037AFAD093B61E8AC7A6DCF7D49C7F8EC32DC0ECEAFD7E892810
039570D2956289B15E078C2545911BF535F72F7DAC619BBDEEFA855BBAA81704
18F7D351B0936357085A32157AD8E27438A58B2397D69264E748B0B8D01B33F4
D04DC59326A7DED39E247A1C1A1AE49382BDBDE9478A1CB48F88BDF14A268B40
A40B9FBFC4C87FD3DF1EB2464C3C14E36CA41E09EE0A9B75FEB0769F9ECEB1BA
EBF73B818427FACDBC33BB95B9654F31C59A766E931C698A8608F15290FCDBD3
5C535D9036A19CB7B55BF54E96F9B2206DC71624E2E55FE632FDFDEC8757AEA3
1D83D190ABED5E7A7AAE2F41FCEBC7C18626BF58F9E9F02FBAE0C8AA85E9DB21
A3D8907522DCBAE4923C6A2A09FD2F08FE32215C544AB577B337D929E625E704
E041C2381AFCFEA37F3133B6CA20093EFD457C772E428325E56C9CBCC447EF9A
05A8C3F28017DD4FFACC51B38E4896C5044266EAB4EB7C13FE855E790DCF8A17
B61B1D30DD866BC57397EF6297C4891451FD6A5C6AD6D7446F58F56A68650908
224D9F4C31C6906FD29BB51DC947465B808438E6260325752808963C808A4AAD
60422ADD62CAF315F6AE92FACEC55D5B682089AC0BC051CE1E2C06A3874736CF
0DB5F7C8F178479E4F11665402781D80397C75456F5CDF0A4F382A19EC6AD64F
71A9275264800E178F212269154DD8352167C57EBC0A38BE794AAD1601C8E541
7E1AB8E969A76E1EB4092644958FEA2AD29635E70C4DFE2EB0D9B3E1644FAAD9
B27AD5466EFAC724718962B62E7B8C32F412B69DFFEB792587D571FB5C591D95
4CD441662CD1B07595E245FA537FA9EB5A20A97E5C9251EED22C9961B48B25ED
85BB7524F635F9CBA3714C6D60A6BF920C45A64F4C366C1F9D22F53084997C9A
EFE2D79FBE3347111F5093E271DB7E3770B35D253DAF93653F6A23FA145AD775
AF11E188EA0428137D9A14542E3EDA6F7B2E5AA86C9F3D3649A85ED2F020C696
01A339FE6D7E42BC548C8F92A4E3809C67A986C99418772403D16D0E8662595A
1F37563671D6DA0F36CAC99DAA8FEA215DF7D45E61314915A30A22FCA86A50D5
2FF2EF08E240F9FAC030D92BDFBE40F1972DF413E6B452024CD11792BFDAA2D7
C82716528AD4B3D637BB43E748336DCC86A952BE96F1EA423E31340FCACDC1EB
02EE932F58734AF3A5B2279361B63F1D824EE3BA9F4D2EC7B33A300A1CE8CA43
24616444176DB8099D85AC68329B1F85E4B5B16F3B396FE2AE7774F3065D0203
AA140DC128D6F935C44733EF585F89E8639A2096A225A2E5E49D447D8AF9FD44
CF6C1BAD5C5E5262AECC5543EC8199B00B72BE32A0F110F64A1D0D5CCEF38FD1
155D6198E9A343702F8ECF5052333272CAC2FE016681E12745CBE14E1065EFD5
407DA3686080989F6F6D650A9F1EB3A813B070C30C0D3B4A1E9C206E2E4DFD51
D8DCBE9AECF956640A2E79F1B4FD0EB8E0449AE1B8FFEBC43275743B4D7F6605
0673B61EB3189E74F51F3780A91E6A5C6464C8CF7D563D9958D46F39B1A12087
6BBD4898BA9ABA468AE1F24115891FD3CBC2195F75958E26DF8BF1B93F7B521A
C12112237AB23A8E5A7B7D0DC4C53692B35F3CD813EB463C0BD3A6486B0476C6
3B36DA71FE512E5745D097FD4AF5D056E434DEE2AF926B2EE79F7FC4FEFD4130
BB4B4BE01E5C720325A4884507CB51CBA4FFB615B78A4182444F0ECBE4161A58
E86FE1DA2E39C2BECBCF1F1D7B9B776A26078FC252128FA8108CB83F673CFD37
CCDA493234FB93E1550EF8D2DC049ED95B00A8A57834B024B277D3DF062E748C
B61F183F2D72AD075474F8165528CE75E4F40B38B0FAAE45751C1907F8D31619
E88EAB02EEED415F3EE3BC5BECC6AF565D34E0BA2958FF337A2B06012DD1858E
C53DE52C108BD5AAB76C882198C72CDCC958D68EA8FD26F76F04EC1A08B2AC3F
A6D0E8724D2656555DBC0C8C42A3E22ACA7E1BC8E9F897D9AB692E0FB9EC32EC
59E31CCA4516A3C3BFD5411BAC3DEDCE374D48681CE7D67DEAB93F5B5C5290AC
FEB29C5EA2C98095692873D36C7DA24847B66F31E4CA4C7AE5C79D7CE4F0532B
78620582E3731A2A6533A03E7155B33E7CD142FE79F72721862EDB24959B9783
F834CB616FFCB2A23497BA6D99AE34DC459A2F7B3E4DA2B54BED118ADCD92178
66C40F4E60F6E1327D5DBCA645A2A7C770807E6D7E47E1265C753F8793BD2D1E
BDCD749CC24D4AF9315A93F01180A0F9A7F420DA1B87664DA5FD967131273271
9DCC45C3D57EB9B8AF14771E8E751D88B98D2FFDC72F5011D402EC34FD010ACF
D3B0660304725191D64FEE106253FCB3470F1A16EB7B45C1489D3534BF94F740
C2781DAFA5E8A9E7B25A85BD7935DF3ADDE08C960E283D8FC3976FDB4085DBB4
B6B35FB239C28C785B18BE4FC98F3A5F410F562DB5FCA04E8074E4E790F4265E
F88117B3D0833AFAE6E8B8A71D7731BA6F14FD6F217EDA3F8CC687A494FC3914
B84FDC37C8C335AB1E7E0BEC7FB6B7A595C50CF8F0080C8D461BCB8B579A5155
F963B6587873FA31C3A6572740C63EFBE58A2EBB723B7517D2A243F6CB08A038
54F4DF0F6692022B2EE8C6F6B73735ED3166BAC58D9216A06EA6FC7B63B20031
D0F0F99D83D9030B413C2360DD2C553E34BD67851B743C3FDA676AD63C5BD759
9131358C6BCDF05FCC048F4EBB9005899ACDD8E9EC9BB8C5A08E83485047D263
0ED69B4D1869A38068FDA03524022A1D32FA2AE0BF728D2A654E52B6A6C90A3A
725F86627D7C3EC5AF5AC512976D35FE42AACA3FECB401788D0BFFD9F4743BB2
EC5B4E7891F216DCA5A69E917A171E0069A03FB214ED307DE947225049D46E0C
4707503F09811A597A9113921AAC23AB1CAA9866F81A02BDF349FAB129F23E86
E384C043053055938D42ACBF9F0EE86CEBEB011BD5BB7D593104140E6AA9CFB0
4E0B47C91E504BB6A95B2CBC36EC03BE01897C3D498EB30FBE4BD9584B9D766F
CB3CC7C96FEDC481A0ACC6D794D539DE9ADB1786283CF2B1C1D4D497527175ED
2563438C7CF25C4B7DFF2A4BC0F491AB8AA200D724197C513C995B844F1BE021
E5B74BE2BD8B3726416417008F5A21ADC026C586AB8B48387E4D587966609507
2717B552F84167B00044980F14A860FD808DA0BD9B003BEA69DCE207ED88C77C
174358396333CA7DB49D54F20F614EEF51D01F703BA6789CA2AB75CDC21F030E
35FF80555EBC9FE1E670398F36941931B91BB142BF58789ED2AB0D72920BC6FB
DCD03A5F04BB55A1AEEE113714B55B9D8FBFAE3D9D4C57F64C21A131B26A068A
B5C3E883590C0E970342AE4BAA9D79D0432F3AA32BB30D1C4B7D7C8918420844
4E2C3B502023EB91C5914979BE175FA51DE59F4C220B72FE3B7C566B13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5C69F2669DF1364BC06848F7F903A729E2AF299C26DCD463822846F7E4679D57
E8E44C4064381314CE489528563694C82A96520B0032BDC94E9FA02B68F80792
19AA89F0EB25699B9028C7BBED09C7C8FE6B649E051F9042F32A004BE64C4DBE
FD7F9A354A8C3592B6B7C3BD820A744DB480B7F6AB52178878D13A29DC83DB55
0C5E529EE81642C64328228E7EDEDA5656A82D80F506452B23B8E6F7D2653C04
6F15CF303749909591E521AED62FD27FA3F8C8DC3302DFFF7A20AB9970CF42E9
054BC1785A9A77CFBADC75EDE0D9240C7A28D3B746F3218A83911FCEBDF8AE01
6DA335E9A3A794A5E3CDD1356AFD2FADFF6F5F7FEC05C2DC43835964C5A8E782
60F4C5C13965F095074F277195084E70D0D41DCF30AC6D60E0D4700BF4159B0A
798B706607F26E4A88BAB75DC2EA53EE549F0D7F3EC784AA69C11385D773DBF5
7D35E7B6D67564909BC49AD779AA3A224AF5A466618699DD675D9D9F697B3D76
C4EE38EC0C6D1BDBB753B0C49D407274DDFA9B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.0: CMSY9 003.002
%%Title: CMSY9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY9 known{/CMSY9 findfont dup/UniqueID known{dup
/UniqueID get 5096650 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY9 def
/FontBBox {-29 -958 1146 777 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY9.) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 2 /multiply put
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A580F0834F28818EBF
F29D3B2C7C9AFD969BA6D3B7429E222AF78F6DE00CE2C8008A5966422936DC5A
DE549B458EB41026E123FE75E703E046F665B7DC78298A145548DEF8D579E008
39279A5208EAF898A357DF3FD9CE4450811F20B454D86B2947BEBB11EABFC62B
187B12458E022CDBAA6EDF4A89D79300F635D8CD973E35FA8D9B1240B3D30D72
4F30444BDF0B51ABA15A181A3196A6CDF9CD1D38D64C83E745A767446641991E
23EAE067609DC2E84B44D923CC98407812813D5AEF0EA21E560B31BD77D735BD
E35EAA564A570DD3294C703E16BB9F251D54407269C8B23DEAD063018D6EB748
4204A415AAC8384025FA922E7074FA7B8A6C31FD3761E7B2737D4D9C9992B7B6
DBD0CFDBD87D42E1A451FC5C7EFAAEC65D10D278470DDF42DFABC836CF15D042
6900E0DCDD36E7153BA186B8358E74F91A1D43D62EB0B821C0E97FE63F1586D0
98F01E8F6B6F2A435343A25CDD80D3AEB42DC8E5AE02F8837B84EE5EB508B02B
6980D2349984FE1A0D3ED12355D556BA483CA078B7921FB336EDAFC22AE05C1C
5614F5025B890009272DA8C838B81913C872A54F7E932237FB1BC2CE5D64CD04
2D320C8E2E610E9EE36EAC7C28C833F8A14048E751B61D0CEB342CBAAB34D104
311B421B8CE4D903D2E2518BA8B734E2637E2CA55426C4A87EEBCE637F8D71F1
54626C52083262A5A9A3B49142948BC1AC0B7698811AE81FC3D3B1C14E6C274E
CFD6C480514F3649D7725A0A14C82C9D537B1C5A9ADC816340B8B4E484AF55AA
905EA936A83FE2BE788D084469008F407447E0077417096333F163CE94CD3098
4B9712EE23120829AE2695EA63975492DB2615214B11C87ED0ADB776ED4BA0B1
40D09D1A617D4F57EE1A9B05C8D5F42AECB9C6AE67757DE6307B1A9C467123DA
773239976AB0EA052B23F263031ACABEC9EEC7A43ACD0DC2D7AD66664FB0D937
6A0F463A173E8B90B2596DD323D2350435D9D31B638112D70492F44769FC0C6B
40A291FE78AA598CAFC19E5AD195BE7264F0EC29305D36C7AB8F2A733797D75D
94C8F7AAFC49C13C108F514745A394F460294C6F3F44162BBFA878F773A5115F
062E934253B786DA2B9A6E8E843E06B97075BE99F21B330D6684998C5C340B72
09D69B655097354CB682D42120ABF5109E5522ABEC94D05E7211DACE8737A1A9
0BD3EC16F48798E67C7C85560D79366504BBFE5F7F5EC1B05B9F68F98149A02E
E53F321C213456D802C01871E9024F965258F71215F40EA71057C15E349F06A3
A016BF1B7E44DC4766FC92EE500EBF7C47D36B1EA34981EE6FE38FF4903466A8
C9020B91CFC731642003AAEB145EC0F13D6281B0838BB4236C220F6F467F7DCB
C79BB9CD5B6A180DD2ED7F94DA6B5CB833E62E898BE832DF601BFBC8148F9430
C8AC459F23EA2536E301C9DFD3FFBAF4D01E7853B60A69B5D012DCC0054C0BA2
1293D3B4EEDF7C5C78118138544A60FB1A500F72BA39E63EF5D97D68369850E6
9B6336DA577128DE68FEB71877360D97204B5F3C06E808BF95AA6D6013524BCC
85CBA9FD2CFEF383645E7E960E7AD471A6A3B8B8C3A0A0B8464836499309D82F
52004FCDB68997BAD9E4B5B881634FE1213283B6B19308BB67F2364F7ECD5534
467EF07CBE71989FFCBC6224417C0710EB3EF2676B9DE846E7FFB1AA6608EC9A
76C31724A19ABB2AD08CC102F5DE8E4E513F90A53F06D440A66B000CCAF6AD12
6F4B161B56FA5FAED65A24FA183B84F4B45407AA69624068EE0E3E47BBE973CA
C72137823F1D676131C8CD5070092CD73FC2A93E0480310E21CFB14C031206AB
411694AFE7B639ACF35C28705A115E98BC69C66F6C58E9E79902453798D76267
29B780AFB6B895B34CBEA51530E8300569EE4D500527BA294282FED81F730A46
6ED19AA5AD45852739882216EE937FC45D75116BBDBA6FF4B4423B398E383CCD
A7D705B8BA85076133E823300C3EFC9EB9399575F5F6BBF868265304B299AD77
B6B4EEA04C83E163E8CE2BFACA65F9DAAE3AD2B0F8DA1F986E6A12DDB2AFACD2
217E37B093F46FF3E20E587A9490401C2833F5844763FE2C528E151214E8CA95
018E1D8D47C9EB5FB4F0EA2A6D064680DEFD2C5489298F83B58EA7FA8CB019E0
671028C59C3E007DD86CD247889ECFA6AD6DA2433B02180DCE6ECF9E495D0976
D063A61B007233DED5E3F351D790F26D4011582735A69F37E7CCBB0AF254B925
B378522B748BD9BF152E2187DEA12BB168C42AD8D67D18567393B35DB2AD8403
5A7093EB59FC276525B8796FE81944F7F03349BB077110E182A61754ADECECD8
A5255DBADB523F3DC251A7D97F17DC76281CC632FAEB382A972D60A15FDDA57E
2F42AA338D889B47F6A3C1FADAFA8D11D63EF8D0C8C0FCE61FBD8AD34EB8DB3B
722BD86CE5B1268F704ACE82A39466DC2D96C9849B9422567FA5E728B17FAF61
59A77E9B3289DB807DF54D076139E3DFE176C3131FA4540C1542AE5AD6200FCD
B92D5DAA77DD4D3022049B6EA2A037FE96E0CEBB1608C663F1373246FA74D70A
BAE7BD37F3AC23E003204FA8270B4514DE1FDC5401B69CBC98A67A5CAB5505F2
87C242B6ECC86E88EEF44B9C79DA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479
E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF9
2AA56D029357AAE016582592972ED01C0ADE565E87607F17BCF4983E3321F606
ED664B9516D404B277C2C1B0F873D469D64A9744D9C1897125FD471E71BE060B
A3A617DC8D812E184664BD83EC74EEB5197611380F2D859E1A61A14404493D04
B5537C04541E557CB5039905F37E72B762EBD2321633E12C38C409338AD5AAD3
1A507BB2B8F5235F0614D0CEC2BE44CAD504C9B2CD3E45437A493A33B9BF8A1C
3FE66B1E673449A54E8E3C3470688E94EE4404C888583F7C96B43A592D586D25
8AC1F206EE5FBF3AFF7EDF9BA91EEC6BABD573D455E0AD6802E7E23A662D4F12
FDDA00EA054CD331DF86C099C4BE8AB4EAF5D8EC1BFEFCF50302BE61E6FF26D8
1E88C544570E8D6F7D875466C70AA91D6CCD4DF4BBA34FC67191D1692D3FB76A
66F114152956A5E38345E7495BEB1A389B7D0A59624ABA784F77C1BF7728E556
F9D97D71858D61624C22C6914A3A995BD75922A2C37EF2CA91F923A4561CD3D5
2DCEACD9C3A65A9FAFFFA4822E79D6D89D6366DA6362DB16FF061840582DA35D
E4EE8308040C2DA5F298944EED470D6E4E1FF58DFDDA96C20C85E2DF2652E12B
2EFB8F890D301E8CE777678FA786E552A62A60DFC369AF4BDC069F5457FC86F5
1FB1A38A2222EEE86FE1AC9A8227663AE33217C1F381115CCD04D2F381A27E97
36D356DC64615AD63E1952B37AD4F967317D76A6DEF039CE8446AA634086BFB7
7B0B34F595B61ACEB346F51ED10ADDB7B852B5B2BCFE416D0435A7CAA4C9D9A6
152D9AD938F39E9756AC752F1604D884992BAD768C720C45479F5AD8E53A4832
1B44D6109DE4460A662DA6081465E2BE02ACBEB52259E046767DA24E1416FF44
D5AA1D303CC4249510D703CC6CD0FD7DDB078A91089FD86ACE1721F875F019B9
82D7C5B2530567F2306F47DE90EADDCD12AA1C693B1982827DC36A74C86474B7
0A8A2E084CA403AF654E2F8488806B943E38ABF544ECD45FECDC441DD970B180
FF3FFF1A50D5E22216B240A527F95DA1E43770A3867F225DD2A8AF01A965E06E
A063997C4CDC0B16B52F9B9C8B0DBA94F88F26A7A01E596DCF8F33DA3DA5B02D
2ACF771F25A1372F521A80B93DB0337886FCAC0A2E8FAE0D7E1E0C31EB43AE3D
B4C2020F322A9857A9EADFA7782CA70DE7421B9A83DE1873EED8D096701370B7
7EC33B9C104E9CC16DF8C80ED24D1F91677E355DF037621ABBB75E09ACDBEB82
30F1AFB82FAEC4D9E2DA93303F72C1078679EDDA35ABF2AB38DFF091AEB273CC
5A7B29C0164977160CA75F62BC20474C7C1F127AE7E4DE865FBCEF852698AB80
B61340CAB6F86017FEF570104E46B6FB3320E78D387CC58DF1C4FAD8570C0126
B6F54AB5BCD47904A9255366AC9C88576456D3CF605822269CC65979EC3CC740
AE3D09257BA3AC7A364A7F5EECA3E658AA20B53423553C416D98FD8100D80A30
A1B19F029B7473070D7C60CDE51BBEEFD2B45B1C82F4FE32A5BB6BB5BC32BBB8
F600ABE893B83B806A5435AE2B40E5CEA9068C6ABBCE73C9B3533520439F28F5
E171DB1DD90B2EC04A1F36767B2B97D4EC0FBF217D4E80ADA5383BADCD7E066F
5F4B23738A14F19AC7D765119AAC9AB6CD0A8AD4EAF8955CB9F5BDB0156CACFF
236D24E8A12AEBA549FAA9D7053D10AB7094B5D9B86FC7375E245EA8D7FC64B9
859A1A37C006E0449AA8DB8B89730348C71C7E014A2EF8D871AAA856407C33C9
392720173DA60850938D0537564455C3957631AC8F8C0B3B29BF6163828796E6
0944C3000B990715188203B32BC4E3FCDF173A4A9C78753AB7D76BB9A4C2DA4E
3EC638753D6FF6356EBB07D0A9E8D3F50EA5451FB6C836B9E5EBB8F1331C8CA0
B0CD271AF316502CBE87F652B5ACCD43176AAA32C6530C69E77E3C85DA496F3C
06980ACA739DECB5D986622AD81F204579218660EA791774C2D11878DE23F858
BBC4ABC7EBA01B7FEBB32BC914FEA8E5720731FD43F8A5CC53954D13455827EE
9C7BADAE8322E77EE7413D6C86E6D378FF8044F50F529E765A1CAC29E8B1D91E
CD40F70F2D4890E0FD04502933212D5AB176DB143831958605C1667B8841E770
CB4D513DF0C3182C23CA653A7A714B2A8DE29D6B203F5A9481E0CF3FF073FC6F
476B0B205136DA43650A940035A970584DD7D06B7CDA8E960186158B75FE3917
9B1D0FFE45EE1606C875DF635B80F5A9E5B67A6ED748F52A53A710A45AC20BCF
FC96755E685A3B0712D5E09D860986C61C631A8D2A505C57D57C1D4AE78C552C
DC5C9EE15B82A4C3020331B78FDEFDE53974C391F375E8118EB7B2D23DFA3F15
389043EB6F33842C82B896073760197B13D3DAC172D77779DF517AE31BAC43BF
5BD6F75B59AAA59C7EB81B776FADB720282DC06BBC9C33AF5AC0BC59F6A0044E
3898A4B5868EF32BC4F980DD863E8EDF6DE3E753A7B3E39F8E8BCB3D3BF14EDE
3395E73BD07440FCE88FB28A96878E823C1E5519650F2054EC2CF733EB8AEB0D
510E5659A3179C3FA8E31EED621BE0EA648D76C370C3CBD8043BE206F28699D7
5871DA483AA5D3580CD55902C85DB9EF5CF5D3191738FE64DB42410F5AB8ACFC
CE07E524BECA5633B082F4793002A4A7215AD1BA31159A30D72AC60EDD0B2BAF
73C9934C85C5372B47BCD3ECEE463CADC05CE8352EC1399ABE2465AA53E5965E
79400336B1F5D1401EE2DA5807F9701D1086DE505F6AD4E64DD4F3E5E90CD64D
FDD25E6FA03B679597CFB8C5C1F03641CEB7B9B40787E70BC6B063621382E3D5
1287365426E44A2EA208C26155CDF782F404CA7B3C6D379103EF4A51CA3F1343
22B04A0B55CE5A7633175838B9E50480E9B80446CD3B541362E7A10BB3C58A42
88C0FF580B4A0296073F5B6505E4FCCA5D4BA2F7E8D59BB04EC9ED4E664BC2BB
8754777594DB26DA0985663D321CCD13FB261BE8A771470DDDA783493E452A87
D0AD01AFF8EDCB7BB159F1408FBCC52F126C46234CE6BEF241B49472102598D6
91FF2DCBA2CD0E6658A61DB3591EA02E4DF202954B655C5A3C34B14CB60CF9C9
2A6683AB282DFD79B33FF3A6AA524582F174F11A5568159083496B242ACD2770
0ACE8473D363AC11250E5DCDCD3CB2281B71FCEB8AAC1367D0714796AF3BF01E
80BD4B05A0A45E6CFA6C672850B9DF113F5EB15923ED885A0E4488D4914B62A2
FAFB6A63F8AF0CF0DA498E1BA68C4150B6E59CBA80BD17026FA09920006D2075
BC6F1010D0A10648A20D8ABF8137BFCD6A5DB3606F6B3CA51E8A4645D32E5966
6DFF7537F65DA4268A86BCA5791C21F5FA9F4C2F1F6C1AFC4D4BADFA63609C4F
5F5158608E6FFD9C5BF00646C3AAB983DDA5E37A9C2EA81796B161A06201FB6F
8EACE87008EE7A008BFBA69AAC04D73A8C0447FADA0249D8861ED405537E23E7
BE68C4349FD64A14E3A53D6C6484E704BE4AD5FA0269F56D3B752A070D9872FD
A5CEE543B413F13CC4CFABCE885BA4533EA0969FDADC14DE6846B330552CFD60
A75BC8C9DDA76102E48DB6B81975A1F3FBE182CEF410841CC6164AFA0CE51FD6
8E8E6F0971277052E21126909B5EE51508306B886E945C11DFFE1C91BD0D79E4
554CC7D6A774C9B98610A1E49C3326D62F157CA9D89B56699F32DBB9D49C716D
CBDEC052133F8E18E8F3D7A59008398AF3E4E1192CFFE4D0B7D2ECC8DE2ABC1D
4DF7F2EA5EC0DD756CB2FF9F95FF10E506463D3037BABD221C08506FA603DE1C
DC45A5998921C4023E501DBA494C1F41C0955A761AC3D5B13A88EC4F0BF40756
BAE8645EA76027B8AF74726521DC129B9AED4BAE67A511EA56EE9D0D8D30C7F6
FA8BB890375A263A0BC4E9CBBBB8F8F8613A43B10E964F8CBD6BAA2B0BAA70C4
4CFAF6EBF4882B610AE13689823D37B046FD26DA85BD96B896CBDAB6662573D0
2CB87D45A86A016146513441BF7A748F1E9C2AC7172460EA628BFB22F9797905
F6DF6749F13C7F234A2CE4829D41E0F53EF3C5F52165297AAC4B5AF4747A9F53
60370B4C0110DBB42C25308F489A856B6664371FC2126BAF4710790021255653
CACDE1B9ED6AF5C696C3D8BEA4698DD9045B3004A5C4C03EA994A5445C9D4EB9
865266850047E28F2D82A08617E9283FE637CFAE4F7F261CC2D616A8C746EF23
7360553A6B434201944C04B1522533C61F615A20BA3678AF8D4BAD1FB548D82C
72D41699FB96EF40ABBABDEE633F05B4445BFC4E6E661DCBC8EC473BD2BBAF7F
75F7FC86CC7B1F3A2343EDEDF6B5F7E98A0BC4443E21611F4D807FE7F597A37A
A4DAF8A8E6D04FEFB320E0E25C61E156A72A3E4A69EDA04B0E3B72B69FC19E63
AA33A682663A8F37F4FFC1533CCA2A80DAA675DD723A7E13D9DAE3BB0F5F3E07
99BAB9B9BCFB29B73FC76EFA02F4F632690651DAAEC2B3688B636F0FCB156047
F8EF7239716BE5D3DB2FD1DAEEC11DC2D65CFBEDC1C950CA737A04FCCCA509C4
7E47664E160322366F70CCC641B9B49192AB839E0AC609AB2FDD3783095293C3
11C56740FB50D23AE9FEAF66DB13F35367B562F15161AA270EE44713881B2387
7889FD10198AD4D750390811714DAE7A8DC6F5770224E93408F8CCD4F8712A9B
3C583C983D98CCA7FF9DDDEF8AFA292781B1D7089336CA631413EA0728353E8B
3650EDED7ABB6E5DB5B85014A3A9C4C76EBB664A5B3E0F3CB2ECFBB6294F5C4F
69EA3AC8C071B122B129A28E04FE989DA9670EB6246806A516517DDBC52DC001
4C027D51EF1F98506F21E63D57FEF267B913F1ED4770D892239222F3A9035C35
FFA38D1AF3ED9A8C02235D7422695D30A2F801389DADF34CDC489EEB38089B6B
026D884EE1C24FE5785C383B988FFFEB5459A1644CA44D353503AE117E87F956
393DEF6C47D4E1C5B1A33835C9B8E1B98809DFEE43C4D6DBEF1C2B1ADE4B8F13
3B5D224C25927433D5738B0FE019CB88B1F373E4AC2BDB5BD86887FCFC55D330
CAA6B2F58179CE94608E69240E41CBC436C8E761E295B857FC933CEA15A3839F
B798BD3C1E18BEC7A4719B3E1F75C42A86C70CC864EB4A582875F3F1EBB30B5D
DD611D834213CCAAC483B43B62EE620C1C56CC7E9CF8704FFCAFB05975961FDD
A498D72C313AEE1EFF147266263871ADCDD2D2CD922A19655959CA79B74895C8
8B7182B78039D2C3956923C9DD71A04C7A9CF032A8B76B159EF695080C2C3A54
59F52DF5237EE2205F873B86412505B6FCA5AB5BC8937AD9FF4898D9706384F6
1FEF1A5C7C895EA1EDA6A750662B898F653E32D62176E87C9CE253A193BFAD25
75B7B23BF4B34665B2E845CA1FC919DB615759DDACFA832671761DD5246D5693
39DA8350346DF7BB65ABD3FEDC0E43AEC9E0596676BEE5AEBAA9268DE595113B
241EA196E982DBD1A33F02215A7E17C9242D932AF7E53587DAC76224EBC78317
D652BA673118F12D7665C5ADD900CD867BAB126277F5C30979AF5694187B1B15
05B3F1266F523F52FD9CA9BEDF789C7F2043234D594240B7D3B43DEEB730274A
F95C151DA0BBB2181C866572743126CBB81F515098B5D8D26D954FE15C18EDCA
4D94EA9CFF6DABB3DCFCD702DD5C95D0A087127A8031A152AACA5F938D4E472B
580DE7E496E22AFB065299E1DF09FF5CD34A7A63475215CAFCCEF1201F522A0B
F76FF0FE5A881A88E2EF94A75ADEE75D4E7FB59D802C5D127FA7B8D167A17A82
29E6B1B61A043D7DB87BF04639FB270F6596BF1C7A175B4C9824655DEC7C3363
D2524825AE41D093DF02C0AAC107288607DDD40CF49BF9ECD1852148C4A4A020
937E48C950802CC77D60D977EB64B959040782432463C156611B5E2363FF186E
0A2B51B2B4B16B80209F7A308438F59D8397A22543DFA8A500BE7876F88B3EC8
B05753F8C6AA99695935FB9A7C9D837B17B447CE7F99CE7809501553F2E75290
00B6AEB196648E9B33AB730076E7426C097247E12D5DEB2A080F9F24
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY8
%!PS-AdobeFont-1.0: CMSY8 003.002
%%Title: CMSY8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY8 known{/CMSY8 findfont dup/UniqueID known{dup
/UniqueID get 5096649 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY8 def
/FontBBox {-30 -955 1185 779 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY8.) readonly def
/FullName (CMSY8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 3 /asteriskmath put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D80B73E7B6CB7548
0E1D77FFC695988391DC44AEED8CC947B3D7E198B9620E2238DB3A2819182F03
14498B8CDFBA48926DA721920B221FB33BC21A8456AF10891403501D0F6415F0
7E041AFFE109F640E54FC1A365674711EFF94E752652A4C8DA62CDB1149DB899
2C4A4BD77A06E81E93C5698C05DD02F74A0756082738BDB53003B483752AE498
DD718AEA8F3FB5A6B7E2D2AE8F309065F3D556F9A34AB90C88833A54295E0982
209C466A301BA3372AABEE20D862C6DC6B6FAC1463C8CBA8AD766ED1B4C9D712
2BECB4E6ABF558D8AB5281C35726BB8D046982C0DDAE17BFFC9394125E4E84C0
B283977D31460B8EED4346CCB09F64DA0ACB640C6DBF32F2DC30D54668C1CC12
24C7280593088E9958C047125C323E9C842801346A9CE5F50413D69F6DE99471
65D2E387765E92EA4C43F17B467DF6E266D92551009C0E52E7219AE9F5E2E8D2
88852086FF3600BFB50AF3EAF8C009D8D5F084B510F792385F328F7EFA8C38AD
CDAB2EEDFBC6AA45F6DD7364C2F02DD2BE6C79C8361E83D4267CEC2407689864
B57B5D967FC80AB3BE8CA43955FB0FD3081D438437559AD24A7ADD484C1E4A77
B00BDCB0D1B121FEE983412E1EA5489BDCE5DCB4A7310135956B230C0DE7BBED
516369A92BC41FAC8D73490984942D930DC193BF0C774C1AEF627B969EE4B001
11381AC57815D7581E2372A1DB740B09F4A7FB4318B765DA4E7B44E8805CEF85
44EC3B10613FE7B397BF91B69A5CB2E9086D1E7A1FAE0A9ABF2A237A2D29ABFF
E392A18AEACBF28274E775D3FBAED4F46B982B9DA4602E24094EDCCBC9D6FC0F
67C60376879245606C0B9C9A678E8917516BE1CF097B1C75C9F0DDAD6899F08F
81FB7A198D45FE060CD2A550D9B8D58B882B969D7BC3EC018A1FE92BDB262835
26516FF97AC387EA525FF987E5EB1EAAE4EA5866C9CC043D183763C530F7D7A1
2070E4044507C4E5611FCC117FBE4396E0B24F672CD53D5FDFA56D561FB86D40
90A52A7C7F29A119DFFB694A8C445367746A49CA5FA83163BE448EB19625DF26
609A8C8672631A10411036CAA3D6C2F822A4B2505DCBE8E1CE6916AE515E78CE
E8C894B134BF811671D17C19248853131DFFAEDB24B15FF17EAC194662460642
48D23515AD434C68DF56753806FE96DB3A29F9D4980E0B6EAED7383F9FAD2584
8F85679D6D1933677ADF5D31FE6E43DABF137E834A1DEA632D36EA5728625159
8F33348893C9D1C510501628E4A9A80587DF6E179FAF68B158406A3EBCD726E2
AC17F2DF8B3607072824D2E5A6479F7BADE32E603E54E7A83BB2DFDEDB0D80CD
1F1BDD4F6C9025CC3A8A3685DF10A8183FA80CE0F0FE2BFF2500F76B1037AE41
56D2D7FB468C3CA7549E3599A2AACF66302572F1B35BC8EF7C23F6FC4B720228
1D673D903111CE378AAE83480B4DEB7EA84BB35F4F7BE997DD4FFF5A9B5E7650
3C7365BA0965B242DC369D03215651184024A08EC284F1798B0726152884B4D8
46411B3BC8F5CB53A70AD53BD7B1AF23528849B56CF2F75609FE715878CF6448
38579380688B47AE3D374B0DB6ECA5B8284414090123D47F3F9DF389E023F431
6B4C0DDEE4190DEEF4CA772742012754DA9A44A8F550FADA6D8FB0C512D5BA2C
BB7DF71B1DA41FB6936BA71B710CC6A80751E43436F0F5888F51AB370DD4A088
40F402661E08732C960705C7E0D29B8DA1A8A3E119409E51EE575E9655F47568
023977917C8EC610BEBDB9C1F4EBC192084D63EAA00EC87B53E86620BB5AE51A
579B0F8E1972CE1DA02832FC75184F45409DD9D413402C2FA27BCB0AE6DB4CE1
5AFB114E23232DE07C4674969A1FC94D152C6D3A611F029ACF4D949A2C0755D0
31C7DACDBB4DFCFAF7E87295CCF5D4AE28D87ABC3533D87EEF1507B9FF9063F7
F007DF03734A20BC3A198B049000C92D2849C62DDAA719FC28EB372793E20128
D786670E08948808BA45C4F6AA0DD8A8357CCC47228A760C5C7864853BD9C9A4
285E446CB72C5C9D3F03FAB000810DC5674061FA116153040743E846506CFA67
FA8770E785D7DBC7293F37389A0859CC22275B23C44B57B92A033A7BD194340A
D6BAC6E103402F8396A5394C617CB2A27D9500921D5DA06115EC81715EA8E360
4A95DCE8689CBE268B8E6C8B806CFB0ECBF634250243C9E1AFFACAD65311FA4C
1DB0988203537E5EF12B86FB454D06CF05E4F4FC4143D62920E99304245B6ABC
82E21192BE94F5E980DB21E07FEDF0EB0CAF4ABDFC20EF08A2A44A7940E2862E
08FABA516152DBA899D6CA561EB08C7C8298DD511084E5230CEBF28AB1D84C85
B5BAF4616C28FE05AFA4BABB3BA03F8CEEF3F3EB0D3034BD3D8D06629B8E9EBD
72484057E71C9EB4DFC7C2CE7749271AC926C2419D618FB0B60FD6F81F0F2C04
E529CC74DCC9E4AF32D935D7CA65FBD0842A7BAF162D08F782E65DF3AD9EFE69
198AFA9208B22BC21BC4ECABB9BFFBA84C8421B74748E1EAAACEB59E566838F2
C439579D6C75074F94493F7D5C8942D881AAE6302C37A61003AF77684EE99AD7
EB5EEEF050C52E75E4E842F8174470FA60CB213BB6F257EEB26CC55D1202931B
B981DE2535A87CF37BFF912220C117EE166CCAE58BBF624170FFBC0716726B36
304D698F2CA131675F7B1199E6581B8C812C4FAF75814282477BE2B7EBCBA7C2
FA6356B2876F89698C6C2493989E9EB252DE03BB374622A7C88B8EE9FEB4851E
02F85CF70CDCA7BED5EC94E81170FB557C3BFC6F32CD70B506E56A2CC5451592
130C6F570C679577C44D60A811DCEFB3535D855259B1021AC168DB76DD38B459
F1813E3DB20AD9275D58880CE94058490ABBBB0D8DD16D4A65F680B30057F15D
07FF54D779CC978E90A850A2D8D79961EE276BB26B594C16F56557435671A3D8
ADD3DD0BC4BC73B0652B9DA8462FE614A14A11ADB2214EC4910823FB4CEC8938
24354C5C62547EE5710FB5ECD93AA45DEA7411F6CA8D5B5FA222685E622AD73C
1BD5DFD1C8F253352D6C7D14FF2FACF07CA5EB11392C6A33E9CABFD99F743BED
55E8DEF49E07B9444171D1780C698E5B65B540F41F845AC188DC7C0C8B5BA5F3
546BEAAA4F29F0DF30D5AC12A60862742623100074457BF2D820DCAAB340C1DF
22FF26992DC02F276B40A7C528C84B72CD189A4088C90070486C49A1014FDDA3
5093FC12DAF309FBC063653E6A33E14EB51B081126AB5BCB8016E975060B796D
6CBFDFE6CB9E191F12E309254BDD6660E3227012F5DADE246B02B6D8127F1EE2
248F48DC5ABBD229748444420C868450602120664984FE3A8B2373232CE5CA15
E67172CAF7EA99F73A66AE33B1EDE5E8351DB02497CE3338930147873D4E46B5
E918F5592A21789FA9F46232BE693DFC33240E2649D6AC1940B101D806089436
F0CE230BF6D0363510378822891DBD3EEF3365430E74FB6C994BB40C8EEDA593
CEDAFEBC3B87C7C04F52FBD7D557A77B44855CDBEC8A8D26F44D66446B5662AD
15B6B79D13BD262D79BF51C09F8F690A61C7F11EC2E05F6BEDA273648E9E1EBC
3D5F1D6ED486797F753064ADDA8494405556D43D395B1487EDE877CCC1EAE954
1AEE2513DDA94897B733609E8179DFE1975590568202EF20D58A89B34874CC3A
A5579473AC65E0EE61545AEF578ADE10BE3FB3E2CDC96678F613E4DEF7BC1B38
8A551C93438A0540E292F65F1FA73D9AB30A5F545284085E4930A570C1807995
7108AA8194607304488616DD4AB189F8EDC5F4507AEFD7847817A8ECFFDD2DD5
DE95E04EAF2774F8AF661827229F01E769A32734097C457EB6FF056D90C46C5E
9F936AA6BF2EE8244BBEDB8862E56423F5845BB10C8809730B011D650EA18945
83C320A3F4ED095A5EF91929FC877ECC28A1C2CE74A53245E629BF46C6534983
307B1C94EB35CECDEE86551F0C308F66690E591C5D9D8FE14F534CF3F5DB6D32
39D7C799F392C4E65759B7BF61F4D8312E3B26C31466206A367A0DD7A90D25E2
805D36ED5CE0A4BEBCAC0A348FADD2D2AAD670E28BE6E33F627B4A9F35078B1D
6688084C4C18840673EF9B3526172EE14EF64E97C8B006C27DF6EF73BA6E6459
3608F10EB1EC4B824DD5360B42AFF2084788B165747AABFB2C9C0EBBA9C6246C
08F28143809315D6268E386F09BBAC54C34213438B56C386B34AA457D149CC39
A3C163F56E3C2E637C63A79CF7F2DE969EF3AAFF75F3F20499A9ACA61279D545
866FFE57D25998244F448AAB042B141952BD653007A889B1A716A4042CBBB827
C1ED5E3C616C22D5FCB39D3B3539F9B71D50D25ECD2E5D953C7A5194C867DDB1
75CE10B2C3A20E8CDE15AAE9F549D034838DC066CA649C31EE365D46450AF18B
893748D055DD88C72391FD92DDF0AA1A1316051BC756F87BC9A425019B2FA7BD
CA9F35E89E2229B3021DD24C9DF0DC3217F44DCF510116DDC9E92EFDA3E0A892
491C8961CA484BA29B8CACD2FED2E246FA7414F892AF7B9F08698FDEC82D2E4D
8C6ED1FD9E0BA2645663E7E97B0F780033D025F2EF3B364574C03F04FFC4E09A
3D4182BBFCCCD8CA54A92434E2208803ED36F931D31C7498B7FCEE4B78AECF11
B27123A10F031F9CBA36066680E4748E346D18FD0EFA395D1A9227530618ADD9
64D96C50A0172F712CB427E8F7170F8A1691FB95B247A271499F0E63676BD64B
167438333A3BD9CD9641AC637E0ADB17F1E394DF34AF5A2BD02030DD087BBA02
E1209338B74075744A9A9966039AB6D223F385E06FF359257913E6C01BF32F5B
A3640C7CA41A6C51F296E50DC1CD1D68491CE5D75E0ABDD4C5C4A97C8BE2BA35
D91AF9F8F38E7AB8C1778B06A212D0416E6137087329AAA2679C51D014CC4DEF
0F1543E2FD97621E552E19B29AA1368CB5046C188BA59B1E1875B25FB269DD2D
C0678A42CD310702465694F2BF302AEBC43F714F7C657505132DDA71CD23D17D
628BF3400EB5DDFCE2850F31B40C5913394649AA4241CF646F3939916C2077AD
C11F8C3E478586AA7931E327333FCD8A2EB31DF4B47AA2F31B999556602DD998
5848143C0CBD0B5187DF08E675550F2384D48C2954EA7D16AD2B94DF97C194D2
302CC47BF968CB1F6C9641A87525D5C6972ACCA1D4A4B4DA8EC54BEA6E7312B3
2737754A9FCBED3BA5F8220B751506BB0A5BB5CF706AFCC04BFD713A3BE3C842
9FFDBAA0CA5691D0FCE76134841A169970903843163DE68FF09649E99945DB64
491FD6D8B2DF237DBAF550D1B74263B3BF1EF6211F40D4DF2DEC46E4DE557088
5D458A7CDC6F34B8C3F5C76582C8B7D24A333AAE0B43CA67436F8ECAD7C50B12
35BAAD521033D8024E4DFCF01580AEC63BD5F8ADB778F822AC4FF0DA608EB7CC
1A52A51B9F38FFADC0D2F4D8394C5D598123B483AE5AC1215F24F2492EBAA134
3C58AD4E3B493AABDF753EBF1F04058C6981C353D6788C2D3294165B667D3765
7883A8493F5D772F789F73979B254BB9397FDE4F8B76CA6FFF312F4B012949F4
3EDCF1AC60FFF2681549DFF430B498405E79CB407DADFCEDCAB1E2FAD3B0F4C7
B575A33EAFF9F67D37F50BB06D06834EA683862991C5BE340D4A7F8D131E733D
289F72977870F9958102F5D835739F0F5A642E7194E8AF7FDA2937E5C0712CE4
EE15CB475725030CE0F238C32775D3EC95CE3D0886046E3EEAE322F59D423E83
DE88DDAB5CE0F70537487EBA5A16A9306BA7DDCA14A85A9F83B3BC3600DC9421
BDADA2704A5A24F7174A3A486ACE68739EC5960038CB44D969A594E97AE1F42C
42C1B7E3A456B3CDFC7683537B337AA8777F18CA45B22C8BEB18877DC624496B
9E8EF9F386B7FE4D94ABD5CE3B5786E76FE04A35909C472C04654A4405932EE6
A4A3E0F6DB088603FDD82F0EFCB85A962002A662D1AD0647A2F484B59075A1FA
9F4327D542ED7962620B998ECC3A95CE736089593461CED9B5AAAB05C2DA3820
5AF29B32904E1EEC357C8E282189C6D8F562DB11291091E6897E24CD8F8E2A34
67F35D261E01336152E69831B0CC6B03FF1AC7EA22B745F513A25FE10F70E74A
3FD71FE1EC9999BEDE7CFA6A97EA2DF621711BE950FF8960965685BAAEA71FA6
36F165573A0A6A92DAEE41A9B0C97BF03419FF6BA1F44524D00FD671EACC4233
9A857680DFD27B9F1E7A760058C8277B3761DB9969241D1824A7DADF70BBFC38
89C6DB9091E3BFCB36851CB9662B365A4B7384BDBA1D385902D1E5DABA72A159
63790096B927EA49299AE03E41C7F593F3B995D1155E91C62D5F68845ED3C797
7798B56858F96C2FE2E37D812873B7801767082A6D6B60602CEB94B7F6D7A142
72814734DC584A18D1FFEA7333D4C7E2DFE5B91E9AD92EB52533CA52FA888980
C79FEEDF0FAFB3B20B497F9AB668BDAFA364B405916526D5C48E57DC30BC35B9
BF684FDFAD199D9A28541327F3899AD505FBBBBB22F419E22E0149EE5FDD2B43
AF442E2724EC16934C307FA731F90AD1C76B74569B78CDEA7C19808233C6364B
D049F3F50A68D3EC5F29F2B96BC58C44AF90FE13F244B7129F14B5DAC3F3F310
B330E67CA4EB76F895DAC8025F11EC7630EEB4826B5721348FA38F28B2AEEB1C
5F7CA413C486C94B1DD96988F07F7A08D3635E28624878E55D4FFBEB5E183CB5
93014D8A272EBCF3A09133603CFFEF43A6FF059BCE525706D3795884FB495748
C8AFB50DB464459A5C36D7CD087631BC09C693A11BDF1C6011D9864FE66EE8C0
4824A42E97D16E017C0BB73732D4537E2A5BB283B3568950E5681364DBC1D6DA
058A122862A44ED85029A7B39F2FA7C362D859D0B429E056891339626AE6091D
74F6110CA32F8F3E9507216997E6AD1A2F1FFBE8B407C9880DE230E234F6FD41
A291851178BEAE5DB9DEB22E3443807E2BCEF12A4AE8C490AA9E3D2918329F47
42314CD258A0760DE5FDAC4AF7209CEB530B8508B278952A3638CA8491C3B493
516F461610DBAF32E923ACB834B15E2D169A10F2609EC0ACDF7BDBC777DD2C19
2DB330FD557D3B06B78824D6AB237D8F2D57A7ED35F02CFA9290ED6893B41657
A2485524A3F1642FF5808FDB77015D9467EDAC4A6BBE8A175833B1225A5554F7
2C60207F7A2632A4023255E8EF1F38C1B8216C9B03319B60BEC9799E5378683F
46E698FA75F2DFD40F17C603F3335F1EC70DBA1449C7A33EDDD46CC3DE4A6557
EE67BF349AA8680FDBF415DC527129288B5879500180F75DF80394EC7CF11BC8
9EE9A4ABD64DE3076A2963F83FA333F19FF74F79ECF36A87A31D6F125FD2415B
3F6A6FC33C179F54CA164835F3C3DB62AF444BDF27AFF23098C7212477F688B8
6F48D9AD080D544D57FEDD33D3D9AED9346CBB644C97C951D4AEEB2BF6F0CB18
E2517BA7ADCFD00FE44E290E731D53E5C0D762FCBA08004562DCE6A5EF2FBB74
B3053CBED3B6E896B1C3356DD9E8FCB69691AAF6BEBA0424D62B9F266D560B40
89E20A9F35AD4A7F65A7183761ABBEE0F7EF26ED3565A25516A3A5A57143979A
1EEED8CD52A69E4E1AE4795F3EE0CA21B9F4D166783A9AF54B08B6C56703932A
310197E328C6E6A6BADAA11D66A952964F31FD690082FA02D1E2A4512A9F2742
33B203FB770A3A1C7490ED630D0FAEB3066429D0237E18818EC368D0DA72EB08
1951C70139EB0DD59EB53AF5039A7618C77F6CED9F0A066FED6FEE0C0E328351
BA39746C1224A29D191D8B86491E0A306ABA070CAA2756C3A33990EB6DDF34E8
06EAAFF94AE6686EEB06A17D6D020D1F4E59428D533DB0EDA6434E6E1A478D5C
2A0D08CB39DA7D5F5200199FFFE3F41729478D4F63AE01FC0BF3B378FF6402D1
CCF0F096DC5DB0696208F8543514A437E397416E28B11F692521A6C01140D481
213BF1E96355950EA688F3F008193DD61970FF4E5518814287AC06CC61F27C9C
18E9427E1B368FE81FD75D5BF4C13CF381A7861A824A5746B5BCF0A4333AFDDA
5A76A9CE9489F815CDA35E075BB391D75D3C613526CA6C13551B1D646C89C968
D989CF9A313CAB7885F99F1BD11262CEB49A20DC897F59ECE1A0228AA42756AA
42387F4E040CADD9C1FFD5863AF72DBD4D51CEE19FB82EDC15E0C70418D225FF
26F832E86DD98957EB8272C546074853ED96BEC7AD9086F79C965ECD589CC572
CCF0800C4DB5BE30296910C9198EFECB9C1F0BABA3598C2B6414A43D58E12B09
097E7DB6E518C890DBCFAFEB3499FE35BDBE285F78AE74D762DEA530A717FD95
0F685DA06BE8346F261ACEEF73CFD86FBDBF356B8A8EFBFB0AE9472E38353612
4B78DB128BA7225F6E39BFFB76CD5D914AF903D85625F890F1B1613C325FBE9A
7AFC2D8E60AAFCDCE303540CF629B3C8156DC4B5A0216658C691721A77604F08
69B9A8BD6282A669E69053660BFC6458B17FB9078B191901933E68BDFCAA26FE
7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRM0600
%!FontType1-1.0: SFRM0600 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0600, tcrm0600, larm0600, lbrm0600, lcrm0600, rxrm0600.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0600 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-210 -320 1719 944}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF7C144CBECBB0B8AC425A
08F38901803917D730AA3A77964447A6FDD9D1D5D6CADAB899C866A153F41D19
22B1F8E853431D34A87708FD95EBAAE0636D632C6CE8C8A24746216DEA10FC2D
C907A32EA036B850F319450C5EEAE2F44F6816A6D06D366C75DD9E360D9B2A18
87A6A24EA1491639E588EE3DAF1357CEE96FDC53B9C5C4428602EC516A115B16
B137347E3ED03B4937869940192CDEF71C0F2AE65E9C3738407DB9F6064DB42D
E38A19BCC21F30DC69ACFC17FB5C81CD536C0E8FA6F05081FB5CD8F85031FA0D
119767F746B580E784CD0928454272AF2B8FB4F5D53F2F011685524517BB6B38
E8B42394EE37942132A010B6CE3CFE2E6CA24D320C12D62B1C9D401A74AFE7E1
D4B2B0968BCD3E63619574B096BD23B59496071FC1536DFE6937146ACDD7CE00
25FCE9918F9F3439D5F9BF4494CC501FBB4894E8C454BF46C615A2407776C621
762E39A14708EFB767E2EBB33C8ADD59B3A589F3220142F98A253A164ABC1AC4
C32C48557C507A9E3021229008ABA8BA85B43B193A537EFE14EE90DE56EDA1A1
CF40CE8C0C510EA30599B1381005621984F2BD4A8B15EC634B26CEFA8B03CF43
612FC97D3C94DBBFAD6F325B3E3C314F0B0AF5DD1BEF045D7E5A054D99EF3E21
91C1D5C91A760D90DE6D62BF425C79A48E381211A57F00B667CDB83B64C9DE6A
B51927AC3BC960DF603CAD5C83103FFF8914E3CF5CB04E41E83755C7BDEA9AF6
2DB7397786EF7AE3D016BAC5D3C49F64A88C2F870D014CC67DEE79BC42EF5073
0A103BD52CBC5FA902E2A3E3633113BDC73CC76B8BA33ECC79670C7D91373D11
8D8ECC4AEFBAB4A4960FCE4C04196ECB705D2B910FEEFF1AAEC0367568FD5FFD
E7E732DCB7A1F4002F04E2F88B0FA02140AB3E76B9EA470066F36008C11DB4FB
B76B295C99C4EE2418D3CB3D3394DD2972008E79D1F3E208CC5337F9C086062E
C3722F1805B3E415E942C001F20E9FEA78628C8E84AA5034CA2A8822EDE8FD16
01F4346D8C9109DED708E2ADBBA63A7CDABB586764C524C2A3167A66094DAD9B
9CB52647ED165AF16EF1BD5F5D15667D04A4E55753145228592C42BFBFBBF763
F8C66007D7E72A81DC4A4157AA3CEE39F00379C736D07A87F9D3B03EDFF918FF
0F7AB7C22E5610EE5F4A5938C92C6A29E9037EEE92220832FB00C2BF871AA514
A2E87897ABE6F28E8E7E12723CCF1EB5E22C15F6AED61CD52A7BC02B4DAD3AD1
2EA9CFC3BFA870214856B71230735CA8CDF47287CC3DE786B58AD4750E1B06F8
0BBEE474CEDD5B6DE63476BC1C6A126A6C76BB597D1EAEAA55B461D8EE3FADAD
3C9F2BCC49A0640C3F9F25FF0BF3217EF229757B5A74386DEBBD9429EA9E146E
742FCC8BA675AE7AAC03CC22797B7D71DAE6A6EF1D23B50C2B313B042E15ACDB
A483F269691069D8B3595E8B485A16A330E180982ABF6E443CC14A126471D2BF
79EDC5512B75228E70132A916711A88E09218A7C70E4EB6AD127A1224699A2F1
6475999E1D74FA8A73F097DEDB952FD54E0297E58B4F0E0738675FCE0C12CB71
0B3026181F8FB67C9AEF72CBD4C77AEC45656384C054CF8FFA6D183D847D78AF
1EE751033C006F4CB5E04BC3FDCFEBD1D9A5C34BE3FECFBF56C20FB842C1B766
9A227F1F250CEE38F35DF7186EDC65425F4E8B5EF9F9E6AE360F2947B83B63BE
731868D984D303709ED9A7F9F0FC0BE4C5A0BC75C3CC55BBF9B46FE89A24287D
2948E0F9CFCB7E8EA543EEB0EDDE85DD498F637DCED9038CEFD753615D5ABCCE
BCB1B4F9695B8E2F53ECCDD150DD4ED9B5EBC8ADE67E5DCF4E440AEF939C69F5
C45FFD14F04A546FCE16AC611A73F944A3E679CFF300287451189EB328E038F9
A91CE40B6143369CBF8E9D67F5B865621CC5FFB1FDF088978B96F24BFE5A9F1C
75028E287466804D6AAF4234D72374D4E8DAE4717F17B86B4C6AB1D96AA5C41F
947B80781FA3EBF21597FEF0DEAFE7F9511E9E965D487A5315073ABC2FC10E02
24BE7F4D9E2B15FEDB0B367B776C524ADBD237835804FF38589342AF7FF2D199
8E5F3C312976040390C9C2623BFEE8E6D97E64778152B9917A20963243FA0A64
273DDFA1C565D4EC246A4DA968A2B5587D3AA7CC6156B8DFF94C273BE280ADD5
B6A7E50643F362EB36B5F8E4888334B4BE23F932D90AD2994C79A1E0C0CB5DF9
8F264F1BD94D7E59E41A41E7A4D00F27C2E1AD8CAA72945C94960E17F1A2452A
C7CE2B0B8C70D65C67965489C4705E278AADAB332CD5AD93AA711B5F61C1CB3A
CDA15D8607D9E5AF149C40485950C8BFBF4C7E314BC1F344CBEBE5CB89A93A81
3AB558B99F8EF56ED5B74C01767AC5FF37F848981ECC4C92B193AFA56437AE5B
8506129E9AAEA996FA9402734ED86FFE50F7406524570EA7934533DA7E3F6147
7095D537A796741EFB71AD5605E342BD803D0DC48342AA2D163C788429BDB557
669ECC707AF9C9E0F86DD674B1393171CB6C2736952BCB3C63AD128120D3B291
ED19D422F624A59FE2D1AA6B19DB4034A6E26E9097BBF99589554068142EF21F
2841A59693416B6758AD2FC6CADE8195C22B93488FA3691EC1D3BAAEED6C82CA
BD6D52BA08F55AF52A7E1ECFDAF8E39BF35DED0B12D4145F5C61B4A1A2249DD3
0750C755DD1269291662B7CBC32511D668F859928989263FE709EB1DBCE18151
4211965E5B56B380917B2C432F0371A642EC3163927CABF282C835FB15E1F1E9
BE321719850266322C59C9E11C90C9CDDA9155C2652E3CE38E471DE74CCF9C5E
829B05C8EAAC6A53FD8B52C0141D8A6B183CAEC7408077B9CAC840264C8A460D
0A2A6DECB325BA32CFCD54C8ACF184707307CD76A60E8F85B832984D9FA1DE35
0AD6C69A793520439F2106BE3B2323379695E7E24A345F755D5941A96F647073
AF9B3960F98A4F749DBBABB2C65EFFF5471C3023DB1AE200E2FBC6B3D0492CA5
A50A0F997B30F6D4898553A4A341F3E0038829603C9F708BB748EF2FABFB9674
4B995EDE3ADE08B95255E29BBA4270ACCF4AEED79BC91278D8E158C2AFEA915D
0F4D02A0E52BDBB1F743B60BCEA6BD83D4A2EC5F78230A78D88BEE8E5AA5E9D3
1094944CC86F8BAC2946C3DD5F5124033FBDB5D8FF066C543000657FB68AAA09
D5E72A69F9739F87171FA2AF5B0D1EB4B6F55180E21B8C07FE486F93E2E26583
8696F8AF55570F51C6F3CEF4245E622D47714FC9FECD68987A27BA114B7AE9CD
3117B29101F5BEEDA14553BCC08E1B92C2E2464A453664DDB770B4451FFC18EE
0AA452F417D276CB909380F2300C64ACCAEB8AA750E91BAFAC83BD44352E372A
CD1E8695E2A57AC09E4A9A4F00F81A74AEADA43D105E0B3F0A4AE835A07ED5BC
A0C69477CC504C023A84591D8AB4A00607866794E7E2F9A2B89179CA4A42B33A
04338CF4144D61D939425066E8C497C166E1B2A18C094003D174A42C50B6A3D6
7D571FB57B9BE088728150E0A2C217C6F9AE787E8E4B5D6B22B80A23C2D6CF25
CB749E67AD9C7C0835651B65B0149330C96C6B1FDFFD8E22C885D969CD18C61C
AC91FF5BB6CED369EAF84DBE1253BEC8685109E211FCA7940FE3F097A3BF25BD
873AED44148AB87CE63A1021B0A1895306C8D08B0A71E0C9039B733D96F95A77
46790D67CC0E59CC28EB6050289B099CBFE4DF60BA3216B767F3F141F9E9D125
795CA2DD5DEDD4BA1067DB4E15891A5794F8D4E5B487EDC7DED583C776BB92C6
60DC8AF8585187CDFC4634F73602BA6119B95B760219E59DD6207CA452062861
7E765E30EC2994BB4BD3513BC3E12A6AC05B250302BE7CC4FD908EF361960047
BE7B46D402DED493C2E162FEB44FD680DE734AA1BEE176360C9D4729BC929A9E
17E96719D178A8DD653534500BD01EDCEB6943BD88A24F09BDB19B1D690E0261
F995E6C5129523FE417DC1414E8ECC5B15EEBA300BFFAF39D5E8DA57C9C85020
5DBA7EC8FDD70F6AB79683319344C43C513C35AE8200ADCC2E577DA417FCF104
B566609E79C54992D4FCF6767219EAC6E10AC5CFD56DB93960EBDFE9ADA57878
16A38973CF4CDD8D254950565A74DB72388463669EF26D6724F1A7DFD7880AB8
29B8B472A70259B3722F0FC2770032C3E7B45ECBAD1E993050B0655EA7FD5D79
C29ADD7544560967020310D8A100D741AB7552E3E595E00168BB085CC5D0AD07
71D60753C5CCFC7EB064FA0A095D7A11E8CB4A9D15DD5F56DF4FFBF19FD0FFC1
DF2B676BEF8AD91EDEBCCCB29902003B36D7CCB0A2565DDE48A32EFEB078DDDF
16A827CD9AAC53A5939076FA1F1B9709BE953074BBE7C3B3F7E242872B2A0EAE
2EF2175BE19973D1C2649B9380D4EFFD55C4155A09CD3CEFDD205A2DBCFDC2DC
657556359978E404787A27D07EB7C0AA632EBD3B5BEBAF0616FD824A2C1941F1
EE7BAB40854C0CB063988AE1E1F452F5918794B3F51A1B105B1C995DC082F34B
C83E5DC61628C8C1B52893EC5E3A2EAB2BD07F3F3D64DEFAD5F6F74087A0A87B
8EE2DFB49CAD1A5E9DD53E09A14734CB2AE1F68523081643DC29ED40D601566F
F9F4DCB0A306D4D73780FA7E5E46F4074B66BC3EB6D74559E2CDFCCBAFB1AC34
7D04A7EAD48B2C0A60685070D6D5F11D57E723D30751417516F2865FF57A92F6
6170A5D8B75EB877145364C880095911D3BDEDEE9C2DAE7E6D248BBFEF50AAAE
92F8536E8D473A35FE9BC055D128AF38AD368ED7629C46B2CB7D1D12A59C4155
84C1F18A2134F7E062B1E34BADC9C6524D9749810CA4715EF8DF43030A2EFAFD
1DED9D5E42EE185FCA0E5C13342374E6254C16904F73DF47365FBC6DF73EBBFF
6E9927D4775BE834869D3821FA091FEFC02B248B6665B55E75BD1BA2C881A3AD
2C54EC17B8674D22339BE735E306BA11634B947AAF21CBD08A2E32D8E0864FF2
F95B1A8F65FDC80E3F59411F0996B35178A3EA1D91E7B6E99152977605306C25
4BB8E2109851280518BBF10BC5910FC7FC4C657600781926DAD7EDDAD3FCF137
E1171EEF0794735EE0A8F8162C84F23DB1A57DCEA9747733BD3C0DF71184DFFD
CE57BF077E6799589EDDB5BE6BABA56EB49C48C95E27C4470E3024A309D0EB59
8A97FDF2515EAEF808054C145953100566039F5070A69A6CB34D2004D0D4F2F9
3797E81EDA707EC4A5E4124E46B412A7C21AB713B6EC280CC352C2F61B59106D
35F59E74D46C341527B31973151CB2D3B2618E6B2A23E7BE10876623088B4B8B
19C78C1A0A48D9720307770C222F0EE3C6C8B96AF7ADAF6F31B526798F6A5ED0
38792C6A3643456412041C433BC43A2D385181E3F22BE45C2D6F19C0F7BD13EF
65571138527C67DCE9D17E290DFD6EEDC063794BF79139CE437135700AE9FEB5
974D2D76267B95011177AA7469F29A8C2B5E4FE8B2789DE5115F6383D5AEA760
58C6F4D52659D651773A61074778EBB7DBBB8A247B6CE16FFA09A3BC00863EA9
C98E6450BBEED01B284C5CC10887350DBBB232324013332B6952B84D332B77AE
CBBC3B3519423A338284B93D12ECB884FF5107FA5DADFB97F60008C8EEC8B1FB
BFCE77154A6054B050FBC4A6B84956B249AD29281A257658C8ACF184707307CD
76A60E8F85B8396222381E8B9336A59415835D53AC484C577F5FD652111D4EBD
F7E0C87841CC9958B0A9F57F041806AEE0B726408567CC9606DDB401B8F6432B
57E55D5001B8E3306F74A3159B3167747CA2DEBD0E86FD9133D41A1C477BFD22
C6637D0221DCE95F0E420DCEA7F1C67BBD8D4A5AF16733054F11F5D48A2FC026
6476E169453EC2CD907011340E49D3434B2F8F117B57FBC0A0970FB43F50BFF8
A76284F272CA3E85CD4C89443A083B4EC77A8AD95CFECBE96B309C6432795536
5286432B7EA1B9783F6080119332DEB307102D23B781B43DF88B7552DC8D3067
8100141FAAFD9FC9B7C3C2BACB269329C468F8709736BE73C4F9CEB30CC26A06
2A695D13553F3D0834189B9C68645F6D94A8D7F3E1C5696C4CBD363437302977
92F442EE498596F8DFF1F24584E62034C4DA961E33C4F153BEE36669BB3C44CA
A1BB6D721284DF66C11AC9A449D4E21077B0F736EBEB4F995A09CBAC41FEA3D7
1E0B1760D3C7601193219154A9698C0DDB550C986370360F2593FFBF7A3BC39D
44EB7F6CF89A910B180E6F9B009E3228FA831CEF0158AE8E4FEA94F930201C8A
233A8B019ACF3E18A8BA532BD69AAA71AC185400F5BAD977A23B2376CB845EB4
6EDFCEC750BE37AE380E3D2BE056D20AEC2CBB16686FABF7B8BB808537ECD6F2
2EAE49EE6BC8AE75FE8ED2D7879C8C8004101CCE797EC38FEF05CEA09320E959
CF33FB7371ECA3DAB1845BE0D5B32B1F637A398B71B94EABBC62C976AB157CDE
065F075D57D8FF0560B676F4FF319CD64546E560F15158737C06112F33255B5C
B7BC87D5C3EE7287DC756C9E6F25277EF472938F522CCEA4ECA364910DEEC061
B2C0E9DECE172069E61AE3BF43A716200B83DBA7B83146B2914CA758C7503877
0EA4F63B56DA163D11517493E1808A4803C2BA33A438CA1A996D29B4A70F4B0E
6D0EFB1EC2240A77F4DEE558D56E14638683F62FA57B40C833938AE26C48F97C
4AF11777C56F540FF5D2B2B39892D4E91FFC378912D9C12702B485D892C4ED21
BA36D45C023983CCAB2A4224433A5AA580306732F32D92892F8130A9819A5D4A
E6108365B0FE92C8986160230147F541942E0742E4B85CAEE82F1D016657B024
0548802256FCDA61357A4A1431FBC61DF13B474825105848748E582AA062856B
46981F758C0B8E4489E68176134C53EFBE70D7B1F73E41AE286B0654BADC8412
98616EB93949028A6B799CEE9BD4A822DC3F087B3E2A2915E0454C2D689609CB
F452FE6213C20E30C3F4E30490975AADF23F2C763CB339B5547BD1FB67CFDFAC
4856AD3BCA02FFF6D54DC35284379FD5E8B16748ACD968871088C96916978229
84FAA4DD09B614BA95958559AD18A419D9CD373E9632DDC32A116396E2A7FE57
C028377267E0A9D40A26B9F322C3C0E16509602A18465A10DF3F0A3077768E0D
7738E7A421EFAD6A93542B26C28A9D9D736D429DE5C08AD693E0B58210820BBC
F0318D084F4A0B44DD2BAD04D646478F84E4836D27E70F4B3D1B4EDF0DDEC217
336872019CDDD59DBF40989092B9DD99C222A8853E8A1605091AF72CC6D6D0BF
556FB0ADE032280F7F23FBDE7A4174B073B4220244808A443680B9E71DD38B8B
6BA6813BD4501EA004CBA493AF7031ACA99B4D77F27DF349735B6CF705C98AD7
1474C52566828F41DBF602CED896AD1346EA185BFD796E75B942FBA2C6D0F13E
72311DD8DF9777CBE770CAFF612572884D3AB9F3F8A2A75E17611E029C1B5EA8
D80FD42D0090715A76DBF57784BCD075E17A9DA23EA5FF4BFDA67F464A544179
C5B4197B393D9248E23F0F6DABD35EB11730B0439F7B43D32393F1749C4838B9
4D02F5624ADB38FF159460A2C7DDF0A2E208DE89520BC2A603C70C8A72B15CFF
9D1820E68CCA3482A28BD1898015D6B1E5C5F2A4948AB8EB589909CA5DFAEBB6
C3A0F0CD388ED13C20F497103EFD536D8A203EA72119D2484A2B8D8A17C8F281
7BF036E480352A92D61E37FD1A72861376537BA2848F6E1DEC6630927C9ACB3F
AA61AEDA271E5BFB498F9288DCC8DD734B8513F42CAE6A1EDD83AC935D120ACC
92D33221D520397D1ECACD8027F005E9149AF3A7FD4FCA041CD83BC8D134C84C
CDBF5553F811DD16F3D031D10C0815C456C938FD91A29C5DB7BCD2B9D794CDEF
1A99578EFA09A572F40F14C6B18A0ECB0B815761525177B3F3F7975F624347E7
45919F60436815AFF541B7439C57F3B90C59647CABB5F7A369DB7A316130A640
FF33932A8BEE2BD738E040F0078C747793BF33ED8C96984AC89357D38B9856F8
419D057A413F748E5BCDE1AA1646FA00A2A1ACA0475A655966CC3A9EA7C866F2
2045C6C6577EA6EB47A342EC5FA3939A2F969D2949345DBD2BFA8472A72202B8
44E94471D7B013476335D39CCED88D828387199244C847A68F1A9E8FFE7101BA
A4F32284DA303E026431BC892BD886F2285BCB09BBC8A2BE1E24528947E0FFFE
466738C666EE64B1AC50BACD724017044FAD26ADDA935A73E18504C4B300F405
FE58D44AEB2C86C4D9DC15103594EC513CBF2F2358EF4EEF43E33B66EA8C61DC
81040F33BE96C6AD6E4F493287533A5CD92C4D45E852A40D1B334269669101C6
39A25CD432499ACD831B00F9708EB1ECB3581944CDF60C5C6702D2CD20E367A1
3CB1CA23A336173FC1F65CA5AF6D70FCCD46CD6181C4265BA5213F0EE69E5163
C8DA30F989B8F247C6A0B68529A7F35F076EDCD31E8912D75CF4250FD0B65628
9C3557FF905179698213D6CC959D44369C22590457C024B5BE2977D9B494261F
AF70814193EB795F7B3D063DC5EFA4C4CA2886B45605D9D03DE88DBCF10EE4D3
01109A209CC79B9A54C70F5370E0F6D3F0921A02B0D1E6068418F41A007E6630
3E8888CB9C0E8DB60C589A53E22583CB48EE8ABC62C64CDC2D54EC614AEAA2AE
C600769468C5637E1E141DE2644F058C0111390C19C5733E89AC3DF461AE57D2
09909D7C58A1B8022333DE3F743D030D2483F753272077B72A686387BCCA40DC
033CE8F303257847A99D2C2C69C3A3F1939BA4C4B3251356C6547AC035E885D4
F7599B1C00424540EA079A089B53657D08318B70D386CEF336D908463F9DC9A0
9ED7A9D4BD5E272DE77F6D20B6E6AAD4FB183DCC97477F8C211E8ED58555035A
EC3BE79DA8BD45AF96FB8DE5CF10C2CDDE6A14700276649D850B6E22FD2916DC
0A74717A3038F694FB2648B844346FA995F89E2C131533D11B2CD5F5F47314A5
920AD1E78876AF5A84DD01647B9536B6C68006FC8F9CA9609A2718001316F0FD
040378661B1E9E62B48838A442E796E1122E5F10F2F7632484DEECFE48F0636E
F97461C9314176F03AD3B6B4FF58527B20D97F32FFF77D947B7ECCFCE2402E3E
6AD4A89003113410B06E9F990B9FCD99447E0C516A22A3969806AC8225FCEACF
7C854308EADB8BA0F53774A492FE177001F6930F992BFC8F72C57446ACC46D7F
ABF5F5DF57D97EF5087C172DAB427ED4451592104309CFC7962DE0CDDF3664B9
A39ACC72FF67FFA5F6BFF5B681E745CAE05263C7F687AA538D039561F003A974
91E07D57C671D7605F9D205BDABD55F09CD63505EE77B3ADE7248B211E326554
73C5681798D28C7B1963AD2AC7E143644E936D20D0D9A44241610D53AE6A1A53
C64A45A7046A62A5DDA87BC8D355C9C85601C5DB7FB60F9FC997023C014372A8
26C001E8A48264EAA8E26DACFAD9A265F84D535A8A3EC9DC9EF6F1E1AD8276E4
A5A520E2759D0FFA34F4471C7D6005D9FA435C6432BCEECC0D780948031C9EE5
EA7AE1997A6B34A9D3E2A14B548BC60B2A6AE455B13C72A980F6312093F1A693
C457CB98BD6EB94A70B1F35A79718AF6BC1BEFB267FEC472CDA1E605AB55D980
3B07B51D6C62169A628ECF084DB324B01E550D60F47B93FC6CD4935216385BA6
A4CF3FD8B389526B0192B623BE8EB3E48CADF2C8AF6C9EFD52CAB7B3E4248245
66B2C89DA14B5D1774FEC1F7712C2E268AB4F244C1314E8E2B37664686A6BC79
B8FC762F44B740A679207B3DC19A5BE430DE3B534D1676FAF8121DF0C1C992AC
9CC9F51B2564166D55A9878C8F3509B2C39E830F5F8431EEFFAEED8A86E56638
6C4E5A1C1FEBDF3F1F385260358504330449B1865ACAB1DCD30399263B4AD1CC
0FA3D7DFE2C53672D2BE1EF5B375FC98C21C8B2AF333ECAE621F12179C9E4647
5D97D33027B92C4A9788670EE2465F95B83F8F0CF61F3275C4889E9CC2DECDC4
B5D32AA948AE738F38C8BEC8405A8286CEBFCDD7F4D8AEF1266529BE9E7D8B7D
B8AC8F315F3441B03AC1431FC413179BF7B827C7B1F8D9FCC459BC2076915772
5861A1A41605F3C3208762343D6484247FD094ADFFF4CD9460C85EA5E5FB3B97
0FFEF8405E20CD72FE83AB5351D7B776D2A36F1BCA5229132AD306E39C44E534
616B3FD9CC32A1CBDE36FB60F72DE3E1FB3813C1C8334F7FAE86C0F1380AA074
48A621D769F05C8053ACDDA5DF00DF9ED460F84C2B3205F4911DF3C24C45535E
B92032E66FBE5C4AC2A078F97542D6C800EC8320B5278DD643900B9DE5B6FD10
3D2DE1F3B1E3CFF9D3A9540ECF1EC68E467174529C5FC31C5327270A05BD1C3D
D1B766C581569F76A3E7ADBC7E4CED76E1D4EC4704BD05FF9BB1E463EE135D9D
9C902B17B51AAC0CB74396BD2AD13EAFA579F91F534B15A8343313D86AE2928B
B9D5104751F3EBA27244EBB23375946819F8F8E6F082C7DDAE3704EFB0E4E200
BDC0C8F32CAF4ECA0423E5B04534196A0F7EDAA10170E82FD77B4516E2574792
0F228D11482C180E6394B532008D9A0245EC2D9C426F1101E75FCDBD54D86339
19BE74217DE4C1EC9338D223A3DF7E176A18E596251BE474E1CD0421AFDF8EF8
BBEA17C43392856BCBC87B8FF6C47BF25B05C49BD925BF9BFDBDE2CC82C9DCBB
3F0CFEA4ECFE076382F2E96F2F1C94F11476BD78B230FF8AB07B2371AEA86708
FA99651EA4EEB6569733B4D6998F7BD14CA11E9F5F226CAA2FE6388FEABCD903
4F7EFE58A9C1BFCAFD91F881981FF7E1B6A4E8CAE557ED66355723D201102998
D39066D46524EF15561308B3B6694129DB89AA7158495B3075A43E554964545F
979282A54E58F149C2EEB2965E581964DF1186811BB519B9FE8F76F5001E4F0D
4D62F3D99F8E1916F8F80D8197026C204F60712CACF92B266F6B1C389EF0609A
61E59B1AF384D87574DB7A197944E1DE566C84F272CA3E85CD4C89443A083B4E
C147C2D24DF2716FF77F30AD5A2B83CF7E29315C1A44D405183737CD197CAF85
19881DC6FEDC28B0BBC0CE198A3DC7471C53D6AC98388888BEBDE6CBE11AD9EF
207A09A1D19EA18FAAFB8B546F7C26AF23496D88825FD85679E3AF3C5046DDFD
43C1D0E4C1A6FD7B0AA788C83F264CD67157D4F9FD0EF0E3B8B57FFA336F406C
C91C048711EF040EDE012801E9E43AC623E3D8C713E7BB5FDB2F2EDB81643DEE
3894B23ED81A1B1BE73D1BDC53BE29CD77753162646B1D7AA69FE08693F7C3A0
CE8C480CE2FBB73C1846FF96CC6609E5C72EE1C2C5756808AB326DD8B689D6DF
97B588CF43E8EA56D72B5DB6526E7B4D21E38A0900476B1E2CD8BDA6BCEB6C77
8F3999F3B1C3BEC3FC3503C9F4D36F563F4780DF9F9371206801F0CA5822616E
0723644F66AB1F77AC6E924F033DA93330C41FDCC8DB8C4D2466A7AFF9557054
87B08F99FCE99718682697AA59D8FBB1BB36A193F782D19B7423E732584E8F50
FD61EFD84E2E4BB91C808693E66B33D3D4FC762880B588F3671FACB5DB6255EB
11CF42880ECCB4EA42FB183FCEE44277F23B0D68A83505F65EEBD225D147E713
A9AA6DCA71E657EDD873BF96781212BCE4931F8B27BCE943157606C12D28C1A7
7C92F2C2F55DE686B96B4D4FCA867A3586A992C2FBB1D9A2EA800482A082E1DF
27ABED7158F2F1BDCB9AB9A4078563C1266551D8CD81FD0BBAED207BDDE15669
16A141F41BF0471E32989755B7D83FF4D1F48DE2F4244465DD080CA9C04B4395
5D3835B3BA214C10462874E1565B380CFC3F73CD550B241619ADDB1B2C0D8A33
86EB1FD6131A38581557F61F3299B3628E247CFE793712EB75BC835C53C1F970
3212F9A5C8BB090324A728A44706575506D08B278CBFF582B98B6813E529989F
51B10F0445DCD1E01F1EF110156DCC8B7E774F912847080F423C4F946FA2C256
F380F678A62ADC9A5F748E83FD16FA4A50393296165191DD7EF7C41A19DFC1E9
B002376C0B35D4B0620C77644F56B06D7ACC7A1E9575D8FF6F8B61A8886CDFDB
46767C44FA15BA4CDFFFCBA64197AB20DE81788D8F106CBD33A6D45FBB5E156E
9D75162E7D2AA7619D8927331E648C80D80E521E1C27ACE35F91C0E1BC5DE748
5F658B439B3A711C2DC1500DE37FBE4FDC2E699BF179DA515A38AB6181F492A5
69549AB791F548CD33BEDBC3948CF526AB2A3E0A7894363EE42C1CF5BC659724
D8B9052FB70954D0922E55FE6751257E47D26E7AB1A0DF6EA3E3BE7FE345F753
F1BC6121E3413658C0E2C36C0D34F2DE788DD70A36B6A8BB496A6969ABCF2DE2
04B8BF1FC7D06D3AC8E8EB4099BED81DD41CB40C9A4340489AF17E063FB3A768
C0156DA72848745C4BAA9E8B5455322554043F99B66F7E21D717B806B2672296
E2823BD2EE1629AE7A70CC0169BEBBEF0E945DC7DC15C2099AF0806598A862F8
DAA14F826EF24EFA103231E07E3F25695F9E79C77BEE3EE1F27A10B32CE408C3
27FF0BA67D5E5F87FE84F2010F195C232C7FD5A068F6A42402BA3967B10B0CCD
4E304007ECDAC6694B5C5C1EC6148404D290997B038CF1726B3E3F2B4326FFFB
8F58B89365B84D31D8F36D1A6FC954F67E8941A76FAB975F58752AAC531C3CEF
406FBFC6D05AADDAB3FC976E0DB7F4D8FD546F0A68E6999FE1548722D8471502
E4E237722DBA55B60EFC91C23B8FE6B993CDE3133136F8BB54A3EB863B4C5BD1
695BD593DDB9C8BFCD5E673C361CAAA932C95D2C2FE53790996AABA462D736B6
DBABE82547EDA4208F9A07D24F8E17C5A19790317DAC4604A96808B1094462D3
7A3B63B500466357E4903334E217A510E7C83A5D7857C9D1A4915851952589BE
7219D749402182E7810F4EF1A383E651211C03A1E6D46589F137F3F0DBE4C9F2
C07D4F2144116792DA4D7A815D95644A19B2292357386BFD24B880132C032BCA
772423FC0FFCA7B0944A031AD69CA18600157D955507D0BB8C122B4297282135
4ED4AF84948BD23D6DF16652BB836DB1017E96CC1BA0364985D6E1C9193B76B4
07C8A60296C681F25CBC0F2088E2822CAA0F1C5275ECDA941B7A00ED409479B2
8B94CD7FAB420992037BE1C0BD1E7F808965475EBFA9FFD29E62708CD2D6F3A7
7558495FA9E8B594BC8F039FD534727E6B53A52E7184B141382255228978EC2B
095A47FD4DC55427E61B9B2919D2A9EB39BD6D8F6FEE8F542A42078E4DD71A08
D380F1EFAE206818C7BCC1532ED57C1E3E4A0EB5D0EB0AB86E72B8F384934DA4
18B375F394D0A1EF6BE099AC20DC2E530C9E99603DEB72620AE45F1C046E7B34
2D66A9DF695E6C2ECD03328C7D0F204A3B0D77A3C4DF3B43C4D57AF9180BE93B
8E83005B7FCBD4C77AEC45656384C054CF8FFA6BB679CA48C888B1A7862AE02D
F232C2F7C19818287A2E692C941D88C63D583D1AA7FF00A1AA1E08A3F241D8D1
2CE496182B15C461ABC61909D66BDD52A6D7761EFF3FF4065A4DB9789CFDBC87
2D903F0BEE573BDBE15BEB4275E283CD196BB8FF45986D96B7A1E9E8545B7208
71B879C5874C18FB39B1F78734A1595871E3ADD1369E83B1F17EF14615BF1C6C
557011A433917F71FE4ECD6350756EF653DCD4039DB729F3ADAD09EA3A0AA14B
331DD9B461C8298D8FA3A5769147FF4F8908F2FD6CBFE416E7BACC2FAF398975
9A7085B43B7DDDD33BCC9071F4F96C3CA91B660EA39FA4C17F214AA3284D5400
6813B9300CDBE800B60F67191E6BEAF8EDE7CF3686FAA0609C95FF30CEB3DD66
C24C534404F128F8467581A6FB4A16087A0EBC9653FC443177134C0176201CEA
21D859943D73902C2873EA0AC11DCCEDD7EEB35AD055FD95258E6816770C93BA
FC0CD2293012310EA8265F72E2824C605A40A2505E9E31AC0B7674D06DB1E237
68A45863BC7A164417242466AA8EF9FB39091ABB2B18D727B4FB3C74C4A46DE3
FE0D6712111287AD00D2E826FDB058833AB8ABD3FB181AA07B54B45D934D095E
0F005FB7464C802BC8A7E5FE9FB9A11CCA202C629955FFEC45FBCDEA39CB068A
1AC0548BE676D7B7E646540DBDD8EE81E94C0A1D22771DDBC55383CE68ECEEAD
FE9887439F0259F11E88CF742C2DB2094799542CA4505DA876AEAE25B1A33F64
2F5DE1740BB0CC9F750D3E83208C1680D7EC23752844D35C0F7A8403B2CB2AB4
0AE9F9B35321D5A3D7A2E30D6AB1EECF7EF22863574914D836AB0E62E7BB23FC
DD72756F06AD2EB54D261AB5EAC44985F2B8E409E73E461B3F4055586C1E40D0
7AFC78D88875305BAD66C31E84331577C0B59A17EC0CF408C28694B19145CF29
56D98239588E6778F8D57A00C472CB6EC6A7924FCE4E3B9815B8D3B09CAA59B7
9FF3B2407906652934045E4EC5A4280BB4D0EA5778B0D747812CBED8EC485357
AC61AA4FD6DAC0A4DA6CF1EDD53C5AEB7FB6D8FE2218E27EA406D7B574C84112
232C280E51C76C276339139566DE3A93DB28619E8419407826AAE3EBC4181757
961D33C8ED51EBD6D957E70FA5EF377C78487FDCDB539A6046DDDB512666DCD6
594737F94F0F1CA70593BEF1471541002A0798629E5F84D34DA4AE88CE14553B
862CBF5A074098E04A8F84C92FC373B02284F9060C62A52D525F367C2DD31C0A
36823DC364060DB596FDEDAFEF5C81AF3DF3C8C65321DD0AD9236729F742C64F
BC98D27C9E5A8414F1DE346DC401F4517B22EF046804C2E77DE574150305DD71
CF004087F913EE0CF4B5284E666BAC7789A24E2E273455E189047C61C3C666FF
C839B92507CF6672633D5573BAD829CB928B709B3AAF96C35AA6157DFE18957A
AB319B72F2B1D7EB2A680D55E7E28CCFC4F8AA0DB3B168198AD580430A54AAB1
C32B079DD270347FB9CAA6034AFE08768C40BC17F44C6CA1C17D19567AE00FF6
8B3034B2F99BD16EC9F360A9928D2BC5F2734A2A5DF034CFBC59CB68965BD36C
91B34553F617C58851454064500604048EAC8F6969FE7A7F4DBA6E41EC4F6114
F063574D9980BF2093CE7B19B22A877D6A812016384F6541DE51CEBD0C96DA06
996634DE71F20FCD1E2D1CD4204BB567058E78BB69CEF394B28B220522641F10
4F43CE14301A6E98311D9B0CF5778E377F54AAAA6CE6C41E243EDA834D2AD0CF
C856B104AB8F2EB0D1D575D7C86F8580466A7538C67B91BE2D2DB38A40408AF5
42DD2CC497F560F13D3B3C307DDB5048F58986451D3D7665C8288336BD21D97A
81FD346B2E8D10F423C761F4B5C25B167E15EF3A9B6D97A192495D55029C1D33
CC9675FE65776199CE7138089EEEF382D5AD4F2AC53A32A1951BCC1CC6D80E28
F9C32E54BA60FA10F2C451F130B1775FF3B7B7D94EFD598C7740A33180B0317B
3E89FE3A8E534F197344DC7F5D3526AEB9951C726032A6B9A316F7E38C633A0D
BBD3164EFBF2FAB4C2848DFA0A89C77596F9B90F792B245D1E503BB5F542C08B
8BE51CA65422CA6E434B302CB765851D873107A1BCD4AA98F4A3FEFDDA1B820B
9A237C6D265304C99BF7F56D0C87C5F251ECF957E2D3EACE8A5DDBB1D20D8F30
76DFF27A27D792849CBFE02D3C6349019DA0A94847781D1505F0ED7FBE021D36
AF04931410F4EDF9F08A80A7F1C5C5F7EE2A9E7618A8DCB9AB09B39F2DE66A66
1CAEF8644FF0FA6B6901A2A1F9E59107C890E9FE8A4E4E9AB5B8EC3E111D865B
BD9A17F3538440755E2B8EDA9D6A7ED3C9E8221ED89E605B63B27E724FEBE0B3
888DE6A7EB7C4E33486B5F50A95E167E3C5FD5ABF3DFC38D2CE817B1DD2B7CC9
C8DF9A51A71C43168B6F7B8A761686B85CA96DA7689FFA350093E5409D6261EF
5051343DA41EF7DED51593ECFC443320FA066094F341FBA21304C2521964DF11
86811BB519B9FE8F76F502FBDC8580550ECCB910D55B7A327DF7FC80623922C2
AE735247FA120EDE4E530064810D703FDE853DC4F08F34E200D9AAFCBD56F233
D375D66320CC406B1172349C6437216B17A7500EBCE726FA308402826EAF267D
4912EFC851AFB32A449E22E4F80F05C1AF3F1DE8D94FC2A50B71898A2C8A3F55
568C516FE313143A452A60C0500292C8A10A9687653047B73BA735CFCD931126
78869F9C696CFBBA3A1CDB9D1444F6BCFB2984BE7AB8C5F0CF112256778B0EDF
7CE218FC019559CC9EDEA3BB1C6E10FCF22375719E962D5181AAB4330B2460BE
3B28414B71D626BBD21419DAD19997E6EE13E5A12D9F6EE5AA066FC7B26FA046
804A854E12F013072DBC1A9510B3BCB4D69A7648160EEBF1D6FF38B2AE92AB2D
13A001779B67D3C039A064EC49EB8252991A78663B92C2D4B4ED1204D7BB2D45
60851F4EBC981F2CBD2F0A59D3C3AEDBFD744AA64CACF8C3E0C848A8A56F97B6
EB4634F086ED6593632B5ABCF9F440CDD748CD4C742E797248AC36C802A06B3A
53AECDBF2748D9FA82BB238DE355F989A6D59BF3C55D26FDA55470AEAB4F82FF
A0929ECA21A09ABD3A2AF3DD7DCC038CB06F0D3C6101011FF98F9DD26ADBFA97
A44844F2C3D038C8E66CD26F9208AD3B4DD406F83538A16586A8D7CC2C6506E2
815C787C37A4430BB10B928EF40F0DD40E215B8BBD40BB5F966E0C9F35EC6EFB
3BC325FA20CEA73FE5893AA3DEE5A4105D2A404AFDD6947B83E96466D1E0999B
1F85974F00EEA17CF4A93E4A437CFE3E242D32E730CECE906E4CB48E2ACAF849
2FED98F6F3E32A50D7195150FC8811C81EB91E7AA056392610918E369E60DFFD
97E0DB8413F300F32A623C70A5209A27C3CD940A121CF88D2C59FF69B34D18EF
C77D02650A55FFB9EC3D2D61A5E37FDACA92DE31F37432FCA554E66AD90692B4
9F7A7718EA43523B54EEC002A9F9E2E321C96BA5300CA668FAEC1E8903AB7CF1
862E8A82C06C9E514F31F8EF7115E67207A8E469C274EB90E1EE48D80B409812
1942C400E928AA70B09D91F40DD67977331228E210803294D5C8430A1DF8081F
0688C05778EA6E4D9CBFE47FB2F68DA4E5F777B710E508ABD47534C76C908AEF
EC6935789BFFDB8444B5A2DC463F2046491A78602DD867563247DB5B52667224
C5C327AA555F0BB0E0DF3AA1D13CEFA0B5B480F7160101E0F3862D6188AB6A2F
6AB0990778DB5A2AFE661A4BD099F614686ABBE6D30D90247E2FDC407FF8B4CD
1C9F5B3DE2ACE95AC6D212D85553FCA037D9E08599D369576040E0E10D39633C
0A637816CF2453E2FA20409EA9B70EC43DD11F506061535199A8147612F8FE12
D52CB7ED0C7B9914C16545494650D4F94ECCFA76BFF74D37A4245F13E1758587
FEE10268121CB7FE0E2ECBDB83A4BEF03D4E3242D9A3DD5DBD9E3128227784D6
BE9A703A21EE08B76A92B11D36526A253B4A8488E28072CD01D131258E7AAEF4
4C4C671A9D0B93E9AC0B5453B662111A7AF6F422F2E07B6974D5A754AD3D0D9D
238D486C55A00798C6F1874595E9EEE027E4FF7F9E729F60656D2F7B1C05E879
BDDBB71C03FAC8700CC663CD9C83D475C03CAA62D7AC009673F0A396FE690B9F
D534727E6B53A52E7184B141382256D82D0CC099948E18DBE4729B2C0C88320C
5D2D14884FF032A43817CA2E536208334A24C674EAA9530F278255665E4093F9
8C7A059DF851565A2907CCE380331BA4ABC5107D29F97A8E3A1F35B330914174
E893EC0D27A42603E0306AB7BD30403153553EBCBD4E59416CFBC6226F3CC542
547DFFAFA5F711AD0949F71BF683A2C5C30320B1B6AF51F633511D4A1879436E
166811918E892631BF318F242BC959B11423C1DDCC09941308CDF07FD73BED3E
D3ABBE9F264DF5FC0C8CA60843E656DC646663F306F90413190343FFCC55BC13
E4D466B67B5FF354B99536DD3C2EFE2F6D1B7942425AF95652CF8B3D78CC622B
AFAB6B810C22FCDC5659BCB61EA8724A8C713FDD58F2FC9A557C38DF30977CD2
B6530C9C08A046AAC6500E45D0EBB8D20671E1A3D16D332E5A70F6A0B678076B
430239A0CDC504FB390C48DA6BCEF2C09E12DAAEBC938D5C3572A6F958C306FD
B23602B3AE39431B1788F533E534F18485B0DDB143305633080047B98BB92985
6F457DD15DFB79B81577CCBC216BF9718A5AED5F1BF8A01FD12E05BF8FCF3069
59BA70CDB2554ABE017F87EE73E6FBBCD9BE84D91DA3BD4CC0FC45DD9EB99A8C
A4B91BE2263FED8A16781F740DA51F07A0D34F90590B9C68F20BF153525B73A3
8C72E0AAE163EA4F91076CB19BBE00CAEFC9FA5F5E94B9DA4232E01C25AB42B9
CDF51D0362BE5F6E17066AB07F5A0C56F40AD8EBFE52A293460051DA59D4B1BB
031FF8AB4960254F1ABD3099FE129A5C58B972E926BF2415201745C36FD67DCE
F916EF77E6448E040D68CD6D383B9D93FE4B3286B43A188CFEA5FDEE7BEA9D73
FB400211925EDA41B6BB8CEFBF4DBC586BB070314AAE05EC2FCE3A8ED9C99307
E7D2EDDDC0DCD0AA6741E8250C2FE2518DD210DB1B6137DB8B49B1CEDBBE923A
D5A4DD5976426EE630AF1A5256F5F263055CF70CB228FD880D9C456DD73025AA
57268128664A8F12710B1E11073B216801A385AAA7AE837C9097152624EFB033
A07C37A12F60E741D6C2FE00DE5CFB6BB9A5A38F838B9931BEC0C5C256CD13C4
5EF003C1492E94840A2977D8B90D5924DE4A912E046D4A94BE5257D9DEE2449B
F6EAD0CA93A75E6888534EED218B8738AAC9F6D979D7B4B0045B92A32531A792
80D7D6E9BA3BD3B736A12C82A64066B62572B09B591DE58DDF8D0F137FD09BD2
E724C6A9E484C01F444B3CD05F1762444C50A5F52360A328545303C71BF48EEB
999FC84BFEEE89F19DE217C48F1895326FAF275044E3C5F78E6D99ECF7F38A31
AA151879B5DF493C3E9353AAA14C871A230401234B34D0841835D1265B5A6E1E
A42F31F29C281A493A13C2BF44F28E9A6EBCC448FDC45A9CBE77556754B903CA
C37F3C938D605AAC0305E38ED948BEA12041F7030D2A06C44FD76F0EA148387E
259C301ACB34D07B0846A6DFE40CE7CB472209120CEBE66BE894C844A6D98B96
637637ED3C9FC7518B524263D7CC3C56358CE9774497239957A620C0DC38EFBD
4F4D9C52A82210A67852EE26C4E3AC6C0F393A29BB255409FBC5CF2933686423
F5C50C51FCECAC29DDCBC3E2C5DE3F6596B360A0A47F3F4B2AD9E919FF11DFF4
B18045D6459068201D4C73B95770166AF294ED71CF52A8403B77E65EBA89F4DA
6A42148F1D760B5C3D23B1436C5AC192939D4B3F770F1F95E6C45C16FEBD8869
8A7B529CF54B6B4C998B34647EDDF78C31AEEDF5234E6548AD48E5B60DCCBA93
6C9A22EA5E9DE5415AE50CE998005C0208DAB51EA7B7046531B92D436A61F955
16CBAA07890629CEE3E26B9534FA7584C204DF926CC334F745F28DE7730D5709
3124A45F7377E0EB4074ACCB50AF016F7ADFA192F7E3C6DB1C56527C2491C85E
DE79279055AB29F9C3DD4F6A87CACF4A29E6F2ED9AA22C3DA554C8EC5353AA1F
D4D4B52959CCE0D247160E939032680065E4589778C0563C58BC483A151741C8
7206FBF72A22A3F693D9013732D63D72A38F3578F414D59360AAEBA5357E8AC0
189D24ACE6F26DBAF0E6C20B05
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 22 /mu put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D82DC8E344A7CF2AC71AEC18
36F139E7A4EB59A67192BCA9ED0EB25DE13032F6FEAFC3B1F4FC81BB0EDC41DF
B9EB92618667C59EA499B788CD26C2137D70F1B0AF793AF5AD0D0941F2E746E3
F5A7F0288BC1EE11E982EAAE763CA422D72FBBC0D754AD58FBF92629DC8866A0
431213513744DB48E52EFC89C83FEB082588E4F30D7DA77BB4C90E011A8C6BFD
78C82BDCF2A4AAC3F5414C57C9ED29EEE1D68060473C239DBA7010537BF1D2CA
1310A26AD4E6A61E730EB6CEC41B859FF2B55B2E2E723B1B4B55F16A924B0794
93686FAB0DF73C1ACAA6F2A6F2EF92FF3B304C2848E0061D6494E157142EDF86
1BF8C21E8770445CB90FE1CBF9254377D5F72C670CBD28D37BCFD19DA9BE8A80
807016A0D0C39182667F37BEDB0F8F017299A211D719DBA2EEBFE309016100A3
7126251C0B49B1589CBA883571492783E0DE7CB8CF46078C954DFD3413AE3044
D145A6F582E2FEEA6E4E7A7474C0A3BDF2254174D6B639A754AC4F346F53B835
714A1A1BE80E31BB3334540D053E6D79DC011146CA284FB0CC05D6D149DE12FC
FAE4E73CD3DBCB420848AF53B8DB250E48A5B6CA7F586EC3C07B11D50EC7F4F8
0D529989E8D2908D8B06DD4D5001084FFED0247C779052425E5BC62BDB14907D
AD8DE3B325DA84703D84ECD54CF85CB62AAB93198EFA563C96B9C67AD69DC31F
BFA6035ECDA2B3A23D330DA3A6FF7695C0CDD15B6C407104B2E3C50B33D8240A
C8B28989666DEB32A2393EAA643808E805AABA9D0D1421FCFD4A850A76A93F63
08163166CD1C73B8AB4D3A238C17EA278C3560B96852FFFC7B853BE56D7151E9
752F98507BD5069BC4C9B1351E6BFD2E06A118378B1AB6C09FC5347C6F9B9EED
CACF784F4C11D8F0CA4A481AA41245AF4EF534BA2D839255B9FE13145909530C
500BFC27E42551FF29EB7725FC8864862A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRM0700
%!FontType1-1.0: SFRM0700 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0700, tcrm0700, larm0700, lbrm0700, lcrm0700, rxrm0700.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0700 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-203 -320 1628 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852C44DC635E3E
0E29551E072F9AF208EDBDE681F2A25022B9758023CEE66E71B499EC03B0DCB8
776788D7C9EEA9C8A55C4051AFB58C8580ACF5C1E76AA745AC43137D7FADDCC2
ECC373F673B9F896016BAF3DCAAD7A1E982A9A9D5F459EBF287B057484AC0344
010753C274C38A6704F869833E51F45F91D8FD54CF7F4EA910EBA59783AA6CBE
A5963B4E5E41841A8CC0734ACB9679EA0341518770ADD726DFA8DD26AC8BE0C8
93478DEE80AA4676F6E5451772348BE3F3242DBF7F727B6CE01BBCBB0F6B6CD1
097F6065C56A9DB11299EFEA04204672740C1EAF81CFEA33A414C8A3FBC097A2
789BD70B825861F9977FE1F2C556C2470E710BB50DCB709DC41C337F18B9BA95
983DE7ADF0218165DFB1FAC6389F1FC446413E660AF4601F1935AE3801C1ACC4
9A2A696F645918A8546D5C090D0F9AABBC99667D458EEDCCD0CFC60FA74C97AB
D5D3C05A769932A1905F17170A86E307F730F17B7CBB77E583D20DEA14D76F02
FF9CE7599E0DC09CAB37336C3D6DC6A91510BD76E458F2F009E24983EEBC220C
572E997C37FCDA62DA400A703999BB3862B0F2C8BF611DE181A1F6814CCED57B
FEC1F3573C3625283CD37815AB5F9C0C6FE819A83091CE1D5DE3923B1BB8BF28
A2C22E7865E86FB42E506501C1DCCD2CBE4DA9B63E192E5A84E64BE6623CC0E4
11CDE2BE2C5C9177079C5FD6A9C6A07E48CA8AA31889A372E01F15CD43EAB297
F6727658D33501DA608B1837D4733161F87DB75715EA251C49EBE85753E46D31
608321A8EA1B7A991DDF8924E6942CC1AF752CB9130627220E5B9E736C6771EF
CC0C14EEC5165D72238FBA0F2773DFD01602B364C07010B5F178CB8C6A76B5A6
457B89393EB33C1C42577407C41A0D98A54E3051EEAE04EB142AE719E0F3119A
17E12595AE47730F34A2B3776393C75219832783FDC16ACC01846A3B0A2E1B36
DE6E357F911C7F03FED3B4031D74C2AE23554F73E2A945D007DE60E4BEA0FE28
119CC0F6D54DC35284340ACD8E67325E4E89149E4BB2F33508A936C362246E23
C068CCCDFE10E8C70497C63F19C7EFCB31A980B6A05B63D75B86315995101E4A
C4654A35AE233197E722E4C15BF22EA3719F3966E88138CB39EB749E35E6D07A
9FA300E075521A8C020C72293CF51D70FB3FBFBB7419C397B0B71C619DC89941
116696E2EC13E60A53ED4985A41C27BDEEA7A48CACB4AC69B3DA0301002F8803
6408E149F4BE3FBD53975FCAB1DCD30399263B4AD1CC0FA3D7DE39375BC0FFD7
B372DA0C9A2A32E8F4AB425B6BFFDB4A073BDCF2EA07D80E163CB470C7B462C6
54AF5FB352854792C3AFB404C7A0DF01F728F1A685854A512F78E8CE6B7B701A
2FAF40715C1CD4661458F8CC47C3E2234449473480B3CE799AED79873B90023A
279DDD69CE723D75A2E167B9A6359A28584AD32541BADF67DC1DBADA17DD8859
0311DCF8123E00A6BBC6A414D25D70674793D88C2BC6D6DF576824E4E73AD17C
60343A0D6983DF61299C751FD5C135C45E7FBCE8C34AB7880B138F4FA053C5F7
888BD5816F4DF98E7EB9EF3CB12C36612D0E9F1DC7BE4C83A0721E2A13BD69AE
E83F66ABD4BC7ADA4DC9905C15BE73F5BE65225C38E0B9D9C7AEB75494DF29F9
0F4451DC84DEFF1E8EFF0396B68CB1B331A09065FCF4C0F743ADA78E4CC7140A
5DC56BEE34291027EBAFA8131423390EEF0BE98735E2D841DC01992489B2872B
4E48B2F61C559B2E8D60C281604178F8ADDFD73F1131AE570FDA4DCD4DF5D19F
BDCD9EF6209123B6E2B2E830AF1A5256F5F263055CF70CB228FEB3A1719E778B
0C26B808631D60DD4F072715E288871EFE935178BC73218607863DB2410E1735
B3E157BD4709C3FC1A104A8806F7E791C10900221A00C1D8554303854C1AE772
60976FFB7474D8C7EDC17F9CFFE21ECA53806157DA378B4444C5D336AADAAD61
0D1007C2AC6894F03C88AAA56437AE5B8506129E9AAEA996FA96E4E459B5181B
E721A8FA2BB6F264877D19B483F3AB444D9B439747E6B700F7BC19928F9EAF9A
73717AE100DA8E491D360A9B3AA859D0375D1716F9DC509D70F3C72EFD726B43
BB09258E5BB7C0D502F1D3C3AFFA162C9AE1FC4FF99C29C798D69649A35C57B2
60047D59B677CEB6C24A8B324AF1D92A3EC48662A7BABEA8C3C7C2959CC2EC7E
9A2B6F693442B3E3F6174C0F8497EB926D3EBB770BAF00D0B10EB987145F6056
325130B507C8F393567978803173922F119C0DA609DCF57EF4F1F31F5AE3022E
C1FFBA499359F02EFD58B5092E12CC710ED052F618A72D101381A76FD7E028EB
1A9F30FBCEF78D51D422EAC79CD3533F83842E754D9086BFA19EDD2F0BC5B539
9CC9997F2247A8570D8052D9676B935B433167DD4D47E1891484F9856D593710
DE3106267DED469C64A4043274593CA9C6880C164D0001737F943A39DF0A75F2
73EF18C3C52D25CE9712056D0AF1F8A2F5CBE41551BFAD362AEE36F5D3ADC5EE
3D294E91B637868345A7E9188981B82387080F9FA7455B4BA42F5E3A1ACEE2C1
E8D76584C32A7059E8D0D25D9D858B67EE6533577A30F199989B47C284CD15D9
13C9C69E721972CF98B57273EB78CE8AC3ED4A0978DC39AB7CA6258FF3124373
C9EA0CF12EB7D4F962028569C8C8E6BA568DCB81B36BFB0B0C59CBB2F647EFA2
5B6D2A9665C8D2D47CE7751CC16861E237872E77748C865593B1B7F17CA512A8
AF0B7CD120CE0FA2FCBB7ACBD4C77AEC45656384C054CF8FFA677AA4437787E7
2E4295B313EA06A3699617B77EDE09B538737124AB34397B532B3F800E73002C
7E4A1931D19B49525A411E6CF434830429D65D2FCF89CA2C370BBA349001835F
9FA687F8AB0735D57A63800C2F43E70DBAA1970AAFA046D9996BA1784895A8B5
1BAB2690898BFE8CFA941AEF796B4CF9747867D1D8126A2D82B353C878F260DF
0DFBD65171980C9059C0B34C1877C5D8515C405F275EF5835B84831F6B35CA7E
F4D761CF20D1BDD9B91806240741D05FC94F6744FC1BC8E03247DA0247C193A9
3F94B64458508E6BEC94FD87729836111784443BB7612683DFFB1CBBF3906804
09B5104943B2C35F0B44F078E3F2A8DC0D377620FA28E28FE313E448FB954363
EE07532613BFE454963C96A6DC21BA304ABFBD6F1D897029E64779F5D4FB11CF
19C87BBB51915EDBA5D1ACA5372FFE67ADDA409F1551FC35EBF9CDBEF9510447
30BAEC36E191060966FC750BBD1287E12BB8B6137529B6FCB65E613A9F848C5C
0B5BCD65869D14B883AD1457FB5F50D333ED1C49CBE7C4DF2A8C744366B27DC9
8EBBF55011AD571066E6FEE6C0BABEDCD66FC96D2ECF92AD5331C2B9F7BD03F7
88915B7F6D9410ACD7E07A97639152358584CA1858F6CB95856B01E8720EFD3A
1CA96334384C71B9407FDE0D0EE942BF0C3CB2E2AF19A6EC7D2CCA6C0BE586A3
C25D76CD888EBB407E92769952925EC8D9A079162D372C160F48A5822CE3776E
81F1B31592A24DBA88AFE4E32F5A68D04E48E37A177F48F773E7C0220D844932
8D188356478E4DDDCD66D3805003DD7732C7A29FECA87F056F1B1AA03AFAB80C
5D859D3837B53A27A424C6EE21D79F37C34D92BFA3258B6AB4541D1D3A02FFCE
3E4D78F3585F4BE904189EC7026CCB4B9431A193099BA552120DB62EF4BCFB0B
622D4F6E2244172B83B1B0B5ECBD5080F51AB677B200ACCEC44FC5CFAF15219C
C600DAA9F1D3B545FE312970E0F27BF495FA39F970C816BBE3C8AABFAB056F12
EBA9063EA4541E06660A5B0ED191E876F3BF1C79D43D7F224643720D3A7EE905
02081339CDBD406A25DD780AE10B38BADBEBD0CB63554705543F38B7708A5F31
9BD19A1535E56121B53D5C39508E4396B02D86E99B79E13B57B845101425422F
9F6D6220450BBA3167FD653EBC5B803317EC7F3DE1F15EC45B64A1F4E6CAAB86
8EC983AF3E27FF16727EA0F825DC64BD3001320C647191126CED53E3678FDCDF
E369E294E3DF4F25220060FE23E1DF80F35CBA8A3852BBAC8DB4DA56D55EED5F
B6F2705285F702CAC2FEC87D98092CD9C6A8973B655BDC693980EC5C299A4EAE
74148DFD55EB2D87FD526AF52D0956C520A7F3FA5DE864140B729364F831B26C
86ABBAB81F407F11FD99EE2EB7F0959FFA480FF4A37E49639B432C56DA1974A5
41D32C44AB49CCD0D2112F66E7CAC5380EC67D7C3AF715F0E5C6BF96D598B545
E49139F5357499F77957C8766DCAEF19A3B7FD1313D6EBB931907A725EF7FBEF
FE82E4D6114131410D520B1D7A1E362E36CFBAB8EF7B2439C06FDFDFA172B9AB
862A682873AAE34EE86886BA569776D15EACC4BAC07A0FEB04194D72A79D3100
D12E0D34F6B63A05F12BEC0BF3E32A89988285D748719D09A4DB0EC34CDBA6BB
2FB797E94BBA587766C94032F10124A81F9CA8E4893047633642E2EEE7501795
1457552073B6BEBAF539AB49126F98082F0B8255F7C59FCC741C757DFA9B5FC4
E9E1DCB2C2AA2FD0D5DBB7A177821D9F63DEFBBD6E5E186ACD1084E2EBF77506
EAFDAE7D8522A5EE6D6CB70EB7984F18C81BBE3FBF1A53CB338FE33081941939
8A1F69FF4B4AA9FC1283C094FBD4C2B16EECAC4C5C0EF5D036FA15EAED8DAE2D
DE6BC1131EC7C1162573F54297DEB151B78C6CD5B4BB830821A84B0C80BAD021
7E761B0C619AB2A66679B71CCA5EA45C55239F514E2D75CA451B531635AACF27
80A12035EEF7790310D6C25522EC3ABD5035C879E700BA60982D4C0BED66B46E
F8BFAB82A4213B044151D6ECB0EEA2511C0DDEB5264F2B3735A911C97858D01F
60422EE7BC703390B1ABA25258F72D78E9922286067B7156222628BD156C286C
0FA38C2194EFBD41AE841E0FC724A3AFFBD267C00B1B90608A753D56BFC9D825
3D20088D1BEFA38DFED270B122EEFCE400FD25A2EC55AEB085CFE75BD960F69B
67FCF2D1CA021F0D4BCBB80845F89349BEA0C53D690900696B7E925223E0F797
054A2E804194CE5B022D9E5BE0BBB265BC02923E61AD9B4F81FEE3DAD535E40A
D0823230A1F4AD80070A4AA5E59A524DA9950AD04C6DBDF2A47F6D473F9756CE
05ABC0D297F45CA16BDF3EA72119D248497C401296389FF7C7F829E02260E58A
7296F64561F7014C5F88DB62865A0148B1C3D911358ECCE4E7EFA1F79A5A43B5
BAB4968870876388EB91B40C31A7733412987F9D1C384AE494E7859D81E3F63D
EB0CF132A9AC9502453A315A4A20D4ED362706DC46F7FAB40ED6C34344AD33EA
627787C3A0F7EDD29320762B2AE8D243E502409F0048B110092F3BEA2BA6B4DC
D2A30F0C5B2D5D6FBC1B7E4B326E6919FF106697C698D6B7F1EE7E3274396ED8
A1393001E4FFBB3732E514A38297A533F1E444F8FE4C2D3E6207BD0481E8F5C9
19F9DEC26A689C4E2B6A3693799DC833F42BC5CC3FE4FDFF065BCCD284480EAD
24EFDC7811C168273F8F2C5A5134CB06CDFF450C7F4CEC31566DEA3221841035
9AF64B101322D6CE4C59D4B781ADB62601A72786C55CF22D55FFFE3A249F79E7
494DB292E83B27B2E237DBCFC504C34C369BA3D454F1B6F7C61A19AF5F46FE2E
11BFFA2ECC04FBC52B1FAC7AB634B0E396C87D8D4C6828866A229467D5A8493B
3D41B290CA0CFCE5E87FC05BFD281310037E23E8E33DDA856EBC88A05ED25FF3
180162D25EB096A30565F948BABFB556FD7B71210C4B9DAFD7784B69E4DC8DA4
1FB1D1E643C8DEED28D668AD51777B776B92546D2FBE93A5DD581A3717CF8492
F930ADDBB2A667C081821FB75A61E7CB877210431C88D058D8945AD99BE52CD7
904A4195CDC50A72CDCC2465A94805AD282871B3604ABEA3970BCBFC6A61A486
FAEBBC3EAC0027AE67892C8CD4AA408453AEB4BCA86A20D142F8A1C80F74F7CA
2B5DDFDBAE9E95BEDAE2D47FEFB8B92A16F597EBE775A70D1B7E168CDE426C13
CF17915D4B41B08BBBC3C79A0E8CAE93785364A5FCA6EE7E173D9CFE1CAB25AC
DDD048F9023C49F691BCD00514333A4FD2950BC177A79A51A97ACD1365303CB5
57D5E3AD9DB07056486E47C3C1EC2CAE0587DB3C71DC1C0D1385F6C6085C2B4F
763AFA6FF5EA1F884939C15F6D7D0F8C91EC8298A7FA7F347962534F0F19C7AB
9120987649FA1754F54A0F7A0F27E5C0BACD2283BE1C19345F7579F6AEF41FB6
D2CB3960D6F0D6F0F08578A30A600770AE40DD936C8634CB50BE54C520F44D30
52667120565FDDBC8EF5B929E7E8CC25025CC87D2F81388B0DEFE1D87E55E5EF
F6DDF8313D2405BC4A7C2D53B6DB3825AB1F68C956961525A040A522A6AA6846
B39BEC4AEB509EDD54DC1B82A447043CE44E65F0C40C5953AA427F2F88AFD887
B22532E89090098FE7E2CCF20662BCE2D5515C36F27DDEFA3827C105700ED744
635406CF60DC01F71DB54BFC21D3BA3CDDD85018920ED596145FFA4AE4881BB2
F8B2C27F396692FE536FC17012A4230CC908BAE9397F2A5132D866BF5F5E18C4
30D828A7C16A81002AE7A203534C4B59FFA6AEB8533ED6CDE03DDBE1FAF50076
7A18D55DF72A18183A7BC46FD918BE49BBF294D1BDD3546C87C041F4CB911201
FA8A12EDE5C1E4E8F85C95571926E3482054198C067D4EC7D208216394F39CBF
3207DA819BA80BDE93087ED3F80509D10A4339F142CC9C0DB259868EEA52E4F9
C7D60DE556C5E2B42100327DAD6D778320D08B447474C3F504504F4176FA1B87
EECFBD114B45B5BFCF260A4A87A60D3A2A51EF5CE585706E65AB03689A919B5C
C3D6BAB0DA0126A6606E89BAEDCD9E573A2B023352069E85EDC9EEE384CC0111
6BDAA2E9ACDE3B33526C519134D67039F5C7783AE5D534E65898A43AD19F7F19
B59FA3B42A479732DB1598138C4BC529B7C62F3F399B6C371950D7E9BF1B7286
DC0BEB4A99A1B97687787E0597F0194B491D4256D95DDBDE5CE57978C4E3C83B
2EA8E01BD618F6DC6A84B1D55E39CB510D12F04EEE67A5DA48AAE4250DD63FD1
FCF139FB5958D7A8446BC7A5C2A033C32A32A07ED5BCA0C69477CC504C023A84
5ACD7021A48F66570FF7D428ED1ED365E74147DAE81C8CF706813C8B6C475264
897D400CE10373F11BF2CC709A7CDFACB4A332E64C51F4BA3F247F1E159EEB14
08FD1E8FD5A2461655845D61A535978D1485015CC8BC7CD24EE776821EFBF352
F3C98E953BFCC85E93CF209BD8B60144E7F1BCF951C4868E9C907503F6D2E4A0
9B4F6303D038DAFC2CD420E3395F656AD995121C250F9B6C1E24EC890E65F566
A1C695F8D501537ABE3F14CFBE8742AAE46166336348B09A6B156DAD6E82DAE6
860EBDF62FE4F7FE74ACA3475F21B512332BFA5DCB99A9757AFB867B901CC7F7
F85B5245D2D15DA5EDEB4B417A21BB82B82151FAE39A4A0118595CAA6C23D8D0
E1CC60B1E0CBECC7898D6AC135BFA75A9FA7BD71217F2DD2F393E6FBA194BE43
CCCAF108E10BEE185978E759D5E2C94E6710CED49B19F0DF24E568936163FD3F
AFD44CD713B9C0B8B39E48183783344DCB96E253D51C23151494DFF0DCB32726
CAA04C99BF38AFE6BD4BA971851B152DC603F1534FB37C2F56F4BD0572A003EB
3EC31F3ACA5708D2D25B219BD7A400BE3AD46912EA065022CEB471002F2694C1
51DE9D68E5FA8B3C8F4D776604B65951E83399CD558C9934744B08D45FA2C54C
D77EE5F902FFDF896FB2B71CA3284A4DDEA89E289AE344232978D1FC425A2C3D
34965F875C8304DEA4F3432E34EF35B05DB9D3356E72AB2F031EB25082796719
C3597AABAC62DB68D4A002851FCE51F6F373E1A4D4F3A0DD97C43EAC87B96A71
73DAAEA923825FDEE44CE443C947C8959A4AE126505C783B12A5585A5264C964
559852B78DA61999574106A8572528C6208AC39421108AC5F07DF40666780D14
DE79D2D8C5F73477E9F14B72007B9CA516E9209FB94A49D11A7A3E1EA0E3B797
65AE51CC8667EC7B1BED8FE47049FD1771E44D12EF033282D0E2C3708B3ACE52
9931D86CF2748A3D636B25DCD1274B609D90189339EBE38E2A8DD40A4771961D
74B39533FAAD78F695DC2D57591F77B2007639EB528C9345A08FB3D236D1C9BE
13E5A76B8F1EF3BF09F285EEFF048ED92D3D953BD70129208909B1597C868408
F57021BBF461047C7505001D61BE614E93669AFF90DC783DE6191B4A5FED8656
BB560236CA81A204105A13CB53808E0E439DCB3082E9A460512DCFEA19ED2A9D
2D30B6F26DF3306F4195D35DDF81018CFDE16D57BE07A66C6B3FC432808B9EBA
B6113E0ED0C19C3D1F09493F5E39D1CA58BBB7775CDB0652989CDEC5C6C18C1D
CBE9942830155A8E804923A00CE20B3FEED7BD0DDCE24D6A6AD4112D39AD6E93
D0047E439A0E82C0FFB537D55D71E0CD2B7FCADFCB130E3C8D0FE183B33936B4
7009CDD790FDA3924F737F85D316EDED0443EA77ADB3C95CCE251E8AF468DBEE
328B9BF6D7DAE9E1A73280CC30A10648778B2E2DCC9C7932A77E7ABE648BBD73
C52D9F9CC4136302B073719ADA7B78A3FD4E5DA776AB0EBA3BF88C1BC49F0DDC
46B117C04507616EEED91D307AA464B9E2DFAECFE62C8131D60BC25DAF997842
6478DD965B9D8C5F424594CCC6E244C61B976D996EE2900C4AAA1677A4EA18CE
93A46704E231575527B179B9C6ADE75298D261EAD103305FCD339E17526479B4
C390D8A62FC31F35D6A19CDF6D173D21FD72D09F402BFC26656FAD3F9BD0F269
C5A081348CE2747FE25C041E338B9C127E4B1E0B5AA0AC415B58F68C99864753
6A02C42031F198BC592ACEDB3DDAD3FDCACC26E2A4FD5A951825C846A99CEE9C
100E2738EB997D3EC9C309D47C87395978F11AC308B638A4C935C8D0265E20A0
D4CC2D8E08B0E6E1DC020E5778C3796AA998F195D3203B449591F1B52677DFCB
0A677CE4C139C3529B6A2C1D28C57C4C9722E0342113D5532D56ACE9AE959F7C
F16BD8A15A68E120BB0793D327C91A22265AA7BA5C9AD2EF62FC194C190E6C42
C712F9427542E4DA80DAEB9AAA37B2FD4D5C30326BA1EC4E05F38BFBF168F0D2
5DEF0CF4CDFE5B2C54A55AA658E6167FFD5603B9AE91C1EFD7B93460D35178D3
BBD1D06ABF28325F059DC2EFC61EEFC10FD101B48FA7C98B0152666207CFBA3E
921143880F4D01BDE3549519EB11906488BE56D364445E210EEE3770FC1CE47B
39EA1EC891065D57658A2C9C23AA81A2F994DC056166319AE0C7A1321DA204CD
3F2B1FF439949E512B2D301018D54EE4BD574ADF23DC984FF5EF5CBA63B1A9B2
925F5802EAFF63B51729C5792E155E77041ABAB38587EF918FAD8DCADBE150E6
C2E8E8ED84207F03AF52728719F0CEA00175E8C1ECB5410B91A61831FF9F94DF
8D0DEBBBC60B0C1C0159089A26BD3726DBB3C6D6F06543A6FEAA3E779D8721C3
58C4117B4E8F73754FE0CA8B40DBC4406550C1E70E9AA34BA22D1E8221F53805
B0873D4E94DDEE604DBCB08F6E266C635F94724C1B49FDB5BB1C6B76851C31C2
E0C92CFF820CBE327EDC0CAEE8F954BD7CED3A6048EE3B6A65DF463F2046491A
78602DD867563247DEEE8AEE3C38A896B9D2D575FA1862E4277D9813314EADEA
7667F1AC068167CE1B3F366431AE87C0C4AB4BC1164FBF23EB2C4187D0D787A4
1AFF10C36B01E1933EEF1CF2875453ED4CBEFE704853A93082587A0E788C1BA7
E9E1F6BD250B5874842F68C92DA11F5522A8406E48024F3AB48370E5CFB610D4
DCF41EAEECFD14BC8A3574D32F41B39AF17779B8FEADF1FAC6D1ABD4D268877C
3A39A79E125453AAE9FAC75299D653DAD14A83E05F7FF33D69D02627465E8326
ACE6F0ECE601B79B07B185884671D175F5D015010CEBDF244595F85A709F3A49
CA746D4F16601AAD97215EF76654CCFA8638B6970AA96F6509E4B675E76947C2
2717F76211CD865AC1CBF9A367930A8015C023B5538245F2C7E9CBFBFA1C3557
4DCD40BEA70F6073CE5866CDEBE96CD3E818555EE9271FA89B43882414FD30AD
C1A6B6D621B1A7AEE1F42E3183C7C097A52CA325F82FF35FDF93C9E21AA84B41
58613650E55D03BC679A219E5E170299BBA0F4B3C42681D5D51A18B8B8E0339E
164DE53F0F11354EAEB2413D1DC2AC88471DE2C9B544530F8736ACE9515013E4
AFB107818C8B6C191BC641A5FF25FEB234CD8B27E27FC119CE0AF2276F6A38D5
E1CDB6EB2508B4D2D35C140C4F7EFE58A9C1BFCD0EF2BE0C3D9636F498DE4FA2
7632AC5B4B037666BF07B849BC9953F0291B0F002A082EB2C23F09DEAF3C99BA
6831E2C56478921E4C0BC8C43D59D2C75B04F0ED22066811542B8E34CA83698F
693051893F2AFEDC6923AD8BECA3A7C5369311E96E941651E326397BB09D91F4
0DD67977331228E2108030378426DB355043898F90C86E90DE9ED303B3D4E9A8
7E4625E542BBB0B5D3F27D47EA2742F32B121C810226CCD80AF416C079A825B3
DBD31F593A04C0C7D6DA4920BD3F129890A70B31A7409389BE57FFDFB68A41EB
B35A8EFB8AAC5E6272A0125E8E61DB18911404B43DFC6D8B52855F04FD79C68B
02B8D74BAA47E18E2BE09885EC2404518AA49F9202F5A0B1F1F8417FC3BE8E85
E639615153F57632D193CFEB16E29297F434F30C3A0BD6BA05571FAE4F83E737
47978F0BDBD1E67FCCCE492BA5A26A100D667F68C2548DD56A65FBADF2F6FF1C
A8B8DE5934CE2EF4BBA6F1796AD56BDF9A35D10594991D9438B8C10EF37A3FAB
3C9B6FA0C248F98C0672B3C6CDC2A25584F98FE126AEC52AD93ADC934161F449
D6F8390151441FB33550D3CEA75C03148893E5C273B10566ACD612A271BD9B32
F3732E7A4E9742526F5EE3F77F4D5AB9B6680DEA945FC4E9E1DCB2C2AA2FD5DA
C967EC90E3FF7D5F751CE82A78D0E0A8D42E599D8707AEE1D3FBC520301DC50C
2A6958FE047F9E59A01FBB29876A64386E80067FE4A24E229AF6FC97AA35B076
9DBBCA29719B87611F6E79175A12AC9C3325FDF682488CDE080D9F71997BBD9F
88E75810632C6CA8BBA99AACE0B524CA6B3611F7BD57F65AA02F0962E2E80E76
60A5B914E04456D9009888662A8DC6829F4B896323A364BFC1ABE246DFDC900A
BC2FAEB0B8D1C26998BD6C8113EDEE007C357491BFBA0CAB50551E1BE984C5EC
7CA3EA2DC880335E0F5ADE7A5F7E674B9EAC2F991DB044C92E7CCA68E928E356
FD312C233285B2A8C8C3375049F3BC5CFF762C0398CF5AD241314FA52F06EA0F
31BB7DDEE98827625F35F9DE0709F0BF513597B4AAEB7EA25CA376EC614BEA4C
2E683EBAA63BFDD371C91972C741F526E3AA6FC93AC8F5CE97D30ED34574EEA2
B17D24EDEF006895D575295B935B4786920842ACB51E026B7ACD56248EC5C011
23EFAC55078A88932B4AE47107CE0F8F51C1E63C2030B1192177A4DC69BB6071
5B43FD74F3CBC2F74E11180CC1AFA2FA3EF0AD378B858F4DE9757008CA513F8C
87AEE31D493DA7F0C95639543D32BC9D0CD5AEB82FBA9FE331E3AF8DF54BAD95
A08EEB74CACB293FE2380774B5B39CA3BC1B4B26B56B3B8750FCAC97BB06FFB2
9906CF1AFD8156CB4E65D9BB17C03030BE87C9F1E5CE110CEE6B46717CBA2DBB
2158CA8958FBE10E023B083A73BF7A56424AB803C274753444FAEA7A34B37E4A
F607677E6008BE68A14AA6A82D7D7567BC7A6B50518DF172C2DC0ECCE2408EC8
4F1DA0AC32DE20EAEC387193E4B4866CCD633546198444E417AFE89580D6E9EF
0C868457B5C4A489751BE96AB8FE3E73451C9670B59D9BE74D3C040A37D9E595
009C1D9677E2BEA8AF4669B9F4B6B0BB2844FBA68282D6E5705A3DE32D75A6F8
C76929BF56986B5CF81B81084BAE108865FBD8A79E6435D41BD72BE0E1E4A12E
DF3D3E6FF7A05EAE5D6D8EFF268194E15B119EE5251103E56744B4164861F7FF
37D89A47251F5B90A8BD1FFB3C6940B4EAC496401D1461AF304CD788DEF8C49F
DAF4F610635C0F03483314B5B162E9AAA64CA5048460E12E194490A4C13EEFE9
E51EC5C12CD1CE9700F4262663EA216F95EB20757D231D7D0E3C839EB05C8F4F
8172A5BFB45363451A7835400C21CE4721B2795F303CCE4637668F3FBEE33123
7AA07846A35A0C2B62F1D49B407DE09DD4E82568468A8F7E308918A4F03F630C
7EE7DC33FB34A9D11E741963EBF47302944B8E689D550CFF708E4793636E5F69
972644E9C53C65BDEB9A95B8C4795158D88E4D371BD41BBBCA05ECDC0F7A525C
0AB157DD280BEF899783467C96A1A6056D66E1F57750DE134BBE7080CAC38862
8E189C1B968A02FCA016B5E48D1F7EB17ABC748DD2504CB17DF504DB3E7A1BFC
68C27E0637B85DA3C9310C978EA12FF834818FD7B9E42B228DED1B4AC42BB3B7
45C7F7956246A0BF758D7B49B76E682CD90A79428D243AE6CAAC763D25AEFA62
577ADE35009EB3337A4DEEC948584C885CE44FD756618264F76C76DAFA8F7470
FB30AD9B4BAE1EDB9BC32021353F370B3585715A76EE63372242D5516303032C
CA7A86B9C6FA9DE9F6CD6C817D32A1564F1EC6F665610F7C8913C7A3CECAE07A
B541E85B390D567B3941116088DFDEE316ABB0B90E9A3286A89E2617993DE320
6FB8D35C1AF04A75FF895515E69A426B5DAD619C46DE3924DC9B4C525F121AC3
A867B0A922D504278C2E3C7D36986ABE325CC48A97636CE1FA985EE74E551E4B
D4B1E30539492D41A7BF4C06E86C2F4E782E2FAEE4EB9B72451FA349904F0EAB
C9D0D927CCA69979619F9261254E37D3D20775C5BD724447CF35A448037ED5E7
2DF3175DD6713E2547EAC2FE09AF84225F8E35DAD8E6092F820F106ACFB231A0
DDAAA2FB8ABA2768E6F55E8CD7B85F975DE7F85D686C7E96E70CA15F2ACC1192
E8C6C5599A52096B79597949AD2832DD068CE9CF506E448C5466E207853B5040
B88F802CA0228A366E11B365424A79EC9D3065564661C26A8152A3119BBBBDF7
A131602175732D52AAB614956895DA415301299ED229962E805BA847A7B94527
9283F0EFF5D6069BDB9E884339D885C056971F3989F980B32BBD92E070B61FA8
A0CD05C9605BDE315365CD05989D230669085CC241A03609AEE59FB463B600D4
7BC974A57F3C9D15286E6667AF3195281E7B09773713BFF868CA9FB21718B45F
1D7F03B11397DD7E1FB55A706336ED138DE60A4579469F034315B6CAD18FBAFE
89C1299D94203D19A5409472AC13C924B7CA4C847B5D96FDA4FB130D0D8C5F6E
93001D82B2BA1A78EE28FD1B2F5189373A6CE01F971CD59EA169D1A82B924EA8
A3E244FF1E7CFB5DAB8D156EE257EB71896B04643D6ED2FF7BDBACD21613127E
9B278ADA58B5C98BDE490F56F8AE44FA5D7AD083BFA93A2265B5B329346A5FDA
BF5B82086986D540120076FE5F946750085437F017D0DBD70DE1C649D036DA3C
C6C1C3999BF52D21EA155D1ACD225D6B6EB47F525003EBC0DF16A5AF5A64DEE8
D4BB14F20B231144BDD184042CBB203B9400C83A8C3790F18A87ABA2FCBBE60A
DA11E5320CBBF647ACD2FCEE4B184E4148C46F02C7CDA35C1BB12135A0A392DC
A6FF12D4D04BE39DC886F318A8108A68A72F62BC7656361C5FF68ED0A8F927E8
C1BD16B6FFB4B95674B923D5515BA63C2AD07E13F93391F249A6100059287A3A
4BBD8FDA7111358F429F9299B9816C63AFB0373840E32D227A9533571FB18A39
F7865FF0EA1FF73C43D4FF3B0D35CD7F63B44A957310BFBDA2645D0FDFCC29D7
36A8E92B55B44A26EB148E00C2308C8044260A91469263747A88BE542A21AB96
CAE8096539ECDA3A46671ED161ECA048A99A061E7525EEF4860182E848E6112C
2248D570287637C40F6BCCC8DEF11001EEC0FA9E75B1EB9C13A19D55BC8A10A1
898134386CE59B1AF384D87574DB7A197944E1DF015353B2F30BE245C026323F
15A881F6A6354D5B65CC80202F13851A7D82EF814BD40B65105A477D109FCCD2
B9B532A58983B3AE56B2D405F95A71BBCE369CC66B827E186105D5B8A7D22AA2
C6869B439A41C93CE33C8558AB09F3222D0E39E789D0453701393BC854B5BA4D
706AC27C7A12298B50A61BF268E5F5856034FF11C0B0447204EC7677AC7FC481
EB8EA797BD466FA0311CF87A97B9BCFD367470BF6C893BC5CB71AB92E0198F25
351F461F14E8239881FE220515A0EFEFFA41F70FFEF69BFD30535F2F288CE75E
E4E77BE6FEFE7488F947F054C087D635C53FC6EB3DB3C64A5349124A5B324CD5
B09C3AFDCD77502147E871A19F97617B46245B399647F631DE208615D577871C
C66747E024039E14B7EF03927ADD585F2DA9A244B9FA54F09D3BF2C8B414E673
1B4BF18A5D205BB428E0E52396FC944AB609F75D8C124CA31D478BF53F445082
4CE858F76C4FCA32C8923883CCF6FEF01A3599671C1DFDFE4189FF268194E15B
119EE5251103E56745640BA5000FB61EA25E1AC2B96AB6B0BC336998EE8179C7
C682B4EB6C09A17BF574855C7AFEE08C99FDF1EB77AEDEFEDAB18C6C44109AA4
675DD752CF31CB2DF8F2762BBD552D190F233048751E98D67A1F3D5558C740DC
C455FD33FB4E7F6110695C665F4569E46E8753CAFEAA66DB00EB4AC62F92DAAE
1B4F0C511CD1C9B88442FBDD83503D1088C28A4E406724C8F96C8C3D74916E4B
587C7716350D38C9B30BA656E0FFE2322734D7B78951F2633EE6E35B99FEE022
319734564612F5084EB660EAD9D48EA2C207DAAF55A13AA3C1900ACAE9211938
25D5A6527C3258A2DC860CFDF0670BD558C50D3018716D4962B753AF6BD10026
1A6CDA280902D3F7BE54C8ABED1015A6B4E5AC164AFC424538380653F58D0B45
463F053E19A16E5A1B155402372C735ADD783E678E65685700673FF03EF2A3B9
7E0311F29610D46DB4FCB9625A8607786064099C2AEC2D5C86E975DA6573FA87
D17A7899C085884970C5974D02C29BD9A28248013806110A9F43A20BDB91831A
73213E40FC846D4472890795EBBE6D768B8753748ECCB9733909E49F365293EB
C04B795A7BC27D8F7F0D436E363BF274A156064B30A5E2B42EAB06B61675A759
7217D38C76F5B755EDC7CF90EA664DA8CECAA5A4C542FCDDFBB18243566DA8CD
CD400E15638125C91B3EDCD55D6FB23F76E486ADADA8AF511EC5FE35702B8E34
18E15D1F34ED1261A36005E19620694E61F33BEBC1561BA8D526E8D6153D0E13
3696325F12D8F358FE7477386B661F85EEB26E0281E13EE25EAC08943710FC67
28362F74E991B6431E34152899A64AD5B39671A800C03E0409D8C56211C6D288
042784813CFB574F2E83E071F772638D3F81F06A1DDCBB67DCC6682297893A36
8BA5A9DFF116745442BAF3C773E6A0511F1AEEB7C89E41BE09DAD6EC3FEB258E
B09314601899DBB949769961BBE5B3C8D190D70B5C34EF5CB906A67A8FDA0AC6
44690C2E5727B173B634F43082AB0165E7496D981164E30BEC74E7B13F7A2491
9EBF34D6958BC3D6DCDABBCD01C3AEEB17226746EC48C5A36A3361D3A25FBAE4
BF70FA6601D509BD10584123AA5D451F5B002C464E1D5DE9438D984A8EB9A97E
7AB80C1F3A65D1E455A4D8FEE85D7A927412507704303CCE28144704BF96D1ED
6BC4FE435F9F60F2F5F9F766F2D67CB10682F8DC836C8D0AD1382F2BBC9ADCD4
3D91FF298B4800F65149609F4EE464B575136F7E638FA41912F8E260E1237D37
01239205283CE90F642513A6BBB6D2D066094A0B9FBA3FB5F7E22F47A04DC4B3
AFFF66E141EE43367B2619CA6F3E167289BF0147B1F4DA24D326317DECB5C395
9CC2EC7E9A2B6F693442B3E3F6174AA731CE3DD27D79AA1B89FA400DB65784D9
85A28E0C537E70CBCE27D9AF179FD6BC141B96E61C586F0D45D4AD9DF6BCF9D3
2194783748DB19C5BFE3F72187D83B605BB1D7F48BADB64DAD461DB208B1E2A2
78771E9F553C32A0621D6F3D39D572DB969DB775070932C5817C8967FB90B0C3
891A934D8A83B7C31A0EFDF6A3DF6A13BABB9017E6E778FBD0D5380C7BAFC986
0F61123B8530330FC13674092C631DE215B22EE9C0FA967E7A4FDC7E3D38D7DF
A9B36A1B7C228958EBC2EC96215E0AD9F9D5BD03404C1C5076FE8915527FEC24
F662221378426488C60CE72D539751E161B5EAB590C0A2FC62EADAB69CED2051
FBC45BE43685B0144AFDC37E44419E41F68358989E2F9B20B3E47EEF53A72740
F3FDB414D3DAC39AB19BB8356D008ADB9D7A370B50363947BE61EF14D92C2A06
731DD2B88037ADDDFA3690D454B0495D17372B32DDD7D974F59A929CEE826F64
08B061F658FE0483AF93D9CB22452D028F4FCFC12460BB4F53103F1F59D889B0
19543020BD4FEC5DDE07343CE59A4F344E371AF8C3D3CDBE7A1E0502211ED33D
EC377DF9412239177C54A8C468715E57F0D9B8D95A4F6D581CBF4433E65495A5
5A2B575B385F03805E21459483ED6A04D1DAEE7D239604B5D6C38D091A6A6C3F
15F3C729AF6A6C7DBAAFC2E5B01BC9D5DAC2DE1A980B02E56CECCF563782F867
537489CF3E7A7F1CD02EB3640D5A65E2232D4718C154618880B4A972C7F0494E
86892062ECEC0CF5D10A21CA8B7440FA739ED8794910AF36F70351F9DA69C9E7
D7C73251037165AA10A1EA48E055AE8A5BBCF2387972E2032E7AA02C5000002D
EA8F0915B82B72A98EF2FE73BE1C676D2D239A3293E51B719F2E68204143BE17
E8AEDDE7A597F007897557D46706658418710D33707B44CA074E759E81FAF741
8AC5957D50DC58DDF063382245754FB9E2D79AC4B8DB49DC3097C4647D528358
12AD051FE81BDA089AEDA778541EED65330423DE1F7C66F89773B122EEFCE400
FD25A2EC55AEB085C81FC8B3B4E0CEBAED4B1932FDDF008835EC5FC17EEDCE94
C8E4AA2ADB524BDB04A71FE9C3D6B638D132A8C4562DEAC3EFF381B04B33F690
45F425B1060680505B3B45685EF7311DC3ECBB053C14A80E40AFFB2EA99508D3
30C80A29941CCBB52FC71AEC1836F7C56C60C2DB7386755C04A77BCC2BA9124E
B94C909FCC0F222F1D3B0BEB120E320A28F58220C66A524B37D72D32E9740AC9
84028DEAB1C5E8F40682585F2EA2AD093DD441324D531E3E57206DEA6C7ADF13
4CA24FD3DA940C40FC72BE8D6FEF72372CC051A9D1C2117BAEF2EE57874A7345
705B70BD772B094505660BBC96D6C127CB71E6A1D218CE21931C844158BA2018
A393416A86F976D3ACD856CD19A515BED3064BA8187484FD96AAF8EC01EBC403
429F54DA01E2EB6615E2C3D6698C1656984DA00263F9FB6D04779F9E334D4068
081DCD6F1C2845F973870CBC0452F6F0FE8692660DDC536B1A6CFBD3FF85F3A1
9AADC3AC9CF35E419639FEDB3011FA91877F03CA78B3766300D49658363DD182
0F177CB45CBC65A442C6785143FF123FE5CEF55EC0A210178F1A1BD07C4A6944
E9231D2A618001DA92BC692D09C8939B5D6844AC8284864E08ABEBC787057179
82C73874A4CF11D2E7FBC044DDBC29CFBC517B5109CC428AC71A76D7A8E330AF
1A5256F5F263055CF70CB228FCDA8BAF88B63591D81401072CA100D46D3D4472
C66C90D862E37F25C54A336717062381E8B0BBA4F2A138688C3F09B1DA0F7070
7F79C02978B271E2F551A9032A061769D4E0422521B489F527B8BFDDB658A581
597DC134765EA8B82B367C68050C5283754EBB8F92B8A27A2DCD20E367A13CB1
CA23A3338188D83067A6B43BA07C94F474F37399F0CDA54CB9B98A404BE2B515
F1F3750B8A5A14188B3C91D6970E78C2265000F53914FE3BC8956D01BF8AEFFC
9CD2638D71FAECF3272BED22ABEF3822ABD9C1D78B8AE3B5A1370E48987D8735
7EB83569C4C0D45AE4E8D4C4006893BA410B91A61831FF9F94DF8808FFA83BD9
1C8D697C77307D48B04CF05D96B4EB6BD4FEAC5861C134080D23859E74461AE0
5E832DB6EE7224E66D6241D713E7F3AFF2F53E731E34969AC9D5E8459680BA92
E689F419E5AB22F9B2C39B564606B5A4950FB845C7A197428482D425B5BD086A
6E6B13A6729D11F396E3C10C829462604E0EE010756E4F53F646499E56D97B18
2B125B79181E1C7996BB25CF1221FB642DDB69B031697B3725D76AFFDB4A07C8
44C348B6FA47CC5CBE43371FB1E03E18238D134A96B97D7E89B5C611F6657F47
A58399026F6D1ABDC3EBF6854817B13468B7728F19CB811526561FE82FAFC53B
4BC420EC7D90299390CF339377C29EA87E82CCF7DA3EF54594BCD74EBFF9037F
7F8A2831CE023F28908B95F1B879C4902FB24CC16A8E9C17BB7F7A947B9726CE
6476A112ACAA530F9A4620210124DDD24524215822454A464BE1FD223B547084
3F85B6058877F205B13413BF08C0C59172E02ED0AB934887C30271CC1A18692F
7ADC38D7A958F1BB37709B94D8D065E823BCEF512B3BD9630757B06C16B14A0A
561D0BEBF002BFA66A5FBCA0F3AF410195B67FCB78FFAD6ED25C00B159F332DB
422FB63E9A5F665DC054F4BA2E32F7915B44887471A0CED5D7215F193155DA40
37184EAB35C36243E79654FE8C6DEEDB75C1B29DDA38C6BFABD3FCFF31ECC535
EBBD0411E336869B65C965D6911DDE3754FCCFE888875F4E3B9A8F984CA1410F
467A7B7522EC6B606CF186D582DD972FFD84346764F058392760F297E2056B7A
FFFA1BD2CA0812F5EDFFBA53EE47B677DD6144951067DFC39351F46292A5CFDE
CEB90B5ECD23C4DC98C2BE49CDD569DFA3CC56AEF7091E907F5615DF52524F9A
1B9AA895F9E3481F20137FAA0B7567E021769788750B156839879F942AEF374F
B9B9FB692B7C63B4FF6F960A4A3D0225B4FC1291D5211507EA90E837F763D0E0
7C68A90D9E3B32D368C2080CA8069C6B0CDE19AC96426A38ACC24B14EE538859
2BD478B2CDA10A30C9A2017FFB5C007D08F39309DDAE748901D3627F462489F2
0E18CC4DDB0863CBBF45CED874A9A6E65615E8F2F5A518F7EC78F58F9ADC7204
60B2830C1028E059DCBF966220B22954300D0627A9337F7B3998237D6072FA96
995130D80A8AF5EC9E2780604DBD8FAFEB9B135E507C16AF01749ADCFAEA5795
48EC1FEBBFBA68F192A0BEA05663625E0D1729D57D5BCC095B22141FFA8B2CBD
D01DC0EEEC9B46390D6650B1A56CCF03BF1768EB1E716FA25C28AD5DE5998230
8DF23C52ED0E7C42BBA782931B1112B052E13CEFE50458DA5EEAE35BA6C6B485
860B8E54FD4BDAEF7015A54DA8B65092BE5BC1DC75E44DC25B778CDA911E1FB9
D8DCD65BD337CF7F1EF7E8549C06DB3ACB64D084B1F6286BB3C575C9F162E264
173FC1E0A08358E659C567C236B33E28E23D30A057AD12998D9ED347AFBF17FD
1662C0A505B332818693CAE830A3A559C0FC03E9AF4D413462E328F712C5FA0A
E5927CF58FFC7D9997D7D9F944EC210D2D70C43BF5AE52868E29EF36598ABE85
C1808E14AC9DEC1A6BC63F131CFD5A01A28355A04AD5B935EE37535AF979C259
888E84E7BA690950799B69C16C3D98BCE3143A4A827F1670D61AE932EE25872D
6612D60E6ACF32AF50A4A30B5468BDB2BACB4764456B1872B348267290DCA05A
7F623772F3219C3812F3D553575D05E82D1C900999534EFEE246CC8ABF727725
DB5559745C1B48A50514E5F9B42A428ADF8FFF148CC888220F9AD64FBD48A7D3
76666EC066A1DD8C3B6C872CF49E63DF8F950046C1C870D0979982FF84A8F8D7
D848DCED344B7DB4410ABB427D8170E557AC9650F240617F3C3E65116B65D085
F01F7F4F7DF2DE491D4327DCEDC76EB2F7D8AE2D686A31C083B59DB08A7F94A5
68BE67E75F5BF644DF416C4145D74AC511349027F6E52932E7A5987E17454D26
CED4BD0DE697E7A8D9C1D067B2D0BC37FB4FA41107BAF5BE9EDCD50643C34C28
5D24D04F76FF8D5429EB3922B9A5991F3992775C11175226BE709EFB0F4A7A8E
2377C10F82F62091F7C2A543C7128175F3B2A8486149EAA790D206D5993EFFBC
868EDDA3D919296B4107E8E9F85A14D0C93740CE11CB575C5C4350076231F595
D0FC19580B1B3BBB70F81B68E24ECE1DCE8E882835D9E8B8B47498C7508BE128
D45AFB4EC3F6218C0ACF4D67A27236EFBC0A1F4994256647D89AE3ED1F1466E2
0AF1D9C76F37F4E3C9C87FC36DC5C031155CCAA7E10BB30E087CB8522421E01E
07DF5ABD62B5F57C35523FCC5782181EFC609F1046D9D87286BC32128A4F3821
F05D3A4C7A1234CB33B3D96373017E383B4CDEE34E63C2F96FC12429DD4A7BB3
92A8C05B2406BF52186515F8FC4B19CB343246C6A83BB5FBBEF214E41EF7B0E5
2F4DB096D59E1D19A5297DD32E85619ABC3BBF5166DFC02D06AF9A588EB9A63C
771B1EAE35228EB4C13EB317F43B7E5ACD5C32168BA1A7F69D00334A7FD588BB
21F5C724EE18B4CF00F1D315107B37E241BBF3DC929976620495AA1C809A49AE
D17D11851CA150CD78C7538F6611DDF7B602AFEE9170EFA8DA813C474493ED54
6BDFF1B63295DAC28E0F7696299388A8569DFF634D6B937F356B95FBBC722EC7
104E67344AF67CC445BC97D4E9856A874FFABC5D7712B0510A464CB97E7222B9
354FF0F39D2B4BB0912D0F72742C5F77603A38356AD837B7D4670A0712D00E3A
60789D65FDA7437F61A670488FFCCCD924A8264F81A274C6C9014FC16E9D2F95
D9545262A7D4F822CE368D7B60C14E35F46496FE045D0E6CD0330172F444999A
27EB0744FF5D22A42C6012D5C6AA4E00565F5E0D114A24556AF0EB09EDFC000D
300A89AB7BD7F84ED5E351D2D19017713D1D0A03FF12DE470919EE3B6960DA58
5B8133647A070B896C45B35BCD416A61A74DE02D458A0A56F584914A9B26145A
82715F1ADC60ECB22CBD521630BCDDCB829EED1163EAA741B940159BE5DB73EE
4A7996379F9FBD403DB05E19BDD8AB473CA96CD4D6C8351288BE2DF75F4D7583
077CB033A972F7BA6403F9CCC640CA13DB4C3C635FAC76B4EC621B8FA418C14D
03EFDECD245F415F1A2412CB438AD5FD7669037AB2972DB5E7A71FE2A5A189BB
78D6844B263A31CB7EC7386615EF11435748239B5F0A08A68C3F63D7B20864D3
58FD5E790775A336D44657696F456BF4F45AB20F3A65FA40F4AB8A596E16840C
D9872EEA4033346DB5F7C8DE017F854BB5ED091792E66AA460FBFB8CFF5F4607
D5D2B50E8D5A8B22397559C932807A8B7322EF24A3155F705B7315833A8ECE29
430BE6315D0F084E3FEF0CA77B4EDAFAB8FD7F4468FA08558C694F8D6621FAC3
EE1D535B3C05F172A0140CF886DCF22DC57C12124D828EE48D9B51EB928A7CA0
0E295503308FE8D4E7F12474200F51D6EB12356414255DFB7DC5E4321394D04B
46FF65B78C5537BCC58364FC3042618C886C1451B0EA1241DFB651240EBC3921
45649EFA9839CEF544EDB8B1FB5A053E2270FB01A358E166FA508EC3E79DE7F4
E89D2BA9E2AE0DF14BC107DC85A08612BAEA6E245C5B4E63B0D9D2B81B8E6D33
20400D27EFC75DB24E1F175C37CDDDFFF4A701775B73EC338BB696EE56CD9C81
EE9B7FAE540EC8C8A70BEEE38149CCF3DC9802E4F47C756DE621B6AD978C3016
F636B776146B7E24B79DD8F81053D1519AF15009A4000B4B9D72D8E9E0367A85
FC7BE716C87EA42B671479E381D67C48977AEA378D626E8E33907DC7AFCE5902
196B13C999CDFE1E4AD1A65DD0AA3F39574FF8B51197DC09C6F2255FEAA21424
65D9DA1EFA0216CC70C8D3FE2B8330353DFB3713FBB323A33D0A7D29678B2109
8162C7C5A63BCA44ECABACBA31347AB7664A9B1CBA1470123F5DDF682D739260
6840899509A139917F42865E788B001525151DF0CE75EB45EB19C92A47F67D05
A4361D65BCE702BC78402736A8184B983481AC68244E65A4FB8C6226D9D920C9
64F40ADB33D541C25EC7373D9FAF1595F2C5FDBA6269AD98629BABA5269E4C34
C4DA396969A1AC0B040C70EE28436F58C87BB44B5C73069F24CA096BC11F84B5
D31C4CA474704F40A881C0D93DC86D640B4B37E3C51ECEA69460247283790E8A
B9EFE49E08806DB6BDD79D141FE7F66B1A3401FF931B7F45C298104D7B41EAE5
1BC9E623F5B6AD1AD9BD47FB9A9A44B9FCD0CA62FF7A8B91844D8BE7FBDFD1C5
DAB5CC90818604DD60A6B2CB995D0C5F47CB7A4559F2BC84797C1FA167BA410D
722F6B626EA1B374DFCFAB2A817D52006A2135701A32726FFC6BCD6598FB9B82
8DAE7B47EF8F5DA36DECDDE8929B812540D8D048F968D94D1DDFF1B236117AB4
C9F0EBFD090A6F499BB619C89AEBF45449E54170AC81F3FAA0C58901287D24D3
676A8A4A47572E6A56F8C946E885B52BC7F7CFE35F96B6113FB0E68B14E89DF5
7E28370D74FA16940D1D4F78AA9B1BD6E4251FDA37D7FEABE9539F7A6FFC66DE
67596EF22DAD8F30F316AEFC5099FBA30B7BF11E485DBAEBB2B1F1321E3300F3
A5F0D7F6BEF44D66D6ED859C9CC631225C540B433BC5CF50ED4C8B01DCBE5D13
E5EE33D1B0C78C3D0E21D8CF6EF2F4F742DCAD53BFB90BF9427FC20811BA2A63
8F1379E15E9DCEBF822F4437FDE7DA91BB0DDFF5DFCE560F0B69250A7507E5DB
15A4D2BE5C1E1D0FE4B57B50492B42F7E318138A169E6CF96276C0667A87347D
574137A28987AAF4EF7256454564D01FF91C0B409CF92F257C87AD1B27D2ED60
F985B79D698EF0B958659BF6BD2B9FBE58C28B5FD94656CF7540BF8881D58626
1E4DF387433861D5529658CE1422053DCE50F80783DAA16DF9BDE9427E506C51
B956894A93C6CBAEC838FB9FA9507A5F60C65AB76A03B9F9B031CC1408697440
97A60950D82785945583C7093853FA5A9500CBF5CC12B3788AD7CCB6BC77F56D
105CAC4E0ECEF666813CE73BEC59CF005BA54B400B17E770C12B8F6E7AADF8A2
899C3A55561068638FC60BE0852196FD6D5E38A141FF0F14DA5DE1F69842D324
6F7E1226218B907E367CFD81EA7F4B614A9FF7AECB817CE5932DB993F50ED58D
28694FD7C2CBF7BDE25D2996792AEDD22C2B5357CFE8B88AF311D374529894B4
91CEF312C96081A30EBC570BC69026732956390EF99B8C3ECC6989BDF46B343C
084E3BF7D21C0E1A5364CAD81C1BC920392A1BEBB98B4C52F691C0E3572EB622
76B4525B91187BECA4776C36761C551206B23E612E5FA1D8C269A10F04D5A9F9
37AA8FC98FFFE73076F5554002039FB77624D31228338638103C0AE822EE98C7
54ECA00766BCAED6A01343C12C6806CD3F834DDB8F530C9F27B4B780BE178F79
7B526E591DD856EBB4F983948F6771AA83B225C9827663F979255E0AEA4FB0D1
10BCF874D9202B74951E713A89AC40D407E0FE1F9947BA531F3605D24AC00A62
31F70A4EBCE6427DB7BE2092AD7836E96DCB05465D9E75B0BC07DF7E8C5CFE5F
54C051F902B40DC139CC55562CC160451746302B6113E3276FB8BBAFF412BC33
067F3E9CA653619943A5A314E3447FE7361AABE16BE8F8900E978056C7A3FCE1
D172DC698A26FE59D64E7F6E166C6ED9EAF3D0A236B8B984E16328B74924B6D8
F12C9D750995590FE10C180B890C3601A63798998CEB520055F857F216D3595C
15DEDFD57F0FBF7B30DA26900A7B67629E91CD306DB662A3EA3F88FEC4DCF268
91333C2C65D8635ED22EE7E2132A37D8C25950627ED7D27BAFB0F8564B6A937A
3C7E8C566E811F8BAD6A05D855474CF6228B423BEDE4AA639D1522D6F322A73A
5C1CD87C670B137BC119D107AEA3F335A8D802C3422D9F635C64CA72B7E24D65
6879C6EC2ADA4C23A10441A5F77395AFA43528F913E491CC31F592BA90D9DC5C
3457EDBBBF433D19E4A0D9B0C13EDAD926EC1DDD1D85071E5AB0A59FD0933245
E7EF94C78CD0477B6AB0D48416848B254AFC14249108196842EFD139BCAA61B6
A2A39DB16604E01DAFCB6C24C2035196BD6A2ACE521D852383082B643E3F9FAC
205C463214F3A89FD2AE31BD71FAEBCF8F52116E41E6E7823723384CFC7548BB
61C58DB1CD53B6FD886D4D7E0986142C6B7E09FFD8FCFE0AA242BB925A944C7D
75CAE7CAB8B87A0176C74ACC363052B757004E7A06E80002C78F3E1A4B87EB61
AE4C5E5F17D67C3C9B3C97015AEF53FC7CDBEF89BD533DDBFF123CE03E0159F2
08CBCC4EE7313FBD350A1C43A92A59ACEB368AA2EB92BF1649BA32DF69874292
48EE52F0D2394D7E60B73898284136849172E02A4529D904FB8FCD00E01B71DE
6754D0F906631B0B64674680AA7D21EFD5013FA072AF9C258C1B159B81B24FD3
4C290C66FD18CEDED7B3E6DF45C68983AC3366D56959DCA19D3D07D7A0682227
C1E86BEA953062052686920D5DFFD05D8C0CD20E426E99F91550C1558EE3DDA8
D3B98B8B635259C72E415AEA66AD93CF1829AC074DE33D5238AA8E115DABAB62
D7D4A8847C3CD4345C54022352B781C23378D24733626A72B76AF7038BB0E938
E9095C299F90041A97788AB74F24AB355BAC44B27A1529185F1E5E3C70127E64
75DED6CC21EC99D9BDB2770A9A0B1660C7569009DB86467D5668AC44369A6485
E2FF23F8978F3BF736C9C59944C58B26AA0837591502FB09A98B6CBF30EEF2FE
FB3E0566265A583A3A6ADF8C4580030BD12B42400E807AD74F4BB06B7BF66257
D212AB409E88A93990F1E13B4C1F3A874632CCD0E51EB03A105692F40CFAF005
C70DC20FB01EDB981293876CA218AB62F6FA0C3E46E599A6DFF8E143575CDA08
AB0DE2DA2D1F1BB5C30661A45A7EB31CE9B8DBDE94E8F3B2A7B72C8280A7B688
597DE445F36C4BD8E078F8A44B8F990DE44BA1E1C1D6D9ABB3C22E67524ED66C
5E8A9D0110E23E9C3C9146ECE208BA9399CC447310A9EE726EBA168BBB8ED36C
DB002C9FCE115FC5ABE367D2BBC407D3C5EF5A3B76B6F681A7D22447C1859118
DC28EFDA009384A0AB3E67DDDF3E1A902324FCB9CF47A8FCDE5EE082BABA08EF
52F2AD6104526ED9BAA61057788C15E4620F3BD0621E0937280D6ACE0C403C66
282EB497BA9BAF4256953EC6007BB87DED5B26CCBE3E690065D53253A0DC07DA
D9BF1964D112192ED6E9A2A11338106B5D251499FB51E4FDBB14393D6869DAC4
F0592F2D993C49F157E1D94320FFF131497E4BD00EA988455144D369FD2CB04A
B023DC5F119997987AD988610DAE2B71B018861692CAB7A7CBDEB48605F92144
6ED66A7A2849CF43A55332FF9F08B1F93E1C06F3809911B72D7626299FFF6455
9C13894E3D71D413777C33A00C53001C3B39F31A28EAA8F9BE17B529C3044DDE
5612EE4203307CD67941FB8D5C43E51E25A632B577EE594CE3CC258559F7A8B7
9618694949633013B8BD3A272434C9C900D50C652850A7D13516A51921571D89
3C378A50F002BA18FAEB6D84243E8A224BC07377C63DCEF0336257042C5944A7
0882C29FF374DAA279BAFC704B58385D01FF0F83A081406A3A894D5D108B4D92
ACF6F0EE30BC3036C340701EE839F59A3989F99CBCD9966730
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B30BE5C2317E1F248E6BB90C96AF331F
1AE9E09BE98DA43549978DC40300C155FF23FE7E929A8F9CE53FA3362D872CDB
A530E9795CBEE9CF139BF9C9BE51D592FCDED2A7CF34ED030FE2D062F82755F5
0F709FE46B305D0E415AFD2F387D01E4F56E5EC1E658410088780E87FE47F1A5
099B5ACE61B6E0B11BD3213AE3A0FFC36F2CDC0B9208993B7603C32AAFE2188A
14C9BD02E00781EB11E645EE3D17F68522565B2C18337CA874058BB2EE434E4D
FC12D8BF41B15DEED74673E723941D7E36464EE10D1F8B6AA8EB218ED826EB4C
C0F8D784595B21458C652A5565D96CD38B900F1C10BB1554C29427A8A08B45CC
A30A2B675946BA724F69FEB1E8FD7DC1D74BDEA77930F422822BB15D1BFC89A8
50B758A3ED81F506337B1557E44C36771D1B98B283537FB7E6C9492C2FC9F5B3
B18C4FA5BFE8A5C21C4225D3BF187695B9223A7A68309E172EF68851B36623ED
66EC7FD40D20D573D3E49345B301795BDB2CABFCF6DEF2C5BEC067188EC4CCEA
66FF03751A4D72847C0C1036B2DD83C5BB5CC6161D7722B3ECAD7CAF360CD271
60927CFF10954D7ABDFD2A4E3D180A2E95551CCEDD11F7C39B765BB942E979AA
A1DE3496DAA9C5D467ECE84CF7A8C288F9B22E0AE6685047D8BE0490862633F8
0AA1938F0353103DB83CCF9143F3A1A0FBACF79771B4E47D07EA87335F94152A
9A489FB0D44C754711D99A68E296DD3E74E0DF56E079235A8B3F5027D8FE5FE8
73E98EEF621E059DF969C14E19E1CB4F724C4255353C360C86120B9AAD6ED12E
84BF467E3DD9BF067F4B899D0465B1947B4FEF575F9FD4EA6464FD76CA981971
FC1FCA1696C5E500BA68D9A5946F30D55B2DFF5F12B27D62435D4125F8650FEB
BFD6AEF4729420162B4094AE3D46A7A0632CB1FC6C0B9B8DD7D5577A3817FAA5
F63B7662AEE60C8814A5444B86A8B105A11F03BB172262FCDED20332D08A47FC
445793737BFCF9EE4DED1841F703375E81298CB839DFA36CF38D402EA54F13E1
BC55E4A886A429025540834D37616752C6A537066EA86054E2297F55DA19EF3C
4AF0792B732E0275463FE7D54694BBC79988F265D8CA0537ADB9AE6C0F17BCDB
C1E184A7D19165CC49E6FE2CEDAB759AFFBA148E10679AFF15716AAAE30C8852
BFFFFCA18D388545D1AB2CA54B8B45DE7EDC9E069DFF2954D25F90577FA20F10
C6B9533D73443CA226A51290FD66CC9641903812C6983B66EFC75C03CB6E622B
8AC60B87478148F89397AC08625C202E1BC78C1CC799055306036B5D15BB50FC
748922781E241F17DE84A6665F8C59C1A206D6618B3898F13197E3095653A58E
E9886537F04A7189BF93744090976E82EF1DCD01C0AFB995E0EE78E8267D2EB7
3614075A5E8D8F5536CB273529A6D62DAA971E731654205640F2D4A431104ED6
51002DE3C77AEC4A1AABD131C4DFF472DB837CCF74465BA55CC64070AE2E155E
56EA643519AFEBC5DDFAB819B477F9AF7FE6435507EEDD1F3D638773EFCDA3B5
E0F8065ECFA7E98E225D4B1ADE86D4BAA1755CAE67E4B12DD043ECB0CDB6902B
D6E9495DAE0A3681F6951D83720CF1DB67EDD3D6CDFE2221396F2D15F5D60F27
A49EF923002CEFA1CB9EDE40AB003C822420A9A4C6B6392D71113C43E1AAB211
48C4E64E81EB2D210E057541CD8C4B451A43766C89DEE2E639514CB1CF6E1D62
C87321182486AFA6618501EF6AFD9C01C2720EB60137D712DDA34BD425E5974B
9E6E669547342161C8F2BD64A6D1699E0A9BA2A002B456C27350EBAC0D819098
2D1AC87D37B14046540C7CA5322B38AD6AF38F56953BAA814AD3AB445149D08D
A9BBA1AEE4CE10642FA92EE086CEB1895EEF6886B2C87B6B8E6DF7DEA896207F
FB11944A84D2323AC844A204BD9197E14F5CB63D98FF4AEDE06E210228390284
F3C645085FC552479B717266927E23E338A655247C509A950BD2C3ACCFCBCF71
FD60B12AE869A75ED6FE1768B8E8BE31F533D3113879752B93407AAA81B42EC9
4C5852E594FB5C731925BFBAADABF1B853EBC705FD27CD6D2783DF378E5B900B
8591E0336E0BD7C95583584D3AFCC659DF77C3423D04301FABACDF3368075CDD
7CE953AC9F694A5FE659C14B0FFA7A6BEDA563AD1857071643EBA099D98239FB
F83FBE827ADC0A062B162B0FF2C7FB483F010E887EE2F7EB8BB948C553977F75
0C6DE8FE799CFF1D3154FACD12B5C689DBE39D73BA8C9C093FF36C008959C71E
AC24F94A68140F4D6A44C0FA4C8683774FF76388DE40632EC98DABB7DCF8DC27
EE35218A36813CC4DA7F1223B0E7432925253055B39B051224F3248A1B33736C
686820FBCBA6A3537CE4AA99B1138C322153FC1080B9BB17E9877BE74FB44ACF
3405DCAE47B601E6F146CF067095AD466F21F80FD8C8C749D8E27BA828E217AF
27289C300FF4443724B8CDD84106271E7CE5914E9A399FAE7B9FE1250CFE056B
94808EB3D5CABE84A977317CFF1C902F6498E6D97EDB25A80BF2A0423E60BC45
817EF7F9687F33319DA2A3975A7DD1FB841FE159E2E7EA37AB0F48DCD0594858
0CE1B766F6B41E595F567D6D438E9AD509AA9A5D2A3A1332A3BB70A2DD5DEDD4
BF1E85FC37BB2299F3DF4D06CED73328FC01843EA9EBC75FE0BA3CA63EFDCCDF
621406CCE540D20D2158D4941170D1C7F4F3ED47B48652C8F269332520151D6E
2F9E4401CDC52DB8366CBBE398765AD2C9563E70E11EEF1114CC01C6A3E18C79
9AE0ECCB57B056BA568A86F2DB42D6A442EB0985BBDE2A960C271636E5A6E3B0
2E15E81EE97F12FB72EE795734440A911392499E89E7840AF0BDD2748EE3912B
35EDE1585DD445DCB2AC418AF66DD531736D48085C836D34EF4DEC34F23A4282
E1448187B3AA4BBE0BD69475D7C8CEE1255CCB36DDAC9B974D3E6419A5827818
8751402F55C38E0CA06E41B1EA4D1D240968AC68ECC0CC7A3DAAA2650AFF078F
3F5D67D9ACBABDD5B4737C70BABC5FFD5F430D272480E393B11D8B6FA5C05684
76073B68791FD69F035FB6974936F96C4D38682FF3C563C2980C87F1AA1CB312
21B026C418AF52F9A7559AEC01784C26386A1BB2C3B5203E4053582ED832993C
405475860368B4CB05D93CD5DDE934712BF44093992EF1BC3E70F4D8D5667CA7
433E5AA5159E80FF68E9980602C3823ED9D1FCFF6B519D6765B0277AC85EBE72
146BDCE13F09BDF18F7346E3D9AC3B0BFD0E16918EC3620A0A032BAC6FA17034
A21C90D2BA996C1E82E57FADF9B14437AA7BEF88EC7FE5F8E3352E2790EBF0A8
12E6BE698CD476E29033B6B1AC2CFF768AE93601748765D6C934A43CB9D02D6D
3EC936C4E75F2A3523A01C6B223452DF33BD0E54433660E5A28BB0B8DC6943F6
839C53F05D26168D27C5627FDF657076912EDEAB7FBC67345D3C8718A4F96FE7
0F5C1F111B48BE82B485A49A37D37011B460934CE4FE280586F49FD91C0F0680
F1E0C94AB5509CD19279CE7A23C71963F36FEDD00B423765C2FF3AE200C83D5E
D0A4866444501643EF3BC3AD6487B679963A4CB62633A522F36175653CCCD08D
89506CACD8323BBDE8EFF318AFBA650A3F36B854E2350677895DC6E31E6A6A9A
E7E377278A307E1089559C972F241B85C3465B3C551DA0888924F96544979838
36E4771AF3DA8C337A0E47AF3C56C53E55132B9C12CB0ACF46568FE293ED6015
2108652C413AC84276B7A0CE375D79CC6621A502C4450519C371CC5C12C58C1E
0E0419FD0861A3C0A700B133DE49F47F1BB776EF96CC578DCB5CBD3FB55B1903
97C29EF34424428ABAA000651015DCADCD6B7FD4A3792A8020968E059BEE5DDA
EBD4349B4B4ABA6C693252886EC964E7BA8D9724F0466EE8191ED6B7FE727517
DC9A282CF8F8AF4EE13BE381B17D89123282822CCF2900636BCB2F734CD8D336
7CC11907D3C54D61D6DEF2B38E2F6DB461B3F15DF83E0185CB98C168C80FED76
0161CFC5FCCF7E41945AB516BE7B6C395B22F49B2AFB843AE2A8B12DB6E54E66
29F2AE9B3FEA8E9167C43D358874E9BFA626EABD8B2A042FABFF48B3E77CB368
99CB35AA02FCC5FF31D71DA9FE823338E6685C0F0805B0EA04ED10841069BF02
E8B3724589F8632608BC217AA844B553F948A15F9D48DE9B63BA5604A2E78A40
FB77BCC07B5D8C4C6E1755EE3934832B837CDC0508566824EF38687DD2FD3F88
C8EA354A22301BD42A668740DE84A5AA3C924D5552AD9D26BA003A8379CAF1A8
E2ACF37D5D3C7C994F28E6583C3BC59EA3DE14F5C3D19CEE54A2773095AE2FCB
9CD0ACF653CFDE2A6E89EB1DA62FA2C41B743BDFE24FD6F801897838B4583C8E
173DE69376AABB678D120DE4A8AE3CC996474B810591C840790045CCE6406630
6B98AED8E8A2C89898F7DFE122179CFCA85A1AB47D180AE3AB5EDC9A66EB2152
A391BA9FEEFEE14143654B5371340E1067A2A61839FCCC0D30588E9E03FAD6D9
01DCA2B6BAC956EB8CD2CCF43B4950D905D6AFB4390B62A3173B522240F0D3AB
7439D3C4C7E735A3ACCB6B40E2A292104D656F6B16DAB961FAFE5A91B1576793
192678DDD1AAF3AF6372985A301AE48959C0ABC289CDE655EC5D586D483DA69F
5A0DE6141FECE531A950C0A07C88F66C2C6D8FDE6BA90E785079080243CDBCF2
2284D25B669F5D791A788DDC3952A5684CAA59C47C33F7B3E17AB8FE9F861BB7
8C7F280053479A3A8234D93B303EDBBE9C9773510F42221FD0ECA5100F4FEE2D
F1F839B2A5D900EC87AED233F3ACED3874214E6075A658B3CC670D60B0D10F81
5E4B59FBC32679188117A12E9700B7EFE75E96AA614F701BB7EA01E8978F788B
CA69D42290F62CF2B9AC64FCC7F3D7E4BD97877E9394892191B8A801BBC828E2
60CA290657E6BF792852365C9436E37F11916E951AC82C72234567BE1AE42EF7
39C213120C03B52F92679B3C22C799752DC904BF3E600603080099DE374CF1BF
7042B6E7E71F3E2D411474E9FC62418736BDBFE5E5FB19B204533DB695F5CB28
0B77F49DDC372F2DFB9AA681B5D7FEFB9C02EB185DB88746CBDB5AE1ACB7E338
371EA9E7010ED48B8894AC32E915A73823D4D5AAE0A02273A47AFF1613821CC3
082DBE1386640593C2FE4A9544E59339490F3155A0EAD134AB75C30DEC81B660
9F4FCFC9B42C21EB1D9BA4A881AF4EF9CBC067847FE672D5EDEF408B6893DC78
0C378361FC8CBC09CF5B238763323EC121260A1B76A27AA007D54F2A13900ABE
A9E08990EBFBA1A0944A44AE767157EBB509218247FD165CB6ED9411E65A52C2
2E85366BA0DF4A231F3FD3A0DB19A07D949E46EC20ECDF934338D709F0E98376
8B7E3519658CF76530DED2D29E897433A47C3E0E2B0B555861D76510360E15CC
B52D50B6A54BDFE5E2E56A7766B0B23D44B6AD37B78805217D10E6A359CD6677
7A8C5DE8A334A5BA785E6CBE94B7BEDA45A4189E8E6A3168A1DFE8D873CA7CEC
8D2BFC0789D624A38CFE69DAD6854494AFBEFD9D51EFFA78BF91230BFE3F36B8
A0F98A0CC800A501580CA2A3D268F5AAABF3E48C1DDF045E80CFE0284337B73D
E14352C65047CDB13FCDE826586FA44EFB62F238B57EC27B0725308D822DC063
095DB7469B2FD5B6294F2A0C317554EF53E9FD9E9F17365CD06EFDA75E6DDB4B
793B69F297AD8D2CAD771F3D849F39D447DDB9EEBDC78BCFCC14F8AF0FCA5D13
1A475BF101168EF39D53A56DB814893DA22AB3C656BD394D748C9D9FDCC36D9C
996D0739ADFA593A0048E705F80B009AC4987D92D39D5361B2874B19850772C6
2EE452C200D49A25E09CBA24A0C4A864AD852FD84A59953177A7EA11F1F0EBC9
828ACB1D7FD0E50CC9969055CDCFE14C06C490185EF4A554B053D8A52FCD4D04
1B9EC065AE83E2433A1F89C16080327497E048AF242484367B49478A0E8679CC
903183B32563E2C59FAED86E51484917ACBD3A28CD1F26E492AF40111DA44DE7
C1AC4A315DC2DE545CCA1FF10180D4B3D5003D79CDA61348C65B58BBEB7FD03B
38DFDBB587A8776502424A8CA3CB4289869EB84A01485687F8714861519DF695
55C9B7126CF0E8658880D0E7D6653D9E26DA810DBCB9B3529BC37C42FF57CA05
C45B88C23CBDCE0038B38F48AABBCC5EF62A80940E1F4DD6AB83776325C939C6
55BD2F6861339AE77618E192A8304CBE70700B569C5E23F7C6ED4C73A6F4F698
937585AA6759C6A548329DE3C30539B8F865BE83FDCC215FE6B5EA951248D0FB
8233A89BC77C618E82EB70E2F8982813BF523A57CEF71CB1BA77B05AB27327B3
0EF6B5DA005067A13D7C1C53405DD01907B73D221DED68FD2AF81B54AD982214
E4B4660F5BEB510D37CB83D2AC63CBFCE3223B0750854E2F28E4E54DE51D308C
8F557C4AB0771E07EE0143645C55EE47DE4AA52ABD988594A7EC882C325566C3
120A5C4DC3BE1FDAFD9348548BA85064FEA8D15C1560D88A026EFA8516683FA3
A30649486C002BFB9868AFC94E2165455D8D35C6D0A1B332AAB89546994A8E13
36FBD8CE3FC593F7A7AD181DAA0DCFC1B35B907FD5F861A0960BB5DBDE7B6C02
9FD8C4F358A7DC085B600204F5BE4BC99E63A4B172ED2C4331C5BACB6F495C20
07186DD7BEF38A1BE21EAE3198D55C15122567025382505FCC7FBB453BD71C89
CE2ADD25BD3BF237681EDEBCA5A216F2EED84DCF21D10FB3DC7A27D153F5B5FA
EC6983388DD38CF6EFD13F27698563B3798DD7E437CA50416E242FF301608967
581CB1160023C0A91FEBA4E013C0FA52E8B820C806ED4C9512541365E8C41CEF
A4148AA1CD5013F20881153D0871FF46D1167CC3B84A2493E83B27A7C63442C8
E081852C772108678F52053FB914BB94C52FA95BAA06A79FE4FBED861EB052E9
9384EE5746F48C858F48680675C20C46DFF6ABE4891D75F7FA12E11AC7199D58
3178CDC8DFEAF3FA6C1136B69157DD36FFA905C6B548825A9B115E58D75B5105
E0864DD5255E6E973AA9563F963DEF768BD2F1DD185AF10374FBBA7CC63DD398
9DAC2A92D24C7A987744731757485281F350E4243591DB9D6A87A0B2709786E7
82B22828CD5D6CA632767928709B4C8BF80AF32FE09AE3DAA16F4BA33453910E
1A1AD361B5F0E0EA0C4F108DA0A63681281ECE9FB5B50F72487DF8623993E74E
7A341E9887F1213D6F263456EC550F24AC679F350185A5CCF8992379BEAD857B
E5A7247EEBBC175D07AD8328264DE20517CD3A20C4AD272BD52EC1116EAD3326
12DDF6B2F8548CFFBE68A63016B0C66AD360E7DF52207A6354FF9DC9C20C6CE3
576FA424CA196B20B8C81E463A5DD63F1D70FCC21D86657F2110CF678DF598EA
17CA0E8180B81CDD7437454B0C9BCB39ABEED7EF62623C99F6409C6652666AAD
BC2FEB2B3D56853D6CCBE90DB0167CAAF451589F90329FC569E44B12EF60545E
C80FE11B18904BA07E58D6D302FF6C85709D3682DFC5026BC82DF1735B82E191
DBADE277F340B005F4C7366770D9A8ADA5155159B95817B98579B1280E265710
88D186B03D849D2D1EBE46A8A01F6ADAFA02FDA142C52EDB69FB90524F704274
2ED018057A119BDFBDC3A3C2377DFBAFEDDE56E0099D0E09E07EBE2BA8A4B4F3
9664EF52E7109C4F5A7BDEF178B1674B5769BE9519411DAF8A028730682E81CC
F09C6C29F0C6ADDEA65655A71AF0BF0B2B8720963125C16354255FBDA1BEE238
95F8FC937C1B7BEA9074BDC7478D5133B9E7614AD0CBEFD29CF1DEBD413F235C
953CBE627B576871B554CBC5341AF3D8C27B0754CD0305D799D7F8316AE53CDE
3F504CE5ADCF3283AB9FF67325AA9127C9AB8F2948C742A11A0B127ED91C25DC
713D643026117F2176624FF1638C8ED1B00B7CEFE691A0DADD4D16200D6D9A9A
65CDAF5248D7ABF88BB7606EE0EC4CEF8C4B1F1CFDF171654B252353A9A5B298
B415C6D248A6AA59C4CB8544940877E77F83763004D212CE13ABD5A5302AEF9C
3432B5A36FBD12DF2C8F50C00876D0BC4F00404CF6E15AA8A7892567BEA46F08
5CB7BEBCA0DC816DA641A03E80C230A8F5730D5F9738D8447B926452AFF63837
1FA14B8EF8D92F232D717833666DB5752FC6D6E19631D5349E127CBDA33042FC
BBDBAF5AAF54640F3F8D962C55147B56C591E37B406161CB0FCDDECE3E356141
901B469AE001D095E78DB0055D20E7F9FE988C721B8490A265D5B9FDA1CEBB71
EB4B1DCD03A31FEDCA0FBA3CE446FC3616B0E45390A49CB88706982B668731BE
C166104F44BCFC508F6EF1099DA1BF5D635440490258FD72789EBA34CC601424
C9E2E473746597AA39F566F54007790BE7B3C7F55D99F4BD117FF162F64ED659
62C5A5BFBA81594E2CCF60A6269476EBCADDBF3B86D1BD37D3CDB263F4E02A5A
1B8F122FA14B733CA8B3FDEC72EDC1AA805058B81667AE4E98485E1E0DAFE592
DC584CE364B476F37D56121D98E847E521997323D5BEF98C7532CD7558024544
A014DC610B1DFACD8BDFD3B7CC179FD29506C5D084BC67D0ED6C3F64CB7AA530
D2282EAC0A1A1DF7BCC78B90BD6AFAE2635EA609900C02ACD1AD1B4E7ACDE572
5A54D13092888B26044C54F0D085BD26697682C7AF4DD40CC96C7BB1AD97EB59
EA5EEEBBC013B82B45797EDC00F6DF91C95365FBB5DD49EF7D1A66BF597BDE3F
AA249648110BAC805C2DFB7F28CA3306EEA50EFD89762715DB9D79B9B89A1DB3
3EC0142F33F2ABCFF2629B093E8297C11B157272D40298FE0EE61CA7EB42301C
4A682F43BC3A59D87CF5969B64B730DBD06173325B02020C3C9BCB20E11F2696
F362A78D15408DE6D96AAC2E054998EC810EA66A35EFA90234B8DA0987714B9E
31799B064FDCF8DCAE17AFE1F37D605D6E6C975653BD87652EA6DABB55EB9CDE
9077BA25A626814E790DBCAA9D287C411FAB34885FA1D62C3B82461BACB2D43F
B16DD74B9AEDFD56DF1B5B632E755BCAF6AB8F5B958F7B91385E510CDAC287E8
2BC9D48458246B14631585122452AA1469B0C3DBE7668AF5C0A0522F8D6CB3BF
B57F14A00BCBA2861736B098F22F333F26329C3AEB150A340CF2C6B6E8470622
70D741EAFB2A2ED4423EDA32801D859A5DC8C8ECCA81ED1DCF67AC0F99E482C0
F9B64B028722F227B2FE5BCB69B13F2EE6636E1AF0F16BFA2605E7ACDFA606B7
B0BB01349F4E269153906D6DC7CFA1CAA9F8EF08DB10F1E8D72946ED10C5722E
CD1374ECE2FB7C26098FBE756BC9FA071DA25B5FEC1AF24AF50EB855B82BA067
3D88D71DE509C046A419ECE74AF72FA3B71C599C14E0460CB68B6517DFB8D53B
6980287EE15BCDE6B2533C0645DA5C65B64B9D0C7318C152697C6B1BCCBE799C
9F485827AB10332BFA0505B5EFA4F5C59E4B70B372BC89FD256DF863D636D256
FEAE0268BBFB891A31044701CF8C14B23128617137DD98E2016A73BA0B5DD563
FC7D32096C6A7E4E081D61DD7A3FD9373F9A760F19F631B66355C40937313BBF
DFAE2F250B43DEAE73AB6D91259BA46DAD405158B41D78DE4ACD48F80B0D4DA4
88EA64DE714E59438AD980E0B1FFD51EE19692ED665CB4FC3A38ED5BA74EC79C
638214B8BDE6935B483863BF3D2FDD06A40C6C3EA18C21E736E290AA5D73A594
230A55126506EAC8410E40EC779F03CE9A7936C3AEEAF7AAD1263C994DB23C88
51093A40C10C95FFFFEF32D8005C2A4A36F444BBC1DEAF4E4A4F014CE7918D53
A9BDEE22D46F9CEC8C17FF66C1F90D8C4E366ECE2EEEB4DBB360CA7518709F74
BCB9FEE4077CC0C49932B606F90142AE5891F32651524B36A06330A30AFEA00B
0E12A98703DDB58EB2B929CEA0749B74CE788E0F56BD4326A4060FB78883EE20
AE6B26B30B11E5C88C16C92401CB61EB294AD9216020A70014D6E34020531464
AF3C0128B0329B4B690DE945C542582B6F56F86314113F3C07605D957907E056
D20AEC2FC6FA5A832A41C4A87F5C1F45E54D50DAD446C813821C2B04A1858D9B
4BD4F441E3E9F4E403A22EA36E867F53739AA226E5184AC3D571C574C35CCEDE
F16C8D4DC6B158DFE9181891177B942DE0F2AD7CE0FEE3CAD755AC23964FB3A0
FE97C127E11AA15A90500C579A5F61209D9A1F503788BABB313BF8A0C86E4522
5931C102F27DDA7E73EE21449B7485586B8A9D5D4EFFD8613B50B2DF38EEF34A
D0B05A9F13DAC3DC9EA11EDDB35A731BF732BBB6A26BED165AF16EF1BD4DC95A
EEA4C65E463AC3961D2D195C1560E30A519908EE81CFBEA90CE88E3B71CC2EAC
201907B73F6F2405716AA44AA2AF44371CA8B9A4450DA76EDC0167B40152A2AC
F7DE287FA97D0495E28CB8E2FE2A4CC0B9DE5158AA89582AE0966D5DD6FD949F
99FC4AEABB777A18648D3EBC39FAF7E13EE500835D79D50E01CA629576175526
5BB005EED54F00C9FB3E3A31FB2952DAD2A6117735CF064F5A123CB8C7A62FAB
9DD62DD40022B4AB9D371B434F729F7934CBA23B5A181AA5B60EDCF5B16D201A
19B13D1CC1D27CC6A4A1E67D59E7FC3A0B363D5B0F43890DDEB8CD7FAB420996
5C4C5C411383B52C20CF7246DB2C57C9ACB16397C046562CD97BB02399E6005C
A63770B948496AC0953481DA206B5F406A3550A158F17EAF8E3AA9966AB44B24
58352E2C44EB7117C93D97EACA3E7EA4F5ED92B4C28CF51E8E6A084DC46636AE
0C046625775C67E55D8742FBB36456678097F1F1D1C490BEA5A288CAAD151684
56CD584C0E9C8491501526525777FB041834707420735FA236BE80C85CE6EFFF
9C57C0535BBC1705EDDDF7CF3E38FB55ED84D97999348A87BF12A032FE00D8AA
A8D491BD99487D7850AA93185485DBB65608426CBEF6B0D0B6D576222D82576B
5F08F3DF04D702233454DCF702F6D7533681A65BE30F68508E9D79BC466C2C8E
DAB37B6B0460038DA4DB939B1B611ECBC134B64292C41715C01620FA1FBD3003
ED2347F2D1102F4BE6902BFFA5FC4CD490E0599DBAD26045B7C28E25BD09080B
770C82632405D2B653B93AF7686625E844193089373E62A07B90AC62BAC154AE
E3D7BAEC5CB4DF774A63C6E7D2532FF5B6EE45C96C445E5E55F3812A7DCE56A4
827C0E8A979B29BC4E93B0CDC5ED60B924D604397FDA92E47006F97B9365C34C
F711AF7D0A61C666D34D007207D2BD1E52A76ACC1893E736CECEF1EE0F2A5ABB
93C2F6DE57BA8A7771518B5E1CDDEE1A58674DCD85A76F1E80FC3FF71520AEB0
DAAB91F094DF3FF96A087E5A5EA269419D38AA5315AA09AE548D00CDA8747326
FB3831AB2E26D8108C1775CFC066AACDCB8D6082A4C4C958BAEC039E6689139C
DABFBEF8C378D825C71E5D7AC97819F94AAA12CA71746293A2C35F1C359DFB56
D7700349A416A634E16173A35B8E19688E347FA63E9F072A53C33ED6A190D9E8
2583DF452AFA355FA5215BE167083176AA35162C85A9B10006BA2FC24520C8B6
843A3920A29212A749BA44E0D0D3F67237BAB5B4AD646EFA51A7AD112484323D
02AB7B5E4380D3D8A7048C10AC6FA6FD5779E1FB8A23B7C12244261F1C5AC250
DB05C867B2AF85B07F8E43C6E493B6F2FB7234280F2F872A176FFE70CEAF9B3B
9B94DB59E2A2F1F0F7DB73B85244DEA4E3490ADAEA70E250AAF3E523F717F3E8
C0F23523B80F3D0D07D0DE3B402F198B5F4BFD982B0AA766DA8E205301004A0F
5BD1F73132A4C65F2256B228FFC0D2772CDCC96B70B713F19D4B5ADAD409B89F
DB0645368A827D566D65C1EC3A22C0F17D8D0B98EFCDEEEDA99C752C0155244D
AAC84637D419CE799F252F3FBF5B777BC35E42B287289B049579D4920BCD9473
7C8BBC6064ED970393F93D35DC77F4A1DD401B38956C16C4036B889850A416E6
9EDB76221ED0700FCF9669BF1E51ED321A54799AFA9E4FD1C9DA4E418C65486F
C852BE7882FAFCC22D18FA906ED7DDCCABF959540356C53502C0FCB040852013
FEE493716D5D0ABEA8B410415463CFA849B56298340A5300C7099E82FD1A9E1C
54A105463778836A5730E17A7D033686106B231698B1F6CBB52ED80AFFFDE79F
6593ACDC5AB83C9596AC32CE9913E1D8980994445A3C2221EE4FA97A7DC92D3C
6FF030C4649387F2639453955E0D37377573CDD875A4A00060A91FB9961C58F3
CB67796C08E2745F3C39D0E0B26A5743048D456E3B98C09339401B2E2AADC5D7
A031C6A8897A1CED8774D3A479F7C1330D1A6603D9D88EB58F970C92D1C077BF
F3745D6758459C17F9E225E4196A87DD03DAFEBA78C3F18D59C5442CD27C098E
7BB671A0A222A5DE5034EA0BA2B4C2045CAD0791CA903E9C85E6BBC957E31B76
415203557F8D4330E3F56C0759F04FCC17CECCF7D62BA755F8B4819931589351
02735D925871A240DD0CAC8F6195F064F295D7AA69118ED72F0D07C76026FB72
2F6E84DECEA375B56E18866D701F607535CE4E62D5E268088D474F329697A703
1366239C4AB4FE053E8F2CF551B52AC52721564B8709C55F4480BFAC47E08729
9A83C888985A12EFF7FBC5651C97EFED49439CB47AD4DC4ED4752FF9B43BF7D3
4D2E81E1DE26E7D229708351FC8653A90F82605204675C4FE9412517F4E89436
D7CA279239393273AB91FDE2EC4FC81B4192B6BA82177648AF7A04455C5D57A2
421A4097A360047F7462ADCEA48B06B51A14A7AC2C4B68CEE6E2D4AA41F17BFC
3B80030687BC90EA237BE974711F04DD3D4535BB32950B66499662EA9D2CF1CA
7AC0F467F57EC126C9148FFF266D7B0C45E44037A60D348CC3A314FF7B4AE198
C17D2A1EA81236FCC9C961C7BD14B75563CCADDF26CF4F51ECDCC05A6B46D6AB
421437D3768C81692F9BFCBBD3C9E142D3867B50CC6603395C383C2AED060587
DCA1B7A43D128317BD924A71C61354406593E2BA3CE97C83E306D223595681FB
D10566A6E0D2A22A54BB9E54ACA9EA031B28130BD329B282FC53B95DDD7D7C5A
CE3E3C0C68A0060CACFB679856B3E1A9787EB16ABB9C763A1ED23657BF0395A6
9298B37FFD68359FF83E64E20A1A3DC012FDDBBDA318C143B4FE147E3C91F198
8DD0AB81C082773B29B84176DE1FCB4F5AAB165BC0DFFF4118BB7F77C5049873
4F283377C51265160A1EBA67913227D4B1C0B2FDF1CA8397926D7F8A0A19B10C
AFFE1FA8A7EE00EAEAFFC0D27700A1EADE3E43432CB3F9B7DF2AF19830F15484
02217AA8D241B503E667E4AED34A00D386CDF3420F372DCBDC2D9F5EE4ED0DB3
BC42F61982A6EEB8012AEF9581BB6CE76FAFC31B74F98E32391D9C4279A0826C
CE1A7DA9539B3E9A96A9D0343512ADA1B78E71FA71FE5B914D8D8EFA1089998B
FD6C7BE8FCA07BFDA97DFFF114A5C7557F7FF7046050B2EDE1A725CAB7E1B3FB
DA5404328B405D65B0DD36C3F83C5491EF1DC4442B5903770A42692C86547E9E
AFB096B0F2FA97B3C036CC801E2B8D4BE5CCF5B2168ABA0E143C1C503D71831A
388E7DE0D1CBF17AFC8A2A9CE65ACDFA63A85B097F7E2DB76B5E72D556FFA8BA
78B63FA7E2116CF82D8E7D9D66EEECD19812063BDBAEAF5AC20901F88098B1C8
E9369AFBDDBB00D500D65395194F7BEA319C4A12EEEAC6DB0FF95359E700BEB8
B45B0D895DE0A1DCA00BF9B66D7B382BD71EF6BFDDE17CE309450C6E310EB2AD
D308805A63F554A4D4EC4A452C275209F17604C1108EBCCE31933FEF74C75E7F
46B48AB9D5FB90F104C23A7AC0EB0C43BA029AE02539B11EA695603EADAECD1D
717EE9136F1ED146F159A1448459F5B34C16F3511CAA2B6D470AADBCA251457A
AD3D69C95BFB8ED48C6A6E47D44E28621545B70155659A458ADCE07E3FEB9595
220868FAC930E1C3D3F162543E8EF04E9D054A1B2BED399E78BA65AC7C724F75
B9050D5B8FEAD528240D376BF0AE960488B330C62D021F8F26AA8ADCC53E3716
1F3B6A0920CE455034F0A46A7A84513C9EAB26CA0DA1A4272537EF5A50768A1D
6111A342E502A4D97B43F844B052717E13FFC6E6F6FA971E9B4FA76D55A64B73
F61A406FC4294A201A4D1BE71CAFE101949CA2D5A5D9F4F4C222398D52CED1DB
A0219452878E6EB172F86E32D6ACA623AAC359696665944B690A1C23EFB011BC
DDE2F4FDD6C86C8084418809A1E06D4884B85BFDF8A6213CB7AA3A7FAF7DC2F3
3D5037A0B21EE4B14F106944A3F8F5B59726D99E2194526A2D6EE34B660CE9D6
D4D89AD411B6BAE1231803BE0788E18885C8542A8284AA10FD2E7C5AC7310A75
F0FFD44A323275790168093A1435A339142C03AA411BD2F53981876445194562
0AF123F5A50E3D419276F50B30FE795CB5A3BE88075A075E9BC616A620CD797F
75AF8EA046F80F4DEF35FD97A20927079D101E7A1BFBF8A37987D632355AA0E6
94DF2B4EC06A0308DB83435F92464623251266E454EB2B3EFA199D249F47CF85
752564D3EFDCCEB614CAB73F5F14D89B7322B134714FC3FF9D75E6C2CA59709A
8C5125A7CF4D9B89D57C00A1F10F919CF82FCD22E791034D73F4EB1CBE4D5315
BACF04FFFF38E09A81D40ECDFDBE3E5A95A09473467EF6E389F9F795B83ADB8E
A1689CDAD496A79243FC33FEA9729590B9D052CD50D73784D25E2FEFE82652D1
0AFB32A9BCBECCFA62DF4E019C81050EE5F5AFFD69B66FD0ECD558B32118A3F5
9B69E3CF7F9D0707B8AAEDFB3BBDF8DC478EB9F9330C293D61C3045E85EEBD56
58BB00CA0990733E9BE149B8176B674D0CB8D494C931F77AFC68A094E2C4800E
5A4488FEFC5C4E8005627B7FFF30F565B6519BC3ACDC862DCB67BAAF2EBAFA91
D519E8F49AEB825824CA63D12B92F69AD2163047FEE34F87FE13FD2B389DFFC7
F19563A665507D09C674E27D77BB4A02F0E85B6B2A936A83D0ADAF1DF6314034
283AA8C1A1918F1A91614A9852964A44D20A8F7AAC1039802C836934FDFB1A50
9696E0B6A1CCAF5AD4A31EC54CEEFC1824A71153C990F2BEE14D39EDB251936A
A43D9247F426C8DDD8015FFCE034EB437170DB1F873C4A0E6E7F441AD1212699
9F1C09128072D7A732FDC59043F9B8C443E3328D1FE63179DCC7576B48EC63B4
AAB875E67C1E6AAF7927C6D63631F14E609DBB568183C3C720618DF86B62D63B
C05EC69A6D189D436F1FFDFC3F5438FAC08C15805014ED2D37671B2B06CCBAAD
540A9391EC15CE878B346FB744E4AED71F9486E3057D539C43199C11E1F61FC9
E423E8B127EBD357BA43FE77112AF9CFECDC4590DDA331E4C8F9FFEFB35D6EF6
1EFEAA977E1017FAD7E7E7704149A3F7C41451B20ADA539C7B6E185B47A1F8F6
ECE643826921D0B26592D3B1BA80063E35C66D90E305987BBE418A090C70DEFD
2C9AAC1F88CCCC01FEB323C2E54F3874EC13CAFE2501222B27FEE122273ECF5A
3C67DB6EC1CBFDD8AE3A1EA8CC5034329C826B5F806026C9BE809EED0DF93583
E3731F273D99C7470C452AE4D8EBE71FC9550C4E6962337D699FCEF0564A3ACD
E49789577EE30EBD89A7ED988ADF456A0EE2C01E7A09361F41E40D958BAA4DFD
C9585D73C604903E942512C824815E52B842943F1A6B304B1D645F6E0871E226
A5353C8AD1C1380391BB6D639E302C6834763A025ADFBC754097B7AA5DF3207B
117DF36E95E3A3F7661765DF4F29B6134E6D6083277D8AB4DB3275C10242FC88
7C588A30142E556CA957AA51655CD963268EE1E6DDAC16E859005149213FC10E
E51DA5E9BAD8B499FA0B5ABFA18F38E7F3FDA705D3F631A3F30F1651EBCABAFC
CE82117AAC962BC2AB412A7056372B13A57755FDC35D1E92B740D7BBDA4BE2D0
580103B41390FBF08828FA4FD3937EBDF3AF03D61C5F40FF5B15F2AF6082E730
C98A39200B59E7DC2C643BD34195EC6A42AC80662DE2214B84CCEC6622E9F408
C476BB1E0CA9D344F0A0755484C20139D8CF201C9E71CC7DC9E62E2EEC199B35
30F2A4A5F02E2FCCDA3CD2A9C193C4B2B59B25A18977A3011DB9D1E87BB7FE2C
1D08105EC79EBA9B20990536E070A579037D2DFC2A18DEB51E1F06C1EB42D8DE
340B29346DFA63EEDE2E44C94875EA38046979706CFC869658746A000A3C1DED
26F8CA144E4DD1699C089249D6F211C8D1916A551B47B732D1B1E05A981382B9
0C4DB8B3AACC37935159DE363BC9F155E67AFE67B59B536D0110EAA85F230AFE
0B9F68350A383BBD37BAD61D8A953A7AA82A5EC846F70B74B5335CC180C722F1
19A109DCA1E9C03DA0B2E09C19F981EEBA5D0C3C312F3D738D39E9BA7429D198
C0A22D3584397EDE01E7092E6DE040379863C1A66D13607AEB3745BFBD8C2B48
919FB3F08FE9CD42E078741834A78800EE22EF207AEDBDFB65B60B4A458A8C23
CBB6D13C7CB5ED8EEDC63103CB30B6197BE489F08E0E3DC94C90F04E20B6AC40
3E3379E7D9E0BC82789CB339A850CBB859B388997AAA7587DC7D4030E320723B
67AE7B63E3A158E903D43BB0C3CBCF32960A2BF4086FB5B625ED1DF957C71BBF
7F1519F27980E45205A973289D200121B1BA5C06F9947A4AB5B956B41BD9CE5C
BF2F0845356DB6489E665FB498E4C0C8AF90D598287A6714BE0BF907B0ACA0C6
B3718B0E002768DB46630CD024C97D2F8FC1C4134C7D3FA11D1574C3E0205E0B
BE0302ADF9F7145B2AB3AD1D4DF7C6E8E47B66150ADB3C11C94FF69409CD78CC
AD51BBB0E0645EB09ED7CEAF593616CA1954FFDDA8B17D55494B31C2E2BE5868
8A7A9293F32D035AE879438345A8EA8B2C3CC17F31BF97DBABE87B65422D6BBB
2054862F70554F1A38FA14216028E5EE88EE2D6FD9F06BA11823BB36667BAFD8
29244AF2BCB8F4BC47279FB9A4DDB943BFD0D6A6A23AFFE037BC8106CB3BEF34
EBA280029A2551472712758B9E2FE66C544478A76B52C01447E0C0995CE77041
0D89788F5B5316C8C7DE235EDAC2086FE2FDE4744D21D2A1188CADD3CEC123BD
C2A9D8C4517757D57EC75FE90D3CEDE554AA99F607C60D6E9413E8077FA7AC80
A2933E5EFE9086DD75CC6314FC16E2E5D99B069978AA09E311618ECB0913CD8E
541356A1BD13399B405E1AD595F95CC6D31B94C5349F494200A88F5DF689F42F
3F7684EB2FB3A5ABEF8E196E08F7305818537EF2D3881F3462DB1E8FE0E3FF81
FCC9843E15A446581C25BBCFB3DD9DE2E23DD6629BD3C2AD13DF69038B009B69
2ADAF40CA384AD06A3006AB74F8BD0EC6430D733FFFE21D7B57D1038473F183B
16B62926378388A80B7CD83DF892DEF383B1A422AE7B3116B0E33D44926CEC73
F97A46DEA3BE461F90A7093B2BA636AE703CEDDAA3CCF772688B050E34A7DB08
6476697CF68B27CCD3E29CB91244A156CC485F0D732F0AFDF6FBD07A026B87DA
BF6102BBF118E1B590650C83D5A1F7C989A0435DCA2B1C9B4EA75CBDD5E57FC5
0203EE6EC6BF267B0A614B3F6F87CA15BF569AC4A2CCA6DF39E531DB23BCBB19
47431FBCE6A016CB41310FA2BAEB2D7C26006896C00D2B8AF85D3BDB1959583B
6732D3DC4487B7BBEAD90EE5DEAD0074C81488AFFE8D34E3164600767CE063C9
7CEDDC4C6FD39FB6596647B0D78EF757A3AC192725D29F10E6101214EB581E5D
427EEE8259E68C2841823C41029E192ADDA281047CAE765A8E84346FEF41326F
8DCB70F9098C7B89B7607520C3678062E138BD7988F4026E62D6DF257DE2F308
F1B8DA1B66D6836F5557F484744F9C0D0F6415224CD4147B27D37D7ED0BEEE54
3D15F0DB540A61917650B41497C3D63D3C974E4EE4D7E0053BDA6569691729EA
8C4FA40ECB4E508B1FEBFC5A11B2A76969131150306E9CC243E439D18F4B1D3F
775104016A7F04E39D180003B0E244B8AE080085941F188F745B943ADBB04CE6
1ABEED9E395F1F1D74A0BE5447F75BED662D7D3F5A7CBD577A713F1299F671DC
3791AB527AAC8EEFC942D735AEACA7F8DAE6D9CF98BA16BB37A7B414888824B5
DAB91224F905561E4A53F637D6816383D132B6B018E8CE5E971BF663C3CDB61C
6EFEA4DD9C9EBC00E33DFD17F6080B00E86AC05187D377313EF5D15D03F608C0
572C5489A0FB2E94080AF77E922DD5B9138E5B485A2E3BF09B1997D08FAB3A14
213EFBDA5713BCF1DFC086FE12027FF082AE79515A38D28CF2C8BDF9FC3C0D4D
E81F33C05B1D368507A7519DCC7CAF54A5BB2277542E819C34ADE6EA23BBD7E5
99F771FB825A137FBF92FA43CBB10AF04A7975CD4A338961729E9026B048BF61
44704F1D7854CA8950790EB06E5C99D45D469369295EB5E4EBB2ECBFB9A102DF
A92CA79F6BBE04B03D06861271F7A31EF74605706B3AF11A2B8298182239C346
E427D12CE316537450939FE99400E12B3645B8741DC658C0D4FA0D4A103DC2D1
F22DB076357E6B01BC9DED62264F6D0B1B3C33A60EB0A1163A4D16C22B5F223A
2919299036FC131A754215059D69720F03B3F1E3A459115FF8457331017F15C1
BE7C29F32140CB389B6424055D8907D14100A0DBF1DA5DABDBC469C09D3DB828
BAF38145F1DACAB2F4E19B1C70C7A149D1DF3CDA1340E18D6EA3458340DD39C5
7F49CC2CB8501D092190A45808F2EE3B8385DBAE1E371F2A0A67CFE47751239B
FA01D477B61424E1515E07470A6DBB3F08E2BB02C7CBA6584EC1A66144F836F8
EC13399A99560BA7F663949AE9A901D630F060032B1989A68FF72F1BFDFB1E15
D64FCBDCE647BD2A3919DDC28979E4C9B290E23E2F0BDC82CB3DF924DBC4FA22
FB0CB15A15B4DD188E72432EDBEB26A06F65EB765A04C09E5933DCDEB2D7394D
61461AC85E40EE46D23537E0A28B8AF476F3B9F07E505210A0153E5D7A1838E5
107181C35A9175B15E5272EDEA3308FDEFAF6AECD67D00723EB8FCC84D4A3D3C
1FD8F8F9DEE7983DEA06131933E5EC56EF4BBABC86A50C555E2D3ADC5CB0227B
6138E4D8517CBFE7707409DFABCB9D337082F95B325B4456170E9ADE24941917
BA3B7326256CDD549036E8C689097DBF49E553DA9783DA25BE125FDB9ABD8994
E4DBC66DE3E577C25D6F3421763C0EA3700277DE0ED843214C234CFB30E3596F
172C9EE604B39165B03545C2CC4A4D3B9BE9B165143EEAE1A6F248EFE618456B
E93B82353ED60DE13FA9BCDB419C037E0B11A7F2287D4A183486394A3B872B87
56907DB33F6BD2D057E7EFB5A4309453347FA2516EFA02AA62EC71B381FDB4BC
8AE6F9E5ECD0AC1F16AE9E84F42A9A70470E74E98434F0988B1B65FE20C91C63
6022D6A13F0B21C1531FA9DCC1F4C663
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD8BAFDAE0AA6B50EF
8231DD2AF57730FA7EABD3D44DE5C2197CA778FFC85BDDAD152563B5FDC3F629
8C4728C9DE9761D7779EEDD1B150262BDF03C3F60D09B87E6267D7E5E43705D3
D364B37D06E4C153BC0F8F8B032E5F26D2DE7CCC0E927EF7D853D4E937863F0F
CCE5F79063649DFE6A9C36877D0B777E6FD7DB119677C74E3D0B1335C6106BB2
2253EE29D6495AFABC530EAA092BB709FCF1D2F4A32810A3DBCED812EE19D10B
0E690DB204C2CA3B5A07FB9A6A1768CEADEE7B507844B55E4CEA9D3179759BD2
0CF8F5B58D1394CE6906BD2ADF6260EB9A2A59A536E483B745488A5A82E16393
CBC17F406328F383F2BBE3B3B2A6AA6A1FEB26D4A1B4461A009DF7C2666CBFBD
B5B9834EC15C047FDCB4E0CC99AC20DC2E5181FA219E49C2F4D2C8EC80D9E187
F9E15825F5721D388B5A56C9FF8C4D4EC2F469549C5E2F6230337A4F7893FDDE
E3C61F3EBFDD15A822138A17ED1C6B430CFE77568235A193F57FD51F202DE629
4C204F576397053840C0109C325E5820D3C9EF826C2CABED7C5D4C7454D57F36
70A11457E550B1E5EB5E4E06836768591BD979D642FD47D7677CAD5B82B4548B
CFE806EBDD7A96133B2E41002B812F8E1AE5C8B8A9DDBFF5124566BC16EC1798
9C1052F8E184590223348E583C314D27C43C08B7B723B9BC4EB7C9538A2F8957
45068B89BFFBB595EE95F8BE4F058CCF35A29367992E5E5777F048D317210A67
91D432094998B144BC6FC564BA50B10D8896713764599CD8634344DD66EF6667
3C1CAA75ED1BC7113F02639546C046271577CDBF8AA7BB7B42666551A0531739
7690661D7B3C6CD036635AC005964C989FAAD34A1C94F15DA238A58F1FB3061D
B6B3DDAF549AEC049112F2D95DC0D89B3135BDF2BD8ED2281DE318DCB1B5A6C7
99895F16D274E277A7FB8BFA6DF104F63B78774431E6906CD36EAED81B0BDE7E
973C70180E1D12848546C36223A3B17A6E2AD43C7E98803D291EA326071309DE
0BB4DCAE71AF8F7727F737D807E2CB59BD01C1D26808A158461AC96DC36352B2
536CA59253CE658C0F03ED3EBA0348F6096EF7753EA539F13239B3DDE5083519
D0D34869D2E42BA1351FA7BC47642A19C1AD14481B2B51A267F1D2DCFCB8375E
856D321E7A99529CECBBAEF4879B8F6116D120DA29220155085322A408B5FF20
CA2AAB56C447B58D3C490777C30476CF9BD30E76E0E84F5F401CE18E37E72DF1
0AAC77E7B114286C3B68D4AC0396EC2B127C2894B02840EBCED897D3E4F629DC
3558E7DFF3379A0A4D590AAE63A705A9D11DC2C1CD378258728D59BBCB3FCD32
C534F0276C074DACAF2902C20BA118C90D0ED27006A83C04069F430855DF1F08
3E739CC9BE938C121E305B83ABFE4A1F3BD1B8490BBE80F6E45E346BF4C4B8B8
77F6778991BC0756A8B09EDE8F6C30A2362BC7E5656391E6D986BA910BAE371E
4E724CD85BBEB3817AB6AF0226603D6AD584EE1C93B805A2B40E883572A5A463
C0C8F74EF8C973BFC0C8B9F1996E9BB66724E0CA78ABAB862AF1D7550E5E7E67
87ED19E2F71217C246E6322E3D05B4A60CA6D94748EB6E09BC32A065F42AF72B
FBB45B9DF9B9C671DFA31D602CB719532794EA313841163051CDED4D8E41D46F
36B33E1B2B0FE4CDB6A6F516ADAA1123BD889A725FB835D4C27FE8D5986251B9
32C9E97DE2ADDE82CCA64661AB409E37B7CFB3EF9096AE49BE13904D8EB67A97
5BE804C5563DFC3C67C8166A935E2DFDC56E7C761DC1D072CD01B49DAA9AA780
1CDB41A857C054757ADBBCDC087429A3D69116CA81623F954A04003E406C8AA1
33F7AB5AC3000F952E0666AEEB60489E43D04D61E2BA368305A9155D12561B4B
D1F08A57C19D69CA6B3313142FD4E4225717717DBA723C4309D78C7A77864605
65035BED5BD24979EABD04B0BA1865C61A583F3BAA7FAFC3C309A8B200F0F29E
B692ADE586B8E56F0407F1F9DDF05CC2B68AE83E5C71A6D5833EF5AC57C32EE0
2DAD0A58D99663F85BE8F17A3B89BE9609E857531F33227904D8D757B2D3D157
CA6CF67E7DDB0E5570A70C393231DFD028846579AB2CBBB8A87C0939B7ACDCEE
DF545652FD0263765A9458C6C16660096EB128A08CA9E1CB491AD747D7810658
7E5944FDE7CE54852D947D57B5CB220926BC834B1646B70235BCA2E89C00FE1C
5BBB67140F327E10C02B8D7AAFDB3E2C7FAB218F58439AAE1170DBDA9AC3B337
48660AD735F13DC9AC40DC159707C99A752D3FC809DFB4A1DD266A5E734914DF
FF559B73B9E97EBE0DC8DB890D11DED31215B78DEA1708E447E0C5D78AF5B29C
3D9E18A27FC4CF05A5F078CF7BD2AA43A6F26735142CF561761F69E4FBED1827
5E45FF2928F2456CFC3AC351A3DACFE29416A9AA7E3151A70A57909EB341DBC5
23ADD4E12A3308A9887E9E7F77D6E344B4029236250C21CECB01F560C99A5F60
0C1712BF9A5E2351E3BADBEFFA219CF7E9B6F0477934A009A070DD833BEFE931
56F545C40DA56736E66D332AE7AE9677BBF810EBCC680814B3D59C1ECEF77773
82B772E494919E172018B0D73FCCB05924B33DF8DDFADD039C0627468E4BA725
E21021B82B84B88D6331C70F48BA02FEA751D326C0A25FFA4F3241FE1E28E0FD
B39562BD225A48FBB40F3ECDEBC19A3AD8B321553D81EC5AAA31A6791A559A80
3CB78491A65FF7D3A2DDD0677A75868D7D4C2B29A63FAB2184A2A1A77616F16E
71DB01855F65A727A3D570B482AF112883EFDA45CB16100E899C770ABD7AAFCF
78B5AD044B844BDBFF78EBD97F40F1B3B4DCC4B2900D0B4C3E6F89363AD5D292
302CD7DAA18888C8F8AF39449C06D6558A8DDBB3DB0C7D5F1F41C61B5D12547B
77C35A1D617BAB3C6DA0E60696C499C3E9ABD27F163BFEC9A69E88EB691CE39B
123A85001A74961A17FFCC364A06A5724A252400D7255AB3C88C0E9A014EA43B
39904AC4A1A00B0BD3607DB7466631822AF1BAEFB301E6900AC2B65FC35A57C9
03FB8CB1FA267164F4ADAB0D574488D4B9D678621BC73C63FC2D8EE1B1D3F803
1F677CFB783BB39FB24F9C16AF1CA3BDE9706880F3B59DD762C2C4444FF6D0FD
1A4881A34FA24BAD29AB5539707FA4F66CA2DD0DF116C44E4AD80A83201886DB
B83F6FC35164F4F663C71790516F77D4DA319B068F896B3EE954F5A5C0C971CB
DA5DF6A215D767D02EEDCB86711BA0DC2B193419709E52E6A095114588EF23F7
0562B13817D749424D3104F86B8285C10A35872FB7BD0966200D45200A85D27D
90A7BC5FCA56EF493269B070A435680C1F9DBCF3A067277802A5DB62E9A2A18D
E07C819E94F8715C4F184CEF99EFA20709CDB2404B733506E7AC12B9F980E959
908E1E9E3FF3FA019E52E4768CC208D4D5EDF68A5400F08DE62A8BACDC211A5C
2244B70FADDC7800CF6118D677EF4A3E9A6542B4291D9CF9B60ED1A5426572A0
F2E2DE8C013FCEEE2EAD0AE6BC9EEB6AEC573E7C2E173BDD0A4632BB24801994
FC6FDCB351CA1860BB82A162DF3B9B7F1D0A9D11C56994104CB4D353F747EAA5
D47FEE53720EA2953436862018BACA21C7B5BEE249399FD08CB1586C5032BEE7
0B05F7F43C1FBE95C64AF7864CBDB80DC12A4B7D1427772A54235E011367B4DF
CFF2E1D062B1B3CEC59C08C296AAF9B518E0B620B2604A0F02C3D059DBEBA1A4
DDF347787825DD49D11DAEFFD259385FB62DA200CC203D15AE5D01B5747EC15F
6E5BA686EB8295A282705BF1414AA87E10E652D2009DC386682938DB4B1EBA86
93B1481B4F32CF7A3505D4A2A876EDBE856EC3A82F34810C68ABDAE536D9DDEC
01178E42CAD202046019A1A67C9A7F757B4ACC3149D3036119C2C09BAD4A9C2A
895889F9D505B1556A38A0B6CF7E1243FE9BCFB3DECDF4620C91E7A1654F2D89
AF7D676499F23D26B47B9CB5B4171C6FB0709098A8F08091947EA1751B1F6385
32CA099977DFAE9E85990ABF2E14210890DE24639E116756AD65245610E87023
F1C0B776AD5B2483DA0BACB63D5A1E5762A219778BE70CE880B267FAC50E581B
2DEAF6AAEA5CD7E277B10D2D2DC10721300057C54A9E923A24C9335691C39E3D
79A6FF2FAEC3DA6CBB89A262DD3265A50CEBE46429B371EC7E46B6E9DA84BDF5
CAC71F4E90EE0661E9284998AB98F1DD4E042B63E257256BF0A7BCABAC49BC4E
D2413E58486776B00AE3797BF8BDE5D7CC3F8237395F6037F0180333B6DDB494
2225BD45F6FE01CB6C10015841B66CD6BF4C715C9F106D609D03E27B458B4CED
0D370F9E9BEE72029357C85DE0838FB8478B1B94A3F1AF5D53AC484C532C38B5
B60B749DF353AFF7F47BDD61C91DA2DBEAC05FC1086E047F043F4D780E9A34C3
E671B402F789CC1D1C0BCE37431DFDAF370FBC83FEF287B3E4A21FA289D04F0E
19A725568E617A5712CDFBA57001DE299223DDBB4AF0ABBCBB6E98D65B9C832A
F14A4F48BC1ED35F486642B1E5276AE3D72CB17D9A6035C6D835B0D228B5B6F6
33400B07640797685EE4F508E2D17CC39C6A7806AF9EE37F2AC8310B01E2D168
E07355A914EA12131ECE5ED99936CF709C8A3949D0C8CE4B3EEC40735342750D
453A14CA49E9A661C67235265548D43EC1DD3C9E08CECECFB5F6CBB15390181D
330ED60ABD9581F439C49D14BEA637CCD068A86773D55E58D5416C8AD2804C71
56ACF5D74E66F11F3A1CB866C7AB583ECCBE6FE0329A75576C15BF0A537D38FF
2162B2C27458AA6CD35186EC4B7318A60AD493E6DC26B83665DB71DB9A480D80
703C725064A6E5EE7F960BA25C294762580CF95CB8BA8EB4939E9875835511AC
6397594F8149D46E38C9E5F803E0E1780D14C57162531A16AED4911B438509F9
99C499367FA0E0FCE10496DB9EF16D81BF51E71CC594B8E794144A860558ACDF
9DF1E160BD70782C6538E8E3CDC85BFDEE18B469E7146C91E45274748C65AD4F
2DCFCD521B2274A869792DEF712508492044E24FE224A14BDCA9C8A97289C5B5
B2A3F2505070BF0E1FE4B60BBC2102420DBC2F6F6F7B9EA9B498E23B56178B25
1BBA1D812A10381D0456CC203C348DD73C1D3BFECD712EC46352ED1B976706A6
AE560AD6A82C3B0C66CD40D03EF76649A6AC929DCD3FF06B9FBF62FB17E52CBB
C2EFAF3B7F0B7478DD477AEF90C0AAF406F5049889DCE822D58B48EFD185C651
E24ACD1D0A7FF74689952C838623B68519D11ACB5A55AF22AF3C69E25898FF63
90D4F9D3AB952D812DC7EF545B8A2B482868D2A9E4FA7FBD5CE49A470899F4F8
3517B5AD2EFC4B2AA279B06EBE1DB8826B9C0A9C6D69412B72CC0CD7177C0206
99005F6C0D10D78585740BB798449CFDE209001F68B04377E9DAD87BCD6759B3
DDBACBD0B0D742C6CA069465E5A64A0E8A150835751C717DAFF655F68920F678
B5C4584A1EAB39443FB4126192FE590A0632416E2316A739A2703A399BACCB0A
38FF9D6A22E66F10354BDAECB0ADC7DC3FA7B24303B3C291B173D068F646C9AC
457A5099FA95167ACFED3C707D5771C74A5837D993CCC2992E444218A366046A
1B947C681186DE1D3BD3710A1EB1F5BF62B71CE33E468014DA1E445EB52B2BEC
F66696392E1B71AD0FBA163635704071DBFFBAF1675780138ADC47CE982A755D
DD349D56513BB6521DCB5B18875046BF8CFEB3A5D0AC9CADD46DE48B2BD2B51D
7A4D3FD842EE498596F3D15995DBCACFBF885FCBA160DD6CE6A7A490C010E401
7AEF12AAE3D45E10BD736BF7520641F485F51330A99079ECBEE429138DC66B96
D6CB67FC2F45D36B651BB1C908D2103181F00DF8DAC3BBD7148B437B73C9FEE6
DDBA443FC0AD87BFB1ED2F7192209B95AA058750DF7E7961AC02E369C920DA89
C300920143A620C2D3B44D3F90F59A766CB6063DEA3688E60428B2CC42D69618
FE19D81E3E19A7C96EF9C08116DD8F50F132F8E84B668D8553E048EEDE577A5D
54966A664A240D7FB8F5EBC8488E3385FD6CC94B32A556244A7F1526D78E6D0C
65D20B898D4E11903C37DE3CDB0DD546C8D2E81805BDFC625C5717D4CE3E694D
40620979205726FA57C6450A6EA03F60DCE93729098B15814D6B8746375E4BE4
34590D1F8326FAA1085B2B7DB327D6D4AA9F887D96DE53F4A2C4AF684E68040D
4564E5A47434533AE9A2134E2262621DFAEDCCF13D2B27ADBB254F03D7E57334
35AF41AB5AA1BD5C3AA3CFE0580FDAF7BAD0CA2AB966D475DF71852022024A3F
966175A521120D55F0EFA152ADA7ADD918D45A1AEDDC8802374028375D32CDF0
4E98004FD6E50186F11C5AEF48DD6BD9E9151B4B704964E5695E4E519B8F99CE
6966EF22DDAA97A2315EA8C071AB63EF9CECFCEE020C7270AF0954456C6920F8
891505A3F0D710AC71210359989F6E41A0ACEE38A655AF0D0A563D38ADD55AC7
13D204AFD65A7E44E106EE0AF417C56C378E8C16EACC72C00DCFC9413A4A09A5
5D76CF38724D79DCEBA0DC5F0335C770ADF03B54407D4E675843A050076676FB
C638F830B211D979B7B9BA270EC46983AEA2072A840862E9F3775CAEDADA0690
D2867E15C4C86957018D427D725F48CEAD8BF036B382F73BAF1F52EEBA7A9186
709E264269259176DE98C0B81A75C78A77CE2BB4CA891AC8B6BF30DEF5F3A5CD
26C6DCD44D62EEA6B5033525C1D286EF116C277C4C208CF264E97950923955FC
C90BF3485204CFFB0FEDA09991D35195F787EC032345FF5F13462F4D7B345C73
0E7559809666F79951A9F9DCD1BE4F987CEDC15DF8804F8A82B131363328DCEF
6D653A038DEA61359C5EBE9F735FC5D0CAABA3E6E27059E16A91DED9543E130F
44806B12AB7E1A6B17B15FA30B0F0F0E993FF236FE5B0444D631147FB95D1B21
F8B1B2EAB432715BBFDA58999084F9347B630913D8288F0419735DF90EBDEEF5
6F44787F6E54B6AAC17266664663386CCDD036E32974665C1EBD1FC1B90EA0C8
5432454F1594385B2AF841D9A43016FD85CF9289DF78EE12F3DEB4E33DCD967D
167E99037EFF7EB6CBC34FDD4C97AFC7CE9441475183C8221AD466A9C2B7BD71
71591C710366EC9E9E9C1D03E2D3F5E2EF72DE51178166EA60855627B34B0D31
E35E38FA636A0921FEF84FB08AFB198CEA92EDD3C90F88943A5D20C4D42F2183
DE74034DDAFFC890CD8BB912A1C704EC14ECB88F9D24D202865939AB8DE6E2E5
019F48C3E3223F9E340C65E7A99EFF163B7FBD24DFE37E30E8FC47F6D30D0CE4
C5E6DC22B2F397C1B7A68ECAFED136682183CB86E49BB5F3896887F0DB0C1466
2CA0DEA1F18A4979984605F64C282842E2ED8FC597B470A42CC0388738CE4B29
55A9C7950E80F92DB796238C985A124A3B38F7BE6389337CFFF9DAF1BD3504C7
44F5E19A7E7F4D8F9B18E72F15F0A5CC39F66641FE768D7165A2C7A2292E4DBE
26E76109D539C7B73D54FF1B0E1C626B0F86AA71C02EC7A9A57E7901DB58A0B4
11A3952EDBBA3BFE050160C51E38C0C751DDE67D9ECDCAEB8AE755A41AB90F0C
EB9B96FE8BF50099CD74D28179BAFD3C8162FDC7AFAD395E9973BAC93A9F5E95
E83543F29ED2C0E7E2EE6A386F7CC94D2DFF834567C10D3914453588EFA50D47
8F58B608207A786D5B4983594D80464C24F7AB0FA91DBBAF0DCAB85DE7232525
024FC893BE554137FCC3D181378141593BADC0B6FA3628B1EB9EAA51B861EEC9
48584C8D5E4321963198FA99C53536EDEDA50ABB2E531A24D1567E37C3046F1E
7824AD632A4F12434D63EC5A3E0ACD13B07DB2B87F22977BD7C720F24E9D390E
F7866AF284F220372CF101D2820C4B919D08D7F4CF121C933B7A25D4963D227C
4262DF8117E481179DB35F59A5657B02F4E7CFF254D5C9957684C77AA4F6B5F9
FB68071F03207C6DB3AB426EE63D2647B8F925AEBE62E9900BDC9BFCC27AF278
5D069A19BD7C05754EF0BDCC8B70ADC8B47AA85F49A8C83174A9AE49F2269083
E8425C3739504F93587C8CD3328F0DC964B24668DA2312AD7B497CE7CA888BA8
8D6EC9E004BBCB58562AD60AA8B272C0149E7E4219CB3835F4A9782A069A9B63
DCCFDFADA4053E2766F605A34BB73E20645B7A61361022372E4C64AD401D1C68
D4C7921E7891CAAE491149F05398A961E709AC213988AE1E6FD9D5449B23D8CD
8F1C92BA6C2802FD1A1822C71F58EBE55A7EC3597827FC29040C0C3F06835537
8CA104CC80EFDDBB781D59E88127C87FB94D1E0B609B99EAB171FD8E6B12A890
3055D53313DBD1DE6C8937D66B3714B8E90F7E19930E724352B2DF600A22FCCB
736268C30F74F798B3EC272FFB4A01969BFBB8C47A097279C543276FE99692B0
CD741F6513A4C596C3677C57AB1E920F32BFF91B2C6372E6F0277D8600AB7DB5
17D5BF5D79A01DEFD54B2F8FF931F1C20EDC6CAEEF7CC88C2D4583D5CACA9811
DCEB013ED92EF746B60D5411A2CAF037CD201430A9E6809A5656A5968DC170F1
FBF0E7D6E9929A0E8F1E6FC28B9BB4771494E73522C4099EAF7681973A349475
ED81D15A26A644743B53CF0CD7FDCF48A0A9463279CFFDCB82FE9730B2D43F1E
A571D30159979693734B16AB45A7BB793871DAB143C8E3DF12E0EA44B99FF032
F14D316DDD5027A67AD13FF34C837097BB9CE6169E0FA0C438956782496AD85A
11A5A060801815AC31CE230E6DD78ED0BF2B97A5D04136F429E128E6BB9035D3
61EBD801DCD03716586EC2A715E51FF0F344B58CB933AF1949307A201864D1F8
139A94680FCE37D2F442059147876AA4FC5142358AFC5B5EB34FBF42A45EF326
5EF16B3E6DA48B07068F8F0C4D6C5DC31B97CACBD16EA1EDDC541AED28ADFBB3
7C89612953825C3D971C8AD739BCEB42859C95208ACA80286C639DB89625ACAD
E4481C7E08D21CEA08AB097C3DCAEEB3087C3EF69A360D0C53D0CFA55C06633C
36D32CB9E484FDD4E4A64E019B6C56B28487B2182D7A5B4CCD3C2FF05CBB1D05
A2048535A3660E4DDC23492ABFC15D986B7C8C8679D05460358BF68F4D57AFB3
50C8401F3906C080193EA2AA9831D08BE74B99BB4ECE58B8318176802FF0C226
959159D7ED8EFD41763B2EEB14CE3164A05FBB29A0E40E755815ED30F1417CF6
58D88D55F4B2AAE6ACFDE88768568C31B1E14FE2FE5102B7F4DF3E4FF03E6F44
91CBF50E1AAB4DB1875D107D8180396BA6046C2C6F51C26CF9E4B2E310D48403
63780C68504F41331F208DA2144AB09286BE38266BEB239F8046CD4F6DD29CFE
584CA22C60BD2E1036D4E38890A7A050EF59EE647E2E3EC3883411401D6784FC
B07E08AC8035332E24B1C5F017F27DFF2F8C37AD6B3DB402CB970662D3E42B25
98D1CEF588585C7F7CEDAC3DF29A546F652311A1151BA1B9C52FE8B51720FD43
D82AA715CACAC9840DBC60F09334486A2BC7EB3334E5CECC9691867E0C311918
0B78C205A58F29DCB55C3052048B9E3129847059CE0F6AC177556D17F337F31F
C100C92E6405D7DD1C1CADCF7E712A8D7EA7C777BB916526A7CB9A821B14E4B4
19371CF255F2C71CD1447846216EAA9017CEAD458F7A4D93E6230230CC5B7D0E
46716D81039491DB446916FA5F10B5FF1AE7A0F340550A06E6873997A34909E7
A6E74E315A99E03DE5597039E640191FBFFCB121BC0352247B8C6AF0966CBC44
9C788B427E5377513B0FCF3DF537FCD61BB3678AA8EC6137A6B916B884A136A2
C1CC1019BD805E1F6A2B9468F7CA43975062FD00F1833D68AAB322BD74142D45
2C210D2B939D23DC846A41F7F1107728BF9E6B27CF8B60B76961098097405CA3
AFB482B995485CE83DD1881C46486E3A8247773BF93CE1C3593D56A4D8893AC2
3349FDF9163F7A4B2A7C503538F9EB6C9F9561E8CFE2C44B2C415BEA7BDE5653
449131C399E50D41FA224FE1EA2AED942C073631F820D14B2F917DDF1923AAEE
1F583307FA1E94CBF59A38C4418DC5B49D1C201133543693B08E585FA559E931
52FD2DECE7E0FE9EE8AB31330FD637C3A90F4945393B6112DE89F0B424AA6071
1B2821DCFB119F2CE3A87BB412E457B0955121EFD5D365D36D87BED46EB1ACC0
E90B264FCEDF7958A7E3E320ED1299C15D836C1893A1463C96AF729C75B5BA3D
FD65E2ADD9A7D29FF4A19A399E957A057BFE70963315AFDE3B85D5E26CCBF43E
E9C02CB6F255587300FD433C3B4D9FF4765CD351DFCA7FAFF1EA78D0D6FD1274
3F6BC297629DD19925170795EBAA968FD2BC7F2F2489CB63B6620D6E677F37E0
CE583FD73A055ED8A33A9DAE4C1EBF4A68544AD135FA5C64B046AA8835817140
B76DC22B5453AE8CA9D806AAAA7942D7ECAF59DDCCB44754D45D2DAB99813480
3DD2D59238A6ABB6DB6354661340033C94E7B9326DA8412A97C78A25C5717BF3
23F7167D12F37209017BA1C152DEC96F4E13E2A020BDFB10EAF186D8E92293DB
798BE903A6CD768A42943CFA8377EB3E3F4C64EDBD8A401560A53BAE828D3411
D613F0CCAC20A2E48B37F8BF6F1D7DE1AB55FEA2AA4FB28CD56DAE1865B46C21
E0E5D2C384974D9B916012CECABF4909013C20713AA9F936F5E7CFABD6399B72
F882C019B8B853990A1CFA8B150CEF52C48C478EADF2E58D3CB1CA23A334BF63
E4BDC80057E4133240C63B9F081139C86C63F8E756C038C43B1A8136FC3CE70B
1C39F65A893102A1061224003C15F6515215C47B8D91F6CDB4C716E5EE5CDF0A
0660884AA9A165AE58B26B9DE995321CE7CD08D2103181F00DF85CD5F0620801
AFA53DD133145E5A60790CCF02F61DF52C23D3D6770CD464AACABC79FFCE05DC
54B842DD6DDCF8621F0C554C9182388740DA0EA0B1685C049D0ADFE3A907A588
0C22ABED8404163ED364619F58BBA925F05D8D33936255150BC361271512196F
C0D6DB7692A3089F620E06FD5FBE49193410CDC594E321BFD2CAEC9B48E294F8
540FFFA6C0EDCECDFA28A951DD5211ACD684EAA96CB2BC961B806063B7359007
68E75D440300F0BB4F7E959BEC8A8F9033FF2942402FAAA4B0CE6C24A17D3F6B
99A62939188C01706215B1223128DFF2F1BECFDC5A6FE4C18E3A112F342B108D
A6FBFDB214B3134711BCD2A2EF67ED42146154259263EE8ABE3AE785499CDD7B
12DB50F6F7F0127C5A92A54E9D8E50C05AFF61EE040DFE87ABCC26FCDE1C8E75
26FB5F8C5B92169C4C7AB0FB12B06E78283DE4A07212EEE3F443235722B50C78
8E2EF51B34CC67D4756856651BB766773D93984440983AEFC23391041E76B7BC
14C0E3C03464CEFE78EFC1A195E5464F14D0F503064F1C78C7A6DE3181A83952
8F7AFF99C0CB2B9EF7A89A36FD278695F6F2FB9A6F974915B832343051B43695
100CBFC23DA280D5AE1E26FCB4B0BD0159B99CAA060310DD612A29571990D656
555CFAE6843699E4B59FE636A69AE1977B0D029174F502968755F86E5F62BFC4
7324AB92E8A97C2CE2BC5250F4C85416B6C2A3FDAE983520F86133605084D8BF
715E80C51D0EB0CE3DC128FE6CE93C051E938ABDAC3BF288A03DB82CE0DEDA13
81F78E36C57D21D98A7987EB41981AA923C399FC3DEC552C2FC2801E65BA381E
9D78B1E353B61EF3639C7639F8910D0866E52FECC9189239E6AACB28D629AB3B
3D5259EC5230BE457072278199B307FB9C52AD1EEC3FF9852D88AEE485B73674
587E81077EF9A6E76C855A5A3D44F8C3BA39575624E0E724968F2EDDAF124009
42784356690DDB982FCA11212F149648672BD15AECFAFD743ACD35200A3FB427
A71B84639777F9A68C910E1E7D3D2DE035F598923459708750D1FC5EB8BCE603
AB7E976338F1E8625E97ABE73BB6660C7014EA96D6AADF9B63D6A6C74557D87C
35D04EC04539FBC6986B462863D67190E31277472F06F83ED227519BCF67EA6E
BA459F50890484879F37BC88040B8D210B36B744390AC94FA1B1C9889D666118
B10A5B464A6877B94174BE4581B3ED74A0A97CD5C9516479803A561AC93D21D7
AD99FBC3BBEF433963D957282FBB92619762D0781B1A39F4C6EA3141698192ED
AEA808761F6B32ED5E063CC83766E1BC891E392E56B4A88BDB12836C9F7D0315
7BAA643B5BC3E1C2E6710DA8A10A0B775F1023179248743EC18678FA41DD9CB5
CCAE5B6A7FCE99725A15DB37D5D65E035F3568CDB976C9151056EACAE9A3AEA7
2D626CB25316F6E7D22460839A64A5770C96F50D354DCA16E172E26C39D66171
E5C763871223F2D439BA7B102FF96865E7148896BA3318490A1DF319D85FC037
1893CDF3E88B5C1F2F67BF6211762D7AAB44A877C27347F0630E53796D71E3E4
B6EAB31D8CE7E86EF6A8F35CAB8432E86FC9C877C3B915D7F2D911C6DE05AF17
63A97B8040F541446D5CF4BCF88907C76654BD1F3D0A31457C809BBCAA53C6B8
2258000B6D1C02B4238903950CA6C03FF5FA20CBA39EC3711B9C9877FAAA0D6E
56B1EBC6D162431E5125876F3C9E2DBA7F37CB9D97266C499866AC07959BC978
A483AEA22D6B4A0FAD0879CD22B774F009F5C14576BC8C48F3EA9A6048F34B21
3735B15CF100E0AA030D20DAA9DFC40003A73CE0996263405131DD2F26973AB5
E329A4A13EDF5BA5A9757FE24D2F81B5F5AD132BC8334821BF33CB77E40B98D6
94FC1ADB5863915269C128F32BFCAADD404AE031EFE7CF3ED4A335CF5BC6AB25
B9E98CB1EC421716317B6338F8E923687398E3DA6363080E12B2F7E1F13F2A39
2131FB96C14C5BC67454F93C6C24FC3686CECB0DC07E7011431B5937F9CCD406
3B8984C32D6835DE6947E4E53C80ABF83448932DB7B79BA47A02ED0459131768
8C32F9D8006B42FFF9777157408A354170CE47A6E2AC021EF4C3875EB963DE8A
7B195EF1C0908A9D74EA508E12BC00794D58527CC117BEE8A36A6415596D464B
5604DECE5F8C55C2F85D088F656051A94A21EA68089B9FFEBD837FBCC68BBE95
A1ED0E837489D3B8737780C8F5861905907B0E14C3911774405CD1199A77D008
6CEC9BCDA5489C9E59B2448175AAADC324CFC45A376E555E91177C8B1D867310
8B57585E842814D5A0D8A796B70768597DC27269C1904CB068862E6B4019B5F3
F850C5AA1D999FC49920FA9D3B3F03005A55E0EC96BE5999692A512BEA996061
FBE668EAD90CA23379F4FD7E9BE4B540D963F2B43129B89C6722F32459A21691
7FA1EBD18EE205DCAC1969436A19AAAF7D56AEDF2D6627AF5171814E51F03975
B01A710B10FB0561856CCDCF382AD34B72F40D7E45A64278367BCE382FACF4CB
7A4506986CF83627903DD8F69A0C5E37769395AA011FC2ED041F97BAC92BC70A
47D9C93972F58E3B34F22E4DFEAAAB9029998F1F3B5A714332C7289842C9DC69
E946E0FA73157A7D2B138B76B31F82A9A33835B706B54F54909216BF4C2BCC18
8B64AE2445E294070D9E56DAB60BDBA83C13623996A18132A42CD4752A7BDEC5
0B9C0BA128CD9C0D5C304B739B3614F5E7EA7B0E9C8B75B90CEEE3C07C314ABA
FB303008C5142CABF0EFF3BF0B1BC7B14F131F3C56C2F85833DCF1840829E7C7
C4212C0C1C9213D06819798FD04B85FCA0891A254C385E114ABB6CE7C31B673A
EB8E5087FFEA976C7A4B669B980FE4A1E013BD7D621A90256AD6419D582AD0B4
F0F7162410FF6B2E3DC8E5CC0C918538FCC544E20D5305C1AA2FA1CE249E43A3
F32D2EAA47E9AEEC6F29ED6A0FA54BD90D5DE6F5BF4EA5EC060E65E062DD212A
95EBC6AFF8C2E525E9167B8CEF1BFD28B1CD691392B3F42FAC05DBE02ADAC0DF
28CAFE3FBA8795C1D6AF13E272BCB9AF6C75B8289E8A7FBF72C4AB5A2C448735
A1ECD8280D025601733B6401DC457BA00E3035F2C215B8C093379534B9014D56
162AFFBEA9C4106B7C238F58EE8CE549C43CEA57FA2E1D0EBFD17037758B75F5
ECCDF5AC51478B4C7B599F8B42BA06C255EDDA5445A84B4FEE7A4A5B00AB550C
45831D356274748975A6C1A72C34384C0A3BC4455127068D580A9793CBA86AA4
13E4B6D2E07C439B6D5F6F4B6855E85101C20927452309072A4C7E0277A7B66C
E4A39A3F71382AE683E85038F1A48ABFA071C046B77B45DB608D934DE5E03594
66116B89AE967BAA61D63B3D68E9756ECEFB2FAB20883A8D5D962071AF2522EA
2923C889067257344D6A280F86DD07C6CAD3C188F08FF2AA1CD24FCFD47CCDA4
04D6668D01D88E434EF36F8C420188989E4E3A8B898175E7EE91589217910380
5D8474DA5809EC9E7477B6BB0E423447A8D65255FA84F0ED582BE933005E120D
17A23ADE914F568FFDA878ABDEC8A2B64670EA8D197BC0FDBFEAA44D266406BD
E23CB277BE916CD34DA04C814AE8FB1645BA29BAEF80B602AC1206D2F2EDAC78
EBD96F3C68D7CC252185F959BE871CB1EE4C52C6814A3B828D8239B3D90A3EF7
0D9138D834C11809399EB5C60E894F05BCD322BAA4303C4F4992D0F61D2C23ED
9218D3F44965B0AD2AA8CDB78D76A6FE3884089702416274BEA71794857BA8B2
073F1147420B99A21EE897AC9D36CF8B97CD09FD61B25F105ED9F01BC060F773
5941417AD4A52712AC5305C7A0D426982733349C49DF9ED6F554A9D6D8C73106
448644DE1D2E41C7721743792303885B936EFA887B1225D90CF14E9B8B68FA87
3D5155EC370F81FE93ED1ADC6060C974CBD6BBA01BCBEE3A80F0F4E0C3707A40
4831A453B0FD0A10AC1127B4771FF4F376DE9270528E42BDD0B0A4305EF672B2
EC60F6C5D911C2E9E079C3EF7CD6D6B216BA8AC49870ACD5468DDF3207484350
586DCFBFE65835B9120B385F05ABEE2D54FE846D7B46D6C1551CE5060CB2140B
51F9F221E90E8748409A57618118D57FD2E410158B38EC9F0B780C2988A3D910
0E030C6AA7155F83013DCD04C4310909AE582F6407FE74B02B3D0C6B9BB0E75A
13E6EA177CD50E911CF24F692677EA3347B75458D6C968ABC3B289208E413EF8
48B605E2565A99C3E140470B51A148DE920B14319511372D66FAD69FD11170E6
152A14ECFB20556D7A4977AD5A2DF74675AFB3DE34602E7495566DBF214C0321
82F14B5A7733A0B9DFFDA1A7C8779B2B33403263697A7C7EA5E2A2C16964AFB9
AF7130B6C280621C94473EA315BA36D50C79095093B5A410608A5368BE1354C2
7877F25F0E04CE23D36D8F29B1E8540A9AA6BF79BEF8B31D06B7FDFE0944FEA4
CBF104E1F230153938B880532A3EA0B8E7D9843E5D4FC25C030255F378BB9F1D
99B10598A9ED86DD2BF368D470D4DC49BF5D7E2EC9E28AE4E8D5D8E53F1E83B6
270ED097BFC996811B51FD36B39A9FB148BC28C160464CA6879D6DE87F8B7EF9
994FBEE09FDAA4C2D34AFA54CD22E77594549E5885684AA84E9A260EFA1B5AC2
73061EEEB74BC47BE42E95253A68FBB1F5FDA04E71E8251D51795D639822570F
2DD9A7B41338C84C4D9733EB8979931E35AE672D7FD29682E8EF3717707E6B7F
1A013BF2F97E3A70C85D78678EC180EFF5DBB32652C13AF976C6B92F2CDDE821
2DE3E4F356A0315141758B33AC408D156704EB1B478FFF805FCA643C8A4EC178
43D74A725E1235B77260CCA8CD899A87982F7B606873D0A69AFFF6DEC431CC1E
F45E72417215696685E5D0453DA52FA231282B242863D85F8C965AE2CBD38285
B30B9CD93EFE615D54426ABC679F8641AE6713A6CB4CF4551A908CB92D849A1B
F7B3D576EECF5F52B97CB5FCF11746BACF759665C803AE5870CCC41E4A9F12A8
2FB255D7B1BA952119247B3C3CE18EE461549ED5E2A44BACBFA76F0D4801EC7B
59ED22D13CFDF5997E00B6362FF2B510365C4B9C0CA2BC84FD3822B3E6E77E18
0CC94768B538891A53C21809340FB408F830DB542C7B657C459FFCFA5B50143C
AE3421349C49878EAD9A5D619DF45917CA82E0B9D587EF517740C59C7321E8B5
4140E58C4627A12744933D5534ECCE55E62845594B2DACBADC6B6137A4F7BD4B
E998CBD88DC5D8A8C8677B04A05D8753C5D5BBADBD3B4475C9A660025D5F4CEA
3139C2112726D8E277166B4F0B24A618FF8FE1DFFC2A9B3D68CB2404A99BDD7F
6F2A58B3ECB840E98CDFBC28AD2BF19118B3C942AC9257E9DD699572DF824DED
A5C659B601BC13135903F55092A5212F87A9FE49D6B48810C2D8EA46574D7853
E1F92D7C730726C383251567465676ECD8CAF3E8421090419B488D7F27B7D768
D9AAACFA02A29A94C9B1DF5C4645A579FF9DA05E6F229ADF0DCEA93DA234513C
E3B41C3591CE3BD283D5849DEC709B1C7C59022B8D8A6F2CFD6B8F93FB3F48FB
12DBB69A698C8F34F2E2BF5354F69316F0CC1031F59C1CF912EC66FE722112FE
55C32916C252D0DB193B29F3A39CE8F32D841B581418F86583457351B813EE5D
90CBFE7E2185672778A3BE351E587540E67D809239B94C2A145E1F5E79120ADC
02A9D71CF220CCEAE209BC17C1B838C95EBEA013C3A44F4486AF6B017127D375
B5E3A1AD866558B567DB8AAEA9D1199F9F532B5C616E027D21555D4F6F6141A1
E08A4352F79C20F8ABF922C85B1FA823CBE3C98EC6EC84A3BE0D81523E453DA3
F2A3B2223457A6E8F6A94E22EF33D3D45015BB8F8209893F30FD99A3F908DE19
45D079CCADB1616D4D94DA9246617635192D74A98A1570DD350CB0D6974DBDCD
532768A49281B3ED7A8C90E54221F5E6D8E78641CAD87307B0EC81CC3FBD75B6
6E5C2C71222CF80D94DE582B15EA3D220AC1798A572A9D106A2D582942C901B3
1EEE0915B18B842A5ACC9FE75E6A9ED9220AE366C07D82D5F4C2EAA0F198FC3E
06A64E946F187BBF9C49E298C7E0EA3D4941BAE13E04F041129CCB037BAB41AF
1D5DFAC86B77EBCA9621912D6017E2CD199C0ED0A46FDE0A89E91D769FD29E5A
484EE72AEE9BFD4FF67578575792A10F8A0ECA5A41360F974D8E84E7D6E461EF
8E34C1C1185AB6E0140B41E9885E3854955E30D159AB1F5196A11BA0FB420332
81E8BBF441E8C259B483CD1D15B97C8716F17E031BF1F6FDA1F6AC374D4379B4
ABB813FEB0C5CB078740BDD32CDA2789EDECDC55767C6EC7CA07FC50D9A0CEB0
13069C9820FAFD80BE140D9A79DA35ABF23A22BB11E0A59868481C30BE00533E
5476719F21219D14F640B905118AD6A80DB779D7F8252AD2488E5F43E3C98DC6
5B14101A3C963FFF8502466FF682B475A3C91902FCA2618FDDDFA97F9625C5AD
6F9D8707C044423D9E0DAF87EAC186E70B828D84C06D6178BD4EAFCC28AA08C8
606203B65DB8DE2F97B3E1DF1BAB428A458BD03209ED7BE0E8847F58E3C9C72F
931902CF5C65D4AA0BA073562D92023EB1CCCB901A7ACD28C8A0BC1BE3D04BD5
49CF4A1B1A0C98BDEC49E11A13DA177E5B844C0199280BD461B1466C509BB5BC
7D6606940B977CBDE43647E3ECBB2FCE449CB93570A13A56968985A32004FAF8
C2D83A0E123F70310356B6D5759BD338071911E1F2AA3A0854666C16E1DC60A5
7619C0C21096D5DCB50C87A99289D47D87D233B4ACE1BB12091B50B1F91235F4
C466BFAE6A2E29040920756FAB76FCC7FDBA07E8B23B6C50A28F28738C39A906
FFB03694E6E1093A738492F75CEF61B17B4584598A1544FE3AD542E0BC9FE5C1
E5FB3EBE07CB1E40E9341402DCB8B89DE6441B0129803CA03D23C5BC70F3DD88
2276585D04E8EB8B37BE65DB39BFB39ACE675F9D11612246AAB7330DA67D376F
E7DB68E147657C402F863FB47B5DC6872E8BC2595CA3C3440F413FD8A2C8713C
57D42E82EDD6C04A4835A42445CB1E78A7F9A6D2813AFFFB62566C81F2DAFC12
6CC4350515356A7C89A288C248087B094D34A0C15EA2A95FA7FA3AD25F01386C
6E79038E4594A244E2860FDBCB06CCCCB5A520A15CB6B0B75F60EFDAC32356FE
6BA1734E0271AE61AD25AA2F5E8A1895AE72AD5AF982D3E1158FE8C45A99C9CD
83E8A8B0B9F05011BCA167A4AD7263D8DD78BB34E9E63B32ED7E03B4559B1DD3
0D349BC169C81CEF4CF0EC62F60A1290F915A75AE6E66526B83F1BF5FD70D8FA
0A885C316DDE28D48957038B587E3F1CBAD7F25334A15296060C1E93D8561205
688CE21A96D4BB5DDB7377CCD5C068B0EF282D9364100E7414B547318AA1B867
CD7E14C8A93F77890DD999DE8DD7C4F6E1EC0D514D4839DB2365BE64B18FFADF
38688C416A8A042551B0799A76D1A050AFD862AC3B64AA61F8955926EDE07F15
4876800B19D437C6F8D8D82F75A06873D96CFCCA8268BBCE6BC53C024046D690
F7BA34755294852529CE5E4111CBB1904E827CE8140FECC52F64991635718228
7C776564976A602A809511CB96A96216BBC0EE81F60BB53AEF96409CF0F38F8F
DB009787881F302F46181DE32DF751B5A77831C7E50494F5F351CEE157FD9BB9
41704C0A64FEA4F961235CBE1026E617422921794449CCD45EA8B59F4388EDD2
CBFB1A110833072E5929C7E9E774BC6358DBC76C014EBD2D331AA34D5DC23B0C
1F83EFA7B7498F9F9A08CDE53B4269E89FAFC99F2E24D4079478903B8CFE2348
97EABB75E62FBF30B8C3A935C825A54E78DC6118FED5BCDC36C7B44A01FBB8E8
5FCEA0CADBAEACCE72895793A74AE8ABE104C59F1DAE3978F76AF912A712C1C6
683AB358DA922F2D6CBEB977B88A5CAAEB188EF25BEF21BDAAFD1AB18A579732
6D98AE8876076BE93D9AE0B2F3FF0704011782478877A337D5130D7736DFD24E
CD905B2F1D0F483F57FE6BABAC66007C5B22B85D2D10C1CC3B29FFAB0CC72D04
A0DE4B52BFC71B436B7CDD2951FAD59F7D4E18CB846C6FD3377C2831ECA1A02C
2BF0494BEE745D9753EDA1185EF5C6EFC2728EDE5A8A2E08D01F17573362BD67
95F75D9C9B158D1B6D5ABF070B7FB7437C84AAC004E27B09FC3D03B3485D1C41
5047D26562B4CC777389DD7DD50BBD91AAE45AEFDCEAFF9A2B4AEDD01A635E70
5D6C3058CEE1003D027C4E1807A96726
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM0800
%!FontType1-1.0: SFRM0800 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0800, tcrm0800, larm0800, lbrm0800, lcrm0800, rxrm0800.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0800 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-203 -320 1554 938}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B948894BA0E437691D4618A0FFB62E3630B93DD190EBC8F306BB78955
34955AD847F95B1923B90644A4707B718BCB527F8D5F617EC559C70A91900E72
9A9D881D02E289B0B0725B43F5FE653ECE8C5F062BD2C10F4B9B0ED3938F84D7
FD5D3725C3F438E46A270FD43270689A5F30B1FD8CD61E7CB544F07FE57D719E
17CB8A7A146AC514A35380CC6D93840A2DCFBE40307F2FFD8AFC0E54D066DAFC
025AD2A93593551D363563A2208329634F6BD80400775EA44ED4F59B0F767946
25D1A692A6C9197B50C369ADC30DACF14BB7FBF9EFA9AC4894FE3E0A6B3245B0
7E7353569A285310D32E52C36FE2A2827319227E0B024A615243399486706FF6
9E76827C1ED6ED10CA2C9E369D5A507991070CB699F666AFA47FB9EE3D968112
38D5F4624378D9B34F8B00E280EA3F61E4CB33EDCC35F0433A4EF6D267C08A0C
5D5A95A531D8A0E1DB1394DA5F72EF2ACE4CFDF20871C679418FB1B481CC5EAC
C1733601DE79FE5D9B793234D4DE58546A5068CACB9EB1D82644358DAE105ED7
BAAF89A47AF526E481D3E105141FC7EB61A5E5602412613D25A39EFCD8AC6ECB
1ED92210690BA38F6A1E1D49AF1B6C8D7904633F0CA55E1E951E9BEED4339DE1
5C97307776C6238E3C3749F55276DE11CA2924CC66A4E4A9EB28E8967A14F6F2
E8F89D4F1E8C0C10B7CE849A7418C2EBCE1DEC56863E893BFD8F6D83848600CE
2860BE518520A55FF29A64523AD060DBE25482E167AB91C938B5A37FA2944348
4AC18A3E7192D917E2BBBF49B38C61C3085E1463612B219A339BC195E8AFFE85
CE94090E9A0F99D315660918F5E58C0A7BD734F2C663438D53D676F5D5A97DCF
965B3F63F6ECE5866A2A07325962E762298DC8053BFC8DB8941E0406240669FD
3F97E7BCBF323C8145F36C6799BD3F97B7A08BB1A14514BD26F04291E6A14A7B
954B28230D53EF75A00DC59A117A5165C6E6FFB3A50C3C91643A89AFFEC9BB84
301E33B6987EC3B8AD4C95E70F18FBF06DE528AAE8CD8BC6149F0B021A282F22
40E9001241C3E88CA8861B0BAC0946E4C9CA782B89028516FD197058D2BFCD82
627F76A7E5136047FDEDBE356E1CA055EAED3133D3F55B5B2CAA5E3D82BB9C34
68B636CF0570B184BE4927373BF97CDA7A54B3304C898FAC95A0C6BBFE26AAA3
A6F88BDEC13F6347738CCE16C5FDED2C513697ABD8AAD4A0BA298D3E371B43BA
4B41CF5FAF724AA6019838D990D2139CB6629B26664B33564C113B88BDA66704
671E550882E6C3128B52F04C31E1C50C1C3C8368A11FDC1AC05DE282619F0480
126A3298077C69F4DC7E03FD7A02F465D1AD4EB524641FDDA6B361C7F45CC53C
7802DA867112A4ECA25C89FEE5EF826C2CABEE2BE710597061588A42A137E05F
6347E8CF54134C2367BF0166566E456099191DAB5F2B4EBAA872EF19A6A71040
D5DC5166BD316027CF1F2692E1D19D2C0B1EE83704AEBD7FC657F45B35D59522
0CE8DA0A787E6F0A17483480EEDD6B992E4F4CB1023956267F504811CFF2DF50
7E806D849BAF9B9B896B0731C1FF1492E86D017577BAB6DD29979307753E280C
9F4EBD37B53E1C57888E4D56DBA877CA9F3B0FD72A980DAFF4C0DBFF80489814
6A6D413045D165E00E886A162D1D7A306F0682181D88EE9221101F17185E95A7
C0FEDD05B8EB4B11D5406993E34805056529A20011326555EF804A6913C95B13
939C19429E44EED60C9350FFDEDD5CD67212F8EA7F125D9C77BA76EC22331C2D
EA91E8232FC21550FE6E9C1B3C370E48F151258B36AA134B12B7350E4223F958
25AC451D9F47369F744254EC9916BB64E97295F3C14F12BD4707FAB8572443E1
0C34A8247990B75EA61B2E3485025E4A00275EEB4D22E5D73513DA588F47FF97
27B1DED3D0C187D4ABBDBB758232B7EFE0015D1339D57AE2E8E54549F31D5077
D180B65AA64D0A0F1FF41447CFEDDFEB25F2F49FBF611DBE01673A1A38FEB950
6134314B72E0DAA0C76CD30C2768667D42C04BEEBB8CC784FDFCA631ACE631E9
3984134F5602F5AC43300F30BF572FF87F5C51CEADC025BC2EF2880E068D61F2
BB121F1CF8AAC8943C973FA5264B6277B278EC387D36986A3ECA1856E577D8AC
3B4189AEDDD9039D57DAE294A8669C715F81FA0A4C9D075CD584D0565C0101FC
5F1B7799AC0179458BF4A45ED532D8F474E05AC213814F64CE91AA02E0A9F7DA
FA391FD2C36D6ABD9BB073C5DA03787445871FF4FEFE07CDA8A9FB1DAFB7FC5A
2E16114164892B7A53B5BC520FFCE302EE74A10E3C90E3AE0DC43E5F7FBA783E
049A36ECE964AD271540BD7E2F8AB9C96B85F9078D1B893ABDB81DD0787A14C2
871DF2945F239D2BC6943F7C04F176B1D2CE23F323977FB1427A6A174965DFF1
2562D91BE2B05575F0F271812AA7F902B461B994A4D8B1ECE4F54CB3C6F8E69B
DEA3BB8BB21EC2E05C3599C5CA3A43E3467EC38C231446381F0A454611E2E4D1
7DB0D5A8FD36F39CEB5AF530BBACF550749ABC9EED605DD8C85A0B6975CAAF40
F8433AB1BCD5FB4A2356DCDD4CF0F5F6E768B917A0F2008D69D85AC748E9E7D5
B3A6D6FEC2E066651BC3475EAA5DA613554CA001EA2154E555F565C68401BE97
882DB0038A308187A3E142A63D7705FA91EBDB321FEDD092BB0881D1C4E99D0A
4F190DC57F6E747F9A79C61065327339BD263DB86EC9B2D6183B944FEF0898BC
05B37305EE249AB8D4D600567C8ECD0222DC02E4D244042A0E465440F075BFF9
45955EBC50A6502BD4A72F083CAE6B75EE89883887A3A40FF7F62920513461CC
A7C6DDA75FD34CBE7FDE65A257D830EA21D6F8D276492747BC84DAA4E5997050
63C1C317785D33EF879E8D6A207D6441770376FC8A90482E3BF1E4F4AB6A8E40
814A241557A97EA4083D1198B2CEF1D39712D0A79454C7582A8C0CE8935D63B3
4A92DC5389F614C0F5FF6F691D8D2D8B467BBC003D420B4B56C7F3B2BE4D2D14
A7E9F673199F1EE65BA36B132327A911FCAA68088B63669EF26D6E844991390D
FB4C36C3CAA12B1CF5E835F68986451D3D7665C8288336BD21D974E92D9B8279
0D00996A785B1E00A91B333E1CB46BFD3F496A0885272A5354876E1F38BAAAFF
481CF3B5200C19FF70E8BCC2DF28AE3C51A22D69AD053377364DE546BC0F0403
8ADC634CAED5201412387263884E4F0D82C3BFFDF7F6C4CD3674CE0FB438CCB8
0B79C5C5587E05DDC8CCF75069D7E4EC36A3114C7928B8B7946ED8F19D555881
68B56B2B2B9B06090CCF8B88C541621F6D1E70A1F55856B0483412FF87D163E1
038955DBAE6B680DCD9276A6C007EA51D45CCAEE6BE01CA614395D2709C09BDC
FE89E5AB159688355B9D0D67197C752025732FCC393930BD20FD2BEC9AFAF476
B100EF0997855F610202811C925F5CEACC05082AB5548FA99A68A4F4FF435DCD
DB876051DB23A8F721B06445F922092411843C2D0ABC624203BC9936FDC0671E
2AE2B8CF02AF5157B9EEB3ABCB3C1E38B8720429318B32152E0A1BFABCC90022
E50E264250ABD13866E9658C1D31A8F6FCBA1EF02347B5CE65D99A38C4418DC5
B176DA3AD50A63CF97A7022E1CABD518987CB099DAEA4E9F9CABFE2DBA4C4E31
74762C2FBF2D883C49E6DAE639C467502382EFEC7DDA389D53FE0C14C38348DA
CFF21C811708112EFF140633606026749A1436FEB3E4C6BB9A84A692B02896F9
123D2C60F9DB30DAC5B3A41F0008BEE50D97D2C3D6D00103162687353D87A01C
CD68980559251B88E1AC6D6701573622D4345E5DFBC47998037F357BD72BA0DF
8BF3A511E3008490C5A830CE6ED8814AD38940D81487886F18E7DA6572342853
5C6F1A35067DFF2B14E8B959B6A5F5CBB5438AA6AD3E305F374542A6888B1B3F
AF094588A17FD6BF54EE3C1294ECE75FFB7A6404B7DA58DB069AE73D8F408259
4C8D2FD27AF71C0B1C33922743521B879F51A52B8D0E3B9ECA14E6286953C834
35BA46D63DDDB367F34D81081C111B9BC5FE95CAFCB57BEDD3A21508A4C4516E
D8B4B74A277175482A2585FB02F8C1AB8827DA521CE8CDAE255B706452816A67
A6C5F4E7C363A659E8251E5D7E24855A35FF92F1140B797CB755E60DBDF786F1
8A838536F3FE0F7059ACAEC23A0EEDC2F8BDB769213ACFDE742752946E0B6908
9D94BB83AB31CB4CDE5DDE965C53AFB1F238200AB5250B8DC675ABC47A4150BF
70DC99C3064450AC4A843C31308A0CE8DE1F408884FE98C1383EDD388EF5EBF9
0B2252BF68A0660A6FDBB0B23B957B9A789F426CFE6FC0029333F29AF1F15164
425F94938B6CAD395609A94DBAE60E363A99F27D9C937E3572CA2033CE401D62
4BE545D66996232C7D3C7F43790F3E7E639C9DA0EACA669BDCD4F0E2AA3438FA
C6F9D76498F006A4F2913A200B22FBAC78768E24789439F6B0CCE38CA0B2E551
A4B142DEF0B6CD1B2EF1232FA3151EBBFA361593C786ADF9426DD6B63D259A91
8CEA4AD8DA1B8BD8AF5C2F38338CC6FECE6C9777557C8933806A27D13AB23F68
7A366E412839A1E51FBC4811AA2977F2897555AEF49A3D4F2122194F6BA10314
2F7EBCEF2B5445B1A539F0E55D31BF3E7002FD2409AB6C9FC24426436D11B248
59D5CB4DD7B8596F0639ABB36910FFD959B3386F3B40A0DC20C1D5F5514C34D5
F6F5EA589D23B1142501F2377EC0FD20538CD5823C452EAA019B1D0FCD0D4B8D
AA1B7A1BACD7B07D1A6398AB3FE0CE957B001530E1C5769184AF21E4FD370EB3
9BBE0984741E5CF676311A8CE50A8FA91F9B68A2AE149DBE723FDE770D89174D
E274188FB0A04FD6C0E09652E4C7F50215253E567DFE2EACC765A1519EDD0669
F82AA6DE178D997C4BABC74B46A033A9127238FA6EE9C4C5BEDB9AF201CBEA99
4F7607A564FCE0F11B9EA52ADD5AEEC79BC35801C878492489FAE2DBDF47567F
2463F7D6050CE676F06EE0CD9717A6FD605E5D024B221D5150838A1EE984015D
A57361EC25C282B6A0A49B5EDFA8FF2F79AFD3457A645359A122A1C767537CFC
71075B157DFA588D93623FD2DD285F249B2385D408453B6EC993A6DCC6A4C4D7
424DB5EB6200FD7FBBD0EC61859FD0A3946680DAF443FDF8238CF01555A01B27
7FC53686C121C7CDC2A25584F98FE126AEC52AD93AD9002A759CE0D4739BB3BB
9E185D1DDF9A5B5BEDDC40EA140CDEC195884677488AADC0ED17FCA918613FC0
76EDA0A940DA3730FA7D845454FE14070FAF36A4CB63B6620D6E6777837B4ED8
7CB1B318DB600D061DA9CE7F04B5167C9A135D34A85440D6DD0F833F8B6C6E3D
E0473584728294101C4762D9EF6517066C3EA0554333695BE2B2B18966451738
2B06D8051E26382F353A8EDB7A5806F22B855EBD76BC0C662656A007D54F2A1B
232C003D40FDE685502EED6D3D574A2BA7245E93C2E514BCE415B3F6CD9319FC
F53B272C9DE8019687B6CAA8CA329F6CC3FF5B1767217F6FE156CB666CF07BF6
629B4F91222BBAA768F5A9F93690EAAD13ACD5A8936CC5877253324B87B4E813
DDBB3CB33249F5CAD605C98932E6D2762D2331F145758699C216BB3018EDEB43
EB3105E59ED9BE051F4F11DBE5A1491CFCAA39183EB324BA301B84AAB4330B24
60BE3B28414B71D626BC8C7B6B2190F30E2EEDECE8D09B9A6A9833AB5AF56540
C7CA79839DCF100DD9DE9BB712CC26350E41F0557469F319EAB1AE08486E2F2F
AF1BB671E55A162D797B148B8946CF3F5D23D85B1D215753B007CEB7A37F75FC
BD37735332F8EDFEE07A097D62031C64C77685E206BB921C647FB0085BAC95E0
37C57A0D5CCD3353433F531420EAB8A5D47A8D81CD0A8FFAD3ABBA586659E604
8129C9C45D071E74C160B266057F4EBBBF2A1D872034A468F3EE577A2BFFE83E
15A84E7DEABA202AF6C06E84EA15626D93EE7169D5E10E9A4B472B2B148B6741
CBE548847AC42C7DF5CC177309F15691BFE521DE1DA42691C1544B3B61D5601D
E121512D73A7B25D95522B227D37FB7D893DFA6C5546F42C884CB5B5C58143D0
9A5C5B71DB79F22BBC9041592934422A17E931E6AF0F6B8C4F251293A16276E8
7097F25575EAF45A8C953D34045EB0F470229F48A6BBDCC8254B3E605D8CA247
CDFFF31361E2E768D5DD2BBE26EF38998C5125F10E5F1A4DE0F85653A3B1316C
504AA1D334992E49D7016CC28AACA1C46D2B3DDA612AA8F1B82087D14893E36C
E80FDB56B2A18812F4EBB052A895B0064C2A1F07D1337D04FA555B94A91B877F
A64FEC9C088CFB6AEDE27BE8FE31B8A3051CAFF0CBEA517C173FC43847F0E1AC
665A358233C65E55DD233E59A16A311EBC798F41EFF7A86415257F6D6A72485D
DFEF4894DBCA3F28EEE142795ECB59AFCCC0E24285A33BC2ADE6045C697A6E5F
D0BDA49A5B115E46DCD76E013A5CB4E4B6E0E43249CF8C2EB97FD7B0F3506329
365CCD13D0E3B5C7E9E70F88F1603C69175AE76C589CA8B2F48FD7E2FD13A2B3
517ADD9D9B8D2732EDA8600201AFC9267AE6E91146AC59D717ABCDAD9841B729
28C2708C1E23A5FC8357FB2847C143CFF834F8E5CE260BA610C85984F5C1CB17
A517BA490AF8CE6120DC1D4A49FD15D7B590A10D501096018E95E6497BA3A8DD
F6BE4D70EEA167F287B8AA8B1D0A717209147600584CC28192DFF145D6827456
3F8FEAD4BC958595DEF66B69FE6A83CEA33128D8DF339C7E716428D00EE57AE7
42531892BB3AAC1D5563C1D6A4019A419B72EE9C746CB790767A5C5123FF2342
01F76EEF7592DEE52FC481D2209AA1F63AFF79D76278604A4002FF65BBFF2DD2
DAB0D0B3637ACDB29826CAFE57F5C5125253A6EA9D0A5E2F2BC4442473B99A84
A934BD0AE37DBC2067EC814CCF4416CE124273B0234965B238DA2ADF2D7B978C
2F1A623AE97C98A531F99B303B8FB23ED42698CEDA6DA0E2BF195583D824B2B8
F96314E7B88F095F0E1C4DD5D17037A6CB3BA37518075BBDBBF1232BE9D95812
29444AE916057711C1B5E2D72DB2DCC11D878F262ED37B16D2C09E9887BB2646
07F6FEDC35C355A1834570C7A0BAAE35B2F2617407CC49B5713670803AB4D745
0CAD98A4FCB25A56C4EEE667C9416EA4FB87B4A4D21B797B4D8A8B75A04A7720
1B07EA6EAE2B2162E0689733C13131037597224A80236EB3D7BB20227EED09C4
FBB79FED5BD54EB704332072D805BB4AB09068FB3EF383F82F86CA68E175D5CA
D5DAB5B802B510A5BA6B4B71DDE2B01D01195CD56464B9DE8BEA1505C9DE5DCA
4C83717D5F8100991F74A8BE2E5AFF48EC2C1B5BB1074B8D8493ABEADF59D284
581DF395C685507D1D68C363CA1385BED799AB92F188B8AD2A4DAE211CF96484
9A29F8AEC9A6C932A07C448363D45D80F3C199D2AF5AAA31F6BCE3071812C0CF
0B61476ED04109073210DB92D6168DE1D9C331333D1E6CF924902F5F7BC059EA
F78BD0448F9E6EC016557D69AABEC7E1D1A3E631366E2421D2B5450DE3F1BCBA
05137300C8FCF5C8EDDFF061F3DAFB1F2F39E2BF7BADF840529B5E38B5E97E98
B047C085B8FA4718EF4582F1CF10DEFDAB954503D2CDE2A2B3FF24B8064B7DB5
C2041D5403EDB955A9E3C94AF1750631A17DB096B594B6C033ADC43B2911AD62
60DB256A480CD39461ADD964473DEF632ECCC001FAC81CB9D384491B65E4B191
F4C4916DE9E0EA5BAC093D74FC73C772E760FD42B78EA146CCD4F08C6EAF9952
B93BD544AAE5E21F4D9D3444409FC9537E54A042EC4A40B4371BE31CA5239A44
9B6EA9489739F435271641B850E4EF45440710DD8D318064FB68D7430CD0F715
6859F1497F68B9746E2E2AE7C410938C5BC5DCA1C60B4E18A7076E6F3C279DF2
79EA92A7A0092540D10BC0EDAE833A83965A33180B0AEF2175DCDF510FFDBECB
9703956BA1A8B0EEFB9CC7DAFCFABD9D7F29095AB985B37051EF88902ADD6A84
E892C6B4840F2B1B8D8048E9AC111DD510698A702E9C34D543F6CC4D4BF8AF5B
917DCF9CE1CC23A2FB117C46C0B997555C452610015B9AF8A110A06C63304795
E79EA70AB138B4CC1C808604D05FA4D3BDE510BCE5EF6FA4AA3A4573BE52098F
ED4323D0669F9306AE7395F52E2343BE11B8EAC06AAE955F8A304DC16EF1A023
62BE8C7396EE98C9109653441E0A664D2286CB3F5FA7AF78EA136D831D1F89F2
6B235A279DA1C54D3B05D60B0EB6EA44A0C27A85BBD4EA84B7A9394334A1B0BD
174CA5E3CC256B01A5C76F54C285DDAD4E7817C6B93571A491FF36CDF47ABA47
6CE9C69240725ADE8FB7B11692E7465EA15FA179EE0DE004913B12B6F65B8631
0620BBABAB38C14A39CB191D6511AA5594BAFB29F04614DDA706D50E6E9772CF
003361E12F2569A42DF9867BFD8AB4EABF4E9F025EFB9B17F2D3ABC4DF4814EE
AF42CEC87859B4CBC8184FDB1A7F7D5BC41DBB8BC8D65ACFA569DF0709222702
BA7DD962F04F67D22D03133D05A389635D28347EAB7789C8FF5D9381936CB075
8D358F27E39AF188954AD8D03ECCDA898373DB8008401C6C03A9DBD97DC4971A
485FF9321CB6A28780110A4A00ED4836EB5763E0A63EAD40298A6CACB8E2EBBE
31163BA97072CFC395D0D0BD0CD16B5BE2721C7217E8CB4CCAF497CDC4B39155
C33B65E0BD2323FC5CBB0B8C8C8B4BA45E4B27AFEB86806D12B5FC78AB208A18
9E97CA93CBF9681E13601A58AFD8154C33D63407E2EBB95CBB751A3C7935C219
0728B94C3FDD8C754C669ABB838BD4693403A56678ABEE8B8330604B8AD7A5A3
5D1BA55CA325C748FC43A09D0C4D490009857F3B6351D5E7E10B17D5A9EAC40B
43B5CF9AE3433EECADAC14486164A591C4780279E4D7349265FEF77CB1015707
D5F2E8596F27B95CAE0DD740199C6F9941BC5F8C6348AE5E701A0CF7D2AC6217
689676C4E8F3C79819648E59DAC0EA3CACAF4EEC51F997FF3479D7E68C543494
9A65CE764370AD50DE928EBF3C0C4F712744FCC27264B5EBE3D7040150184972
2036D41DB2190A71C7B319E0AA374966A06C3F9047F9C0D1AF5AF7F4AAD45178
1E12C156A0C13FBD2F955366BF278E6931353AF93A55066E890B9ADF268A7663
67B0CAEFFA27CA8C98537534B242ACC6F2D11344A2A524C6D1C7BAD7A3A69E30
647BE908ADAD503BF9EA7273DEE082932182F83C4BDDF163BAF4EB9EE542BCDE
ED2CD7D3D786B9A221C8EAA6415F1AA032735D2A6805ACF5F4FB0387D88F0C8E
0799054BAFB9A41F708E9E60F5222F2A054927883801ACB656F25243426289B2
9FC7A4CC41A26404D3DC64AF36F41E219969970ECCBED4264322C9283124FE60
C9C2ADAE00D4890DC0547E9CF4FE75371240A7C39FCEC98954552A3B63FAB21D
5E44574CF23C964347D332A7D8762978D068E3BA5DE27E3E0031F0A13AB12A85
22138A17ED1ECCFEDD1E844FCEAA98C5CDF301B370A5451CFBA839E2DF940F9A
074440DBA4375894A3345BEB9C2EAA7703C15B1D1DE945308C26FA5FB8512EC1
F7843CBDD076228D1483228F8A1715026139E79E419A5B7A0C017A1A0379F116
55524F10C01D890EE2689F21F230816F201E58AB078CFC02DFA5BB3139049DF7
A6A30CA961F231BE9D5202D6A34E16BD18C2BBD7688BADAA48DFBC17E9D7D213
8B39EB6D342EA9E3EDD2C9C644CC5BF232BF4CEAFFE39F1D27530DDDF56FEC0F
5AF838D79DEFE0B3011526220346C843AF075DA8F6FE68BBDE580243B111BE76
EC06E5AAF506B88FC072D4124AB2EFC33FCDBF9B0E4A49D1A83F4B69CBD26B5A
0FD680DDA4ACB1CC8CE43C92461012AA63FE94C57803D8760EEB8528A1EB39F3
78DD75488BD6D418113E4F4B484AD47605D40D0767633116DEEB16B4BC64E6F0
C733E0DEE8A4F5B8BD3558A1E9C6BCFC2118A2A8F09826DAF852E9D6539DD88E
1861775182A02A3BE1064B43D33C1D85E0635BF92AC4DEF726AACE34087D4E97
29CD57409C1F7CA10CB644878227C7D181E139C5C9617EC85B0149324F57C9EF
ECBCD645F92207F8517C68A5AFCE858589A17C9DB6991F69B23DCE13ABD5A532
83E24967EA1E6B9DC0E8AD3C4EE003437197E0889665BFD5CF095DC10B658B1D
2ECAFF5BE537D91E0AEEE983AB45A6DEAD24FBB01F6557A4019EB45F358E542B
27824D24B074D4F82D7D8BED7A557276FF2374E36EAE558CD7C5FFD4D3D4033A
578102AF0CB2E7A1DD4220A61CD00F1BB5284434C917AAFFC58006097A804B97
915EA840C5D661E4134111BB33FB7F0E042448478D3ED7AAEB0736B0BFD28142
BFD50CA5E2DB14A9C2E681139F8D118914A919AA308DAA5F5DCA211F2C7D4844
74B662BDB92283D532C9C58C98042408A15404DB2ED6D9C27BAC920129956DE1
7C0983FF7ABEF51CB11F1580B25AD68130D9AA69057626DA202C6A35909BA4D8
BF4DC9F1318E794ED89C47409E478B58CC88BD437F0C136C3457FE740572CAB4
D3BE0112DA635A3A0193FCCAA56F93F114B40F56F71D1B3204A73D053CD6CEC4
8A28B92B54A7FF213446046678C38F2811A9C0AD06D6E8B16748ACD968871088
C969169783D5C45052896505263631506C0FD85C86DB60DC08453B6EC993A6DC
C6A4C4D7424DB7433D4F642DF961844E3009F4F0DEBA629561787165A9DA8DAB
162983FFC3D0003ED52BBA866AE01EC417FCFADE9E7E10E5CB7853488960E221
269D5D560CB3BCDCC053DF3D782E72655F4CF13266AFE8AE202EEC57483B52C4
B0CC02B8FB57C500138FD047236AEEFB538BE067122ADACD5B0306CCC6EB9BEA
19E00192ED717537F7027DB3982727A6CE6E0AF1A537C00011B4ADB0555C4F69
AEF7C9B526A7A29C1BBC0FB52692B023C1692F31E1D0F2D7D036990BB524171A
AFC0F2B1B8EF10DD032FA7D0FB07240C8DCA872E58031741DEEEE8ACE1BDBE05
6026C8C40B486A38A612F9CC109AA1B893617833CA7740EA06AB5BE8447BF8EA
00A6FA40FCC70054D27A96A36D90C6FC517EA536BC89510349CD1AFBF6774E20
B2FE3288554515BFA862F3221A83A203F432A6F170A5FD7DC5B4DD2A872A7A39
7020ADD720CF96E4D8794E96C77BABE2E049FE80F1588699607939035FD04180
727AC1D6EC9F864CF2A85813098749DD9A0BEAF48043D99F573E7EE66842438F
D58CEDBFCB451B9EFAAE8AAF21138E354013332B6952B84D332B77AECBBC3D93
19AE5B2CE953823012F0BDDDA4E87A9BB936A79A6BAE9443A79677022409B7B1
A9C15C6A9FED655006431F92CCCA9A75E089C6D7C156C2755A08FA58A8917CA8
0C31C132F6BC529DDEC4EABAC514FF139A3634BC73C998604B29286261F305D2
C995E01EA6B43F24E8AAC5E8C14B65B3910C1D7EEC7B93784A0AF7E514CFBDF2
C2EBF42BA0BED2B2282100788AAC45F0E2454F6C02E32E9F1A0970EC30D128B5
C6F563D1FB7AEE28224F44AFC12EFDA830553A09A1F34CF876D1785B51CDAA62
71DB039BDFF36D0E05B443B381D95B07020FD2BE25594D9F00C2C9F8A4DADDD7
D951C6F57111A2F1A082C93DD011D074E3B29F14C5EC15B34A05EC13D27E9042
B1E2EDD6DF93AB1185D0B5764CAB113E486F1E4B622AFFE3B187395EF316196C
9BE2F79BB4A86F1AE0A176D483A1052880FF1FE74D5010380D740F2AD1C9E5F4
30B3862502A341EC5660888068E3818EEE8F71DE1670B77CF7193C18A99E0C61
8255900283FD7EFBB57AB664C5AD4411CD76FBC92E9B53F1DB74AEE90AF8E242
A3BD1FB35B44A2382A281A87E9AF4E260591C18FC29F0BDFCDDC48D4F521AC5F
4797F7BBDAAEF0CDF6D294D7C0D70280A7042968A144019E8CD514824EE12EF9
106066306092ABBD856845C76A030BF267ADBD9156EF7E0F20E70561D53F4A0D
51B5FBA2844823F926F7D564F2463532A4757DEE6DEF71DE6E44FDA016012669
2C43E68C2ECBA3A320DE1C232DE21801510E612B09BF959D282D18A2DA41FECB
7FA1E50B4027DB3490E9349A3779622083FE551A41DDF3BE36D3D9C3ECA83702
973D77035DE23F89AD5989EEBAF798B72E59FFFC41E1268F3F77839E60753AFB
E1C002F7C42B1C37326D1172F83F6E4DF93B37E3C19BBA49742BB3C0EA5F4235
C019B5DEAAED17DA622DFB280F54709BA1043916E946EBA2FBCBF4964CCA0BA2
027EB23DE8F3491B26BAA768F5A9F93690EAAD13ACD5A8968AC04D24BF466E37
7DE82A00329C607B7039EC9EB9329198F992D364F27F9AA276CACABE0194A714
79403997E8DA476FA0146406E7177A00E2B22593F7EDADA3A7DD72A46C81C30A
222E4311671757DC3E7CC6F7C5CAC7493AE1F9780474A2DD0922392F1BD5CAAD
8A5E6C025AE551D8FE5D6A24F0C8678A99ABC0FCAB9914BC9BA40BD8BFD50CF7
D75FD3235288DD4BD7F33CCDBBD4971904321274718AD1FD1859110612CAC388
A0C50FF95A31CE40E2EDF7F2A684A1E7B30B6BD040AFAEB3933DF9B52C52AB89
2DB301507261AD553A520F266681A4F37C75D26D39E2A9F4AF5E70B13F6F6CA3
17C1A7351FD6220979F21AC87FA934132497CA4B909C86C7A9B1BBA3E92751BF
4083B295E46F4C3B27FBEC03227B64467501908072ADC6E6D33777ABE3BF2D66
FA7EAD71625AFA29921B1612AB2FF44267E134D247848CEE1E2831778C99CACB
30573C5E487A84BE0ADB28406AA23F57F2288DC8CA6FD8DE5E6082917688DEEB
FF3E277645B276E79C0DF2342B77785463C0E2C52FB4D9148F74BBF2CE56AF12
0FD45C0E1171826ED063E88655F94A935BC539A202E35DAF651B9793EF2538FE
3FC75C330E3903C9A02FB6A7A172E63B498CD052FC87931B81EA6501FE2A759E
640998D75DA1A96E38EB16AF774ABD18AE3DF1743A172DC778B71F64D0C94FCD
00344753C23C6303AC847DEE0F651ABDD76C6CE2F7863C439798EF615DFF20C4
E0309BEA0FC555A7BA87D6DD49CEA73C861C50F0F84AA11F1B9D8E2EBAC9707F
5DB2C39CA75F02D5B3460A1539D84014E4C21088AF9DE7302669B8ED1BAF0CB2
0D02507B7C3A46E2932F11CE0421F85B456DE5A989323B1612A2C533F3125D55
1896F2BFDFF3CBE2D69B687526B54DD18F96E8AEE39ECD74074C330119C3D969
28A14A7EA94BEC7E82A8CE69EED997715AEE5BD46A6A372795500EA1A8673B0A
D61349C2C5B0C7A8C8B3ED1601BB44A1CB7EC830F322EA5989BECEA4134B9A84
7FED1654079420802B29FC3C50F87754C6F2A5E26F7440CAB36919BA4D98AAB7
3935B8776BBD26FA2766FDE9E2F866CE05CFB58D473E83E64F4E8429A6607B6D
CE00DFA5D75A508CA387F74CFB89CD2A598722F9B696D0824C45C517374702CE
C63069F2B22532C617DEC6A7DAFD44C991F1ADCD01A1E68951CA025473663372
C394790A1A51C567103065EC661D783BF1258BA856C10F60C60264082EF98465
4059FA3B71E80DAE5204700DAB8922EEA4D008B699433D84CC3804E4B67914FF
3A3FECC4F467534450A052E1A208626D8BC488253C570E5EB65520B129C5612B
04ADA368E75CCC7C399AF2F3B948EAAE22DD8340656D93D619884CAFAEC0F233
CBF9A86CEC90A5A7090142F1AC277C71E5E111FA7659434FB3497C031AD75392
F1911C648C924F59CA0161233B4E8A5AFE184EBA57748E1243084ECD38A43ED6
BEB0EF3DF5243EA9483F86D1F473BB2AA06700572785C5DC13939FFC5263B08E
1C5DF7FE765012978541828400DB7B47D10363A07FF5507A34F401D80161A57C
C5099E02F4445C53FD0B062E3E6250749282E84BAF906A9622D12AFBAB045C3B
F765EE854BFC6E1B033110A6050CF8FC5A432C31914BF26C78967437A1C0E5EF
FCA669C4F347D216D158F816F0D0DFCA6EC27CBD74FF428ECAA5F95E529F727B
7A3A1B51C0CB31DFE1046E845E5C8F06FE63824D86E19363C4E31E9D187AD9CA
260CDAAEDD0DD902F0196EF013FFC7ECB706F5F7963748164DA600EF62334649
7481B1B19999862D6716DA4770DB15570988EB6207F64D7DF540A0854F69CFAC
5F54BBEC2F45774B5DB26DD5B452F67BE9A17B8E38650D525DF306BD03A16D36
2CC095D3189444DAB858C6C166600F03D96173F6204EC9BDF606FB71F8026DC9
AF7595443EBB3C7905C686D6EBA79E856BF07E57B61F2D844063AE49E45DC671
B52232DD9561CE1921202F075EC50EDB41DCDD589A34957DD7DB8FBEBAB47D63
8DEDB57660BCB710487F931A5DCC2D0757B047D81D8FA9BEE7473326367FEB8B
FCBFCD73E96481F4BDFC25FBDA0D8A6A1C3DAD8BDEEE85A0FF7B1A7A1DE94536
A24AA61A47B1A58E9CF295DA3915C64B3AC4088B1D6BAD13A409648F1DF7416A
7FE7063A503CDCF91DF282A4C3E2B3E1E8FAC79FDE84DD1B2405950266BE8D5B
EC4D9570DA13904FF1F6CAB3360F2E070A5E8A38601D62D4246CA0155EA9BF3A
0040AE3C2035C102925FB4EC9A25828679DBFB42B66D6A50EEAECA993FD69821
96D6F135373741425BDD021509A8EEF35FA7A8973011294AFD3E6F608E195E9E
78C54EA59384F0204E19F1B558FB4ECA83FE82D1CB24E75EA8BE8D6F9A9AAC22
94A0ADCA86094C31D96C46DA75F5FB1507ECD232AAE0ADBD2A6CAA32C910EF59
9E7195F5F96C1423F79349637E5BB9F1A93F1701EF6B101F821CDA9936060B60
F7611AB03FB144006CD7F36C8A0F3D67FEECE605A1D0942E0120D5E2CE21C03B
463B90D1EB55B342DB3F65A742F4CB95BF110410A07FADC306D562B0DF7A4010
9543A0E33F06DFB8454F8C52CEFD62133EFCD2E0A1AE11FF01569EF643FFAA29
356F493ACB8B465F66D29D857A20E05E027BFD41A749DA34F041096799CD79D7
2A07B389116D04FF6E85C65C85AF0CCD8D5B824F89F11DB46A991C263EA15C06
63A852293F3AD8D30806980497115BF7D1094C5617819ACD3208FD2498D0F067
4F05A2F219F8768B8D9059AA33BED5160628F2BC627789E0174C5C437CE2F6A4
C4E5528F7CA7B20F299589AC283210AFC92EBCFEEE10814CC2C3EC8C38218126
1CEAC4C114FDA640CB3073718E98A231D3A44BC29751CB1B2D86051BAAADA7BD
2ED05D70CF896ED8F2F4A85CD62AC56DE284E2035E5DFF25116C5C9551BCF96E
E7904D55C590B0F20CB1BF93E8B049EC5053F992D73EDCD95D6FA29F52379591
618D902C9E3CE1ED3A79FEA9C9E992B9FA03562E3705F5E5042F5BEDC01554A5
BF586202D175989FE8E9E7326F8397E5CE7C2018A6A43203AE3207914361F701
4C5F88DB62865A0148B1C3DD544402373E3A5348E7F410E9A3FB112F827CD402
B29FCD6EB2058428157A461A5C22CE970C137226EB16D3762E4F749A571A330C
6D867D844A052AF3F25690A5D28CC030F902F6831F4E6E4A6023F7A5CD414405
A86B1B0D8425E0ECB2E2D9AAA08EADD2C911DCFE9DF3AEB72FEA9A74CFF6605B
45B2B3786C2C54E0F2E5C5A13DEA2D839B35D9946BEEE3CBEB057D9DCACC5F70
504EEE4A87933D9001E5DB53920200708A5BC1850FEB1F81A646B094F3FE802F
09F5D42D773503A74D05373D8359F079840D3F413E14651DBEA52A7E5BD9A387
21A46473C309956ED53FF9C432E1F4B00C331C41B3187F017A7E37B6F56A3F84
5F2F52B3861D7D57BD7C77F10325981C4F9E74CD776412E849D6E545414C54C9
490F9CA0CA4C1A8B63EA31BE0B494F9505092C8062A0C760BAF73EDA550CD507
17CBAF3AEDE8EBEEDEFB3FF1CAC1294F70860CB88E0FD544568AF2B14CB41A4B
80C3113E3CFEECCFEE85E6F356617BAD4713FA8A46FB3D490133B732E7BCEECC
4F135DE3C64DB8ACC5571DC73F4BAF1183F0F9DDCEBE615A70822DEEE4183B07
8A8DE42F9E8BF08F92BABF005D9774795AAF50D9CBDD9DCA76378F90875DAAEB
9A473EC301C7C1EBB02C3343365F17115973AAEB6FF49A13FCE083D3D2AB2EDD
780AE10B38BADBEBD0CB63554702CCCFC03364C7CCADC3CD919C54DEDA6D8CCF
16593DF51CF7E2D279D9963FC18B014689C8211C4B7D15FF49B028CCAA91FEA4
EB60B0A29CF3A4B43C3F2BF12A015EAB86167D28AD972DB686E4D7B44538E836
7A8AD836BB13F85B329936F10E6B07A6F8DB91EF590C08DD6F87910BD9440EEE
7D67DC83584BF32B2D09B0B8FFDEA90804AEC20DE772479E7B448A933781D305
B2C38FDE31F2A9737E15D4202AF42CD3D3F98DE8CE8101F24A8A548581C8A83B
7DE6AD8F3C7E4B3D8ADB78F1D5344B052B1F01AC9A152552F2DEE7FF5C0655D4
D6FC707E24F5CE10B99E1B005E1A5EEF3F2EFB968EFE3496F7739B7D508B2A60
11F8331F5A41860C3FF6EFBEE3D16070D2A2302713A2471AB61BDDCDE3C3B8A8
E0DA581EE2E11CA391CDAFC20C8BE25E980856DE00A4EB68B4B991D8822847C0
77138BF1DE8CA0AF6B7CAC46C929210BD50A3B0CD9B17F2F4397976A72E90E3B
9DDCF89E04C816C7281A7CDBA6FBE10EED9B1D04465C45C1B7B09F5CD3D03431
FA13B33728E80E396E65799C7EF6BDB4599FB13C40623106C7114F4AD6BE959B
74509EE24E3943BB6F093A46408FCD38B85D1D7CCAB29F25F0ECB3E8711A7D96
A6694110669CADA3258CD1958999FF76F23CF17109BCA7E9D9EBAAF8346D03DB
9E63DFDF6E28DADB4696429FE8F31ACBC72DE8FDDC044F75DEA0EEDD57E47980
8381DD595447B9E0D14D16630088030D558567A04393E462A675AD5B41EFD123
9A550A850DBF632156B71515982CC9C0D55D4171E9E50E77F9FF4B35E682CD7E
B756EF5B5BFAE7EBD8BC0125E3465D477B434A7F3F60C6E35F0701933C63DFD3
4A5592802E7E6D61537620F3F0F69FF5805C0734F8146236A2D143101407EE0A
93E8492E39303CA49A5C39E2EEB55E743FAA61D04265B1FF404F34FBFA41F6B2
1346AF2FE836A1094876104198728D7C2014608F6D49C0579D92C1D40B593A61
7DCF42EEAD7BB4F8F4CDA23F454A8446815D212539DF212337E8F7943F3D9EFB
DAF03D385EF294FE56191013CBB7C0C43C67FFD737177B7CF39BF8EECE36E26C
827FE9E049E1A8791807C07FA4F5EBEB43E10F94AB547AB71345AC51FFEF399D
011BE3384BDBE38157BC002232E3F48B1DB0DEED053CD193C9EA49D8407CA5E5
EF8E16FAC428AA6F1923D36B12BC9B5379A1D67331D820D1F8A125B44B335961
012649ED8B6E4CFDECAE72F81C15DFCADDF63B3FB651B5473D368305DC3F0B5C
2042CE6FEE185AA52138556777018885ED32D849433600E65E75870A223A317B
1A35106CB321F9591BFC818FCEC2B31DDDD01F997C6C63CB86638D7EF01C4155
20F90469904FF8B8C5FB03ED04EF8C206873AB236BDA433A7DC5904F6A0A67DB
231BA57FAE5A0640CCFADEDE5FB46DE4F3C793FCDEB366982BDD54FD80A99A83
F7269714AA1DD9FEDE1576E48AA67CA359A53B15994A2E8E130541ABA159779E
AC75749A829E15292506226BF88DD99F3323786A76A1418EE3DEC8A2A54ACA39
B50D8F4EEB73020E1FA440B3DF7D9F5400276E7502DD3313F42F80B4D4151C6D
51FB2891C65120841A991B36C2174D0E985A9A135F1796B80D7EC0FE715958AF
FA8C0B8C9CF3C0F3F768A7A22B9D3357A0CA8032B72C34E9E523E102DDB76F6E
22BAA0FD633E61AAE69F1F0647FC3889262727ECCA19A0C25688257A0ACAED44
ABCE7F9B5477A27E4FC2BC3C4CA5B8FE1FC9E4255391EA215F0B5AA14E760DFC
0F65DAE3EDB83FA42FF495C1875C4F119BFE43C77DDDF25D713494E199C2745F
8B88371B01B04EB9B36B7068912C923F227282CE74DF18D29863C75567C4CF2B
90BD52FDDBBA62374BF35F9666BF2B6F6EB5E89D40F1B0D823D92F2190F679B1
045DBCA0F3AF410195B67FCB78FFAD6ED30C66EC39FE39C26D084E957EC059AB
78D5AD62A4E0190BC27A7957EE58BB069706D8060355989A965556712E341F56
7F7ACCA25BC9ED827E5F44427398B6B9DDA66D726A70705E090CDB32AC8069DF
7783C71E3282222C82E15214879E256902BC2699F110FD5B9D5FE254428567C6
2C432122C52BBFB1ADA60D0716CFC5CF5BA5536E885DEAD17AA94BE214729BB3
A886345700B9C7874C1148E5D4E2BF3BD12608135E31CD553F54F9E7AC9DBBA7
61EA19DB42A9C1F818A3D4AE53C901C23FB8381CF50BE36800BBD9F682FCDFB5
DD130A8CA7FDD32C03780C99D19B442955C120A6D93DBC5C92A94754610D8993
934078B49940F65C89456371EE7E1FAD3CCADF6AB62B27E7BCBEE355EF4763CA
46AD6277622C057E4C93F9E2D5749D928CD9989BEDC94275BABB01545874A920
C0A853D307BC2D4A00F7EEBF8A338C84C96B5D7220A9E98ADD7200D9CB27B9F1
DCF0DD75AE27CC9D486E0FA42F9BA23DDE98F88EA7E23A7EADCF5EA73B176A66
D5B7B1063B068D5CB4DB73FC6AF330F5057CBB1F5F3F28758DF625A80BF2A040
482AB152249F4E44996498F251F4404D5730735A7418D5C3A4D131D028BBB560
BDA6A71D45EC4212DAF2767064B808B83E167F1E2EA406660AFB521D7D4B3FC5
C741C40A3785473E5C02F4549F82E74F34942BA3FEC718B50AFC8860763C7F8B
49AB50C3B89D2A62F02B93E679C5BB70513E39C841093DB4B31FD4CE17497C26
2A29CBE277D51977C3E816FE3DC521D449ED3B40DC0FE3034491E071AA7232D0
584EBF0E9707C33CEE0D97F70DF746C30556CC4B8F904308326EE6E292593119
CD5F5D05527622EE8786CF1ABFB5DDD863FD8E65DFAB71D66B980BDAAFB148FC
E2FEBE15210F648A0B9354067076F88B3EC71EDAA2053FB48BBCB211E8983DC4
5C64A45353B387F69F677BD2CC94A7F80246F4CC881D4E91F64B5312831BB480
D0AB2D7BF06C489C406FB4400BD5EE65D4B761A85276F0ED3348A99D9EEB538C
4CF426D0748FD49BF7C69861BFF6E74C23EA07681C391F7CE714AE2859DFB8AC
2AB00DF2FB0A2B19553FB5F73C47D5DB3DB83F154D3B99092C8C0CABE503DE75
B6681AB690C1CE37D41380838AF18F6BCECCDF7F2878DA0F0329462D2A677CE0
E6C83BDE72FF385D523E5A083C38ED43EC41CDFDADC4442B36968C8DE9FABB07
AD709E67E9974FBBD35DAE87BB22E4757A03B0AEB28FBB0FD05112F39FD99184
AF602D8B82893D147750D848A81AF067B6BE61ECFB2580C019563C6909B64C93
4913339579806DE93E5D88DAE112CB8F8B6686E986EDE9DC8937011BFD2C9144
070FC79D80D8C10140105C5C914E4E2855E8225778CC28A85079FBCC353E2F0C
85D7CFB97ECCA5C13CA0CDC504FB390C48DA6BCEF2C09E12DAA9B41A20108303
849EB0421741AC59F751A2ACA31F7F2681581A42804F5CE9187C8D5A247CAD9B
53F8D021EF7D04BEB44E60065252FC65F4B18E0972DF37A292E60D013A8191B9
801F4D27BDFED7BF291E7E4C902D48650C41278BF015B995D2B71D041EC2AD96
45FAE9CF26A79B4DE79ADC6F6086CD071A8E7EE858F45CC832FAD5567E9B5CB3
D08B99D80BEB88A4B50B897DE5EC1067B2FFE903851F015D1944A01E71951C98
FECC92D27868D646590BAF6366CE66D1A534921FD978D54188EC659004026146
C77E8A1DFED3112DDC1293474ED9ECCB6C605D5F8BBCF3427AABE5E29AE34CD7
8D3C534EEE2CB69669E98DA8B77835719A499C1047C54F33FA3BF57B51A0FC9F
41CD919AC7FDD83A136E59B68A4B89B89BAC5BCC7D17482B34680ECC7392FC7C
66A4C38EB0A5C30ADA76FA566B0D9F411B53860C030587CFFF0D6F3F147D6696
89FA4B8202C93E179B38A24E6F88F513D57EB1F4F53B35FF0337C5C101621482
DA443B13EE0CF4B5284CF3E55E58C9007BACBE28218602476E4C3D53471DC057
3B375CF75B3F5607B3DEE688640F0CEE9B1B471A814E9BE35241EAF86B33F38D
6776C74A4E2A74104804F9EFE932221CA8767A37E7C0B29DD4B37A767048B608
6DCFC2CE6A0186CBF55205CE0D445E3531719148F3551BC395F57F63AE49E45D
C671B5205685DDE7F8EEA612DFF0432B0FE4E7F1CDF6AD18CA337ED6716D8716
7BB986B681C50F309288B7AD35DBCE4403866CE75F1FBCEA9CC3EDE3D4BC2A18
0FF47AA2DC2639305498D8957797F60CA60789EF683AD4C7DC4AB0123025C83D
AAA2FD9EC0423F951E61ED1D4830337DDA78CF77653E23B38B5C7D94B2C221C0
70478AE42928359F617553534544E92C1CF20A29D45BB12EE97723CE04E03474
09EA566A9BBFE6F0E291E8AD7A2EEA0BF36EFC28E1B3A46318DB4A058B98C931
A43228C8AF34B1D822F573403987B58FA80843B511B5221C50D15931842B95B7
A2C1EBB95F4A1FD8DDA09C9C270F92B45609B8D1805570605269769FA7D8E8DC
BFD8A0EB32C8384945C7A52915DD03AF517BCD0E3047CAC77B08B547CFFCAAA6
3B43E35DFDF3E562EA9C3160A98B1E0E21B6EE7EA0C63C1985FF3B18E4C45C1D
63731946812D934D815CFAC69861A6939E96D9B2C43233EF0136071CED88DCB2
7674F837E8C401305E40974B02CE822CED4CD5693B5BF76187B24D66C96963F1
E80AE618E77389C82471EF0634548E854CFF1C2872872524A814DD2ECAB14C16
8048B8852744517D9A4FEEBAFCBC24C0033AEC81EBE20127CE0912C2B680A82D
1053D7E84B4E51B83B8BFE92F3721A7B9E5DF9D6FADEE6163CC4230737DA6AF5
BA809F16031E059A3DFF164E9681ECE52544BBF0FB0D9F6D13975E72120F8834
B9510E00F515F3828CAC6E2B1B7D924CE20A92C9AD010D2AB4D80076C4CC0FBA
D80E9A21F7E2997E35A94E78B6D73E9120DF50DD9807E09CAC00AA7477BE9176
9C933EAF171F19FF137461113EC581F55B37A3978DA294313254EEA223BD3652
08D4896D4A7405961FF0978A5FFBFE0C425CAE1C66D5D27A5FD918F810CC9858
3C8E173DE746ED7E15B9AA3BB83B59228F4E2836C05C0E25AFB1A9262BB10404
0B84C13AA3B533F34FF8AF5B917DCF9CE1CC23A2FB117C43B870716428D00EE5
7AE742531892BB3AA9F6A87E8CAEB333131540B35E686E35792C11CCCEF0C78E
76B3973570DE3CA6DD7143D409BACAC74C18F6D9BFD90E284BCE7CD17049FC3C
E28C5CE2E1F77297F12D702636FEC67685BC8482491C2E5B7283C08EE11D7CF6
9329D85F651BDEDC1B02D7D06B9B638A9E669DB8DFAF3D859A6CA31DA5107F22
90DAD3D865168009FDC8934656F781C1095B8A069EE894161E73A4A2B6C88B9C
9F4DCC6D99A63A0DF0783C025F2DFC034EACA71E6A10C89FBACC6D518A723DF1
1D07BFDC875A1C8F0C0BB4F312BA50EABA3D94BFB89BB4497DF6964575EFA5F0
BCC1B1D3CD218B354B444806AF0BB1D43992E21F452EF68652A4BAED26D472CD
E6F55FCEB85FFD01991A4E9A664F6C19005591F446E7627C4E51DC7A92E91F56
57BCC840C5106EE8BE7021A07EDF2E38DC124437ECD6F22EAE4C7EEDC3DF5CDD
3D51A3E3ACF96DA26E85E187E5C53F2F9A110AEE723E78F3CB39688679DDA3C5
9A51EA7CC11B6D51DA7DDC1B1926BA5EA3F004B65B0209232D0F4588A17FD6BF
54EE3C1294ECE75FFDDFCC45AD5AC2F89B38D7C875E95DF937A5656E14E4C08D
25A61DB56FE9364998A2FB0797EB827FA3329C64A5E1664AEB24C96CF0E60DC2
D06A3281DD6DBDE1797DB85D9426F025E8A9E19BF4798162F4B4EE15553C3ED6
FA6173AAA29F4F6B71F7F0D97F71A1605C21C922B5371BCD6FDCD23A25B99406
20EF7749C922BEB97E01433C934CDBCC47FFC677FE4EE6E04C23EA07681C391F
7CE6662E2BA080EA18870B45D94C61165CAD7843AE99C791DC5F0950C58E4606
15EB10B1BA30BC41FB69F10C76C5DBAEDC298DC4F7AAD21B86B92A15E6CB3B15
DB4E00B462CF7D8385907447523378FB9B3A1FA96E489684D22723EA384EB68A
39B85C3A5E5D1722CE452F8F117B57FBC0A0970FB43F50BFFDA76EA02151A650
632A8171CBAC1D41B43A878EC83FF8AE10EE5DF064498636F2E30F2628FFB8B3
9E48183783344DCB96E253D0257C172636D743A4D33F0BD5B5C693F7328838F9
DC97A8BB577FCEF162734BC085944CB170C4FB37F1E938735A7367DAE1B68355
E64C7605DBDC369B80C68340D26D1E22C8E177FA467AC4CBA91BDA47022F0386
6751CBCE3E72D2BE1D9D2BD275F52D2032CAC2AC0619B6C98B91EA4D6BC2F863
BB5A399F30C12F6BD2687A3DE4528C9E61C9F6BF943A5E1BB08E3BBF359E31BB
F79938BA6EFCAFA3E14E53111A74AC2CC405693F28390271FD59CAE2BC8798BD
CF693663C3C16C526233F6AD036FE5EBD955E9CE2A2621993922EAF4CFE608E6
60564D972D35EDDD263F057868522023F368624D8458C84ACBB28623BE32786A
107F68E7E47EF4E48DD212F9D168AC6107CFC75D066EF64C26CFA499D0FC9969
3567B7222CCFE9F227B5BB965FF328A54E9B58914BF80E1405E3CD4E8AC60CBC
E19DE14E4AD592DA5A0E419838B903756C4F5B75E868BCD7C3EF83DB4B9D2BB8
66AC17EEAC363FEFE6514DE45F4DE72FFC4FC2CB5CA1AA42CCBFAAA67E2CB48A
432EAFDCE5EBF4290C1CBFBFDCAA2AD71C12C02EE59C64F7AF92C3521154DF48
43E02242594AC253873C49330A934C372E4C019A97435469A02DBC99B3C2484B
071CA186205A356DC68AB009807C4F5749EECE2BA7DA04FDA9086DBE301E7B10
A725777818CD736CEDF55A62140AF1078DF6AEF102E66F4AE0A9428A3F4A5313
9FCE87F14739C5144525F713B88AFE1E7CA924833B4EB581990DBA85076045EE
C49385552AADED6BC4FE435F92EF093FC27FCEF898C1F3E9C74EF9E2B122BBDE
912FF7EFB8BF2E7E9DAA01FC4D79B52A977C81275E37F0A5F18D50F04E807BAC
6D1416242AB7EBF044447E3E6EB29A6A415AEC10125231CA7059DC1FE3B93B2B
1DB5724F1F42790C390DD6F50138D10569868C1976DA6A7063DA70EA33B65248
CA88A19294211CFE1312BDB70D1E79CF293CDFE711E98802B6A59EFC9BA7B9CF
D097ACCA9584EAB4110FF15F1C6545E7830F04B7974D3E6419A9C7549780EFE7
43521D1CA9F09FDEEC439DD42BD1245672D80F0C52DECEFD4D785A482A9AC470
34AB8E090A60E6A2D572AB386B2FA6E37EFEFB375463CB1B4D225D326ED1AF46
FF2BA852ED7195DEE9E1141C6ECF2D3C2928E60FA592CBDEF437DAD92791C899
4AAD34177E48CB498F4A7AB3AE7F3102CBF184D8A087FAD2338146CFAE810D60
0F91773056043EAE1CFD8A6B5C7604412DB8875BE611F44FE2747E296F7E78C8
13AD9323100BB6E1554051AC3CCB3B6602D89C6EA5CA2E59755BD7141C9777BA
D266AC1A4ED0E6085938AC4532B7D88CAF4CEAF208F106A73BB7AC9015087BE2
8F05E4DA5299D9E73E5FFF2D9B27CE56376867ACC443791D418FCA1F44EC185D
3369D34FBE8CE3C8266E8E554DCC0CFAA5C8140FA8C831DD2086FCE519E27F26
A8144C7D57622160FA4366B9BA949C44D590227EED0C8721408E383FD0C4993C
31D2D6CEBAED363530B3B3C5CC21B0FA0F155579E74C3D19DE6FD7279E1F8365
8FF756B52C87B6897E6D409F163FF9ADB3D525AA24FAE6D106EEB85412A81F12
F2AA7B9D10729DC5855D7D9A72F83B3782E513041A80E329A699B90AF028658E
6EE2EDBAB71E54181855E73DC269B81138DF90C0D47E2A216C096E379604E08C
B5287A7BAB2332A1A111AE3B7C647628E8EE8C15F5A5AB07C11E9848170A39E2
0D60F86764CD473B51E877E5F31ACDBD05C06D1C6C489B6A72792D1F52A58D65
7DEA997E133DC9940579F8DE1DB73C2915DDE0C3BF224D4C2CF3EC18380CBA15
DA6B0A02B8E25C29B36D8009C8BD105A913C910B28AD3DAE54AE859BF245BFFE
B1A3126F867E0B7A0962E506733D339F2D6419C881CFCB2EE057ECFDE5D9D6C7
6908DC2C80B233F1C479252D945C12EEB95DCF7A42FB2FE1965F4AE1D53FFB47
854FD21AB12F5C150CE841FF305ABE6267AB4D632BB23F86EAE1B0295DB72601
DB84812A92D8DB4298730F267BAB4EBCDBC27E8181A764315D75B065F368B41B
DCE887D9147002788B2DD1CF1875566A758566FC08DABC8A467199713AB84CB0
173A52B35E8F025E8BBDB2C711E3BAF6DF21FE9A45A87DC2A694104618143601
CF0B0316A15C0F25BE840E0CDEFAC0694A7AAF620207CE1CBED3A67EBB1A90FB
F64851305E2CB365EE0737E1171FD731458EE69FC42B064184E29133F0C37FE3
B833B55477D8A9C823A1335CC5E1B60E1702188C8EA2C207DAAF58358FBF9BF5
22CA2DED3A8345425402EC855F8B4CDC18EE37BDBCAB8F4B5441CC0CF5D47E7F
8EE50675DF3F7359574B2BDED25A6D43AF91EB9944A0454CB691DDBF843D6C17
30434200ADAC20B41D519C8EF5A14FA17288E6DB882C3A883C7A4E0A70BB1321
C639B57CEB251EA812D386BB275AA6D6D56C83895840D32212F7CCDA403B3F93
39270F04BEE47CFA590E1FEDFDE240BADF149542A59FD8676CF7767305CACA53
903867AB4A92B4DAF726DBE0EE4C50A4E2691DEBFDE504FC8F680070CD3AD191
956AFF96516756DA1FFB5666745829F04614DDA70CFA9B9E169F96A46E2D1B02
07F07D84F8F07E8AC83E76967445B1F5730DE62C0387546FB0DF7A40109543A0
E33F06DFB8454F81B01812D1FBF2590B8335EBE1A5D87E86244D98076FA674AB
5F54BA9DFC5215B13ED3DE7A9B79539844A1D0F1087E63E2118A34C29E0A1194
59E948C01C8675F383B37A335980CC8BE8022462CB76D59E931309A4318FFC64
F0429342AA4684E5E0DE58E377C52B454B2392DB7CCF43C301B4FF9E8ED7AC56
1550EBD1B244A6793A2BA78F7D050C909E92588F7573E77327B65AEBBF020029
105162C7AA814CA0DD22B8939E19F0DF24E568936163FD3FAFD44CDD3B51B06F
D2B75AC1987B727E6E7B9E4277A1764940AE0590755FAFBDC5BE8716BF308761
6AA76F06ACF2874BC431C3A26BD62E8FF167ABE87E09901B7E90DF442EE12E19
92FB91FF8EBE13218C2222783DC7BD1684561A55B331890A74C6B8C95F76977E
198F0EC8734E79099C9C126893E3092C82E0B5A0ECEF203C09D9653226B08020
16EF05B72E9DE0179176C32E07C2BAABA83DAB9E233E97B0B2AAF59EE3232412
E449DFF88D61A32CE835E28411FB05AB8E4A071D85D21F3E268ED474E1BFF945
C964F7110A7AFEC7AD7FF8BDFAEE44DCB3A666C49BE0857124458960F4D1614C
31AF130257D1686AA813EF974EF523D188447A96EBB38BECE8BB000D20F6C6D1
E10DB824EAB95DC1E19B1BEA1FF2FE06B84F6B11D49C7720B5870B21986D38A3
C6956FB7A910774C0C84768D21B18F713EAA61FB659D85577FB496F37E87F76F
C939B8A4BBE840BB1B2BFC9710A4F4E8963EB47A64382BE1466B4EDF5FB54FD1
0659892DDB36641E7E452F1CE50626455B355FD9296690CCC73AD6EA78347962
58B48668EEC776A5D93BBB7224EC8B8568C2CBE0EF1EB196BA3B116E3BD08C10
F4DC94E6B714D515E9EE4923397E773C28297552976169094C3A39C3A5FA8DD8
8435BD3465E0E5AC5EB5CECE43B5FFC71B9654C0CD05C6E2CE6882A07C54CB74
B523AA703FDE1DDBFFA8371DDC2696F12BFD9F1B31D65379E6E9B34B0AF0998A
92C18D8AE1C56554E3A915008BEF5AB6DA89264846E4FE0C6A31A65566A2B403
BE7078B7C1B18967E8E6DB962D2BA378E47105238F5AE1585AB04A8D5A61D339
A57CAB70BF99BADCF49E5EEB183E74D21BCE8C002608A7888A0031034A1652AB
E7D4C10AAF3768A2397D37D8FC3CBBCCD60045E93B79046EBACA02C7C20A3651
0371655946AAC8C77C485A00714EDFF5404272F146155E3446F9CB345E3D53DA
4AB6E11E3ECA1B860FE4074F552236D12C6C309CB775F27C0256EB88DAB4C2E1
534E93283D73285F32FC4E58AA19D9D65A25842E65EE2E7BB01514BD96D8B5A2
C5038ABEE822DB917368D94A13341F3DA3732ADA2D2B82D928424F3B138ADDF5
D711F320C1459E378B2DAAD4BDFB6771DEA279366F257C8BC67F776E1D873907
33248992460F8268D4AAE397042BA7E61C9E6303F5A05AC92CA48A17DFA2F6FE
68BBDE580243B111BE76EC06EF9B81D0EA95D933D6E1B874BA6AB0F43F345881
186420ABE61F4165003FE0BF95441E8A4D8BB7A286078BCEBC6D07A2A386202C
721BC9C8E51804B1CEB49BC2EF0B1319633497745937F0F76A78BB05C1165DF2
2915EDC30D97BD362D4C76717442D5FB7A55A1934948F56E0721813AD2A287F0
9476ECD62A97F7D633D7F20EEA683779153F8DF735E7C729930DCC21A704583F
FE9211657D41462E67A4EAC0BBB5432B32EED6A0425C61D30453479859C17474
B3D0C4B0F0FE41FA6ECF96F53762EDF399A00AEF568DC2E12BE0C341D435ACD8
C4505B3890AC76FF84E857B5EB9CCC5D4B4E86225942D24BFDFDB8A432C207E8
68CF80D10207D2C8B19311303F6CC2CA6EC720EB51D4BAD0A51732029F87515B
CC95717254377F7AEBCF09E5638A79F0551CB919E461610136ACF57CB21C532A
5CD2785EC8101DD99E03F538083B9CB8E951586D459054790D28EC9634E9A154
8412AFB38F279F980D57F5E18BBF484BC0F904179D06C106735E3322D680CF73
23CBD9E40141AF22FB8A18A571B3F379C70C8E4CD56779460F29EBA8E3EEB5AB
A963AC9713ECF73AC1B3A86FA83ACA1AEA9B9EA11DDB28906F7312B89C0C28B6
ECD814EAFBE88528C5DF2B676BEF8AD91EDEBCCCB2990208B45D6B26026854C0
7D282BEA32F31C594C14028F140CB009A24A80270037C9B5E51ED77981588D9F
C1E2C25A228E6AC46A6B38F965DE119AC5DA1AFB74AA66885ADB605278F7EB28
5FDD3B481E31B5B5628254B5F29AAF5F483991EE9CF21AE4FAD56DBEECDB9754
F9515571DD710D88690A3845A5435A450A99E0DA6D8042B7B5E3462B8C46CCCF
D140D419A5F7B4C4AA2E1F10943FA7825EDE63494C5E8AFF8B993CC7C4541FF7
DE0979EF8D4E3F731EE725D6DC1CED64020404B7A1BF73D9DD0DDF595278BF51
6641EF9D50696B3EE56D925829C236332D55D86410618B0820E8BCB4EAB40FBF
615AFBFDD29567B4DF7CB79E980C2A6B24F8EB5CC90E3F05A4981B6DCC687554
955F6466EF878BC7337EC0FDD234A21FD81C60A2DFD883DC43BE579B5F093B20
0D63EB2C312665A8DF2A3721565175347CD8723A536D53F76F305E50194B7ECA
EB8172BE08C65426022112C8E3279B9984F4688753639624B083E54D9CFC973D
06723B0EEEEF4282446F023491318ACDD24C714E1750F8FD39DD195F15D802DE
6AFEEBFC51C876E19CC6483004AE42CD13781E4609E99B0711D94D7EDB931969
D97D6FAD6E53F54BAB6D3829BD9E5029B6CC8EC37C989269A118ADE088A0C65C
626C85788ED0B950B6B2D6CFC86493E1CDFD2798D022E63B47031DBA44D2E606
1A2165210C0260329A3E7BAEF56861B4BF1D5888DACBED5F340D392D39AD11EB
F80D988B018FDCA75D15ACC8755EFF2C1A1D4F0898139739E9338071E29CBE07
BFB4AA814CA0DD22B135965AB4FA020172421DC1662883849E7CC94643CAA370
A8AC103CAAED3A9218D70EF87FDBFA784884E36A477334067545B6EFE8BA2FD3
7149592ED9167A5AA41B2D29A6E2AA2B17682522FBE110BE6274895A3FF937C6
CB18821D12B6D8711743C2E1A67857D39B489E54475AB2EF29C119F0F209D795
362FB642EBECE2BA1047A981D1D528C49879F5E499649DD7C5AA9A6F637763C1
085CD88AA8542E9A95EBE1E5BD4B0A01D02E986189012F5925C5DC14AD5AD676
2177F75E53FBC32381C82B06160E717599ED741751CFFCE8467567B092D34EBD
7B42FA5E3B7944D6A8522C4DFDBC5BB43C61527AD671E405ACB9F4B00FEA696D
19D9769EADDFAD34E118D43C83832F227BD254633BBD96D7B23474BD6CCAE8C2
707BCB4A3CD42FDFAA93CAA2E887BDEE616AFF4A66FCF41D02C7EA388839CF03
978F5196CDE6E1D2050E48DBF90C03F6DB9AE77AA6458C2FB8A3CA9CF5CE733F
D76A55804435A1F74DBFF679BAB5DBE079922BE587BCB1F246463812A24DBBBD
A56594DDF6C2F2B8C944DA40AACA955A6F03B58AE3662A66BA85272883651C88
C511E5E3D25D0F5D24DE3143FB6E874B5BD7116F9166B400766A7D4058368ED4
C9B9130B00709320CFA258C6FF069A70683E350E931A5488265E57D755062DF6
A17C4F3DD61486659AEEF0D1E8D9575C6CE4889BA2727D5D790C7789C184F2DC
9EB2C76E6097D65D9F39908B4C85C13AF52E30AF1E7221C43389CDADCCC2AAAB
1CCC12AD3E005B30E63198D7660AA11961CFBB8504D3F128B403B9001A9E0E8D
7BD2E5FBA8B7F9D8DEC33000854A23A623DA0A8AE12A177C7B27F9D8673AEF71
F4FA68D626A9929BF6B8A281AD07C99FF0DB75B3A2E899F4F3EE7A00160C38FE
3876EEA5001890B5171723890FC7E35E80212FF4EE8AF463252D9E0E38DB134E
274851C8964589C0B48D3D019086246C1B91B6657875343A6EA814BDB66FEE9A
F91CE5938B121C4C47474E345D4DB5F5DD7C3B3DA5F2C9BF9A641BCC7010205A
A0FFD5B9BE66F05942607162E8B937A214CC774A649F4C91EF1E08F8AECA7D06
5EBC0DFB7682DF6E561B155C720BFCB93C1F16764464A7041799BDB336AC4F5B
A8A56B818A46D6738271275F2B06705E64A21FCB01997144DD96EF051617D051
F75D4815B8680129A7809D249DE4DF24BCBCC95E85894A8352CCE2A555308320
14EF931C354506C4DA1CF1CB3397B5DDE276EB0D8B12B256913E52D3697EAA59
F8DA7B0C837D2C651A03320D8F054D5ED0403F2CBC985B2DB620CB5E8460B4CB
9E31DF469BEA6168445964C7A4EE7A3FD3C390DE65CA4F6574BB1E01B3ED95D7
36691D8840D1ED66484DC2458A29AA0CCCFA596ECF3DCDD37D54A7E014BFFF0F
FF8ADCDD0BC65CB43BFEA6B2FF748F117FA5EA4E3A6BA529C38DBB2F964F6D8A
5827982E2CAC242FB0ED90356E5DC623E75B2CE48BDA5D958F3D80A9E76C3DA2
AF63E0AB51908D892B65486D88D0C741A9D576370D2FA91D8951CC685C147401
2CCFA0F3578572A1105BE14F807E9993541A399C6D16BE6C6918334395220765
8455FB81B09E3C48CB75B6B03870275FD8383FED9887D68479C85FDBADCECBE7
19D8674DFFE102DB08E474E219120D2A9575F6F8B1436B65B80B3EF2B17A49FF
DDCF78A1714D3F9C90CE7F8D0F4F59D585828DE1325722D410415C7F761065E4
7F29B3A9F2389C26E590F80B927A12716D3100108FFA084020D07F3834C8034B
0858893ECE8C4A381CAB2ABF9122B7E2064A376465EF24B2364AA1C9E33452AF
F7390A6D1415DAC3654C54C9EC681F0854829DAFF653300EEA14C4D2FB21C434
FE2DF3A4781AC711EC68B79E8DDCC82E586EA67A010AC6052A54548AC76555F4
6F788444F7A1247A47A61F704CAA380F086F8A87C7D5D4860AC5489C2FBC1FA4
E85370D8C54E0BD8EAE26F07F2496A308467D061ABE5B70A18F783B57E513315
0ACAF2CBC3885D34179C9BAA805D7E49A4309F6D9793FC6D403053500354289D
8CA4F666B10A8B41A02605C1C2ECB0F5405BF370B45488F0E706176F1B138511
66F4DF9137EEF043C756A23824EBD28C7F08D441B2C4B6190E88CDA6B20E31E6
307A06216AAA4DD8371686AFFEE819C266F052EEED980F39FA8647F4A1B05E7B
70CD601BF1401C6511F9FF2CD09DBFE40ADB929E049924F0E9D30E9BA2F10E23
10FF111F801E3359A6596C0185500890E51945B5B66DF4C58153DC0105ABAA03
69F6E2436A0A69CA2F96D620F9E73FFFC3BF466FDA6CD461E0FFDD170AF8E2EE
EC0C5D329F728669DD4F41D32008727C8D80F133BB7A04B342ABA1ABBCD4488E
8C66F99EFE62748DA8DF0DB42F11D464546F5BAFC51A6F28847A0F75683A5593
84F7D9EE826D5624A20011326555EF804A6913C95B139628477C1D3FBD147308
CCE29D51300C269B20CA2DFCB8C7DB2260675F6C03DA7C9EFCDC6AB3A0B6F8CF
FFAE6691BD37E431CEA17602DB2C9CC552AB80EF33C6102BF99A3DF0153E0AF0
5DA4A7BD2ED05D70CF896ED8F2F4A85CD2D55D925F4736333A8D509CFD7519C0
5FD3956B723E38B240D1153A3448D307C029D465A57CF963C35BF0E6C1EA4A9A
856A3131E15A75FA6AEB3FE3F2FEB1B90B29D3E3A1CD8A96F62A36DB11825E99
124389F65E0DBF66CDB26BD993240B18E401E7145A969E1383E4B0AC26EA2A24
85F4A95922F60861D99911E33447DA325FA7EA0C5E172238575D0741F0033B2E
75CCC5DB71057D51A6386E3D0607F2F83A8E26A14E20628D29C78F4584800D32
F62CBE183CD9BD4E3C8FFB77803CFD7592DAF39988AE6A8661913198BA54FCD9
4646F6BFD96E5F335389326D3F969FB9E4440BDB6BF7259E4DBE57C8902A2714
825300D37585442E398A10519125D2F2D4DFE40C3E3614F99773F7588F2964DF
D7A8C589FB7338C2B819BA4E14685ACD85FDECB0CC3AB84EAFBBECEF9A6391B6
C8D23FB55DD384A7D5814116B912C48FFA971BF1A83DBA140FDA64CD94A8DBAC
6B74F6B4620EF97D68FE3C148C57A35DB63BC83E43F6E03946F2C0D824454834
70F28AF65F29CB086189B06D20E7116FA26AB36C497E2C64066026BA3195379B
8879BA7B340FE9E6DFAFB2D3F8F647BD864A57AA3CEE39F00379C736D07A87F9
D3B8A0F3DC28B0BBC0CE198A3DC7471C53D6A971F5E7B611BC5AC6069566DAA1
9066B51C2D0AF35CCAB169C4DB747D16796899F819A7FB746C587E649253ABBD
375531924EC2D0DC85192B653C39D477788CDFDB82773FC5C3E21C814C0A0CC8
113FBD5B6AA2DDBC92833AEBC1FB269E1D1FB20805BF2431FBC95992607C9C5C
20FA6985603555C8C6BBDF49028EB4377E148F92DA4D5F3D2FD8F9C55E697BCC
9D1464614E53808699D1A13E7D573ED08F73B027812974243E47D4F7E8A4974C
A1960C6F4A305FDC05E2FC4FDFB2E430893183A9BD1B7B08E80FA1FDAECB2BF1
D3A81A2C88C88B3080AC18059F1F61C416C5B308826481E276FBC477560F5A1A
DAB1D41796EB475526ACE90B173C1EC2FDF0A82B04DF25A018A681C37BA56FAD
9A4E4779875C3C2C069012C7AE96D8827B8E9B00A16560CC8605E0FEAED4BFE9
2A438FDB3342AFA8C2997C1F0F120D82182CB46800861A7B2D813269FC71A679
EDCE7A37B5E57F79367101861591D2B7126FCE0C05A3F34F31755312EA9EC2F9
5DD820577E4CC0A6D2FB76D6844C1A663BBF1D4DA43DD6A067928934DB303F2E
DFA3E829B2353D4747C6F37D45E8AB1BD0A0B8A299FF8059AE55F0F7D2668B9D
E3A36154776CBE4939BB83AFD3FE1EBCED986A271512171B97CB97192C2C22A6
E7E18BE0B1C896662175C52E51B5066B7CF282279C8788A27BE45E955192CE89
54EAA105F82F76B55F26C81C98744B4D9DD6E0AC73D58D49198C3940BD9B4901
7173A2C31AB1CA06F0C6D02701607F72E5CF6497DB7D3B8F5F1629998F846DE3
EE881891BA2CF68139686D99FFF558D14C989C68293732CD495340BD701D363B
612DBBC52939C28C2A3CA427551E5E52757748ECF93EBC0125E3465D4092FF0C
8F1EAA9F749764F4D5246BFAD021C25A92A2A4A5251B46A9BD84CDCA0C1768FE
3CBE9189DE6EEF7A40EA032F2043EEF1E51D58DFAC5DB9D97767DB43D6D0FF64
15EE850756CF57AE43CC2D9F9CC4E059376DE3D0121E794099F102CDFFE2BC1A
4955254B61064716E5F0D223C6B19CD2AF645AAFB679D16D0F77A9D7C73932E8
91C7D1E737B3ED2F8997F1A403D90982AEC3B3AE33596B251869EE367CC1F885
2F2A3BB86D7ACC7AED563B45186109882745643DA5DA936EE9494A4908BD8D92
C8C85BAEC39BFA9D7C8DF616A1BD6B4FCEBF88803828B3169B814F9E0840E04E
750C880CCB8DB3A68ED9597F65878EFABCA8833ACAD8C5CC4078276CEF1BEAB0
2D0ED07812167DEC964C7AC05909B9D2E36054A00CFC2CA559E3D6271A088365
D6B76C265E1BA60BDC893525B76825C94F92C71EC7B650CAE0365F69B213DDD6
258C9F3F257005F7BDC6BF2EE2387FE75E98754E155AF56D4E86B53EF8DA834F
1F02D3124755E7A41D87C54A616B23AE408D71CC20479DBB2C519FA13DB31693
B3E67442B7E51FE8766871C86F3F1D8610A48B94883E044151D648762157CA6C
3080C792E63A12937C690C77694B09C6698F1D218817E4466C70C37C56D98461
E40DE8BDFF2921F3E07B5E1844E6986691582D8B39E5A4E7D8EAC4120253501A
B52D92B858E711B40A47C6859C4E812BE172F8378ABB24F03DAF54A30703FF6F
A6F9D831902BA8706CB2D3C640B8954D83BA1F35E40EB2908764C119F548A78C
0948E8DDBE780DA4DECB8AC01BF757C2CD465B29B483F041656F4A248EEAB8EE
5DA30C955D2D6C2347C099A0CE518640CE84B3DA0025F24048CE608CD136A03B
E4C3F311D785D6CFFA92F03252DBC4FBB284CEF4E7FEFE164126B14374000F32
CAC3EDAC59C1B9D05AE9F9E05889132E4F4F44243B2B307EBBCD8395BD5D8ECF
505D7DDC9C31493266834868DADD8028026F2E5877ED44004ECDF6CC7BE187BF
6B554B4856F57FF2E10CFE0B1E852F9CECAC20BB15EB9E667B2357FB720EE02A
04EF7DF083A3F930DF2BBA753D502674F48013F8407C45764252397C1880DDBA
1AE91FB74CD52A55A594654670D45C66B609E24CBB3426D6BE652CD99B6746FF
170FB9524C128617FFA82B6CD269B2C1918CA757F960D39B3D383331C3FD7D9A
627B5249A0A3812293CBB9844F353332888CC0C1256DFC713216947DB11DBBC7
78E1A1E86994269885D27DE87EC9885EB1CB2CDA0325E470CA72949185A7EF4D
6763F80E3A9BE5BE7699FB23B93E6F226E509B5CCD189E805984996DE60DE8CC
1D62040F8C5EF16E28CD67CF07BE794CD6978693AB5F2689E4371B0321F94289
365C053112873FB678210E90B191AF37BAD2AB353FC0E941F3BAAFADFEC416F9
E0656D70B2F24639A96C044B5ACDFC777C0D4E11DCD7EC57D76A4FE1E359FF63
A243699AC6F50B70EC2A35D0F70C3E530244F6B4CD92EC1219F8EE99E9E42459
875139EC0E7B98EB9C0A8D58FEA7B12E3362DE47900E81D8E3CDC7A31C62EECF
B27DFD80E5E1E9A5F0CDAC6071750B3EC4BA19D134D088B936D71AC5097A414D
B8D77C2E831C974083005DE47957ABE22298E698C49179A59BE502E5E5CD8939
1A09480EDD3F47BCA0D059EBA35C8C6060964D20BBFB59C76E0208F907C3A9DD
B6E937EDAE0325870AEF9819BB3577C6003CD80FEC5E89286EA2A667F8D1B187
A6522E893D2BFF8A68F90CD2E64C926B7EC6738187CC07AD89249AE722E35A61
519FDA697F056DF2542C9261FA6704068F1A6BFF5791BF3E6AABBAC2A8B10CFC
FB6595FBE3D28CD59CD2E2582B62C7B94362FCFD4C4E418A54C38C72D2881100
F48CC64ACFACACB46461EAD50A811EB2236130BB26B9C3F073765D0F0FB720A6
C6528F83B2B6550E2736525390F78A0144212012755CC888F9849100B8D22880
43DA5249C50688545606FDAB926083DC227159F1B3278F06526DC046000B7589
F9417BF15E4E5996C3D78F2EB88CC8CDDEEC906E2125DCE72DB0B00D0B4586D7
A5E60B2B74F2FFCA5DE58F5525EC214D4DC1B7CF71BDA0C7EF3DF0153E695A84
CC071059DDC2D503201657DFFACEBB739BA16616D4EFBF4E366A118A90330107
E9E1E87A987A7A1700AE9982483AF0A015D3C18D0AF8B0E76B1CC4AB807413D8
F68B835E62D701D4F0F87F9B192001F202F9D2EBAAAB55DFF90C94E7E58557D4
E0CF0C04D891EB905F9C25E2A48DC22326685113987AF9EC75DBC940BC24BA8F
E906585645E0BAA997CC972E1CCD746930491F53612C1A6B8C21826EAE7E438E
5B53147F6C2B147AB10BCF4C3626F52D5809FAB9CCDF941F7F9D085CCA60337B
E58B56B931D7FCD3A844EA19CDB2E983CAE29D0F6EF374098D14FFD94FF21D20
1847BDC25FC58EBFAA6A7B24464309D9CB4E8FA4EF53B536A195CCC1E1CA7D6E
28EC4F3057630D60CFA0CB3503B9FDC5C0F0E5FDB525BF09A647406EF4BDB4BF
2090B2776F6DF3EECABCFD499121F472B56FB4F28D4AE093B13C7C1A567C550D
CE1C8B391221D616E50BEA080332A0711BB2625C3C450EBBDFE4E2F38DD6DB6A
07A9563D4F259AAA88DCB2FCF9C7F94C908D6644B7DC5E0C70F15DA6A3661067
48AE17EBCF7A39A4DD46387B3619371EAB49A2582192F07931228E338C40C14F
4C394C4F2BDE827F7AC73A31D22D4C84042B5017CF96E12F3720CACA644DC007
24F406A64F4F747AC0481F50960E25B6DEA2AA578D98AF78BD9D63F470F17080
677A017A98AB41CA3D79B90B7EFFC77CBABD4C375BE66E1AAF82B6DB2E0E7926
E5E8494F5453B1C2C43CAA4F7E71A893FA5B5C7E41FFC7A97A9B2854AE2E486F
F375B1F297F7CF3C0B5F8CD4F320E74A559079F9A0193DCEC55C7A7358595F2D
347CA74C40B12A4B74F5B2C54F88380D7BEF01A7536E04120F126C5FE4D16060
9D24721B263099B618426E5D1C22CFD332555F2CCC75AA2D6923C9F2E37AA480
010B9831BE707EE3180309F66D28D217453444F4BD27F276F60078DC72E26C4D
EC52C0864FF4948F9F4737A89431B394081F32FEA35C8F10D8169862C53EF60A
9C352E053B4DB26BC023C6CD5D652CFF98CB9E19ABBE07DCD17322ED40476FF5
6EC28032A71D41C51706D77DA7CE8AAAD7FE28FAE13E0C9ED7E45C6B1CDBF630
14B7640E412644C249D7B0BB824118A1D6C19E34EC742A7988C64BA1DA43B622
BCE4A42CC30A14584A2580CC8268CB01C19D6F96A8B0635FBEAEF06D1F772226
74DFA5D5419373EB7CBDCC21C1173F29217B3FD2C77562F6EF29E698E797B25A
D5F338D862B940A2C935A377B0003E010D47D90D13E1AF23684C1029EEFA40AC
C5F62591F5805F18218130BB3A7890779649B3AC99A5E38A8601F01E4C943C7A
ABA47C74347E74407B7655953BE72FD7D170BBECE5E163384AB0A41C0A3DD5DF
9BD17DDA8E3F00671CBCB1A2786FA1A73C45B1E05187305253114CD047B20A2A
288E0DC7BA89F899CF947BB148468FA7DDE5BE5A2D348D34BE913DBFE8C6B038
5F35D8F04977E3EBD31D17B54B266FA7AAAB8C2C2AF5F5BA64BEDC8093DE6DE2
67E4B640C4C2CACD3A71DEDE87A8F2F1B42A53B4D1ED50FCAC7A22125DB82CCB
B7E6BD675DDE11044C19C11BDF6646621C60834A00F293686C7C66279B3ECFAD
4EE65ADA82467E33BA176095028E4E1D9BC2968A163C38078AFBC58AC8AEC3DC
0712D544E4309CEBEFCF08102D3C37074837B22D81B8B2EBCB5DF715B36C0597
CBB79E3091364A2BC66B6BB5CD1DA8FECC13E6EBFD875E8D8A7198BEA767DBFB
12F81D676119DF2910473E9811A3E63A74CCED4C3E4603E5FC89C03883B7F32C
B8CC3D6B8893936FA572E994E9423CAF35264FBE9F2C2CC97F162E1B88080B52
396C38ECC54D4A80EE0AD6D2B9C53AA1CD4534857285FBB1F326103922CD670C
6A460FE689927AD28FA6F58DBAFE1121AD1748F510959737F8C8281105B870DB
2118A6858C88E0928B214BD6E0D38328B46AFF2560C741F940EC37E666918223
B6246FB8FCCF6C2D86C36F9C8FA24A36C6F4FBB95529856A40981311999C8D51
5D4692FE116EC58F9654CFE0A3004B5C61BEB5D998FEDA97B0C75E1350339358
DC03456B9F4672ED0915E28891CA5A3C5EE59A250A10D061560FDCE1F961D993
FA800C477DB777C97F090489BF1B14B51F952F14F5A10B445C102B1C94AB4880
23744138E8374EEDE91E7E951C3A112BC222B3A82A6C598D6C8102DAF7DFB462
15DD8A5F435519BEC6E1C44732E135195CF394FCBB2AE6187AB342266F228C8C
F4781530955154C8389ABBE5F1D394D13CAC62F8FD7F67B82742653EABDF29C6
EFC758030A1906ECD3DEE0721ABF3A190D4A3789A1E62AA2A5A717C423A5B45A
ADCD981663F498665417AA4925AEE27D33358744FE77FAAB7F28006C403D095D
7A7838C4AB4130E1BEEE2C2B4A8D9760B3628EDE059795FF6A511735B00B0B7F
373C074F127BD39FFA4C7734180B6DC3007617438E4D06FF270631FA7CB31772
4216BA656297851DC1F732EA422314A14EA2BD2A6BA66A736A13B9ED62721490
51A05A5F1059F861654BDA6EB9BDAD1E923011385DBE2DA2E4940078E88A7922
4DC79C04335CB15FD0CE41A238692D26CE95C7C388095FD73B52DF732F362F83
D86CDD8145030D18ADECDFAF45BB0232D69ADBDB7113C7D1EE0CF97FD72217F6
21BD5751D50E8D7A2E8D7E1F258AEBA8BAB5EB28912096989A78B73A8AAB782E
77CFC4C5CB4F20063F1BFA846C62A19B62A4057D0C940AE04B657F16C031E8C0
0B7546BE9511280CCA1250246EBF897DB3B13C1F185D21B94048E03C5C186D8F
763636EFF828E58E5771712E9A73C11663F6839F6DDDC6A92346FF219DD26BE3
39D0EBD18FDFF6318A6BF3DC2D3B6C547149C8079B70529F3297959BBF46490F
FA54F757BEE0765B81E210C6947DAA24CBE4A02BA26598FC64CC56E7F25DE92E
B126C257C89E44FC8398622A30DFBF659AAB340D3B02E832BA111AEE717A9513
545FA0252E39186848DB1E9F353C900D3F776838A2CD365FC85EF09072570CFD
5158FB07E5D42A7660B72214140116B6E4513860AA3E7E202EAD233E8E63B7FF
E09F97BB682EBE2968D29722C7AB653AB95341CED821F8B2CF56D2B67890AFE5
2F33A4EEB7E491A863655D96D1F889F9F0EB1E16B05D70CDF986F69C01930AC2
355BA990B599C1889320B766C39F4D6DF85DF3D668F02C35892980CC5D218D67
D23CFCF321FBA8DE9273A33C8A38C27399563CBB776BB990BE54094BEC2A8A26
8B864D27677DD1E3E3D619AB650F2A2A01B4B02E56FCEE6B16FE67C0047D9DDE
B6692E5AED6719247BB1660CE5DDD800D83088BAD4E4A16E78776A5837D75E57
87DC23E00438E09C8281AD0960FD553D331D3B8118392EEB3749A8C736BE96BF
84D03F9DBD93F62BF7531C6EC7D147DC7983574B1C1A6924A5131373F53B045C
07F28DBF9FF5A94E95C10E9CF9B3950164C511B1FB03B8D9459B0AE9E53CE3BD
8243820406DF234969235209433655DBF86BDC0171CE42DC589D567C7B350D3E
124B4F0BEADCD112192CD5CAA88F66AC3BCE45F0C5D98BB5954AB4309A275649
F5A426E182AF6C17AAE82426A231726B2A2B99B17350A5EF6331CA066EA68B78
096D442415B683816D93614A4DF23CE8997916493C32759D410677DCC316586F
10F5ED920858ACDD58716049017EC41A63B8B5C23CA18BDAB4FD826AED33CAC4
2F3D8F5A0791EBD5B8190AA7083931B7D934E03D829B28C5D398C748177C1C99
864BBDC6E4CB3F1A4EAA7EB4C8D4E012511B1E249D0B32A6484FD8894A1AC052
718D590FDEFCAED5A307FE00B6779860AB7BC90DA12B97B4FA7341DC5681D7A9
1E4F3862EC97A4908A0FA0429C41AAE2D6500B148B355547812FD170C8EFEA59
733ACBC55B5416CF0DA7BB6B532DEC1FFB946BA0FB1B28BE001F7F4D7A524D3B
851F966244127EE8F97840970F767DBBBDFF82C84FB0A72DBAF47FBBA1EB2C10
B344D9FECFD1C347E88EAE641BAB1625228922C0211F4AF132CB76E3E65EF651
F2CFAB24AFB3C48BFF93B218C61E30051AD0F359FDB2B9DEF582F03A9B5B022D
0100B5AD0393B4CC60931AA324FA6D3F13F3806F167BE62CC7D1BE4E2876F274
07A6D6232282889296DD8CBDE273A9E8CB5364E0035D20E89C72A160DCF26E3D
310CF71D32803D3F62EFFE34D51D930632A73FECC06686BD8CAC3DF7DE8EA495
457FBCE9C2C9158E449CDF0BB5E9FA12861E5C7E711C8C3AA0B88BD3F76E22BA
72A8F6587E46BBD44276FC5F097F1B1072632E6CFBF5D13F407BA83FBC2EE27C
366B709ED42693F83B840433DA645FF5224BD0529F17B0CE1DA82E7728EDCF39
F644D301E6FA2461AE6C892F37F22F2DCB5CBB98EDA8992A7E3E48085D9EAD9C
0907988802831948073CF08DCF21CD0F90E42978B3DCFAA4823C6CA992B7C521
51C9FC6B0085586A16D4F84E12E451CB3B74BFC6564517681811544CA0193C6E
6E2689A051F29461DB53C9B33EC20795B908FE073AC314DE37CA61ED683FE85A
8E3273DAA67B1A90EFA3DE68A695170CFB91D47B7E57B4337498FFE5D74498E3
7A51DF0F515A8ECF4E7FB159706564949675E2CB9F21D64BB53D229FEFB090F9
C4AACACBC136FCA2AEF718F9D31B89603598069C41B11B24C94FE566F3EF78CC
62862037A3CB9341CC4C559794A0BB92C50C57938F5C6FF8787F1E84C4D8E7D5
3799368445D2E1EFE5E4EA817F805BD1DCA3EE6B20AAAFEEBC20E26C9E548C6F
D7823AE83DDA739D617329FFBB7C7B69DA8A65D093D1E1F6AA28465F96291DB2
08B9D385752BD4B9257320780E61E5EB40C3AB29F5DD5F3418A7BBFEEDF84EB6
45ABB6A2108537897654BB1CB529B2CF041212322AEFC7DF1E313B88E54B05E0
6FD049AB3D1A4DBDF66F6F07A46BDEA8741024F60A69223F1ED5FA9D5297C207
8B9E830AE66F87220C415EC7CC74E2A57C82DE8E7B9C9C85E92FD9F31402A1E3
06710E389F8774B2186EAD63DE39E46B63F03A20F0EB0B4B510829EA432B9BC7
604BF5EEA7C39AECB4814EEBAEA2D6C8A2D4925CCE19BB4232A506CC911A021B
FB07E86D17768A0D7B98F51C9499A33FABFBF258CCDBCAF0997EC40974E46C0D
4DD5E6798173526C201A045B1F60EFF655DADB3F126B3FFB37380812F45B2CF1
2DFB72A751AF6DA426A850A53295689B315AA1E5754045852EE340D4DCA9EED9
E9F2B6DB09880B80A8795F3C34E39DB94D3CA2B0256CC9485DD101BD6A4813D3
C02986D0C075DEBBD23686C7380007999A4EE9555A87518987344D6B22830434
39F96E6D72EAF70F63A6C4129E62F35EDC937388DE2F43FB57EEBEE8CF556C6D
0A8C8257F53F981352E4AA14D333CA4C1C5A8A2E19B8EE93512C24F6AB8BF4D1
6FC7D555C2297316E371DC02D95FA4A5A2C6A85A7E53FD7E06D1CE370544D50F
B5146260CE208F78EDA0C6BCC90E6F47047E27F933CD93A7F380FC74CA40331C
6871BBCB92A583AFDB56ACD8C5A29970448C78DFB4275449B7D54678E63CC3DE
F0F749419F65A8BB04ED1859D14CC3C408222B074F421472456FD801925A41F0
52FF5E908F020B4BF014BF558D8092FC96B5731344B73112BC14DD8C6CDF717D
017AAB2AABB13065E41461FB26830F62462AC946740828E89CBC133EBEAE0E5A
072C2EAE33714776D655FC53924D7844BB656CDBBBF362A54289D2677ABC5991
CF59F046325DB1A67DCA51DDD42280D59E852ADF02ED5127F169AB54F0C12609
FE33D3F387BA2056D1D4F9FFF43783008108633D93565D1F723849B0F0972BE2
7197A9ECF17498B5254D760045483BC1D5BF0B07F9868813E99A4CEACB069678
65248F476863CF00B772C6D891961C151F65CBAF9B1A5D7F151E6CAAF10C61DD
2EAE66F019C0FC414EF74D19CE210740E3FBAC68973CBA0BF84A78365640E4E8
57E2F7AD71210B687B95DB030F688E8199E82E20D2538CF93D994B0E2DE66F56
2C880EE44F5C418757836C341E7F3E716FD5191C011C18585A3E5EF4BA0CFA63
55019AEA4FFB277CFA5A703FC2B886D2D9AB1DCCD702EBBB8C4C441C8146C0AB
7D701A80CBF08503FCA80823AD6231ADE95EC09EB265A70F77F3AED8E6B25D9B
1DE834A6D8BCF18461A5B03DE2F0944B2B69EF1C801835DFDF2C7914EC20F691
6B44B27B7B66DA78ECEBCB59B523F70308E449475089076CF551F68670B0F1B9
C6573DB94D97F341F0688D17E88427274A9107DC6F7B0CD5C9C39A0002F2EAEA
A50F3860580551B78A772E567162EFFB03B6201DD6A37FD2C872F03A01A4D16F
CA80ADF73B8A47B46F905F6CF02F03E01F8FE6DF3843DD0476A2536101787BA0
7BB50074C200FF6F9047C7C501D2E16EE185214FE5853875E0EDCD7543BF50BB
CC2C96FEE1303102041769FBE54B30BDA1B7716F62A2AAB55AE5455E56286E0C
12B8E3FFC17112CE8B87839FAFE81D99A07852AFD6A9CB820143201660AA9426
3AA2C541A7955E53AEC6A1322E3719FB7AE47C861AB445CDBA4456EBA2329C92
BD346DB92D0DF62E78F733211EBE4635C263794FAB46951ED537BF9E837279B3
6071AB169CC96DCB8CA61CA1ACE196D2DBA99506E98CAD17E58DFFA47D511C56
4EAAAE6F1249BC2351BDF3C477C69A39EAB8A507294D12312DEE5D21585E0A63
8CB4B428603C9607ECF474EF55184DC7641E17ECF33D7B742A51AF2F7E4B6641
4CE99B1CC0EC155DA7E7A47D4B247F821DD6185AE29C52BA13E813C29736ECB2
C25AB1137EB1983225533CFF1B327E158AFA46DB8EF0B5DFFCD99D4227FEB6AF
6351437F6B15DACB9B5BAD18F0B639D12B4209C0877362795FE03AC3AAAFE0BD
2DD4D52ABB48AA21DD03B01F71F1984329E53592B83642197CC86F5B191C93C0
0D3606D201A61EE4D65698E16F5E9941CCCF9AEE413BDD8A033A346BDFBC21A5
FE76DC96F16CA93D2558C7275D2DFABF5360155879541ECD2B44BBCC2F03374B
D0F5A5D1D802A6C10D38B16E43533E3C7405427BB974A518CFBFF14DCED0C94C
91C1BB803B6BDC1D2A5E822479AB9541D90DD66CE1E4345A5DE8C0899998E05A
1AA3C954BA486717545AEDE1EC293B901A14398145BEBB6AE8E98EEB231F71BA
9667432B71A67D5FCDE38D8BA31D31C596A1A76269E62C1D7A602C5791C7E349
8E4F06840A1C4C7293D649DE102F0525C2060BE3174770AAD418C2462FF36858
2036EDDB79E0261661737CC7B10D630CF92135D93E54FA25C7258DB7FD2F4C15
C95AE059AE0F0802DF7129260A930E2B8056716611C376BB9F6BF514497F3E01
C5580E860D51975EF24FF1BE2C170974617B624ADD0BC36F570AE713D18D9A34
DC28EFB4C467E02932F903B6663CBA7649637E32FB4772678E87AF47B8845FF6
BB22F630E8BCEB105CDEECE5FE76D154051AF2D55227F1E7EE45AFD6B5645EF9
A887D392E95DD99B4A30E53C6509637377D3EC9DE9C66228B3BDCB3EB3A1C31B
BD08F42A32C87728B5776A9E806DB9B71C80B0DE259D23F7121C177CBDCDC7AE
CD7C286EEB4B41C4B8AC8B3985234BD10E2195189512E93F8C8FFBF0FF1B0DF0
E8BBAB375FEF3D3E7E347648708247EF02C6850D31A54500636B259FC88E090A
C852B6B09F41419BC443CC7932541B2C4B7B27F6DAA6A817D549808831AFBF4E
7B2605BE4DE103256A6FE33898FC1B69707896B62C50B4BDCF0394203F3A6D87
88DF6A257EF937760BD11E34C7B8ADC5AF6EC095F7B165FD1D1E3B22D2ECB9CB
527C96B5548FA9FC627F1FA234AC1EC36544BF6B86F2ED3AC3C792D50B89D549
88B4CD5BA9C834CFF5EEB7BBC4A6B8348A88A4D80F270309E5D48D29563A47A5
04AA3161A33DEE798928AD4AEDB0D8E91BF7643674DD8B9E8457E67B4E5190C4
A8DEDA60747F42F54C64B8042EBAB311B8605B44123CF4FD3B732BA3B845F237
14A8F1FCEC4FDD88D7200127439890F2682C40E8391C28992126641435212465
0B8314F2B7D27C32F79E5E5DCC7B72ED02C0D59F9BED4088AC06E8F5E6117D06
9E4B2AC24EA93A50F040892EAC12FE35657E93519E5B9A87F18797904284624A
78E7306FFB39D18F6D10601A80EA8FB096AEF9AA3B679A112A495BEE7DF305FA
B0492F3C086AE14643E90A10F7210D3A4EB9052407890E67087141215B6962AB
F38DF2422830C02961042349503F5892FB06F64FE8692823471BF61650168A0B
F52D536F18531071A888888114634B370282C88102492C378A9FA9E6805D1742
D8BA448292F0BAA09D2EABAD694C4E81F640CA66D51924A35942E2DA4AF5FB2F
1B7CC9F12015E7A08DDCFDC1BD742620488B1EADB1FBF2D47BEB7D73DA15440E
6536718CC6B38C7CFF1EB27A6EF7A8BB019114BC8820CCF85E26FF49F799B90D
775F5812A972315393F030912C3EE610CC611FDC0794301A992F0D39FD256D6E
E8BFD49D0A00BEE31F3449E3A59A16FD703D5D23515BBF3BAB71AA877CAF85B1
C259A74E9959FBB167E583590424AE406CF6A5E8EE1C3F8E6FBCE59F580679B5
D3BEE5B54A616A7B5D74E3ED780FA504AA774CB76873733767245907404930FE
E7C949245BAA3E1538048A4D8CF11143DE3D7EF76F37CDAF042CFA03E27F3F97
7658035103C7DAB767B9B96A43A01FB49FBB5F6CC112B5624D21692EE61C60E2
A5BADE427E4B4DD673DD3EB3F01A46EC337ACB7D56102517CF5C4C4689D7B494
A9346449C63DF07E68D1D0C629DCBB06D0C32F06275078D406FF264CBB0FE826
1B19B64EE063C5681DE48259D7EB11DE32B292A9E43A870EFFEAA03A8AFF3378
A1A37621026B21879CCFC3C79D6388783A5CC510E30B48A9E32923FA69F863D1
36C6CB4CBAA53C643B1697C2406D04CEB63B015D3D2393384C719E6341A966CE
AF8BB024847830D81C65071E954F36B2C8EC1AAA7586B421CD2676311E992DB8
CB55C3F21DDC88A2999607D96C283223CB662C57A8CD34E39516DE4E866F5A23
FA403BB5EEF2B22183161784D928267207B750028D9E512EA4E8184130E0C4BC
9380866D611559AAE66529FD24F6EDE52A7880763CB1EF2BF9CAEBA0D8B18C33
DF805CF385612E492B12AF19BA97C809D679D1F327DB71995C9AA4C04CDD932F
B5CD9F0E27E628A415E277D50BE182178C7C6DC9DD9B4DACCA86E082442C5F23
BE99A600AA3EBFBBBB1CB7FC75E84F28F06C337D9150F126EAEC0E54B3FAD1A0
A482AA6CD9A8E074560550686B6DB6EE594D6FCC70BE18A46B0F12B5EA3BA708
889B5B64718A05537697BFD771C2DBC2ED5FEAD1223D56C69FEFD8251390076D
1B0342878A0CEA7C8FD3017B851C390E7225B39220F3DE944A42685B257E6477
69EC473FAF56EF05FD786B1BCD66265D71065839EF5A4BAA8EFA93D7C9720BD7
3B4E6D7D11E80DC6E6BA612599E749DCF7FDF1265E542B035D9AC1114F4AD61D
2BC68377F4D18CD8513830076D81738DEFBDD71331AAE5E61B0E734F59FA6EFD
2F88F8984AAEB20258832C7C8B1C254339C4EB878E3918CAB09B9D92D1CD6057
A6964586EA6E967059AABFEA38CC9192F5CFAA6C232EEBB751DDECFE013D747C
E0E1AC03734DFD536D83E7E86AC1523B37C0C7E009B56C81F52D59AC1D54E156
6A4AF832B0FD344CA287D1B5CC6AF3F0876D4B3CF03A575A2BE72529D6E3B185
261658C61E99E49BE38515D063A2B9DED126BB040A1435DAA96748D99203B5A7
123DFCC726646F3EB983972745DBD635DE5914557486116DA6FCCA2D44216A0B
DFEDF2ADBF87E74112A08658483B5A476E6C577DBC50EE03A062D8DD6BB22476
9DBE59CDAFFA9ED672CEEE3AA5FAF1F1E3AC1C6A1DE1EF06220B5ABAEDD68B61
328D508455599A93DBD1731F76634D58B5C76882FDF21647FC89FA2DE5EE6B93
11B7D2509F995FE18992F7632FAC1623F23B254F8B8EC3901AF3C63D908E2EB1
6686FA5A2D5D1E3C863BCDB04AFB89234D184411C176231776A0A4CBF9D40255
3EE05180826F520656DF0E77667D08512EB32478E4EA74688379945BDA048D60
BFD7EC9B32077D1B5B1E69FE8A2D1542BA410DD164D2A880F5B074C3E3E6091A
D077366B0DBD4F8C3CE9EEDF3D633CB79A350D9DF61C1416249073C844C813E7
A2B58F5F764294B7005D7ACAEB1C122B44267AD5DF82EBEC852EDEAAE5F87DA4
74015FEA333E1939F53023D8B9FDB3B13A9C5816AF6569B85130A3AD9B4DC3CB
3262E544374F508ED2BF2C4A5693715D6712ACE2659EDFA1C05A8750AE6BC6D6
E36225AD9ABEB5BFD3A22A6622D50F3D7D094B5EEE85D85C94C44DECD282EA0F
42F01658235ECF2CEE3999A0E5163DEAA45B6DEDFDC9334555474061E602E3E1
199D9687C083D0718F671DD6EAD3E92892C44A0230A473FDDE0BD6879DA17E32
E57AB25A1054E1422C1809ACB4DE70F26E266333CCA47DDBFE01007B20DD77F5
D32842EA2A66C281005FBEF05C95CFB62E7F098DD62751BB64CB1265B4277DE1
25CCA3325189DD24527E1CA64C3E965584717F9FF88DFC5A517A45C56FD37C67
5C48379963A415003624F807E6D6B9D94245C9A8ECC008010EED18936BF32F74
A47475674F097393587C908DE9CC8D927DE6F38CE539DE478EAEF0701894232A
F3061774320B3EDE2431EAA4BFB038CB06E08417EEBF2E84970613140EF49671
3983A3199540C99328214AD0555691003C3B442A0BA738522BAD42E611F60F0D
169B97FD497D4D2961C5E63377254AF6742187D69017EF8D22DF12FB875513F7
26621DE8463FFB8241F3CA69BF833B3B6F81D22FDF0739D52CAC124775AF25F3
432BB93B8CB5AC2887E84B8A9C42DFC0527EADC3EE6A9ADD074B1549F9FFE267
5BB9D8896F5178A0989733452D752DED33F9C3C449A09AFE5EFDA549F3D24FCE
9BC8E19CCD1519CF52B5A4C4547E3EE38416EB49AFC98C1ED15DA8060D494F75
9BFC4CB123BE7C70C9FB3CEA44F25CF79E838D74895A336CB8C5878033C50607
55DF9B1C9021C9150843447BA3D886E5A6D1DDF92EFEEB0A256C8DC12B20FAB2
1A3BA1D91EAAE6B8B81A385D49ACB212CD5B059179AEB6D43495E9355AFE4BCD
9EB48D3A341BBEC9D514D1E78D174525B951019B4D0BC6F37E51036E4A0F7CA5
55ABD3690409B7A9BA1B1F06AC837D5039852F87F019BE778B89EF618B6957F5
F12FB3274B1569596E2E6178B2AD79F8DAC978393CD97D08A81F327130F38969
13D015D0471506F6EA4B9FC680B5A518D9F29FBBB1F350EE015A8AE6DE4C77A5
AA5947CEC5610125B81A7AC264CA61637742BAC16254FB4DA333C7440E0E1C39
8FF51231B41BD1F72C876731D2A94318654BABB43BD3216BB58039C835AE7572
7E0F9CBDFE2F9511401B46B2E12071CD40B1DDEBA56A2014D5A094D0837DBA49
52A050E2FEE6D589E71D61599487DB20CF78017477B0517AEE8F833ED7DC758C
A1B19BE8420E2ED15459FC79DC89D257F631E17CB882FCE2301C494E93E58F7B
45B77D89B8AFC1F7828DAD1AC9452836664665449D098B4695A7BBD6FE913A9C
6F20624AA2D3A9F6EDF63E33139541DA0688DA383A0972CD0A0275C1663B36D5
D8AF0FAC85E2DF6351289577025DDD7F66A6B2085BD1E7A5FE255E15F68AAC68
49F2D0338A2402C0CF19D3AE2C376C2A65D4D87773B9A9CF309E4548A20A56A7
92B87C58E22A66D2D9D3292D5814978AB28F633E009F45CACC01661A7E4AD850
DF6B7C1D057898A8C9A06575356C3523364E09F35EA1BD0A2D8670F50EA08793
6FD442BD4E43C8B5D1E7CA5F476E6998AB75E4708103CE5AEAA25FB8F62572B1
883C093A4B4887B700980A1068EC22A72EB74BF69EBB0455753BAA5276B6635F
624392FB95F0A740FB753A0AEB2BC83EF89A0BFE4378CBE81CED95F3ABA22420
8079A9B97D33D86DADE5D41C9F044833899C5183C72185F57BC6368546E78A8D
82598C4B45EAC8618232EA96F88C254FDE7EB4D6E0141BB883439F5989DBA577
01A99F5BF6955EC4A70C4FF1EC3098D0FBC2F301C32691E8D6B8AB93B754C052
B521A9BBB8E582D71C1C1013BA85B41E2741DAF91B2368E775DEC8EE6A8E9590
E2E2DB10CC92C158AF9721CC892672C8906D748C60B5F635FFA75092CB102CE0
866238225BC70BC7C07CF08805EC5FAE98D477DD8196DEF84AA6F1A37C430CD6
57A0CE0932819EF007A3C495A5B054F03210F4842661DFF76D0F398BCE3B843C
B97C80448D0F3F8A765B567B360D2BA3D409C8319BBE9B7B103B0A92ADD1CAC4
2970BFE9FE1BFD2E45599615846132CA284151BF0DC19277E5E29BA0A9B8011F
2A31349C67595F245B8E6107D7074E8090893C46D0E5F1B9D171B37ECFFB95AD
306C8CDFF34C569BFB31116797D68121C9FBBCDDCE226EE87A8CAB5D85B811D0
43676C67D33D5EBDFE26CB84FE75E7C2FC4A50B16E0CA2635988141583BA6FEA
222D3E00A7DD588166E8DEADA4AC01CE4343CFD7EDC24CF3AC71D94CA0820CEF
831452A908526C6C9808E40F4A497AB2516B9C73E443A55A22F66E66B18D094E
146A58A419FABC6B8519D74DD3C8388C14B01C81D941F9CEE2631CE82E97E4B3
CAB50B88B3173D0F7FCF8489D680F7BC3092188083B3C02E62849AC88BE86E00
684972F3902AD44AF4B38DD8F2C143403A865C0A9173060D2575ED47E242262A
6692CCCAF17C1180C64D01ABD54C84E351BF8631B5587F98FDF7098A3D05ABED
0485B0DA8B36786ED1470CBD4EA7A5FD5760F120DD0A7303F472CD2CBDD7D239
A1D2785548036278A49CBAF7B2E5DFF6058EE65831B6782A0A178ED5B7A06B82
A1633A5F6962B2773DAA3D68694146FC295F1BF21C5D504B0153897CE080156D
CADCC15FB7C7AF6075251FE7EA913B91ED29A919BB312902BB2ABC704B45A787
AA2CEFAE511AD9229B5E78C94C61677B63366FC5363CDDC93970CDAF2216B8CB
4BA89828A0427B6AC5B58B1DF50B567674B6C845627E7658BF565123066BF3FC
13B022D1E0A5CD1595246583FDFFCCA101A8480120E853D00B0EF3061EBF5627
96EE59B533FA490CEF6D31900CAF63DC8E0909199B803766856DF4C6EF2DA00D
F7FB34F938C0824A049ABB1CE1F9A57086C3DD956E5D2C9DE6DF319A7AF4579A
0CCEFE7CBE70D41A2EC557D8B004FF54792CEC434A3CFAAF46939BB80B0E8F02
F9413138B41B662EC92505D6B9CC9B9B9903F896422B55BD1C2AAD070E1590D8
8167CB5E966E4198CE07E10F1EB639265AE1685F8E159A1D6EB3CC80030324FE
7BAAE06DC61B2D5CD4BF6825E8F1D60D99C993C669A6939439F053694F3FDA8D
926939D45D533308D7118EEA412C9F1838C7E2AC7810CF634B254FA97F77B2A2
E88E34317D068635D6C7005039122F8C9AF82F89807350F4F4BD0B930A7379AE
D5A2DBD49552507A78C71E52E79A0E7B6C0D641FE265B9CB8D223F6F3D5E9A66
5FE266B1ABABA5E6D1614BECCB1C6AFBF88B35DECD286EA4F069CD65BE145964
24846408954D6B4282240CD7A2981DAC04F8BB66E555C70B3C3F697E12D53663
95EBFDAF5916FAFA6CF89C649340141ED6C4418CCFB64975E6EEDB3D48B178F5
403E3E77D16889BAC2D83B32B3DE5A45D5AD94F151C601B1FDE3411798858BBA
F0D37FFA0AB8B360ACFD76949C82D2259475F23875B1320E1CBB53DFA7CA295F
7BE773412EE447FE999877FB5B502FB8CACBD9984DA8EE0E565473E799723CE1
B6276129EB2685882560CA2069E7F318226D55646F6319E91792274353A0B995
B3495D98C57F3D38A7683707586A181D542F74499FA8D19178A48981607236FA
74DFCE2D0FEA2E45CCBFAE685D22E4E7409FB699130E5DCF2CF2A6B682F3915A
3A80600AEA1576D5D7073BA91F0162D7AAF35CE3CF758362F419BE2CF5EE0C4F
35630ABA05D8BE3B14F7A096680D90050F98154A1C97987C391EAC9D8BA426A1
1CB885432D62F6D6AE4B5D9E4BDA39FF80B22CB52E58E8B17BF5CBD16555AE9D
B56F7335EA92B0FBBDD5EFD9C1E76DA4358715D6E69602B1633B8F317D8D45D1
733604F01C4B4B3D473B10C29DC8DF4F06F49ED3976489EAE03524DB2583D782
33D18ADFA8645F8A2A090DCB5D4203B502E4B5708363EAA47D26886510A37172
2404C84B77116675B4CB09B9B9E8CC3726734B8ED128873BE905E326CE2E30F5
664A478A144936C3C10F967CFE0508F73736E08DA114099EA17C833453ED11DA
8B7FD545311AF318EA7E135FAAD6717E5811F1BE07F40C29C6325A4F520143B2
1736A883C504C22AEB7055A63D72236E01AD828C85A2E21FB8595F99BF61EE03
76204A55CA2018F00389121335870849E6F73D7164B2FDD71A41EED84B002828
7C6CE4AD8EB1838CE15E39B6890A473104AF2C4D72110D36FAB8C4F93B40DDB2
B6F6CB9AD6953356EEB5EF284A032EFF740528B35C93B74ED1FC75E3FABFAF20
392846EF7FA24CF810A194B3CCC77A6C0EA03A8BDD503E75772B408598563CF5
C13C1041B55712D1347EB25AA34F113782623111F5D033369C1C01A9A46B5881
F088E792B0ADEB90DF2AFB44228D9D0A11218EA75A34E5A2013B384A0A72E3BC
34891CAB90AA27E078440A6F42B0ED893C45AFE40AF7D6B1FDA1B389144ABB9A
620E988BEF85A791BEA5CC4708FB3F2316F53181CBE0F19A8071BE8B84F18E57
9F134967F1158CC5569678C828EA81594653A7DBC2714107344C6E9465A91047
9CF8838D066F96949F0DB7F6543E44A337AFB244985F3908FD70487D8CF45A55
96F86F9224E2FEF31403775789CFB9E56D5C13BBC7F7BAEB63A63453D57A0457
5C3E03490B371418E50C5ABF5397631D485712C3E1D477638AE44A19400F0C4F
3A73D49AD8BE04822962297266C3488D620B6B57770BC8A0C73ECEFCFF1ADC01
7E169EACFECC2DABB6B3480FA9D3456FCFC5B6F7796273B84C2C0581371184F8
4C71C368B8103EBFC75AF79085F13886ED94DC2914B91662AAED8F97370F5167
DE1ECDE2CA08384E725DA63C8C85409989EC2C5E360CDE281896DD5CF251E187
152932732C16C08808E684DC18ECD9D1133EB92B13C4462CC2CC9253BB6C67E7
8CD2F63AD93E4AA465A7053567EC3A905168C1A7CBA63D3175423F06234129B8
F4598DD61568979E124C1A1CF61B5CF655BAE23EACDC2C489245BAD95447B32B
AFCA3F407429520BBDCC28FC09F72968BCAD28BF103AA8A5B6AFED73DA1F130F
72AEBF67CAC8DC2E92FA353316583315BCFDA50F49D4F4DBEC84528CAD1DFBDA
1C947952BA76E2167824C208A9E6826C6BA4A6463AE3AB1B3CF1F044868E13DC
842168E4FD0FF3F08B5628F00A72C14A2783D72C760E9CFB140EF12CD0177803
5BFFD301B4381C9503C89A088692E0A5530D508AE85CE10CBA97D402832AA5F7
CFFD45642D0F77D4D358EF974C5DBFCE6D55E5BE9AB3AFAF6E02AED218D2CB18
10DB83EA62705BC0CFEABE350F9B55303E3E70C3C010711B513B27942130157F
81EF00D509E5800B8ED988C0A63C320D99F19CD903C43B7877EDF07F003B1395
601B290177507A8890D1DD6986A6EF93F804FF5BA02D9E5FD06B3DFCE42D298C
30E67778EC49DE7EBB6925C44253314BCA9FEA33C195BE59D647FA5F264C6FD3
0A488BD7E09EC158294137ED1EF096AFD372A60F2CF63E806358B025809462D0
2125ED3B62BD21BF146D7E8D8949624FE78C1DC97E061EF9CE925A6A035439DF
7D8A1589CF545477E41A5846BD5C4DD10D405D31421AD20BB299B8CB2B47B6FE
1C67BEFF89BF5F8CA247722F0BA0301485E1DC210844F2742D400CAF0FCE2E7B
B66575F728C7B04C291A4CB93376B03F939C7369910E854FF44A620CC6FD6551
8FF3FDA7E8029E502C1678D1C4AD8AEB92DB813F9284AC9061426AD4A0A7DE86
2F82FB8CB7B7762C73CA6CA8C405EE68A7B21C4CBC318A674F8BECBA824EC357
7305AC423A409F35F2A677A6579356420A10C3030E196ADEF20A015B594AB2E4
DEA0C32BF0FA3260BE6D94A540EC2EED448EF18352E29FB2C6434D700EE053D0
36A002150C687B4E3F12B5C92C90CEBFEABEC7DD26F21A188D52896BC9447918
C210A920B2C466476ADBB52DE1D52D497BA371991F58AC978B38B1AEEFEAD419
091F42D691201A833F7B7FB307CE4924D3A52A3DBFDE5015B5A8D2F22E98C59A
1AC189642979F82B766E85F81203BD8350BAB1CDB297CBC0BAB23B2E610A6DA9
96721412D922CC807E43DCAEF9DD4268B3C3D3804BCCF688D2ADF2F4AEDAA399
1E6F1F76344EEBFABBA5D709015B895624423FB126DB5F0D5AD3B7CD5ADA5749
160411865CDE023A886ECFFA130A5BE5C24023AB5583938F09E681CA8516FD9C
9FD02EEED78044E95F8F086F3861B1AB45A5A5AABF87C1D2F52C35CE700826EA
A1F64A629B24513C9962A2EEF6A0D822C00CCCF8103B5040BE3F931DBE98FB39
018464BEEE8AC07BBAF869B0A80F9555EBFF420DC12D7772EB94B06022DD6B2C
5036F5B23FDB13E7ACAD9BE15E5B1DC7DB015A1C83067DC7F84EA063C66E81F0
F07E9E08829246114025EBDF36CBE6E7845A67CBAEC560545476786BD7B57011
A6032CE0A3B2FBFE221E70AE1AEF1CFD16104E1AC4592338BF8C2FEE2A61DF1D
C5EB005611ECEF7F76484BF13B5696510733433220FA69B6DEC7328226B493A7
74CA2735C18CDFCCDEA38BC9080C74E40D1F3C3B68FC7E17C3EF25801BAE432E
3F9B6B78444594F636CF0C0B4EEC039839E1730244031CD50EF3371B85C7F146
7DF2A2DFD8105FC3F49393901A46FE0A83A36DD6A5A46C7C565647827B23FB50
C1AB1255B081F74098AEF12317C89A3E4DAFAA6E83EA1BF2A24545516893FA14
220581A5873E82AB1CF0096612B87DB970757A8A14D62A63B55720DE70D2114F
5012E6D567E3ADF7FB76DF38558BFB6628E7F547D40B5C110A4AD557E126B289
94A756C6A8B5C3C4499E12800D54DBFB08B31E53B079A791B1827E440E1868A1
3C3885F3100C588F40A3A424A23B4A8FD03902DE75E06C9B11CD6E96531C99E6
CD3BA443DBA79ACF9605457C0E6083C4010D58AAADCC0FBB7BB7C5ED25731542
A6F92D1BC3B14B8EB4CE6F369803E805FADF2EB99D1FA23A2FAECB5784852D0F
C8AA182D34544C8D48B839055418E7CAF9DBE0DB7B67E040FFEF74DEB2411CC1
22EB6B82178497163B2EE228D161873BE5BEFCECCEE2361C4EC82771FA32310D
B550C0207AA6950BF6F01933349046207CC8E18FD1B59DB5B035A013664ABA54
EC4865D50404CBC88628CA27EAFE99F11C6457292EF6F9A73FCE34405D6302D3
86FE98A04F19830811723F3B3F406D3F8FC51456984271CD9DF748301E320D5C
DF9354735A0492635E605FA1D11F86AA05CDBFFF401FB14A39245DD749CF46C7
8F9A2635094C91A6452BBD262087E5AAFE0D050D1C2806E2698B5E1627D8A573
37F7A1812F75BAA1543DD6AD832AF70380BF9C149A4F2BD1FA488187E066E372
C13A5DAC4E616EB3921C9093DA3DF9C5E430EA801E030096C1A82E51414294F1
89D15AF776A8F880F2638497557B24DC10C8654FF51AE170663FBBFF9DD98E46
3860C55AD1DB661CBA40809BAF471374109080C71FD8B6F468801A6EB49C6D86
D6D61B56C9D6ABBFFC78B5045005F22504D486BF4839D31CC7B5EEC1929B88A4
418F6DAA0CF72A669F3AE95540836338CD96424FD267D59B94DCE61D6CE53CB8
612F3A798E29370D8EC8E8A5D6513759251B7C3A3E8EF079E7D8A1201C424BC5
4E5AD0B15FA7FB26F9AD5EE34BFC7787892358C26BF2CCB53571F8D30E98A751
4E96F5AD7844ADCFDDDA14F5925D482FF0CB07D8B8A506D2225C05C628048092
ACEAF34220AF9175BAFE1BD5AF34C9B92742AA672DE9A7E7403F5A01E2447EC2
61E34B71EFFB60AE661B9EDDFE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749E08
D67D1208C693A6640D1BD6B9285AC0D3110CBF8F7747AD12585141C3248D0BB5
BDE892F91A4B3291F21F30294693518E4629A3ADD7C8640E424FF615602C603E
1E14DCB3B17D34C090BEAD2A523E260A599522329B698729A635CFB15BE7E79E
6A34DAC7C3ED57340821A4E7A0C7F88F64BAA69BB80DFA8B659F4756878E3044
E1DB7EE4FE60074AF97818B3D36CF51110191B4E10655F52CC5D11F56517CFF9
04BA2676F4147DC8192C98C555B00F6C8614D23084A0A70E5D9D0DCD118ABC5B
96912E91FA3F6A8B9A7B83BBB1BD9C2044B5335493C1B74A8C85971E454FE379
C971CC567A316AA11D6745C6489340A939E49D3E402213EFD8AE74ED4DECD30B
3395BAD7D65DCAB84EF2B2BD6E178687EC870720A395B69F7F7EDCF23C703F76
42509CF6CFDF972BBF78431564286903743B208817297B75D9F46F272A3F78C8
9D302D05377EEF4C4109087264467E3E76615D94ECA5E9F4D1C6F05BF19C11DD
D76D595AB0A57E455857E8B1EB46CE0DE84F08D145CDBF6154E83A1CC3EA7E36
D05BDE406BC36D8B66DC0E03E487
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585F432571654308D4F946C6DADB
C749697BAB2D5F893EE00D414E8DFF8A120E06EB945666270DE4F9E3D89D6DA1
14F05DDEBFE49BE6CCC36B4864EA2D6C769FF65FC3872A9C8392F13CDA64C769
32E4D6079BB0CA2E1A287BED894C08F359CB4473250995CB01305E24E6CA388B
D1905DBD0FDE48DB7E771BDD4DC3ADA917B1EC39BBF248770A3620A6D21921F8
463A93D29C3D8BE4F0C494DCA605DF9FDCCB72867CCD540458C2C89F7AF7DAD5
3387F100CB76F77E97AFA3E446C65DF05BE32C87D547D7AE952F92AAA1924C0A
FC64225692A6559CB3706CD60FEC7FF8C03DECB0F80A56FB511C538D01EC9423
AB332926FE60D241B660B370DFB93A00576F77D4DA319B068FFB6060AAF40EB5
40CD540174737903DE67E775663B85B3BEDF0AD31AD80035725506113918E5F2
9C3C662800E45BF5E62E6503FC87B005448A17FF1AA5117AE241375DBC823878
1BE2F98C8C73A33DAA0A97C4C4DBA825B0E4D347A04E25BE0127D82D914E3583
1C4DAC2B64393313814857AFF7B9A1E820720EC4993EC419CC471B55FD80073D
3B8D6DDC59C6DA3DB9B063A7C548C58576081BF82367569CC2354D7B725C2E2B
38D20E81C0700BFFBAD29E73A85071558A0F760B41AB559982262323161F994C
31A54DDC94C9A8E8625557BFA0C123C0DBC2E86BA465DAC7EC07F731E0BB8C7C
8ED352E0A1E6DC93E52AF793A4937CFC9E9ACC236CE307310AA50B88FB72AF04
F2704D9367231B1B8C4102A58FD6661206180415ED106D34CD0D4E15BC7C544B
48AD9D4C1D6980F5AEED12CA0A3B389CE279DD6A04BEC1A37AC300FCBB1C06B9
6F6B9BEB03CBB714C14F836C721D7D05ADA50E7AA9F5E63EB42DCACCEB2D1D51
2CE82BF4C7BACFBF5CDDB57DC37B8F4B616CE814F5FE677F1C43FD44B04EF8FD
DDE8BB62048120C71DD9796FF15DC108C49FA095EC0343EE5D779117ED8FD7FE
7735F42FEAE9CAD1F4303B40C2CEB041BA2CF596FD49BBB75F8829643C98362E
5DFF8D686C4C38E3197D40FD7E0263C5E12C84989D53EB4ADAB7DBC6A98B5349
27893682DFA31AF1544E5A4C47C2840A81E8B6583FD578DA521760CDF11B243F
84934CABF36510FAB855E4BDA6A34B1BDC6BC1C6F285F9BD614A00DE9A3CD2AA
76CDDD1615A97492080417282319232BAC16723F6AB14FF28B55E34DD20F2361
EC01A768662EF811CDCF4EE95F5041605D5F8BBCF6E99BA6F80C5A83CB861946
98E1E30CB9F072CD9F501887DF4F3876A8DFB28EB1B788EB351D5B3181FD452E
D1B23206999277DCF4094F14AB83244F2CFBD983F58202AC4D1F90F243CBDC1C
A8415532C46786445650B4C3B3B34DC23067B46E16ADDB37096AB12FDD09488A
DA885BD6C808D1735EA6532062585E2C48AAEA1313DAB2EBF47C481B27110C8E
5BD96008A6B533E7FA9D68B7EE0B47644B35841FEF4D7ED706F6B027861884C2
23247C65FA99AC139A69ACDE989B3FD5A2D5D493848923E60F7C67FA6AA80625
94F122A48C560B7CF6054D70678B01042D547F91A3D046DE70ECC0D1629B1231
16687E138490CF2F1B900886A20B66A9913192098773EF4313CD8AD96FF7FA7D
349FBD703CECF517E8BE682D617EE310A79C945126847769D6DFEED240805D78
448DF7E49A11B2F211A64EB78A90B5D4B23C6E38C9EE3260EAFD1C9B3BB1173F
7BD488B969452F1E3120A19768ACECAB37887FD8CC83AA4C7C9CE1CBFC3A6980
ECC0132D3E3E4E048EFA48CDA752BBFB2BDB48939615E8611F1F7005394C984B
EAC91D7528A68513CD9B3FBABB9017E6E279B37931B13D7B0494AEB0115D14E7
826F40A532E1E11AC5F13D51C894D53C87D1C2D3C5D7EFFCD4773CFF08285484
74134736DC80EF55BB1D5A1D7873601AB9FED85AE496CA8E5304CDBE688C56F1
4C267C1CB044875F6E382369F2B8604338D2F5D267F4977F3141162C6FBAE2C6
354FF6A9769C00988AA1D2152FB3658BDDB37C88A024D42DF89C8D4D734A0B10
8FD2BEB229465E8E9F27024CEC47C494C92CB2C82CFF4F9240D0A183FEFE0868
AD5FEDAB9AAF1AEF6EB1F20AF9FDDC5D937F6C9EF9D4AD0E3F3F3A41E513D437
0D03AC8DCA5CD347C816A0EFEDDD1C72C5AA9474EF42F36DB75062571040ECB1
A45073DA24B683E42EB93533DDC9C6B84A1A67487B00FC3021A342C62EF6D978
6CFC2B617CFE4D9D6CF0D0994E9EAF3C84446B2CA3E9973C14C292FC92D6C084
E9C62576FD8E54C8A931B38613DC3C4149B0D9A51D551281DE008979700439D2
AE870BE0128A1AC8FA1821C6C6E7CD7BC15DFFE3A3E3FE879488FF1B6C169D22
5B6A696EBA2DC0A58C3B6DA5CA1C968103EC24BA5D6DE6BC5E1030E69749BFC8
FD552B23677B40FC4E05B22F059303501BF5C1605D8EEE175AFC287E9C2421C5
F503A81258A79835FB54EE41B252D8B3F8AE6F3DC92A2A42DFEA9D8E10D903F8
ED1282FE5D42568EC78FB53A2B003007668A6360605E2CF1370F4E65FE3E1EFC
2789FE75A75DA4EFBDD20DD6C799C77D502C0E38DEF37312115E91A0904CC89E
07132589A0A6D5A7F00F0D102F19D9C891BDB9A1A84B68894FC8DFB452691BDF
259BC880352A92D619347F945275CB4A4692393F561AC3395F6D9B8AE4F9CC36
96EDD10A7E9AFF9E6C1E34FBAB88CA320500581EA0E54FB14E8E12311094E29D
5FBB9F6E10AB0685C7C24E70ACB8D634D9A0E0B63FB5FC3119F3A8FA7F3A5C28
3B7C7B3BD0893C1CB734CCB4227621D3749D0D07DDCCF2E4AD2D4F96985BB5A1
8AB971A7B494B79B25E27DE36C03DB4F9975DBD66960FA156A7A7AB7DC7ADECA
CBAB7FD08F4050DC4566BCC26B36F0EFDEF2A4E9454283139F432478CC50293A
92C5B7C72232E7E890D783B4BE116BE4ED5FD24C179EFA6FFC860D2C1A3C135B
526579886A1FA250C8ADBE5C8FC2F8B4CE2B188E7898AE4F0EA7EFA4F19466EB
0B8343C304B7F30F3286B2D4D3B42E9803A2F7192D04028A7F41CB2ACD485E1C
75F856D7C269CC15FFDB86488691EF21286FD1A8F3E900FF3E26CD2666A05557
E60A8F1E998F688FB0171735BA7E1B6B3DEDD144FF179584BFDCAF0BB1B17C8E
53BB7ED65D68B90E1AFC89F0D62235C37392697AF95F34356AF4ED6293684886
68237BE625AB95503B161B12147F54782429A21E2A24536110199E85DB548C21
A7CD2BB1B51BC3A3F2189D9400C75E3FA39FD8BC7A0FFCD765B08D512546C0F1
97C2A7EE4C3C32A0B7329BE7070E42A0F681B393C1D36E58D3ABAEFC9C3F7C22
0347FC7E3F939A0F22FDC3F58089E510B96AD979CEA1DD5356962AB01D283901
839AA7807CE682B2937376F97CEFBEF0F3CDB63B9EDA78B9B9F20AF0425F3574
1C291B8DC44A262B89C0621EE58AB4B0204B8358F12527E33EB99432112BDD68
9AAEFAF16FC95B7625AF640B276E0374C0A53FDF2111E51C9A2B9DDC7186F0E4
A035800318D338D884EF399D48292FBDEC55AE303FB7ADF8AFA0646A4031E884
AA01B575B37DD1D9B0D453E3A73EE7A34FEFA565C9C6C229A606FAD9B8CD1DF6
F9D3B75C76F5F25E6049990E6D7A139EC8D793363AA0392F455F092C9A7D4C8D
339777F7F8A391267C68C419D9AAC414F307488A9BF2EAACA5A014E0A941BE01
9D06F6A4EC4881F280AA002012FBAF7362400775C17984EF9CB1BE9CBC79A596
88BC9A2E9722AA5CEABA90F6A3C7087B8553D5F8DE161ED1D578B1F16BBD31AB
20CD19886D6B2B421F7C057DB10F0445DCD34B1937D3114220AD0792429566BF
F55537F41DC591C0B947BB87F744D96549B1599480FD287DB8D742D0F202F882
5A21D0D4869F02FA1C99FEE1A786CE64B7765DFE721577703E5588268DAA8654
78898C645293D7CAC22606923294723552421EBA746E16221DA38867D33C6922
52237B500D16D93E9EC5E63A2E348BFF78234C0A8CCB717FCBA052088FF01513
6D44AB7574C84FCFAD6C3C935E56C071FA9EA5EDF607C614359FD903C91AF6BE
B934EA33023152C25C27C3C771B5531D050B51B9508758F4EB2DC074D799F511
6296B8871BC97FE4C654C9E122065BA46297F7D142D0E8D87C38EE43D1D52CFD
0BE1557746608D91E065D219AFCDBAF5692234212A72336D6DAA3D2FA144FD92
81F9D6C60E542B37064EE4CA5383C6EB86B584170C5081A47B223BF13C8732FE
094A4BBBBE6AFA9B7E549AE4DD1FA1BE2377B97451BB8D3A8FD9FA7E9FD4EF88
86EB413196E3AEE061762B22C9602DB25AD8ED1EFE6638CDEDE12DFFADD36903
CB88354AB3DA135C1123CB216D7EA0642C8374F3E847DF66512D013CF2B7AA07
D89E809C025592E1CF5273F78A2C865957FF811ADB0B25D83970984099E87379
FB4D0CBF87B0B9201D5AC9B7DEC719C4E16E7E7D6CE4F9E758817A632236DF3C
A461F74F317A77111FBAF232E67AA468B782A82A49F32058B2FB7690534A2813
E300DE71EA363FB02B97ADD5CEAA3449592B2E97BE43EFF8F5BBBBCD271A1553
78A96434302578D4277C784D82218BAEE15D4AF35B5CAE1A7B61F9B99AC42D12
5D5E2AD1C96410E8AB17977A1A76FE6014FE4EF56765855524D5E38F1D85396E
7C5D36F1F6D7331971E5B510BACA9234750B5DCEAE9B9297F3ECB6A1C3418DCF
B8621ACA8534A8D5CD33FDABD416A9711B886A186DB61E3F985EEFDAD748E35B
A0387BB09957F9CF8B20AAC012605EE33312C1A0A5CF1FF51000CD40614484D7
2FA37C26C41144123D05F17CB19D9F34F5BF921A7F042B8F51E4F01551966A7B
C9F2C8F586487194107C63BF5C6AF68FC04C371C2F5A9E9965F8BCC18F2DABFE
741402AC62ADC049DF79A41C5A4188D50BC8527BB8FD0C18F1B7B4C6F79EB00A
B04482E314D1348D8C871D5F0F5BDB7F2A35EA7D7778E1C40444E5891308703A
1A557D6AEC33EBC70460C70451308337E1B50D361D971B735BF61EC499EBF792
D284E6B82BC7CDFE0189EDCA472BDD5A7B8E16DE93E9E9A23D08ADA7F66A3DC7
4D6126B8BC8E30EC6E1E4825246D8BE271D65F3C028D630522F6FCA9A6998235
8481D1E82C2A9040EA273FA0CD888A97E1C3E593362E1DF961F6E6BED4A1655E
DC31C235D20B206326C7E4F83A6ABAD2E1727190539E125485CD15B9DD2A8F98
AF91753146BBB751053D4B80F2C523505C344F9276BCD1189BD2631CAF932C73
679836C6D1208441CF4B596CA41D228C67BCBAF9B26C88CF5DF6EE049563BC06
00650B1E7558878C986602B24FF0081647D00548511799032597B2F75245ADBD
19325401469A2C06CEEA38BB6A9C5FFF29E7B3F72A37B4A9D8774A3000FF4128
513867EDA173A2E51A0E50E6BFE03965204975859AAE67B67B37AF86DC494549
2B8661046AB43C9857D215E366368A2789AB471E7EC9ABA4C841AA7757FB16DF
55F4C8A7A3B1ECF07CB720BF3D41D92425E94C2CBFFFEBFF0C5C729A83162098
7A9C89E0F7112808086CDC0D03EF975B2ED5DA43FCD026B188C30E13ADB29460
03E12B5DFFD85BEC8E854AA4F8E49A4DA33CE0ECCE5E4CA9D84FF99FDDBFE83D
F767278F9F78C2829426F0F8B6375D2560D09CCE5A1132843625AB7CF2495BF1
2B47ABF2823473CB96596E7F84AA93635F74992821556F4E2234E00BC6D71965
ABFFB6F13DA6A2E0759274A5CFC1B7449390604E16AB929E54C978E04DEF8DBA
9170619FAC5C1BDF3F8C833A193D1035446D7203EF6755B72B4BB60F19ADD404
5D44FC96D08126FA6EA4D2C9C8E0A74FAA2EB1479C78C22920C1A20FEF974ABE
2B7D2F4C6F7C923DC76AE990C4DED916A41659BAC0EDED3D7A4B0A70CBFAFFF9
3685434E80743052DE8A1C75AADE46BF615F4F7FE311D2CBAFE5A54C52848BF8
A77F25CEA7D30F5F1725256C8CDF0871FF84F68829BF1E275B8A6C330DF8E47E
6E8C51260FED48DDC2782659F10526F3826B24EB651DB2E0EE69627B8DA294A5
45DC485C6A744C1D63D943345073A179EE0DE00722692C55473BF447ED0267B3
78F66D79E0495943F0FA889B248D9C05EDBCAA8EF7873FC8C6CB1C6B272E15B4
F225C044A1B4163BEB7C6032FE21AAF7C5AC6972230C0D9EE2A51D97B0F683D5
DE56C69919658C71E57D2D3505DCB35ECDF6051AF39B79A9A727CD0240946BBC
DBBB08B94B4B97997B89365F89692AE727F11452186EEB078A83CFB8ABEA07D7
EBAFB3EBA19CAC059232647F0F8412D10F07B2106CAE46CAC547F746724FB465
4BDA9A7C4FB4F6716756460C87310D38BDA9D67A3F10C140822AADB837DEC608
350C59EC19BF039D77F065BC21F658E0CA84197561036B9F7C8C30323C7EE55E
D80FE8A7B6C80DFEDBA2A03212B688B37BAF7CADFC64B673EFFDF8F0815D7853
C6F61278341A10182866171A68693A8045F2F5C4FEA50AEE55316BEBDD68397D
11E81F2878C3EE8BA69032A953716055B0C5717BD9E15A2FDB5D2EBDD14054AE
60EF5BD178D748C313D713CD20ECBA79A63B1633DF3E4E49C9291701A2D96C5B
E35448FAB48A80C8A3B3A3CF9DCE5FDE15564F460EBEA3A4DC77FAB40BABC013
DB13FC3B396DC6E70B5A8E4B719C8B575FD7845A8AC56AB25FBE24C987CBA422
2D7B6A578F0213154790D4291CEEB95AAA3DBEF8671AACC3D5D6ECF52DF70B0C
22193A4042F97E7AA2A11F8CDC710178484CE01A538259D2460701281FE8A559
DFE7CFC6C357C01E8976197AA2244A8E79400B27BA02594327E93C0F4D251D12
FCBDC1179351D6D370D15B0A5BA47136811D3FDCC8BC8675BFEB740423471F69
2BD4246658BBA30156F7CE81296379A863677DCE242BBB40757B109956A614EF
45462F48C6FD0C20B0E29BFC38C3AB3FAFA81493F176B819E1CB1AF3B1551331
9F73E8E905DA5759F418D2B001DC5431FDACBFFB4C9720CB1BCB23146B0EAE3C
7438AC29399A0FDD374327A5B8DF9090B278E113F126090FDD657A591DA6992A
609543F5590FCE796384A40D80A34E81D82A3505EF6B7D16AFC1014750C3EFA2
0150F9AF0A5BCC8DD9C7DD53434BFE96FC8F15A7E232176C51FAE65F414F9611
50AC9CD400BA88E75F7B296BCFBED03E76370273D18BE836533811ED29A0C063
2BABB970CD1FC4BBB733C648CFEA62AB155268470F6092341A8DC1F136D0FB1F
9659644846A348D3B4344866984671747D717E1079EEE88F5512E4CE89C68E8D
AFA11E1A5CF57BA64CDB7855228C0BE90741C06B68DABEC5CF0D5884E351EC20
31A8962EF0DB618EEE4ABDB4D11401C3B50E4E61C2685D7D153D09606ADDC808
B1816723C4036D41DA439C80CE7CEFDAE0BA0A141E873263742752C0B839FF9E
5E96DD5726B6BA413F846A887BD133CE2614D785EBA9D9449C4A49D0B13EEC60
3E2937511D53576D9C446DD56ECE6018584F5BCEB8830518DBC99F1ACF3B7437
FB44CE935B8CE0B01D17C6C4305B192D25B4CC3518CFB73A8B83AFE3BB875EFD
88F274E6C6DF102BBE069028265CBC5C98433F5AB31F4F039297132ECE0F8EA7
D0BF3315A0B93C5E94786A6C04E1D66EEB91673B101EDD0CED5D0A9FABBCA5E4
4108D0A346299ACC1EE0E44EEEF0BE86F8A14F9EFD331C09FFE48D8248FC3B8A
DD2FA48F16B2DDF542A492460800AE74521C1A00A839A2B248F50631785470BB
1999BD89171EC7C95143A32BAFB1A17213370BE85BBC595075C1818F6A1D369B
E48110DC766F03DBCC2EF01DEF4ED73A8A2F03F9929006B6D6E9979556CFD400
721EAC67C16221ECCD01B2B770C2061BD48E6FB8014B7D771C23CDC5B31FA66C
BE231A985F7377BEAA49275B5E62BC871BCFAE9AB6472C67225FE24670C9B445
36F724F83C7A7563D090FA966650023EC0FCBE6548410923051F875718FAC168
E4E091357954754A34A9A04FE68A437B8306B8463247F1E6770E0FC251D0FC54
A5030FAB4B341BEDC1EADCE7ADE12E923F2264454217CB82BA0F849336050A83
6CCEBA8A9C29AACF52D85F449B56CD0DE813A3857D51AF17B9562670E9BE3C37
F3D5D90587AF146861935006DA16A1BD6B4FCEBA82F83CFD6E783FDADA674B36
954715FBA0EF53A05950E8D714628D642D1B53CB86D76268C2A3A0FE7D0D6EE6
721F4F3333F75FAEB10EF1AED6EE9061C673AB9C4B486BB2854146EF1F01D2E1
E0890E1A6E459A0E86CE6778AF4B636A60C0F483530B6F9A73E87F65AD3DD44B
0A656370D4B2722BD17866E33EB8EA512ECBF751B448D68B25E660CF76385033
E1F77C3BEDD1BFDAB829EFB247C880D21D0E2820DF9113821060C2CBD7AFF50E
ECA70C1A943F1896518FEB093E4A03977A1D7845275079FE9C3FC12D1F5F66E7
F073A951EEA3BD6D78E89DD66F9EEEF2A8C9ABAFB250A0D072518DB8CD46D27D
CD055C6CB5E94958344AFFCE43F339A94605127B03669EF2FE6D4CE5C5F7E99E
6E7E42D3ED2465DE9ED74DFD50AC96C56EA9C6EC3D447DB6CDA720D9419E0549
115CE6505CB8DAC3FCFBE00A7FF98F2D25A7891C85140B2F9138DDF2BB8D134F
09F995C528369697C87D45961ED346ED6DBD1DE228581E7CA768F5209F06F74E
F5B6A539F758F5BF22F7E18CE93B626B7A9F296005B3B61C2C8036F179BBF104
5055F162A009CBF703FD54101BB80A1108D7D760128B422B6C3FE9EE339CFBAB
2C866D8E21292AF5841835094BAA9676EEB9BA40AC4094C71AC9DB690EA658DE
2DA41325876BF20B1D1A4318E492FAA534A5F317B32D9A8F95C37FB2758FF46E
8DE2C7C501CF19FD81EEED96CEB6803328A3D52EED34AC4758D1CD86A51A384D
D6066C7FE21B35001145D8410402018D0F42D2C052754F4E3B470042F4A8D01D
99075D21522955F05335E775A7E9D540967E39CFD146E592C67C42E71AE26FC0
9A162AA173260B8DB9132ACA78A953767CEC01D9B10A106FEB0DD4FE4468483A
D42413F4B8022D77872F21AC9A4883566FB59C3A5799D662B502A96940DAFEB1
9AE58D99131B49310B31E170055D2BA143FE63324BE5313BAE49308FA206E5BA
EF1757DEC6E482250DBF6FA1BF8C25BCAC686F8C2AF931C920B1FE710523F7A3
A4389121B37ABF41EE3EB214E1FA04F01B631571DA5B83052A3947A20ED609E7
06465267C2E85FB0196F8C42DD196DE1024B305FEE4D7EB6DB3825AB1CC51FE4
1F5253D461C07824578B205B2BA23E7D5F2193E4105A79F8546B054E69CB0265
291E40D9E34B3281BEC63A179E56F576096A4E3D03F516CFAFBD17A934DFD1BE
6299106401F998F3A9D52E225625FC3B8848D3B258930066352F0C874C04230B
A15B5FDA39B5946F924FD04A21DEE5EE87265D9A7D4B13444AEDB476B35F5B45
1DCB52172B2657EEA8A1F38C0132CD5FEBC741C9C32652026207A49C7A21E851
9766A4FDDF4A754608F27C2ABCF5A0D824C36B6ECE1D2A710470843220EF55DA
936B5D13967F7F4DECD492A52C767EC422BB0E85C1503FF644C252CB4F4DA0DC
C64C90F2EF1341A126980C7890794A85EF6CE32D227A9537A8DA0975A2DD250F
BD151440F4C5CD454FC67C6D401A3C62BE5B16E0E9DBE671311648C07460ECCF
0CBBBC55F5311CE2AB57F8B4CE5CEEB7482302CB5D72BD92E6CA7E83D0EC4AEE
E034E9C8A35655F3C4B34BB11F6298656C7E0625A4E70B6860AA9ABE07CE203B
29AD861D4246EAE0379D23BED8DCA6132D76C53B78A28BC434AF4C93AA47F26E
7A139EC8D793363A204193F78172FF911C10C39D4B43F116B0E2F68451E738E5
64D8EA0383B80482E3DAF096540F72A7AA528BB009E0FC966D03BF5EC2AB2968
21AC438B750A7C0B3985DECF0B43AFA932518DC215495913B286E68368D77C3D
7439705BEE935C3F6851D7C637B282BB75439EB8830F816EF2957F6056C7413B
CAA8344432F60E7583924A6E35871F61F40EBB75EEB0BB2D004266CB7BFDE614
509488F2BA1EB061AB58683A3C0F01EC7B59ED22D13CFDF5995DAD244F88FDE3
38FA65D719F38EB9831DDBE9AFC81FF93F4BD9E2D806668FF731A43F7E8576A9
6E566E3985460FA00514BB9061AD1709B7EB900C02C58AF55C88892053C5F1EB
2BF8DBF444E3818EEE8F746F4843A25469B17C27CC63FE88F1EB59DDB4E65EF7
FB0C17BB9AFC6A7934A3B0F64592C4886D0E1361CC716EFBD51FBDAFE1EB4374
92F49698BD731E9939828E1ABFFF2D267E4CB947879E3307E7EEAC4CAD991C4D
A475602C98D1064DBF03040D4C282A4D7AABA5FB1F45E6293505827D992EDA8A
76531BE044F87B8B46C868D6D2FAEF826C12ED0AC734005F70D4D462C1C68CA7
FD651AF167894B9743045EAF35E31EC5E5BD6740DDA1F8B9B0F1ECD0B2CEEBBE
31163BABE5E4C7CB2179C428025E953E8AF7C9E4428FA690CDAA71206DBC6D00
C44C6FF0D374BE43AEF027BD34EDDDE05C1F07F643040264442F31881E3DB985
834F028AB839256AC87536427AC8F7B54DAB946E2937617D922CE89B007544CC
FC66887FF3C563185662EEE213EC8671211897C06341C8A7EC2293B61AE30E3E
F5B467D6293E794AD2D875D887C411A4C185B878B8003E1782E9A3484F895880
86884E2083D636409679984282CC412D0F131CCB7D563C84CBF4EE3796E249E4
01E138311DE1A75958817AE9CE9F73DAC3F47B8BBF9BF3098535D758488A6BBA
3C4AF64523F37F176F3256E298D22DC5F1CF097B54D711EE8F7EB0EEC8BEC6A5
5B5CD0078007364739A55F50F6DD8D5D97E9EFF016F7D89CA9E0BFDECA8155EB
4BB6DFD5D1DE511C5B5EA79AF59D7E2AD4C0070102458C96E9107073080FCCC7
15432AD104E1E588A4C466531D5F4D76B6EBC3F4D9CFF5EF9EE0D41644672530
620E26ECCE6F2C8D59DF2DD5881BE5AF673B1736FE39987766E047D9738EB7D2
96FDFB736747800773AF74ED5B7B4E0936956E13A9C528A198B8EC8654AD69CC
B5C209964A289A4FCF8569A9C0D1F476EEB0ACC357ECF91A391B8050E1372A58
DF176667500E58782156ED773734596699122F60040DD351580824450D62A120
78BC053A65AE1FF1546C29225D3F1730662979FD709E8ED21757A638B2ED0144
328715E65AC465A693A5260568334E34AF89701186751A3D511CA52FDCB63431
8C5F6A3A69F1D2ADE0D981BE8453C3C6AAE69F73561A8D39E81F2BB9B1494A56
7EB5F2388E2B9775B92FEDE68A8E569AD72BDFEAEDFD98057DDA5FEEDA08769C
8BC0E182385853BA36522CFE033772439D7E72445BF85B73660BC2B57C89B3CF
F6C85E86E42EEDE0330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE4432CE633
517EE593A104F3E07F80277BE4E8ACDF1708EF8DF072BF7A0102B359B105823A
DF3F5D943736E02902A8E4D0A5F8453F45B7988DEA2CBD29FE3CE783D1708C7B
89A028ACA325A964C5C399AD9D07E339C69242F195F758521327798F7395210E
59D0EEA9C33660A3B963554FE591E16B5B10C1C740EEC68747915A3E929F2C4C
6113E9063B238CD6496A72FAB75C84BE7D14BDFEE94F82D7B482EDC690DB077F
850B7914C795B0C7A30B9E18D86E1E99ECBD5080F51987F71288D38B763B9B36
CAAAD2FFAD7FDEDB23C805F3235962E328878A5298138DA9ACCBDF383D124AD0
A3FCA834C42E6678C5048808436A6975645A8D0668BD40279C9094FBFBE75603
A0A117C1419DF929D29EAF4490A019A8A0B54708441DE5A1A15C14A676EF40F0
B1FD936B6357B50264F98CB091B751A58D4412A949B9E6E8CBC91FEAAAD9853D
B5D7FFA4D0D4CEEDFC9785241AD3298DC6830F31E283ABF50A74B3D4D75F8562
0061EBAF998678B306838733151D3FDA0B382E73848D88A376515078360765E6
9141F72141640FD0D1D14985545A41071FAD8EDD01651746F55BAE6D20F55738
89B6ED615FB1A022FABF29074FF629E2D24F4B989BDEF9B206992FBA1B6D9146
D3A741BDCCCB7EC1DF5320EA4715E42D9D1AFFF7AACCB3BE5EF63B1C4E79B49B
EFC07683C7175D9456CE5563DCB2642830EF891F67390D3684CBB7CF06445C22
9B5484A91444CD19BA8FC48C83A92CE1E3192849C4397A469C12B20727A4CA38
A6CBF19D8871D125317E14B83714D18F84E5C4E50BC74E44632AE2C9375CDE80
642BCE84D2C73C8376BA18203DF558CCF7696F7B08049AA54889D43B95104214
B86E9F3C3A85A64825EB7D3F8A7C29ADFB1239EB30332475ADC4B9D8E699389E
ACE29CA13ED2AE02B4A22EB83FF56093F44A497312DD9624CDB1A4949EBE5DCA
DFDFBC379D95870587A67F06496C78392AA062A735DDB99A38AE9DFDEBA1E28A
49448ADE9D796AC90E10722D0610B5553FE231BD4FBFE250493C641E4432F6AD
5FF3BDF7FA4B74A146BE08D4A534366D18559A538D238461047874BDE134E8B0
0208D76B67AD053D7B484EF577B62BE021A5A76D9BF6BFBC1CF58305D7B4EC74
9B9B95C6238C883492A14D588D53900C95BE5DB298B35C36202678BB63EF9207
0CD1ADF209CD07F497D2C93B7C5B6F9D3D2253991A0F1F5A56DEA1965AD5CFA3
392486A4C8B32F5F9159E2BA7350752A998258F35E0970B516326A276D0BEE72
ECA04496E164D64C9B576C9513D3A50862EB1AFF754DA56E3E585CB7E990002C
63CB7D08C686F1876B22B6CA2EFB968F6DFE54E8D46CEBB1E1A056C6F5202A4B
6C8E7672D96FD1DF009532644A81752997BE1B7F922953F2E55BF0BE6A95F211
9EAC1B47F6AF61172CEAE6E1ED8E4E9ECAEBB19AAE1197806EE295AEBA4DEA11
570A9C925955D5BD876FD09EA26EA2CD63B17F9966B4C581E49ADC43DB22C653
7028E94109E7277227757E15F2B9D71D135BDCD2187B9718A84A313834E9E35F
0E83131EC126ABF23B3F29AD9C236DD923A4EB2ED3E4922E00C3EE943A6133B7
EA459C892A249DFBD47F53FA11F6B85538BFAE0FA6F689C4DE3F0EDE6A73F4BA
9C9BBACC58E7BCB93D9840CA8610D7C31AA182C4EAB884C093F59398496D1A7C
C3A835C292E8F0B34A4DB7B49E4EDAFFBC64B02C39C1E59D3CBDC11B86D5FD87
042BDED2225F083EC7F8BA3FACCAA00ACFB44842494112C1912DBD817ECA98D6
2B1B218C8BAB37CB0DBEDBDF6662C67BC53CC7532C8BE8944D2FE21F6FA83A84
FB5EBD52B5609D0709BD840C163F33F58108A5139FED7BE50E3343ED04ECCDF8
4518F9A4C27A163A087A1CF668F5566C3DB1337645DA433F5380164561C24EA1
392C2EECA504F6B74187E5BAD4BC833C04F61EEB024ED23BA84B98C2668DFFCD
51E1B874186DFC8A0728094D966AB2920AF48C188D2CC19ED8781202F5A6FCC5
B7364DE0059D16E6C98ABAF682B5883A4D5362084B55B8DFC3DE17F124542823
CD241567A6D92E3E9A5300469A86E5207FFCCBE5E75CA48684846BA1B1B2BFE3
6A6E064C49C681B69A03BC23AAAA105423C6DE46D97624C163E19DF47270E978
554286E01497092179F5394994D6133027D05FD1F6CA9C06832E0BCD2A150579
E20AA169F781EF47846555A0B48BE8AB0D721FB034E81220EDD7FF4D56083A49
A0055D378B4907129EAB075E55990AA2BBD92443256D84E21CFD6599EF9AF591
C5B18452E5503565ECD70C8C393BE04617BB919A926E25A7F188CD1C20CE1D0D
CDB1B4E73E09C24A79F0F2A8C43222C4EB40AAB1BBE0D687D26C3C9E625C11B2
C3079B37341523CCC06FE0AE20B24080C3992F98B59966B2A406636D4B9D090C
1220D1AB547EB928E27FA5C2A3AB701369C96906D89E1A8237C9A5EFBA42214A
0ED16F767DADC4AF5C250C84A7ED5BEC10AD714FBCA25ADE9BF696F256A77854
CFAD92143061736B5A4D69E43D6D4780976BAC146AED3A4AEC193BDB0EDC7326
8E90A11E60701F7B19D83F738F4D30C8AA78D8B5F613828CD9FFAB70A8141B92
8F6DB4246EA7D14132089D99CF2A5AC1AFF59A8F9EBBB7C360319EA28E12C5BC
3E922E71E93886586ABD376B753BF686340CB54DB6E73E2BD38AE87890A0ADD0
61994BE6EEF6E69C4C8C44DE3152CDF49D091ECFCA28015516A58DFD5B5DC4BB
8C386061989865887D4EF8AA7A4A10E379541AD85E8FD1DFDCE4B9622A015D19
4DFC5AC58C6C5D8AD8830396934053FC103CDA60E03722D77B0B92C885A44167
F00F582D5DEAFF6228E027A9FC55DE689EF7E0CD47BF72C1E572D2BF683CFA38
7004958321E68F130B7964E68B84699C63892DE0060E745A86993BDAE191F6D5
5C2E9F14F60DE98C377704490E46C80EA721EA3565C32842CECBD1B572EE3482
AFB26CEFD51948EC4FA974F8F29819DEE7C5F4DD61F2D1957B83AFF2D45661D8
89C2E90FC4E955C8672FE9856BB34560170A7DC0715AD11C8295239AD7F88ED1
7E6373C084824112C35840F97ACFB17D5BCE4ECE061CF5701F74F68A22A7D969
289CCBB71EB6FC0AD71754F5798ADF409BD1E952AC76142768E1613903D902C9
E9F55E88DDCBD6341B39B72B78137BF3A7959BF63C1571CA9C59C2F18FF32DE5
B2368D7E31A81935527C805998A14E8AAD4F6FDE4FD3824C6E81DE8EFBBDD356
D3BF3556B67A6C4DA86B6394683BA6BF15861E141ACCDEF84E47010EA39835B5
BB7A68A51D7F038DFB0A74D56FA1F249EDCBA84F1790F231EC766B777AD7D3E1
A6C3B98D7202C8AE737E066A900B321BC2CE7D26180BC57048EC592E803BDE90
20D9C3DEFB9F17F6A571CDB1BF755DF10A32ABB484B0744BC7B16B42DA3F3FF0
75F0BFEDC1BBB039822B98E6AE3EFEAA6DA0BBCEC31C883A001BDAFA933176AD
532E13996C2D2097D743A4820D1D33FEB36CBFBD5D03D06B43DACCB99E8BE91E
5A47F9775C05771A4E8572FD090DF190BA5D4ADC0CE41ABE29E9A1CA1AE0AE10
9D37B5BF829ED3BAE5E9868BE0ACB7EFF474581593E08F1A6E548CC2FB774CE0
07D0C52BBE272C277141C1DE33016185B51E15C4536CA1AE2B66C2402A2E5821
083561A9F60CE8471ED7C692CF08BD1E3D66349CECB31D1A94E99E66270AAF6C
26A99BD83EA86DE7333FF02854918B0AE8C402C235C30832C7924C62DB885C5F
2B127D808B24FE7C7BEB25BE4C3A8C75D3261508A6AE278213A1B7A4406EE7BC
4BB4658DBE4D924EA330ED31ED75D608BF112B8D2DB1B886D6CDB18B2C1F140E
051677135FCC52F95B7C5F5EFF013A06593825D5C6785D170E4EBE7617553A3B
A2D3E3F4788C46568D09A44AC6C6DDD2C128E82817377A8B3B0D26CC05413FAB
858FC29C11985B8E3C79D30F58B5E14BFD4582358A8CCED1CE5C2658AFDBE725
65B8E2BD26E32BBCE71DF2F416F8276E2298E9ED60AEBA9C6A4E44985A429BA6
A8B2DB4412EA2D59F138074710B16D7D41CCBCD899B5BA74E88DA95073D1F75B
0169DF8A13F33BC780E3D9B103C0001887A1781D0F55AB9E57531454F80AA773
B7101AF5D71F4C5BEF5A58984722A205853680D011160C3AB18A4FC5BB8310ED
59D84C7DAD5615290B7E3F04E6241E05ED7B34393110BFEEF35D84BB59C5C1FD
772A5CB6658EDC786857B90554F9385B8041CAA0B846F694A0DB3A3EB1E0751D
97CB257161E01C7084E3A01682830D960822740981061949F5D71B0BD11FD419
50D0855A9F872338E9CB2776E2EAF731CA11EBD8493591881A32A55E4A37720C
ED9C4228CAC4A165314B2B927F88802B65C0A75BF15EDFEAAFB45C1CBAA9E0D4
3A0223A66C3B8D36481F9A3F9A801834B8C9698EF7F25BBF1284F08F89E9034E
740C98826F704A21F7BBF74D27DBCE09E4A8783FB06DC5D55363EDDF5B410F43
6B38B2AD38570490E07CC72D6DC764BC58F07F63167B19B051E9AC8A654F6F76
950210E99CC5860BE6BAC04F627B198DD98DA1A56EC41DF17EE685850231115A
0F9E77B3A52376344DD1C152405261F1E0C1135B09CC5BC0C222013298FD8F3F
A0A756330D3CE07671D0EC1ED8F78EFB191969D21A37F1788320A943263B3E14
F6B967355A21C54E1857D7C613E9C48B6F59EB36156D42D2B06E4E3AF1FEFBD3
053A14060B855C07BD7707A5F7CF8E63B0F23938567D1D986DBFD899CAD59EEB
A7F5DC2C1B2ADF514F42CA20F06AF40F2393B9C7B9266B80AD5CDB75EEA94BDA
95093D064B0E693DB35CA8061ABFBF135CF3CA58AE2D5A41EEF009DD9BECAFFB
0C103E50E2944C305E4EDB6F7CC09BFD7C53437FAA9514F7DB841C485A6E805A
49A0EE76EBC8C78B7C0A7EE4FAC074E47FE697A9F052CE9DBB90C0EBCFF14579
ABCA1227AA371D12FBFAFE27AD7435A3BE2D1E7EA5E928AE86B03805E1D2B444
588EEC6E9675EBC731097AACDA6A8D66175DD02819AA61859A40BCF5189020EC
4E038AC47ED44D4F2B718E8092198C66DA60499D3CE26C16A0710A8A2EDA21F1
1A8CC12C781043EB837C589B4C13821BCDC31A7BBE05381B6FE2DACCBA786DBB
53A2DB870A9AE3DF334AD9C6BD762A4D1D142EFCFE48921D138790AD903EEABA
5F1F2511FFC40B2F16383141BFC18EA4855359278AC6689E184DD298EF0836F7
F28F1C2CC5FC0BBDF5E138CF0FD885343D6DEF5357ED484D2253E9E77332E293
8309D81764FF1C5BB31CE3E4C9C58059EAFB02F3AC1B1477D0595DB54D6EE38A
A9514B5BD9D5BE16EA8A885D66B5CC2C4F429F08FEB6866901A3DF7E3DD7A27B
0762B6759B801FA9D1B89A33E4AB01CA253396F5F7158FF7A7AC5D77F267DC11
8E4BD202AA0F045331EF0C7604247B7E4E584212E6A7C1E74820BD5F5794F90A
7546373DF24AD4E1FCEFF89390725A6A778534964A83C673860BFAD677AC3B5D
656E29B3A78034050652A6D0EDF68AC9166AE9F20DE746A2016C4958D8C6BE3A
C35D02D667BBB08CE200427B6277DBCF7FEB52E83FAD67D5C2918534236E760E
8393063E897AD49BDD52675DEE0D91B8C263DD3FB3CA0C14E82DD30EED7821B1
315FAD98AA8084B32B1EFAEE1F62B5C2AA0799B6229A1410ABFA2171DF233256
0616241E72E2977172857D5A11E3EACB408AE8BC64FBDE2168022770BFB8FFF2
9FB56B6E4DF9E5615514C9EAF3E055B3F373820A90A31EF1C470F5F3F83CFED0
1C4557C8A3F6F9DA8A0CD52174B7668DD04482979BE5B243819BC34A5F29071A
A17D3187B78D2CF590ED6BB5697A8CBD7685C5776984385E4DFB59465BACD9A0
8DC649CDF138E1BA1719B1985F13D541221042C64FF3A587EB3B86F363344B4D
0ACB2AF7694A3E9081488E8C9990D2006E940B5157D8BB940C301C615D160D44
1F3732593CBA6AAD4B49E1BB4154E04CB61E86E92BD154ABEFC24FB87DC278D3
F4DA2D9FBA6E704D7996DE602102A3E5F45A328D4D4CEA17461F8B7B69842969
8425ACD7E37A55378DF01DCEF2B2522D878D574D1A92A562011BD652B08B0197
FF54FC70CD1B3F0186FE896852FA6C79BA73C2B7C55B1532B00266F8A3C7ED4E
1C8152D34963C4AC1450DDD59C07CC29B55FE2739BF8FF4BF2A73906EA8CFB1F
141796DAB4F7078C6605AA4BAB549409163C23C59B9E07AF3BD13F66031CB9C5
9CC41343257B02B8CAFF2A56BE397BC9C01565300283760FDC4B6ACD5880F266
9F778314E4E15844C42F5F7C3D69A84852A79966211B5BB0ADCF654AAC1D135B
DCFEDA248430D2A379757104A9E1DF8111577A1CFBEFFB641F06E3F8DAF253D2
9C168474116A57F258435CF8FE824C7960A8F75A93B645F1E4D98EF12519177F
5246335DB96E103CF6AA05A4CCA6ABFCE6D8089C652E62AB579D2547729F7D20
EB0CBA26D19D904602C5309C3888BD153AE232AE7D8E75BD246D7505980F5F52
758914C0196462D9069A6D4C7413B0E27B375C148645A92FA70F76E778CED282
65D28A7239A0B483254EC4B2384E06F24102C5D3EC462DF1517479133F4168ED
A727CF0DFC9284CEA6C95180A28317244CE4514F43C40890A98BBD2C6684FE84
B7C13C1F5FD12AC6968C5B3B2369D5E721366DD83D770E83DDF9D687E5699DB8
1FC1B1C78C9C6967B175E60B8280215811A513FD8DE8DAC185A0A44BF0F60797
B0233AF5B5326729A4AA219E26FD645CDA9CA271263093D71F730A6691A3A92E
63E9751049301D6D600298ED1716DDC8A98C2B32A3B5C195A9BB554BFD4FC523
B2D121868A6855E9705C83DAC923D582504485752E44BFDC24759306E68722F2
B17FAC6BDE8154EA097BAB1A2CAE91333FFAF8A6B2ED68FF126795973656F28C
3E41F40927D00458BBED50B3390FB61A3B4842C967BA6D3C1B28E23F0B7244B2
DD345EAB723DA8F73489DF2F6798D2BA52FB0B43076F2AEE2FBF35243540AA72
DE87FBBE2E4A34FEF86562B36A413A1B2608EC4CA78F39E47C299320B1C3D872
D86A5628A87949CD0D4D45260A0944EB50118F3154E1B6D5D446C2DA18596F23
2ECED7EE8D6997D0193A108B681254817A71FC07A5CCF6A0304CC43B7F56A1CC
04C688695F330A534CF821524597A252188A2B2E70C2753BCB89149D59EFD7E2
83A221515F8E04683BB4C68D67F0B09CE3FF800C50D04A4FF91767277D1D7A58
357E1FFA4C1D11D2B54AAA64D80F6B985BEB718D87F4D5738657A711342422DC
0BC4CCD92D423DADEBBD5D1B019265D940E7807229238F0D1C7795FCC85BDE7D
79D184FEA3762CABDE83B44099D353A215468FE6173320276DCBCABE1914D577
00D19EA6EF4FAB1AC4EB32827CC96C2994CAFFA7B04EFDE6A1A8CF390F9E9889
BB24004CC99B4C3942D07D93246B8139030B6D5CE9608D0392954907C109BACD
7B6E984DEE494AC2AC02F2A3B4DDF3ACBE1850D52E3DA5EF4F9D595545F57D6F
955A60D34D7D1EE9160797203C142323DFF3D0247613759F91D50A406E6EADCF
ABEB4F12B412B23F83F290AB8CCCDBB3B75E3E0BC07D74DE080F6FEE6287FEA7
AB03C5A531E34D1A0CFC0A87AF0F94612E58C04B53144DA9E32271870933DB57
CF874E027AC89292743223E755D2E0E418C5E430FC779060AA9D79443FD4FCC2
9166E057C91F07ED5DCB4C7B2D78FEAD5B36ABFD6546A7ABEC14BF5965690D92
CB929F93F08DA0E6C659947037B803874914A51F3A68ED2FDC7E1210BDA389EA
415196AD9121FEACBB2197589A555297B115E280FF0DFBF136E3EB04B98FC586
64136C4E92F4395E19ECF6F13C9A961F53471ECB4AD342057173BEA608DC7B6E
C14AB01EC3FD59AB78F21A0EBB690CFB8B7A9D2BB63373E0D8F5DDB7CB8B3ED7
0EB627D06BB45D5BD20820DB6555768CCE54C585470FC02BF88D0DE7FB0E3EA1
E5F01621564BAF91093F94232CA0B2C324B7F48287F1324847CB35130024EA3E
FB203752D3088FEC30E30F73CA101197AB47AD7DCCE0FA5B6F45A9653F83FC1A
2AE4EDB6C6FED53C47952001ADF025DC69C761
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM0900
%!FontType1-1.0: SFRM0900 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm0900, tcrm0900, larm0900, lbrm0900, lcrm0900, rxrm0900.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM0900 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-196 -322 1502 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E5878939A488F2FE1094A76925CD24DAD4573AD3CF34E426708CF06E7EBFFC
BEF5595408106E2189F418D17AD510ED5B6A528E8902AA3A5F0FF52AE3DEAB07
32F06B63E28BB88229E046F4FF8A356BBDDE82DF2A197F2E26CA00D5594725A1
83A89A36487EAAE1AC312C929CDCE50722FA6C596C261E4D78D6C6ABF77F5CCE
0E410ED74287A0F201140F8D9674A7AC585D3CBC72CCB824F9E1CEBD08AEDB3A
A4015CADF471F7ABD9B0F0AF73A8274FD441BC1988A61799856E4770155341D6
516CD0E25BFA59B67AB7E0571DF3F5BA70A82798D4CE6D9F23F52CF97CA370D5
FFD6359959DB68E52196D89FFB84700E1CCF3E2E6A52CCB43303FEB31F296C29
34B019803C53D8D5DCFDE72099BFBA29C176DA3AA9F20106D6AE6D530A490578
AA65868A24DD5024A28C6E372C33EA2F6573A6592AE985F03A99884CCF7CA096
043D8D33EC0550084F5D85656F821D8E06996DB3E47A7C4E20CB4FA8F9A1FDBA
8A8D5E42F16B4FE307D36B86A652C196C9968BB436C9CB66C9CA27658DDBDFD5
28224AA3A9BDE394CE703771433B4BD8B2867327DCED10CD89FDAAA5663DD04C
0F4EDA21B96627D495493471C6F0A2BFEBFC2951896E3A52824E1B82EC39B16B
F11A8545D54E1C5AF4BC701B47E1D8D4D073272FC1D51635571A371ECA95C12E
E1C25D2B992EEC97DFBD6FF62F64C001793DBD8BEC957386CF5BDEF6C38A4DBD
F39E9464426805353EB6B50E527BEA12C147153B2080AC1F7C1C713AF14688A8
62D83B9557A4A5B851441290AF825C4C92C6C50EF812CEEC88EC5847D3E6B82E
9EFC37F08E99ED48352198C1DABC02F158FC5E78E55629228EC140AFB4086200
E77BEB9D615DB1A4373E7169AEE1391C89B1E6960B0587E8F372149E7FC4AA23
6A54765B98564787AE6D5F7213976AEC2AEAC2A11C2149FCE3D586030CD43125
DC82E9FD230281E2EE9B068092FC5DA01140478958D7CAEED313A06333463A35
0C18C4C0BC997193BEC3DA9D466986B15C320386EE0B6FC9B3077BA34B8FDDEC
6C2FB863AE5820B208068E481EB904CF6EC0905A5FAC760E94FE57D82E1B785A
1729E53EC1C9E1354BCC39BEADECFAA83685F9FA6DE912FDFD7E4873D4E643E6
A586BDA7601263D5F940CADB88397DB6006ADA6BC2591C9772A6BFB6CCA5C902
BF37A2A225D902DCD21683396A250BA2B4E52BF6DBF5EDF9A345D2241F9275C3
B87377BE3E711EA1B227A44B5017A05D58BCA17422ED47AE74BE08F7C1CAEE3C
80C0DDC72835A46F4CA8FA0A2A98C9BF290D6B363AFE2E4A04FB1786AB04B97D
1BDFE675BF7899DD76280312AA0240DD776823166D1044B47DDABECCBD655D5C
34B64E35828AF5C2F3966893386573FBDEE4402B7BBADC0219F29636A134F63E
2D9F50D87267453AF40CD6CB78647844A9B0E3BBC247BF2AC1DA356869FEA9F9
F22638ACDD24E907BBC1757AEA8AF245B17CF7523166FAEDDE6E7701DBE4408B
39F5BFD418CC1F6D3A28A3EF3BBAF312EDC6D4F73630B72D102B8FFE9FCB63FC
68DA10EFB9908BD0DD3F8B22BE2A8EE336CD685C61048663D397EB0B446E46A4
10451898291760327F9467C1CF82077AC9C414466099CCECE314CF25CA05C3D5
69CE8871B49AAF29194DE777E639EB5AB858571975046E25323E29E7097570D7
EB69BE4329B97EFA4E2880B6950E7CD46062D69135A8315B7174C52CBB4FF701
25DCCABB86087F2DEF21F613AA546BB0B92756B07DDF69C8E038F963EED52050
15EA3AD0C72E1EB5A76051B441D7E26414F536328FEDB5C2C7F2B692A31D9CC2
5E660B108FD2BEB22F1DCB64C20BED9337EF41F89804D41D38257570A48D9E8A
EB7719DCAEE5454F64C96C412DD0BCB57024A856F807519D24075DE0A079F8CD
0E70D68DF5A2AA0E4D2521B489F527B8BFDDB658A581597FABA599B626C8AB85
A613667F1F0B59E5AF5B6D4315AF193EB08FFB2407FB95EBCC1BF112901AA06B
20F0AC98FB5260D014CD86F0B80DAC54E27051D23EE8A56D7256F04E0FFF0336
37639E26F1AC16073F77E9F14B72007B9CA516E9209FB94DE8CDACED175A50DC
9BF2CB897B46D6C7A8639EBDE5D7C7829E67DDA9A38263469514DE900587442A
77F77E560EA8EE26F3CDA5F711EA0BE543BAACDEE7682FA871359000BE0903C9
AB2A44E52D859C3F7B1C757DFA9B5FC4E9E1DCB2C2AA2FD7B5782E648F829A9B
0D502A92B344786ECAE9921F2A8A6A64281CC10EC4FE55585ACD13B77C35BC96
61B3974327FE718B2624E4EE389EAA8E57DD52E571C9E736F4C0A4D945FF1E2F
C2340BE37B673D3EC913794CED7510498631A3511D8FE637EA7EE4758496AED5
0E999FE1B924B94E618DB0FAE78C58C45258EAF0D36C036B66EE0F02B9CF981E
BED02DD6B936F5750D08E3226D5E8528A46AFBED21C713252BA096A52BEFD1D6
355FA6E39E52B8F26DB2ACB35AFFB1833AB5B23CD08AB305502D1EFE35444A39
56AEB8E16DC8320D35B3F3117D2017C20B65C4CD9D51E88C242D45A0A3905AE9
77EF13BA06016EE9F78860F1F9DEAD4C81F8D2385EAE2EE80CA020C75234FD6C
574117146FE073F5DF8A2D89C9F552E33B1E4F9B5CEA4323FD0B88CB0B4D2894
309F1DD03BCCA366563712168FEC2A382130F3027E4630FF8DDF89739EFE3617
171779EAB5212CC7E7E4E0717284B8EC38305FF7EA8D51DE50F4094049F14462
8D0AE4640696AECAA8E7AA332DA8A5556CFE60E925B3141F5D9F5BC97840EBD7
7064F039E7FE2EF6B49A6718C4DE83FEFF8F84AB61AB535883FC887EF5576EDA
EB588CAC57BFC85F5F54388C2F3A6FFD579E6803FB06C48F46A055FE8ADDB131
FA2FD28C8EFB77D2B54B5AA49F923426DCA3781D3A8DA318C9ADD87ECD47181C
5222B441571D399F87F18F73A87CFE2F8817BF94F4C53182C6ECC7CDFDBFC2A7
4E412141A7AA53599FA7FB20654D9E977276EDFCB1BF17BA63096272B30D4982
43504E95B3525CF75CD70D388E63206AF814A2ABD99337A09AD088367082ED1C
F32447875B58C995445E584E3A2F2D52F486049AC23BD881623A69A3E44E7EDA
BFD4E3036A77DE44ABC6A185FA47D89DB7995364F59BEE432246585290E0B93D
4C6BCD6184B8DEF079F8AEC452E9DA468B5307FE3AA0CDC504FB390C48DA6BCE
F2C09E1CCC7653F5D8ADB675128BC282144D38DA0FA8E77D26890C902561090B
54A955BE8D013984D02EA2F1DBCD5A2FDB5D2EBDD33D1E8BF463DB5440F1F794
FA42FBD891AB7F0F9188C537702C98C69800F9797A4B5C5B777B776B92546D2F
BE93A5DD581A348C4D8CDEFB41BA731ADD3C20B9FE9F780D065B4603C39E8716
F2467336487D54CF0D5689164DCFD2DDFF0A83F38D5CB26E31B2829CDD4D11C7
D82172352B37CB42966EA3F34E7AC9E5C4ACF086042D102C3BE5C3B7BEFD5423
B83CA6DC6907F3A697683ECBD2539F3E9761FA9EEEDB874A189A94A64967FBD8
7358B741D679F574FC99A660B676650878BA67FA0CE5238B48624A4E81527F6B
E833DCE678C8745A6B72A8E34FEF7DE05B2DA9ADF5734C4FE92CDDC4CC333CE3
CB71AEBC24CFF248EECC98749CADCC9DE05E0A7CF195C7822C6EB0C32DF29441
BDA3F4F48079FC8AA22BB75B05774BDA85F850326528112F797FBAFCAED8EC41
5CCDBBCC8BE089974B29A41603A99363DD7D2B6617174C26E28B27D37DA5B226
884049A7D8FA97F6573D9B1D76BD92C2623460ABA214FB1F13BE81BAE0E56E51
0DB5F6B4CCCD8B694B4CE134853651B9A2A75ACA00EA4C0860A09A83A656D0E6
21A8AF47A2378C2E4AE1C73E5EE9328797F9599395BF80FBAC674FEE2D994B57
5BD9F2D6A6486E8BBD8926A18788C698B030C40EE0FA9540116CC9EFF70DBDE7
8F96EE15837CDA925107E289943876662540110824141608B6213395751D9AAC
236797B58C456F16C0015AAF42C472188DEFD1A9776398DCFBD3257AF0363000
5730241CF5641E2C793CCEC2FB1DD91E3BD52438582F9552E528EF1E943A9D14
E2DE51FD828B8C905B2E65E4BA0525E2A5D181D7E6BAF11653F690E9C7783779
BAF0FBB300F40758F695AD62B913E904C32606A118378486859750AE09594793
FB5EB47B2AE56319A358D913DC59B60614C2D7E72FFD2E71F2020309DE2B67BE
5B206883CC78434B7BE9CFB08F5736427531B2C7789EFFC553ECFABB7C312E18
2C75F5CF47CDB8FEAA8215C8ABFEC4EE2A946B6FEE986FA6BDB446243B71DFC3
BF590F85CE86A6BFD43B4D084C9603CBC5182F2F619C3357EE3E45F533F4D8C3
515CD72E01FBD1740F7B3ED9A79FE6FD1F5B898ED2D48AD3E74FD9811F7D05D2
39E05FCC7AFE0088A65B6233002EA38F173D2C7B5A16874B0E2D3A3D7887C8F9
F74EC961C8F88238687981A92828346D24D5FBE88DA5A66B4A61EED63C048957
AAB7BFDEE0C8218C8561B385AF97652AE4D5E2480661F715B42F5D97726C153E
C014F2559DAF8ABC763CDACFB467D960A721BCB2533C4974A8D79CD1AB5ADC6A
15CF83AEE6A86792FF4CCCAE8CC6A5E45D620631AD97BCD6CD33D47EA2D6268A
B4285361C495ABE03EF7B5DA563DEA56ABAA96B789B761E3215CD1B5C54D7D59
4107F3903E14A647CAA484F977310C39B499D29E2B3B259C581BA64842BA7DCC
E7D301109A209CC79B9A54C70F5370E2544A3B93A7A4CDA6D2BCCF6EC3072C6D
C05A18DE5E329E274322BC4E616E14D4D40BEBB21C9ECFECD00EB33818B6A969
6D4C6F0A960D0EF8B9DCD5430E985C06CAA73CB139AFA6F0361843AF8A9935B0
6C872C065B0A144348335109ED91357137F225A539D00986B7B39A7B82832EA0
D19A6EB3FCB5D956EB48064ACCB0FA807FF95F6B18117AC17B5E60CCD762F1AB
F747549F6FAA26FA10E4ABB29320B06FB1AE9705D803EC618F45C668F625D135
1C54E88FC0FC7ABAAB13A38A5309861F72984760256CCBA2C8B080163E6C5F3F
28CFCCFF76EE84451C875873120396A0E9C7802390BCB75BF41ADE04A99CF8F8
83F762DB2BA52270A1E9F6E6F0724DC290EE65914EA70B738B00599504CD2423
FAD5433DEA4AA229840D4C62C19E602D5A372964C35A4BE47172FCCD93020781
28ECC17274763CD3FF4EAFA35BAF9F935651D38E4B7E81FBD3B5930E6B2E9327
3AC148E5154CC17804F491AB14744A93581C5B4EC0129BC00D2A004A159113B7
F3098535D7584616ACB6B6796F09EB3A7F9275A5FFB5A8ABD4A88C83E459F76B
56AED20AD69E65CBC608517190C239125D1FE8AF1E4E777C31D139118AD65784
F7464344B3A8764F0BB9157D598F6D3E85F5C327C535AA652C0B70FEF4ACF719
E5F6F66F12DA59625C437D4C180A044F3AAA5C9B1F2BAB2A1AD8F43648719A32
11332B1F4D8EE08D7484BC23105D27C235EBBD0411E336869B65C965D6911B6A
70DA8D81BF603D1ED948ABF8C4ED5B8C7E68A11A9F46B4452676B2867990A56A
F8E9AEDAE1C7D28F9D3C44EF68E4E09A0E2652A71BAA7FFFAEDEE7979DF75769
4CB3ADE3CEE274912AC32B77902C88C27BBE3F428F7C5EA4F7162D0305F93B54
70843F85B06667F042CDE0FB79221DCFF97A6B18CD13AE3C60BA1B6FDC0E50B5
4C32176750C089126C6B8D9626C4F32F336EA87295109A935DD0F90A76E2A7D9
CA8968EEC33E4C86724DA37CB25C3298DBAEF34A797DE1EA022AF1B73D1744B9
588D8D8BF33FB94289E2A79501461567DF704C187061C4369115AF751A7579F8
0D68AFC35ACEA52618A1D6D5358B520705DBE7DC22CE32AEB2F5631D37BE6F73
AD6921B2EB47AAB8935CA45728E9274DE66950E002DD1EF770BA4778296D06CE
702AB8F184CFF361D61CB52B5A523877A7A0EC8D4E3F731EE725D6DC1CED6402
040F6E6B884D9912E9E0256869D7D5CB1E4FF4F89B4D9FA1DE350AD6C69A7935
20439F2A41A82547CC4E375BEC39EA7D93D0487E7AACCCEB481033310249DCE2
08BBD9573C7AD4860797CED5DF95FC2241F07D1C079E556E3EA3AA59F9968EEF
7E5782E2B244770E63CB6EDADB9CFC98C8A8C9C5F9AAA6971CAE43E31A0A382A
F434DE12766FA2AEA136179AAEA30F9014B1624A30DB41A857C0552546D74C21
282D355469F7126C63979328202B036D810FEFD7292919250C38904574BC1740
19730E879546DC352ED3D2727342A1C48DB4E820A9C80C774B6CAE5930FD5887
426F1FCC641E9CC3DF6FB8D35C1AF04CD8EFD3D0F9A701992439CD02A8BEBC5D
665E92A01C64619203E6CACF275615F9F7A2D28B436D7B71E52E4114AA63290F
10C98A95E0CD0FCBA52E75A6AB82B83B72CB902B03FF831522D40754E1E1505B
BA2D1762B4756AA44E9CBDE36F886A6D4CB723B3506AF9A2BE19E1A0CB235349
5C0945D0987103B92760BACEDF36B40E67EBAF1DA794D7CBBFF539E4F9F2DE64
61F222F389B8367EC024FBE43C4BCAE40A8FF65CDAC34AC084B5E36C74AE0319
6211DDEFA926A80A3E2D14D8CA8E7E282CCB5F9B9EBA10A7732C5F3F8894473C
67C4D46A72C1925EA7B6D8F1677F487769D40F24AFFC6F87C280A94CF9CC4050
9DC20438DB961A3F4A81FC2BBA58F97E11BFF7B22B40FC856D210263598C96F7
7C4166DD2684B2737A6A325BF051784EB8578E2B4006EF59FC53249905D4C102
DFC650D40B27CD76A99127CF39388F0972D139F5FC377E058EBA326C4BCB44C7
A73757B91F37EFC15BAE3BC88EBCD90CF3D97EC8E45657A961ACB4E0891DDCA8
2E589B79E97FC143F53238F43F37310F91089186F1FF68A07D5F81640998D75D
A1A96E38EB16AF71A88EB8AB25EA4A358EDD58776AC36B43FEACCF1E51B68E3F
7667CAA69D5B7FC4BFC92182DAB7B75C42C2EECCF636C70DEF611A5FF795AE66
2DDA625BB3315A4FCD68E1033DE4C3708B3ACE529931D86CF2748A3D62B95AA7
2D727146623E1DDB6DD45C1F88B816D87FDCFA7C1A92C23FADF09AFE275D145C
8D9BD3F364DBE539F7BC5ED468E6CDB0F3626B3C60F7D0C9CBEFFDD23E7D4743
E0E58F08205A4623644611486B4A877F4C334E9C2C1CE99945C94F8EB830C6DE
57F0218E1FA5E9C31304ABF9385F859FA935BE53DAE36235BE8502FA9E4B6E6F
50966B571BA16C95FF34764554957CF48E47257C1FE5C1C036C7F66FB1380354
A508F985795BEB143519D259C37A436F9771C1C0D75FC742F788CE958A30C336
2CDB0011775929B12F00D0D7780EA5C25BDB0E7D662BDADADD4EC9D29BA5E760
38A8289C058B1149ED20922E95633F6CED2F107737F1C6B6B7F51C9D16C98131
735FF11FE7501F83CA46EE9C74661EBB8A580F4C9CD3FE265646F6E4A71E7479
6AC7C500AC1A8B08CC425FD9EB6662C69FA95F38D9C2694CC88CCCCAD7FE46DA
F9AD8F76FD3574AAE0696FC136465C5C6ED243EB30144C53A101612F5C8410F9
F4C270EE119B7660BB98F5E5F6D2636F675A283259BC72E88FFB64DB01CFE755
FF986BC3EC63AA25F9B710F7C2A4895CD8FBC5B1A2402A77B2EC3A1498D0D742
BD9403CE3C4ACDAD66307EA431D1CDA3A7EBF2A8D43DBE39BA4099C4D68614A9
75A31D3BACECE30D0E2077B4713D8FEA45F22BD8D609336540069B1D4DBD2BE7
A2ADFA380101A62893AA942F538CB8B7CE69E2FFAFC93110751B5F82ED6718EA
3286BBB2365138869D666EC0592B2FDEDCE72EE0C81515D2FB653AA5BD7CF8A8
3861D51618F600D685E658D412852696E07A86B2582B96E03F56AF9C4E9B3A98
A9914FBEFFF1410AE9D1F228951E0569216FFF9672CCBF815B2495AF5B124290
A1AC3CAB277D5A31B68C009A74E5C394D0D983DDDF5FB2BCC60DF226D68D5B17
1B8A6D650196B2D0E493473D4F22D36BE45455AD33EBF9BC811ECFB42A49B588
7AD4D12DDE2E1C041740F5A2A6C7DB7B2358EBC0358DE50E2BAA558CCB44B0AA
44769575E1C73520AD58066185D9C85227416BD9A023A4A79FDBBB41AE570225
E9DF1C22D1E1560C9E9FE61140BDA35ABBC0464B5A45C9C58405320F83DA6221
FDB4C9AF41365027FE9B82060567667204193988A2E42EF1BE2A00FDB2AE879E
7BEE32F9130D6E8A589922377DAC64F43B17114EC5A72A0B916C00542AD5A887
FBB834C9B390059F800BF5C627430F2AE7A1813E3586234E8877B2A1641BB55F
93496D24B80EAF77C4678AAB2B468B18CB1D6AD0E04891CA92D786D07716A09D
8223670DE1BD5258F2A2086B7862730C818F445B4CA2FCD347D13CF41A65E4E5
0CB0CC9F750D3E83208C1680D7EC2373B0C3C9085AAF00D000ACF7891ABB0F75
E3C811D3C8043C2294AB10A127F1AF649B9634C306AA75FB1238EF5BFCFDAED9
6DCD64B1509372F118AA482137B6DD61913D31D01BC8465699CA1D5EF527BF0D
0E1BFDCF3FDC4C4DDD4BC9E96C8F1D0F91929A1D45F9C48F2DC709C6544CA743
27452822CBE549AD18CFBD0C436F122DA29F7937F9DF00DC38FDBF67F7AC49B1
71E87AF4ACA332BDC9FB4408C68EB32E7F70A371B66E5D14FE0A89910E7A529C
86EED296CA41673A87B47C52C6176727BEC7DA2DE22ECF8AAFA7F60D74E8B0EB
F76F68477470BD7C064AA9AB69C06B277A6DB0C15641C0538060295C7DBF4D1E
E1A4F7E280B79C990FB45AD8F831DCE93480DA2A44FAD2EF12F5D0B6498456CD
0A86B9CE4053096A1DCF2925557773F779CE729A321740AFE7CBCF60BF3C5BFD
E1D1885ECD110CBC064997630DEF998225E2BBB09AB708BD9A18C85C1F80A7CC
2996E187D10B5E5BFC89A5AB13A12D0267AA38C79032EEA9E2974B3EB830F997
E3F2D98497EE756EEF7857AB8964F8EA80DAE9C3C58110DDCF4704C34C9C4495
C4263703BD6BCB9C14ABD7AB838D512D75D140FB7694B14E8FAB2F45B1ADA04C
0BB8740B540F535D70681E7B9AE447A751622E60ED2EF6FE77D10C3F474983F8
2EC2C243D3169DB940D4E34C2EE195306CB9F10D18993D6B97827B8A3293A13C
44123D05F17698CE8D07270608CA362B908AECB140BDDD56330052B4479B93D6
997A5F8CE5847F741903E109B7766D81110463F8E0670B96DEDE9C8106FBAB4F
5C4C8A7AF34EACFD2A731DC10144CC9C5846D703E9B044052117FA269CCDBB89
810EDEC2C94D13D415C1560C67F9A19B3E7B6321FA341B558100D7CDBC7409CF
74E52DB18DC8FCB26B3F8299146BEE6DCB71FA3AB877A528B1A29624B70E8329
D5B3194304CC6889F09E2B9CC8A0E124CC17DE5FB380E5F5AF8199E4476AE727
7ED15085B9772C034A522667FB953AED79A3B2F05CBC0F2088E2822CAA0F1C52
75ECDC761D789B9A97D64F2FD32F3598C8F095B3EC604E9239FCCDCD93ED9E65
9A7011A967D17F8E27E4FE0C0B817A80162679076CA3E8771C7285F8B7A6CB8E
9007041B903BF7E0EF4A5F4204CD43E67668DB02447082F8D54B0866FC881303
38E890CD7D2CD30B6FD83F99F27D9C937E3572CA2033CE401D60EFE7542BE261
B55C9323948002637CA12BB115226B949F1718F781D8908FEC9886F8EB35378A
CE7D3CD045170F95D6191F32801E38EF71F4FA68D626A9929BF6B8A281AFE1C5
48DE9F83CF9ECED51A356CBDF518C084F522B95C3694B2A0F515BF6C809CF549
CD8050CDAAB11BC5E360FE7B57EDF49EF757E99106A3D328B3BEC1D6DE8DA7C0
F7C6788785937A76DE9A17C93C1493975ECB1E858F832BF45FCEC50BF3D67D34
9FBD703CED9B0A716839F216737653285A0120393868E467E6509C87174926B4
4FEEFE58A20A70C1AFF94FC1AA6E2C27A177C264076812D97E54A8BA33619EE8
E7C23F583DC78DFB26D2C156C2755A08FA58A8917CA80C31C63D83933C7F2F99
7E9925C2AEA605AF5FD70E324EBD26AB34AF24964D036AF2A021F8647FC10736
9CFB807306BB5E7513D0156A9E0BDB4956ADE830F9CEC9E47617273A116D63B9
A9EE74E5308AB284EA563D7B55A4F329BB83EF512496224131352911A8E50000
01BFE3D82563183AF540749D88789C57FE52F1DDAB700B6CC69B9A1B63AC5634
E23C1FEFC25D2B992E69A14BC2C4DC81E7F364DE5FBFC5711049CF44B1C7CCA5
CF8B0C555AFDFC9F6BC27D190935321FFC39B450450A99E0DA6D8042B7B5E346
2B8C46CCC5E166C0F916F43427238A33D70B1ACBEE3D04E17D8D306BFA96503B
9C082FEDFD718DC8B70AE8CF0E540B293844AA1AF3A022D4BBAC7ACE16CB7739
F44677F9F0750DC174340B16C7F9CF2C65D4178CD686041177AE013A42673B12
CB1A93B70C6550FADDC77904A6835504BE0F327FEEE42B483BAC09D0B969ABED
6E1E460CBC2ECA045018B639B60B9B4DCF31E092DC66D5D86AF4F001A38F290F
4AEF3D64BC3FD2EB6BE185117A40E21AB6D8711743C2E1A67857D39B489E5445
F62E27177AADF2970F5CDCE6D8CA3BFA45D4142047DAC2F27D83D49B874A335E
CE3C5268F09FB728F6B0247901EBA8C58E6EA50B27E75B2CE4784AFC547778BE
C7406270F0730A065705A80FF78744641D7BAC781CDDA07720F34EFE516EB55C
17584921787DCA09E91037F30CF2CB267FCD0FF4E5C96C28CFEFC4DA00EB6577
917FB06385777E2E37B10ED47D8BC7520285EB8FE6B8B85F316CB98B5BC6C000
DC82F94B1E51A20F41119742F4E3281AFF6255555DB4974AAF6BFCC691E27311
67C114EE18EEBA51983F90F6B8D7DF35035E4B7C740F1F095275D4E9C6C475E9
975FE2FC26824A8729BA682F26DC1906CC5070524D1A230E5AE12E34994761A6
7578F8EAEEA93CAF0ED080AEDEDAC57E19249396DD49571AA5A0F86B718348A9
E8270E78DEF6B3A253368BE82D88165719D915F8B3A84E5E07B80F6EA964B8C8
87FB7DF6AAD0A5B01F40BD1AE7A1B40075DD725B6F54FAD22D79BB785574576C
30F1D8DB22470CC371B6B74355E60C3CFE3B32A681996C158986DE215C64EEBD
47AD7DD06F73CBFF9058C3128E244EDD6DBC91CAE1D67A188641CE6C10BAC50E
4D20BA1843804E789DDA730C6F8B2E30DDC0AB49CAF9EFEABA6A05B73DAD6397
FA753B72575CDE4399C09696A83A9D1061CF962D64649C0E5413F5F2FA72BC31
308A084F56FD717493C649A61B3899D826BC251D7F35DF0E4A1B547B8452FCEA
8E2CCE54D6434B02A1EF2BC82B523210CF1A24783E12A3665B94227D9593F8D3
6DD91D6033B9B6034F623D088899591B62520E755AF0A64687AD74E4C9CB43E8
D258867F3CB2336AA819E631DADA5917D1A7E098B9A684DBFD475BBC9804319F
1E37C1BAF9F532F363D43CA486E86456CD13837D3DC5A648B242FFD248473E56
D3F43ACDE9E5F075FB34AE7BF48EDB7C60920A0F2E21775DF8668DA412BB30D3
33FF0AE5CAE81E35336C09A17BF57484AB69B3615D4E700EC9D9BC5FD8B93418
F4E40A2F1E5B142F28255457C012E80278619CFD825A520C6DB083E5036CA283
B4DA338EB7BB0EC80FFC7919CE1E98EB732CF98A55DE330D939E55E20F3EC10C
3575D2CE9B5835F6C468619311AA7F3982828A357FDFDB42F8689BA5855EE42B
483BAC09D717C65BB354027423CAE8CFA5F212D4B62A6B2E6A6156E396F97F71
1C3744A22123CBEB6D16990170449BF8AF17CCC0265DD091F6FD44F3738BFA45
DF25610899D133ED3349AEC9A3C2B91C78AB22647C54DA4AA691D16D720588E6
01797ECC223D9D69B5055F364F52692FC68E5BCF1B2004F31E00CDF6CD7346AD
368A834D9DB608A0AED48318BE634714F0BF144DCDFDC877BFC4818210F7AC18
5DD7435DBFAB7A839D70D0005657D64DEA2FCFF6F8014C3B04605C4972186C21
6564C7FD5E57B7B9E78895F778F4806318BD888B9BE90683D2D5D50CAF5B6AF5
2D41348B3640CB7FD733841C68410010686F0CDE3A04F97162B819A717391E06
900B76B4AC554D5CD10DB900F0CD8955CE0DE58B4AE795CA8A709BEF0864EC61
9E9C30489B979097F5F7BE1C5171488C685D0E75AB9E4CF7B3F00B7414D75516
2BB65C9CD7A99A0A499FB007FF96091477CC0FFB581E07D4D78057167E3F99CD
BA555D77BFA4CE7CE922E05D991E59DC236656E7B7FBA305BD8D2C6FF35AD307
4F2B347D308A7435869B28B39E500E11A9BF1407AF1F54A658596ECBA121403F
A1C9508D3190AE74785F79B3AC0342BC6B0CBB17EDF1926090CBDA0B1D9696D2
B0B627E067B84D31D8F36D1A6FC954F67E8941A765BD129DAC21E6357381B183
19141D0F635F5D56E5ECF3043AC351B7BE69D2B6F60582A39334C72339C9E456
7B59128D6CCA8355515B7D7B8776104A5E609C72F3BBA9F125740D46E44BCBF8
2C6CB50E816CE6DE933B1890D921D0B5766E9C8F49DD1717D0C6EDFF49B3A2B4
F087FE3EABA5E0EFF38357C8EB38A9942D8ABA085BA28B7FF1C01A19DAFAA830
FDB0F593D2DE70BF30CC8956A36219A7C19EA4D7B81E1B20C38AF005431D6D4D
79B825A2A15ABA3B64BB3C8A4C2D71EEF218C15B7A0D4164E3FF8E606228874B
07AE28815E7AB72BF4F101DCE308DE0BEF55A97594DA363CFA39B125410AFA48
216374BAE7BF81847A17B110801B0FCF4D1AA114B1C32C97302430702F2EA2F2
A2A1B569EC05EFE8110CFB6E2A60FF616F7EA892B26C82A978B731392CEAC544
451622A50FBA49740EEBD7A1856B9D44813313544D303D4AEA081BB1F324605E
34487951FAE1D231D5E4DE92B4DB2E95C1D245D44052D986571E510188C53410
CEE8039BB28E83619C1F5F2B8AC53C92A9383FCCC6438A79D75C6B9EC33B4437
C74EBCB9BB0C5526F6D8AD9591798DC58EBAAF03B07C9F5B68D68B27DA22E062
D5BF2BE513BDAF06CF057BFF080B94A2F36D45FB229EF8799F15BEEBE9E2BB72
A0DB50488A8F47452C3AEB30979276882D986E0732D981DC70919533D039901E
FA66F9ADF512986C69CCD010D88633590607E3094441BB3220BE4DDE128C03B3
8429292BC3DBC64A3B69F32A73E6E964832752832BBF7888637D72876F0C1BD7
E34BD1E15A24E346EBA38FB281B69BE83E5EE481B336FD4C49E717BFC5388537
A6EE014F91D4E1AD17E5B6ED645751690293B4A86F1A642C53E55E2B6C07ABD0
9B089A7AF1391616FB4F55B32C48661B95A78AF0456EEE29D163DC73C022C741
407389BF0737F90AF9321BA5EE9864621BB2A786EA7F713115072A0C31CBE872
EB079B49408A26BAFF52A0A4C21FA38A87F901B1D0025FE43E39D3DCF2A127FD
C6FDEC48042AD8777E97C6106B406964290717E1E5A321FDF5D830677540C186
7273F3B52CACE234ABCBD08196A14A29297EA92FAD536476D9039CD88B7DF9BC
EAC70F339D9456E29DEC68D97D4AC69D2B3AE1A276ED5AA7BAED40A187E3797F
3A9CCA1B21F6246BA012FF3E0563EECAD6D59F89698ABC09A67527F8AAD1B7D7
BA413C6614813690962D95CF8125FA4CAD56FE1A77F7977FEA8C7F237EB191A7
F6B92802C091E28EB5FC84BC2530FD814EAE3176CF78761F02666DDCD4E796E5
7064970435F2B9ABA57EF547876293A1ADEF7953AD22DD7E52ECE96F17B86616
44D0288E274C68E4EFF52DF42677AEFBABF769E7B5D0052433CCDCC16D36754C
F56C8BDA3C3A3CE55E9A39346F14DB673ED01B2B05C8BE785E27D5A1C4B1A519
2DB076F8A3B9CC633139ED7BFAD3CAB81190B63A01E6F90336EAB37B98B8D14F
B310E4CDACED175A50DC9BF2CB897B46D6C6F812423DEBAFF33E879B05C584E5
36D0395569CDF77C6A61013EA71CF8598CAC91032F94FAD868B007214F243E57
512495CD7EC4763260FF6478BF0B9746BF9282B91F5F2F87ECEA22BF43938B80
6958D3CC6C0FA4C51A9E7C0BC8DB84C1619AECBBD05FB823FAD4405F8CC5EC7C
A3401E9CF71122E8B4089C4CB84B903D6795905D586C14A74783C74544EC41D4
55BFC768A232FA10973218A4663E3348A708A4C318D58D0D7E48B2B0BAB53FDD
9049925CAE8580547F891616F00303F1BE3D929B9B4529A5699932BE827C4A23
2B23567CE37965EC5F384317EA752421C4E911F61E7D5AD7093F5DF52E8C9BF4
E38DCE8FA467102648DE3CEB5FF58CB0F7EC02D7FE17DFEF09D37C126354885D
81EA9A3F878CE080A55191EFD63D205E400235F3CD2DC61DEAAFF1D7BE6D8D26
50ACAF539AA945AC126660C530B7B603B879108194DD35E1C68991109300E01D
B649733020D9A15904C6305C28DD86D8E92293DE82F8F1360328C5600EA16E64
9022353638C1BEF7EE3B3F16601B068B6055C6764C60B03680A228469E6EF989
13D940B5B7DAD5B7D8FF4F9086F239DDE63EAB225F2857D138583AB0FAAE162A
96E0ED5AF1FB203F7F2616B5FB82279C872225D80245D72882BA7DA6707F44DA
F771A4F8C642FE5E99634D5C33A0AF98F5DC7E7DC308C555F07115480C82B402
E2795BB389C7ED08E6DC495627E957F4BA4DD48135CC49297465AF931B313AA8
BEE7809B18B08062CA319FC2A9D96EA7B17D5A39AFB1C0AAE1F2A93D71A0FD1F
5ACA50A1D7FA0E6D049A8EA60AA8ECA0F3CD99519021E4A0527BAA724A09F1ED
FB383C139F9099BB8E1DBA51CE309CD03C0B1F57E1887DC76022D6BD55F08989
90EFF78CF56E79BFF79DCBC35F3806CD655321E834CD0FDE02FF0FA2D2A70DA8
3E15A9863814792040AE45EE8EAA637AC17643AFFAADDDBE393D849CA87D5D36
BD17F1880655C0CDBC1A2E11F42E4327DA0FBA34901D53F6E6B22B5A07011FA7
E06D460B3C819388782A288D9065A4EC09C5D7FE032CBBF6F62FDAF178E5A527
41B5C0BFB234D4A62CF533D42DADCBC84A00033A28BA80137E48616690B88718
456CABF63F35E92CEB3FEE454454EBA0944BFB600F58C43EEBF6DE56E8E94672
0C62102B78B3F29CF0A516031BB54AC966DCDB766B1580DB004C33C5105571F4
B3EB396D2E6B8CF7E0A5893842844EE4A8E900D05E3A0332178E73984757C312
7466203D03FD591FFCF5E08B2589FE7792F2DC54827C9D5C26F725C978C378FF
83752A793D7B21A19A763F1B1799BE638186D7DAA89F9D6EE6820398CA0B08AB
57A1D94F84824E7965DB0FD360EFB944F6BCBE9D117EB79BB9DCDD81DCF514F1
4D25A08902FCBB1264506B8EA74A5BA616FF751270B9A832E94B434810D24D65
F1BE20A5DA404196B1CE10D0E5C5E054052C4113B5E030032B341FBCD1B68276
37A8042B6D523F8B25756BBCE55EA7EBB5E65B3AACB573A70DAE4C0CE0068640
3678EE2907C956A2C908E03841B084F734FB454F1FD31DAFAA4C134372EDA3E9
44D225F364D6DA39AA6CA4E761B9A1E7FC9885E9A446A8E311BB24338B8723DF
80E5B89A772C8480DD745266A03A8761BE758B632066D4D63B132DAE31155972
90663AEF3ABB186E48808E04341E3DE6328AC23D87F8835A5767D9BE1837BC3F
54EC2EB7C1B7E63179D5D0E24450748A4139BFE3ECC53A501D639E09B742D62E
42AE015219DB95EBCC4EECCDC181986382A7AFE9D7E0B08C0C71D539EA30BA99
4FA366628B34D580EC050BCEEE7BD5978AED95AC89F50A5015AD49C8694F186F
C8FFEBAF16DE4E8349E772092C10D6A9C650BDF391F1168B9B077B9558341B2F
7D3BE67A44222AE28CEDAF053D2F6D7B66CAE1B5FD80496C27169766984040DD
EC66BF6BA830995CF657CD84A0FAEFBB8F083604DB0FE8CCAE9DCA6D53086138
0689C146E1444D9A84577E90EA4D2006614C0D32CF8405C5FC094A8241D16FE4
548F709EB5BA672657CFED3C707D5B4E22656C11586CDFEF4684E37D7480B351
B169084CD489BC638F9760FF3A5FC611ED44F5FC941DE17269C6369C05CC405D
523BD80152656A94BD36E22689441DADD217940B20C97B0D8C5DD5A5F8DA3FB4
477F133CEE77759EB7167B635355508FFCB3827028E3178F65867ACC2D4D503E
70F9F3355F74426F25A2A6F526685D98ABC0466F8151BFB286EED4F9B640D724
FEC7501CE39961C7BEEB9150ED4CBEFE704853A93082587A0E788ABB5268487A
D50EE819D783911EFAB9012738CECB2CD13EF9AB25A714897CA1F692BA0E1F32
A9CCCB334D08D7EC7433F186CA5D7B18A002214FB7B16B38EA429C4CF6A7B0F3
1B0EE256CAFCE52D6105612659CCE8CF042AAC7EA82BF8FE45235AE109197B66
2F76414F5D61585CB12FE66D4A14B2E05D82D77CA9BC2708F01D3F64D100DD7C
66CE6F1B457BA89C4DBFFA7AB3CE756785742B9DDBED0789AC6FA67D59DFD0A5
8DEDDCA78E70B77CED43CB5BEE5AE8D395CA9F3D1149B5CEA619E62925CC12F5
8A9FDAEBAF095775E720109B111064AF46762E92CE32C70BA663D1070305F5AF
14E709FDD03121177225E8B801D5F22C5B8988DA22B10AEC8371A464AA6F1B3D
AA483EA284E78816BF1DF7480F780F842599BA0C469A331C10A31154A6A11CE9
DE7A224902C7C3E99B4E73202104E707F4E1B4A2722C93AB0EB50A8EBA920F0E
0726557B13CA795B23AF56AB15B48A56F5880834F31179B83ED766137AC72A37
5704BC403316FDD4951796A6472BD2CDDF28AE3C51A22D69AD053377364DE8EA
99871D0A39ABEDE3172FA0A2127751EBA4F410D9616FE0C6CE2CEEDBE99A3FD4
40A887CE65484F8A9E5A1B55972AD10D4E8DDE2F7EBE8EAD2FE33DB4D258FC26
FAB5DFE784560E1EE6411B377493E6B60D8F01159FAE3912E566FE3DCC37278E
742902AAFF06E3343B5E06924D7C2BD63D85BF7B6D1F8E7B4169807B8A4063FB
8EAA71B39B7AF61073002DA1ED1DEC7852C62341D5A105496A936572252E41DA
14F3D799402124F1A57849F62BC387628B789D8F0E063355596EAE59A1BB082D
922B646EBE0C2BA8F9DFC865EE7FC05BFD281310037E23E8E33DDA82C421F5D1
7512BE8ACF3EC5428C47AE870F79038A616251A86BFD4705006E4AF46A80B36F
E569E0AF983BDAAAA3D2A8CFAFB7D396A0BF72E56201DD07092CA78B984ADD84
1276CEE812E81C408DB450344AFEC68F345F109F8B8C86A177630EE6C0DAFBC4
0851F780A0079E1C49DA43BA2FC87881B4F95068746A5B6A2D705EE9AD5EEB53
9470C7635C4DA5D9599D697DC8D47E64792100C44450DFF753BC8442ADE30BD2
B9C249097FB80FFE044199A754B4368D1F281C4ADCDBB2F76D850DE0C8074B47
91039498921EBD1176B1E17DDF3171577A2359CC821E81634540ACD571194D12
DC82B7F705C0D5F0DB2C0DC215C7605BC3328E5160CA02106E86482B31EE9ED6
77F19A8C689CD8D57715B4610C16C982E8363D0D105817731337D79D96A87D39
92F0E6040F3B9C5E09C3D7EE6014952ABC0E14777BE1CAA9004B9A847FEDEA8B
3FC8DABB82FC5B8EF4A134EBAE0F22E4422B364006356B8856359910010F0CE2
9AD1F7AC79E1A4C90749E7D33F88C39096D27D3D698025BE6043A168FE6AD012
2A05960C9FB5EB3516D4922D0FFFE56A502FA998F5BEFBBBB040C8D257870A18
C5A469611D9D4D5D611112BFEED7585F55B995DCC55499B6425DB366CB83A812
711C25E8ED8341D2893748DCC73488252BC063941611DD87363265A34A0285FB
83C5EA4825225DCC23DF406B638065C1D540E617F980A0486D974A71CD687E33
580AAE4F5FB1FC179049E054532F731D167B8138B31CD325A589F1EB54005FFE
41872D6F53063E2FEBDBADD91A278EA1BB261B8AD79AD487449D984DC6C94013
3F9038C2569902F1F8A2F53BA303F9567D47EB37E4B8221BCE22FD5F91C88085
F211818B7A24A752180CB74E4C72B62C70F185D8125249B7E9E7E910C5DF47B5
ABF9E15825F57C7D4E8F73754FE0CA8B40DBC4406550C1E21F6D6B8B00D02F1A
BC22337322A395AB58E1CE0B07B7970D17667741302D3E3BEE0916BA934ADBB9
45407DC6109BA8790502994505DF36A26052A9E0C2DC4891339368B9C4B149CA
C8928FBA671B1E88EE90227FCD0FF4E5C96C28CFEFC4DA00EB6076FB2E59DBF4
F53516FCF0F8355ABBA222F0C96D4EDCD2820D4F3891F262C0C5D6FAA0A0B296
1B6585C3BC8751B9BE4744063047001D85B56048466F94C69E4728E8FE7E9F51
37EC728CDEF66662EC078A809559D89956F7ED469CE0928291FCB2AE350504DB
7EF3E2B8AEF1FAB9B3C603BAECA0A0EA9C3408ED2B16C09F618880BA68F44292
B23BBC50E4DB8930BC9E9B0AA5E268385070E326C0B6E421E5B70ABF66CC0A58
4F6BCC0A78ADD269F4CD60147C6D2C1E13D2E6E0C616E62361978A8883921365
C7DBD28DDB3D6EAC9053B790FAC214EA649EF0A956E57C94A5E136FDF4863DEC
4BFDB03A155F62985700B7078827AE9ED4E72B03779CBB0777D8044418A344C9
C58DFE93C603083513CCACEE7B7541F522908FC96F255C894707DBFB54EF4004
67FAFAE29DB8D4E2E77EB52F2D0734DCEBAFD5CD5E63310A8BE05FA6ED71ECDE
D401A579992E5FE66937C084B0B63726937ECAA80C243E862F1FFD1ED6499007
91973D15CBAC8D1F26DF5E74888D868CA4BFD44E49AA7DAFF97F11FE6DB43D74
C2260C7279418A019FAA223754AB62AB4DB2347C1B08196B5B885308D45D0B1D
81145921F2A99E2AD3F97987EA8DEC92D680557128CDF102258E4FC01F5EA9D2
FE2525283C21B96F9FECFACA7F713551F3EBA27244E9D79F633F7F32D22AEADB
D4AD2B5DA15E33DC0EE946D2C1FF58FBACC2E5CDD90B25DACE4FB72B225BC13C
E295A7AF97ACF9E8FB66A508A0AC2EF39098113FDEB96C57C4C6A6FF48CE1CD9
9FE6404A9C2F3982F0F229D4BF218F3A1AACAD73E82B508A708F640407A1EAD0
FD2367377EA2D35D3352B7FEBA1DF4355557B04AEADAB9107497FF9F8EC3BCA1
F2345A40D24DE0F69F29187B31922712B24775804B2470F0647A3C41FD38E7AD
E49BA87C919672DCDBA423D64D16946F53990745270E021D0773C49196DD8C36
352DB2FD0841A2985E68BFCAF73D5DCFDFCBAE7FE4611B26F2B377C4E10B6C92
AD006DDBF3A6A58B192E57F19E2AB9AA334582EED57BD342DFBAFB13C32C4E92
0FEC8045CE5E421973F879D2C32DD0F3D25D9CC5B744BFCF3D6F4C49FB9C480D
737805D0C1CCABC52D52A81A8F5CF16C25CAA120DF414F33C17682D39F7D9DFF
9999C80B4B93F82EC0B50A74019F76EF0A159562865AAA86CC938267E3E6B0DE
06620FAB51D539E0608C1B0E35C28352C68C24B4D83B5F3692024AD2AAB9AAF8
D83D3F8B03A7FA9C0D3D057C246572EEB7D55FF5AB04D531540AE5E2D16B790B
08CDD65638E190F50D2770D59EE437DA62F7E7BB4805034C88696770AE75EEA5
F3AC44503AB4CE4775C2952BE47D07C80BA0713054FCB60B527A4AAC3ACE279A
C835096A265A2C3BF4126EEE53265E63EE89439D62B36761F0A57E2DA8FD9BE6
B78612228B2971C2FF6C210347ACAFBB97AFD9B25D61371C06013BB33267804C
0E1CA3A75C4A80904F1CF3C330F68205E2650C410BBFE1538F6C80F41B1E6A41
155CFC75AAB7555FE0A0CB701FAA819DC341467C25198662CA52B16E08CEE41A
249AEF8ADE9B1BE717AFBFDCB52862B7BBDB2AC67C7F660499F164C1CE010E8C
707D2B98701285BBF27BAA563F78644792E432C3A1776396F9BC8CA9F4A3193D
73304A4AAE8A508BCD62CBB6D71473718EA541341A908B41D95B5FAEAAD5297A
A96A7E1EC9E80568141089E907F59D3A71CEFF381DFAA9CBBBFA7CEB3920E15F
77B6B562DC60CEFEAC05FCC36976A82443608DB55D2CEA24A73137C7C9F30EDF
D2D062C59ED0A1B5929E4B1F89B9D759E533EE00260B5008282181895138C2DF
1726237804FB337193FFD05A88AB633C1FFEAB1D0617C44B7CF40CD91A7BBF01
94CD537FC38BF44E611E5D18AA950B51C3704FB89C3F5472030108CFEF0490A0
FEB7670346E9B9569477046CE9B883A9588432E92ABA724E580B9FA11EC83AB9
D8AE904DA4FB0E42C960A28F181961192511580F7709379C051E5C588B5B71AA
33426A6BEEC67D21C7055B8827329D98976580ECE8EA7B254C00951D64D9C729
398EC5AAD4D12C13A04E320626CE1B20E379D24A3308E3A3A6F996A0C186B00A
8EF3D48ECED726EBDC077B169CE1568A4E5168E3DAA0F290697C67C54DC08841
D08F53B8F4154501A861D0E151DCDC69D14815C4F421C8AB4A6D3AB54B0A1F4B
3FD839F2A3B97E0311F29610D46DB4FCB961A71B35AB0F463BC006CFF2891910
C66AF37F1DA5EB3B3886CFC12CF3AECB20D4B63BB25D66C0E152CD0752C9D3EF
94FD342BC3C9DA51E7745ADC1CAE1F1CD29617D17378488FC94DF87D954FF40A
24FA21A2EDC0D71D081366A8A106ABFAB960C63167197E6F2AB311D79BBE29C0
DCA6AE39B25C512578912735EEF7790310D6C25522EC3ABD5032AB2FC8032948
69B690F4931887387A29377E24F4F0FFEAAD16CF75E9C06B9D5930255BEA48D6
67AE444FA37853DE6965BA42DF4D14CD36FCBD29C2E569BFB53399FCDB093595
4362FEF22D8F3539DF61E35F61C3865466096FF4F1DD5801C23D86FD0CCE3AC5
3BFCF4CA848DE077416D8F8C595E07707DAA8F7034E68251409D5341725B73F6
E22EC6350082048528EF43E886DD01B10C29490D071CD6C6C0B29CBE640B989E
0752A84AD5DB32EF7B19A1FD8D9CE53BA9ED147C12FA3BEA5830AD09E9000765
7A9EC8F2CD1E1CB51C808693E66B33D3D4FC762880B58B02ECF7693A0C797731
BBC7A2FD4637BA60FF0B7F50EAF306729AFCC64F4A9959E04755985B552D1DB0
833E7F24F4EBF2D95DDB462C538E3DBF392C45D14D1EDBB6DA767A8E244BC4C2
F6C5FDF90B6AF924568EAE3D74FC63F10DB5D1C751DBA878BF941F1F720C995C
E0AB7BE3B19DF0F8BD6849BD36D62660096C3C25A8F056C149BEB92B97EE581B
D4CFFC391E51CA09EDCA5ED3CDED086D87E571161FF04167E0FFF971DBE1A9D1
9F0A7083AC94301774B2DB39D6C3E8B60AC36B61C405B062C0A63C847DECFCA7
EB8C905DAEE2426361931E18D1C293A75860E5081E65057C6AD831515C0A6752
C8EB0BA7136E9DBC3183198BE775B154FD31061251A837CA4938AAD7C6DDCC40
BE6AF19C0DF704FB02F08FE3D9853D4AA01ACEB9CCF1F474165359FBBC9EEF58
A59EFE9330926A2BD70829489503CE4AEE23CBA57153F85738BBC1701B16C8F2
CC0EBD60C788119A375D498AED0D90090B1F03DED4DE96CE31772978C05B416A
838A9437AD2BBC6E36608A566FB33752A949CAE5B3DA967462257D5F9A73A906
C321FFF0B0FDF48A94C2EE1671ED6CF23D182B735419DADB28B035435A18684F
579CEE83B1BE8F8275FE9ACF7B52E0863F63606D77CFDCED41D9055C9357898A
006269EF079A089B53657D08318B70D386CEF70C5F4529C26ED6D63BCBFF1CE7
6B4B0963BB19A6C3C5509C04A7DBE3175C82F28A507FB30552B1E7F828145DC3
33A77FFBB716C29DA6FCDC3889AB11398CDDDC1EA9AE93D8E209040BF098AE4B
5EE818461F5A24D70DCA03CB1C04379CD5C4D1F43764C2E9BE5373B0979D70FB
FB56ADCB0934CEF2CE721DE4C7CC15E15F57CCF8BED277B49B8B64D61194C4DB
7089851630278281AC54B0C3180B70EC7D957DD11789AE917E61CDB1099694D9
3EDE9A37D25A6A365D2BD10C724816B7E7C2F07C7B805922CDF57BED0818A164
97EF1007E502B073EBD44FB08AFB198A0AE4772B2A5AF4AA3ABB7118FE1EA497
4AC33F378B020D9BBA2F2750B03421C5F4654DF98EA18E52D96E3D479A93105C
7086E375334BD85C1326EDCBE93D8E6D7588C75447EB7CAF72194C36192E5779
DFEBA746355FF3E9D5933191D690D7F98E1678249528EA7852833E7FF56018CF
FB0446CFD36D3B11AA4FEB314BB448C6E2F3816983D1F2F503ECA77911055D93
90F968AD89CFE5908341537D0E167E220033FEB6121118428CE08C01FC933932
BF30EFEEB08B8A04CFA89EDC466738F51EBE6DD8B834E2EF410CF4A486E13DAB
FCEEF6078C8287841F389C6BD8D722BAC78D1B54A4A54931E73BB6F7E0A3EC75
A97C4B2BA515035AB0B6FA9ADA4A6ADDF3CECFC9BB03BB64EFC69175F47280A5
1008A3CDC389E387D62D31CD5FA685C54C3A5BBA3DF8A9CDF7EF2F950905A893
19B7DF18AD7E717D1D6E117D66411593D10A752AFE0FF96C7B4E224D21DDD473
CDB0D164CBB488D2D84E8A9D3E479BBF54177F19A3656EB9A4B093EC16015756
7F48B332D42E8F36A4869391BCBBF1719E4DEB9BBFA47EBED45D3B6E6ABC008C
86CB01851D492BA08BD33F4F3D0AFFF21114721A2BFFD0BB03EE43EEC5A4833F
218E84FD7CB5968A384EE656724722ED4642734B710BAD4BE963861D0FE04DE2
40F6435104A414BCBF2ED9C171967458B67DB7918B8231A1E4DB4B8B2CDCBC0B
93C238476269624DD19D1AFE2AC4EFB1790866CC1AC60E2D1453BA73139F404F
41B112D075AC6FBFD889D8F47774DE3B398E7FBD8A39CCD0C7EA7B125599564D
1194779796CED52A3C41FEF1078B2B3129F77E20C5042E17EF20E8A173487DF6
44CC7211453BC7F38F4F15C155FAC20C095B5A12B9F5AB983178C0145FD2EEC3
4A650FE134649A6F718DB031DCF50F53B5BC2DC8046F8382CB30CA9D886F4382
F266B6EADC0606AD374626098C8EC3E2E15167A89EB217A4ED73CFC395D0D0BD
0CD16B5BE2721C7213A717008A6E53CAAC70B716695D5AB39E06FC0C11E1D544
2E711A6C1EB0741C67B0A07C4FEC5CEAA467E942B805109D5FFECDE3629C016B
4B9C30CC1B8E826C6FF5F775FDEBB1D35A8A7219D37F37A3569C59D057C85CE4
1DEE1B2A3A76608AC6E26C70B028FB80ED693CAFE367C4DE190725155B73D6D5
1547490546598B1382AA53EFAE26EA9694E9A2BBB6D2D066094A0B9FBA3FB5F7
E22E90E251FF8A52DBF397A226E0879CE4863127BC03EAE661BABDCA16A8E8AE
202EEC530ED83C1C149AC855F862BB9B77D3BB2F6C60B5F3982B147D22955001
8E3B8B7A5DE4659465ACE48AB66C9DED9346C28E8CBB5DBF2B1A435AAD174883
214AF170718BDFCF0D19ECA73FB423A2A4C13482F62FF8E674A03A3F89013913
08A4FAB28E1541D82A4BA8C17A0CDDEFE00284214E9E26CB0E568FD15EC216B7
8669BA7C167DDB129F90967824D6E3644E212035688692A01A2D5F0D05429F02
E90B6808E24803EA9BD761691CA8226EDA521925BD4FD1B89E95D7B290F52F01
32938BC6B31E4AD69FCDD3D76D5AD9812082F4E7AB105F0C71A989318064FB68
D7430CD0F7156859F14340C3ADA01FF51BF79F640BCA01546A79B8F1771346FE
870E215DCCD6DB9A825F1BC7F00DF0964F1EC91026EB84A406F22464EAF57814
2B06F0EC9B5167793CD25D9AD9CCF18B70982A4FA9C3BE9C477AEF3B35D2C0F0
970EC9D5EF3B3EAE44DC571D394C4C70CAF347E226B1C56B8F4BB5D284FC70AF
BF6DD93FB7A082B8C3018776C878C8EC2E3894369157637C35534834FCFA6AC3
A8FE28BD2E5267D074A4AA23385D5F3330A098FBEFD02000DADE1F0479AF7B74
28C637FC38B8254678B7DD594F5E6FAB9F3DF110388C419242CB0A7BD9D0A9D9
E2138699AE1A6FF7D88DA2D17ED3766D8EE6C7D747E19A2F903B6307B269188B
5CF83DF7E9DF0CEBD548CBB8F96E8312B6E52B3B4CBD29A63F8B17344DC0805D
09D135858DB49EC28A4F2A38B4C3CBFE089AC2EEA6AB3F4A194938B9849DCCE0
FF10380A6511C7D77605660FA2DB3226889F89B25D160F8C7FFDCA75AE40E7B8
6D7E409B2401921CFAEFEBD52109BC3CD19BC09537F938AF44205C511F294ED0
25AEBE375790F05C90FDBF551762545E4B90E160694E76AF8A4CCF24B063FD03
1B15F3B7492ADAFB55117C8F8BB7EAAB2F4DE993B63A47370A998A32BAA2B7C6
AB557EB75BF9E0A81C5B25FF70A6FF7E0FE1AFD336CBA30BE7297AFFD085B87C
A65A17F5D972C604B12711A5AC59721DF0260328919F4D140BB4FB8C8EFBB9D5
C64935421C8B1FF7FFF4893AD8AFC9A8FB5B9451E2D132AA1EBCACEBD17A1D17
435FCA86E4BA3DFA52C0C18055444149ADAE4C56D77662E4EDEEC76BCE988358
B27B646C3835DC895F7531B64E9EF38FE683A5135F1AB4DC5AFB910A73884F32
C1683EB1F67636E483E9A8E57D396AAA0AD410497F0951143A6E1AE0E77231B7
BFC7B52CE78EEAA0EF9ED9EF70749EA8EFF34FE175E7D939BC412DB87648C237
502CDEED2336BD86E267EA69C8727BA18386CAFFA629B39377CDC7744B632284
3B7A29DC4729C996832CF133C118C9AA1BC50560246C607954EEAA1F746B4FA1
9599D64E2EB7C845A99A3734E3D9D05D124B8803C6C02B5840E738E0DBA4FFBE
00297AB673031F5CAF7EFB160848A3393129B8ADD7D50C884AAE9BAD1D62EC3A
D635A1787F70319F8623F705764D0C58E0A6BCEAB7CDD0F9E3174F5579F6ABA4
C1C83D4111A75739EE38EE535551A03FAABA59ADD6FBDB827510B057B4FA01A9
61A833DB6069574A33CBFBB2631E96C75661A09EF4AA7F6A31492C6407B513E1
BE1E1F0C31E3623C5EDDF2D3DF2BC1F8D8ED96E038B3FA0A86D1AFB970EFBE48
F3B4419F377C69936A9C364C03659F03081A9F44048359997BDC84F8C816CF53
4E34F8EA1A83988BE20C6670860AA8889E4E635DBC88C67939A4F14972FF8AE3
C15C7E67DF30002BE953770B68039D519F9549A9D621A10E95F057FCBD92DDBB
2A5CE6767980DA2147FA15F432A9287B26BE1C18FD5618921B9887307D624516
DF5D4ACBCD8AD2A7492B9A81803586F5B15CF791B98CF883464919F7022BE063
7FE9197731FA02B928B856604C8002B289566E7AF8BFBD2C7579C8A1275687F3
B34719761596597809E9F5B3B5436A2EB41EBF0EC9B39A895E246C883E6887C3
4E9B51CD6F94FF689B70B5F51B02C94B7C03ECD7631159C5424E1E0C8AF16C51
C6C605327BCD700131082FCFD9EEF68AFAB5A8A3BF481C8BF22344AC7F9AFAE6
DE6C2B3826FEE8BA91F4F4987839AAC3590D5BCE194EEFC6A8A0E32E99CC9BD9
2B602B9FAFA136E2EED0BC02FBF392F631C2F9C789B8D5B72CC5DCC04A38B732
3ABEDBB601C6C0C5AC6EE002F7F94ACC83F6216917BE565DFFB4B1CD173EFC03
48CADC55044C37CEF225148BA004D16C7495D8A5A31459CC6BF98FFE6667BB96
77EC8D9A68578556C6A5B19ED0E15EB9356A676C4C95A94F21D3831E40312364
5D778E37731F29E75AB7A566EBAC299EA1B141B1DA43315F525DF9D0D516586E
C3349EDEDA7169E31E56AA4499AB2A0461042C7449C80681BEC3EF8A0EF9580E
82E607313B4A02034E4A4240D1CEFC5595B7C2276DDF59967FDD30A19EBEE083
0F77A4082B735A1754A23EBC034F31D141623E69C7D92A1F575D61928D980535
5FAF78EA301C5659E0EC127922E9F36A8044F1855E88B93A4646993D7EF54992
011CE3DE9C49DFF42C29BC9D54F6C6685527072B081C2533588FD82D8A557CB4
71BEFB6F91217DF2E256F9C34DBED42E4A4E4758AD1D89DFF938C9BF47F3CA67
7ED06167679762255A97C87B624B8C565583F4FF302E89784A4D8ED7B2544988
36C7B33D953DC518DD94919D32CDE78019190D9E38FFCE664939A6C04D816B02
9DA7CA2D7D89F7EC84CE13DF2C7244E72AC7573C183D5184E0C3895B22DF9B8F
711A472601B46158F72A28021BF24E3F09BA39A5C242033C00DCE9E29989772B
EE89BB356DA8B39F5D45728FA36D979E36E4659700F6D18BBDD23C0FB1C1B65C
0084112FDAF1F7C383A98C8687E06177707793254908CFD43C4029098D24B3CD
9EF1337A1164022D87D05238892DF95F41ABF8F4CB37013E9F044FFBFA19FCC0
22FB6E3F109910CB0C2A7FB4DDB84355623795ABB04ABEC7E9B01624D27E9A94
82270BBBAA99912B5AF61ED23FC7D6265146BCF7B3FA1CA346CC39B45DCE4419
0CB18CB0F9CE5896BF986E282E246A9FF56CC5A630890978CDA06C0B08887006
7259052B60E500A2D70DD0CB4FD059EB7CEF560B7B188CF410B6CDC9554FEB9C
932DA05CC4584D1D199B76C72236CBF85DC7710555FB9E782EE1BEA216522DDD
124EE1967ACDC3CA5BCC95F8AC3932AB099EE6CE3595065695530197EBB4EF57
124C8239EC1F289ED0762C663EC3EA80BEA6A43B7CC7D23AA08B41C976C1B01C
70133A1A3038BC71A16E12F3E83DA2D33017F85265093BA3E9574129D7F6B901
FF10E02B91AB748765F30AC0DBDC4850E206548938E4FF0A8598DD1B1F537524
C7F9A5382ACEB25682835A0959E9161DA07D07780F5B97F0C0B211A93A759B6F
9121F37432FCA5EEA1787BE96CA9CC09E3596B5DFFCCA8D3F290E67C4140A600
306ED271A4C5F34BA77E911F3D763330DDA531E396BE3F679C15DFAFC96A552D
4F4319881E0621C76A0A8B47654BE9C56B8A9E60A3AF7ACA59E6876DFA5C60BE
B0E6CAAC41EAD11580EB33D529E59BF0D05858A5DE3A7B5D324C3DF5B4F1DFB7
CC312DCA87BC751274EE4AFB82D7F7FFDF93A8A32DC6428A11E81D05DBD461A0
ED335DE9BF9E68DD2E2163CC119D984F4CCFD9636FEB51E60C1FA7C52CF55643
D49193D661350ED2D4C1A3A28827F1535E629FC320E1DF488B5840181775D0FE
0F8DBA734ACAC03B7AA644B7DE41CE9C762AB6591BA172B179656DCEEA769AB8
87DE4490A635D4685A6734FBA0C11AE80D6371E12DB75444030E4B355100FCEE
2AACA0AEE46C045AD2DCD8BFC4CEF20B42DF7E59D443D947E4A8DFB842179388
E59A85553F2BE8C112ED4BE6DD7F21F79052F5D8219EE4ED88D87C1371F8104A
AE370DBF33FAB3EDEB755A242BB4EBD8F4F020E63C485251F8F2629B733B3CF9
FF1CB12E5346CAA391996FC79449E155345AF8029258DDFA3D658CE9CCC71512
A26C69FD1F0F93A607AA0E2E456F7D5E26745122F7E7515A14CEDFA9CD817A5B
3E5B305070F4B05008B6B6EB465C2B7E887F5F0FEC147EEE3B6EFAE819986765
5C5D4B13559CE09F4A09983E516B70E2DA1B07CBBF82DCB82FA684E6CCC9F43D
5B184475B565008FF0841C999207365B795CC614052D8D8B6D2907A5B888ABB5
8B74DDEDA2E2BA41CAAF47F303A37081A57BE32C2D5B61848F6DB25885780E6F
2645C61B4F57C4BA1669BF13A2BF2C87C53BCCB0C4E164C67AD6CB51C92F1DFF
C43426F9800D8EBE9DAC26DA3B7DB04E30967D586B4F75962BBF47F4D9DCE9D2
BA9F55D505ABFD595290DCF478277C22CE346E5434F227A3A37FEB27D7F0A895
C97C03353132B4752FDA3233AF9B234F888B9596C380550C05818B145F8A0EE7
60BEC928FF181B5D5E96D86D6B880B1D839DFD1592787AC58029651D76D39A78
FB340B9A31EA1B292E17E8A3CE9D12D99FFCD0CD24F602EC118E64E499FE27E3
6DF2F92EA17EB9A79124DCB45DB1EA51CC3F250C5A70185DC8578CAD1D88E90E
9CF58E8E4E5979E9C6FBF098207DB81C7C49FC9F82E004830C61D584652DF533
9B9E0A479E772F8C7132B3C8CA0C53C6278A6101F83DD1516EA630A5FB377B39
7B07C73D4D93EEE9DD5DFFB96B47B056BDCB5A3C1B1468BFB3217C62BF4B107D
598604A32A965FF72DB101F436572E73036434074CCEA1946B781003FACA3B4F
DE53B39E3955FD60889CFB8EE7BB279845BECF78C003B7182AAB62349C78FEC7
724E8C692D5072C1A60D836CCFC7BC5FD6F699ABA1D63AB6F9A2B7D53622C592
39A94BE7BFB6B60515861073B78A084F318D4A2EC98B062B5541ADD60FAE5F35
D881DDA753A80F62222D45A3722EAEED320E1849799C167B9A2F2941353C8EF8
0FB23293157FA190E7A4C4C4372CF329D0F44053AD082A2357187ECD9C0839D0
FF784170123D6C62C094E48BF60B115D42B5BD86CA2AE5BCF4251720E5A69368
659BCAF7FDB5507C32541DF40D5938DA80AACC0452C57C79A37FDCF146741FF9
5F038674514A077EA7CA0D312B44ED78DD95C2B703091411E520F6B26FF2A691
A70F0DD62CCD15DDD7C2A9EC936058FB5BFC782D95736A18BEECF9123147D8B1
4D96C75FB7F80F89C1A14B59AEB8ACDDC8BE8C79D593C29A10B3DAF771F23342
84692F74B51753E1D84A80E74E7D280183CD4F4DE8C54A4653487A00116C3A3D
BB637596516EFBB65E5FDC9B766262B37B26C1FD55EE516ECBD21943EA7DED00
8919002B602E824093B40E01822547C450830EB6A2094F93FEA8B210756964E2
6AD5069BBF3F19B80E02FCC595F9A93F5B76D7CD705DFB63D13CF6F87D692E05
0A7F78D2F7C0D61420074981EEEA4B32A9B077D79860F72EF216413D7240F255
095BCED5BD556B806AA6511CB72F8B3DA48337B789F8AF4AC974E6403DDE8DB5
483C0732EC316669B02A86543DE44494A7E674C470D1155DB7B7C8460B2B24CB
35493A03177093F585CDE03A03B4CCC0C4FE54256EF84310E491BBFB015946F7
01BDBB4AA3FABEDD6CFABC98D7645E5FF64A1EC0EE56758EEE0D16C5BC1872CF
F083A953F1FADCCDA75E6C07D1A1140BBFB00E29323E8D27CD86357D08312E0A
35EA553D9A7B6C1925D8F3AB5544F6592B2EB7F1742A1200316B90FDDAB5F442
871D98A54D65B276FCE833774B92EE6BD2B5E61200AEB61E683C835FF3BAB5B7
FECC4A61300E238568404F5E2BCBD57249E3A8E95EE459FEC80F8535F53FFCF1
AC2CF27466C9DAB81A7FCAD1470C081F11F1F330856675709238CA94F662B1AB
02E84652F40D3678CA5E0DEDC4690F5D840180293B8C20FC9004FEED29302936
F46CD11BB64EBF97E624E1EBE0C976DC40C42F64D9D13660C75B3BFF05844F4E
124BB67118A546C5B791C5A0546F1925D037EF11ADA8428A4B95E287DC87FC25
0F08CB9CBA7A8138C663900B3EC30D454C07D015A34A293AFE1019932D452946
ACF9C7CB0651E2D77F9EBC88EA85268D2E71EA4FCAC589281E414F9E72DB18B8
37F02DF06F57572126A7103F9E8B6B05C84459303873344D8246A43A3ABC21F0
34AC3E43DF752C28932E150A154511863967AF7093B161F1B6B8E1ACF8C3B8D5
332B404D74BF7CAD2C7578EAC2B641EAF6E61AE4857B8DDB3222CBB5E3C24B53
2ADFC4368855DB067F057D48AA04FC951AE65C90CE751534DB7E4D3973515118
26B05563F6B3F5045D22CABF84638A4A2109A7CE338DE6836555DD97B7CD9EAC
12F9E8B5DD29888D39928A5D92006A2CAB0487B40B4CE3293E5995BC9740EAE7
A9CAAD7C353BBD8ABA2C19E89115BEC5D419844AEA274471FD4A4B2E8D2B760D
27304DDCABADE5B8A37700FB4CBC12B452C593C25DD6FEF0E6FD36BC1CCE1195
50E99A13E6E9A67B98D0A15A26FCA4DAC75C51F43722CD0650875BBC3B51CAD3
099D335DB1AE055F1C28F89AD2D36B28827783858E427BE589910F085C2DA906
42EB7443954FE8F8FC05AA72AB3BB6CDAD43AF246E5A45890810F57E0313C422
07D0DCCB0D047C9E3A43E7036BB1714E9996AEAE2FF148A454D531FAD1306C41
8275C5B368413A6AC092E47FC58E54E084F7E5CA49A46A65F605FEB7D9F1D8E5
4626B59C1EFCDF3B73A3E68FD59C49F0884D68A1035154A11E9C756BF9D684B5
30541DDFAB005C33A95B9A770E9F78E497B3C262A52EEE987B6E29B6BCB98500
98796B2041E6477A3EB5854FA32DF1C6639918F9AFB79A3D352F16B6B53F765A
C5774FBC9D0A4A62F117C454098A70FAA5EE4EEE3980C3D544C119D4516733BB
F3C457FA53185299CBA4F2D8A3FC77AAF429142AEB5091288CED55BE9AD75A56
1097906D9AC8CE63C6296AD3A0FDC7BD52484EE3594BF15B3CF3A0A215462221
CAC839A882D8DD8B6C017765BC9D45033FE7355B4A54D80CA6C91849CABE8D5D
6BEBB8035794B9094E705D0ABDBC740377ACC972DD3FF61FE7B22B4CA250BC84
E32985594FDFD7BA3BE3AC5C1B3279E2BDE9D8CC0070867BDDB6A5928EDEAD29
786017BB574DBB56FD2F99213CE2EBAD195D6A89D2F9A4EAAFEEBD455BBC9A0F
34504B708121AEF7BB8BFF664A304AFDBA0BF4AD75D548EC01CA0C874FDE8451
1B023E201F36D56A076F2FBDD4DEA0F35426AD002749F50AF283D7B7878401EE
3AD7E879B8B2BCC3E7E09CC39FF89126F5CCCED631C88551E6B806FA981B2F38
57475A05B4F8E9C6F2EDF0F9993BA7B0AED265071D9151605D5D4BA9E5D80904
0D5886AF6D990BBEDC5E268394E4B360A2EB6DD17A2A753E1301E342BD808239
85B45B56D092A2B4A0060F42997C2CEB4FE336EB1457069D59C83FA96D6445AE
F81538F28CD6BACB78E354E674A085194E2868590FBABF9707418ED660AE5339
B48DC68A60C3E7F983B98403CA2F1A9191496490BF7123179F3FCF8852E3E614
BB3152D23A4D8DAD17D19E9A91336DD5077B74FF90496E0F10AC715F35746775
D0C2DC79CDAD03512FCFA6F8F7DA34C9E2A9133E1A78FCB5141BAE66E0138A38
15B47DCD6D6BCF4EED16683B57BCBA90A10F24CA02B502010CBEC132173FA7BC
F64850B5E7F939CA6D25897C7D3FE4FD8249EB0848F4F3EE7AB42730DA5EA9B0
63429FAEF5184688FA59227B915A1E7DE8AE8579F4C687FC21E25CA51F7AD0BE
BBDE6A9C4DF61D385856C5E02DCEA2CFF11570A11AB1CD51AB4FBB80297C7F04
82B84174C53A63A45FEFBBC134CF6AC592A09DF33436C93B3ED988B4999FD2B0
3A5F48C44D3ABDB6B9DE48718F0157D3C3A18667084830E9E3771B80D2888328
FC0A2EF0ADD96AB838FBE38532B121E521F4E867E633BAC91D67C7CDA9A6F30E
11106508C5B97F8B7BA73505AE9784EB38D9B87A225ED7FA95F725E584447A7B
3D444F88EB69BED7A9EB107571977196350F424408716D3B179F214FF8A61CC1
9D3C9D2AE3A122FCE45BFB7552EB476F7525A3A2B28ACABA4C3D03B515E7104E
3E52C0BB6F2ED4AFB18FA55D2C00DB22DB9474B56939A278700252C7B6CD7C00
F7F0006FB8FC20CCA140CD2FD2CDB6DB657C9EB41C686EBA564A507CD1FDEA0F
CDFD0100ECE43049EF5160F7AA9019094DDA75D6CDC49212D0766C697FDFE0D9
242DBF1B80229FE3E4A7571DAA49FB00B79EC58DEC030638D6DB58E3542CBC14
86E7819FBD5D4C41CCB69E5C5EBEF77E5A2AE177E236714D691C2FCCDDC3B787
790DEAF6258375F8F194A760537DC68ADCF121CFDFBF04AD022DFB27DFD203E5
6E432CF23EE29E6E4D3B1281BB1A5854C56A599B9CEDCBB66A3D691BEC9613EF
EBF2C5FDEDC8B48D626FFFF0CF6106693A07A2D0C184A431246838FA900C8845
E02A832617CE2B7A2472B53051F68129930FC9127B1669086366D5D9CB5ACF14
46CF28D54C46E2307B53DAC9DA3302106024DFD55267B43AF1A15415C436DD86
4999564A0C24BE30BFFECA7C6B73D595EE05853681A6D5808101B23BC82A9E79
412BEE78C5CBFB4C8548CC70F06DBE040B8EBE38C2C27A680A66609231B8B86B
3E920976F9D2AC827BCDA593AF9D23CE1A433025D0EDC2CFF986BD1AB7891D9C
D36237DA8A8C7C2406020092352E25BAF9BC3189224FC32BBB90FBA924578D06
9290517625097AC0358769641DEB31DE156173A0F0943BB018B8E0AACC29CE25
E781399A3F0DFBE8C5E35F3386BFFBAC662583C6C1F73FB68155610B3950CD81
C78747C0528D4A7FD6A35B6C7F2B58E6931D7E19530DE3B3377427148D4AF3C2
BB8FE489DDEB9DC86E2A39B0B074717275C331612EADDB0CB261DFC490943A49
72A0643871B082A54BAC93CE1268EB204897F5B452A84CFCA626F3E6A9C6C71D
610CF73BA15F0E0DFF5770D3763F265296DF009CBF0B8238FDEB84EB71EC3EE4
BFC012EE5574301D63F94BCE44B3A68138A67A04B4B08B90DF124240E22B9545
AB5F4FE8B2783F03CA5CE889CF60227FDE7E9D40E6A7C5FF7FED71B2D2BD0E56
83E4D3F85DB932305BBE77AD503410D4CFAA51CD25A40FB7EA67F93045CA7679
189A5E825470AA4B0FFF6776DD185BA139A1C57880E56D595EAF5CFB6B9FFB4D
15F3861F4334BEABC7633F93232C0CB747E635E2D66BE0206D59D8708F90173A
DD5A1496401D50ED2361819768E019025221F56BF41B37CB4D5BEE77154C0A6D
A9CDA87547C4D7CA0921E5095C865CFF7BCD2E9CA2E7E12E3770D1AF0C1E5CE4
39D981D9D8009B582800F573BE64AD7AA7F2FC359E11FD7B69FBCE47617A039D
B6B1550979BC973E69EF2CB1866374A3D2CF367E5E5E1C8129E9853345F3FC2D
8F72258D4AC965ECD535DCAE0F944BC1BEA3C4F951A1BD5E7E18CC6ED707FFBC
AD564885FBE5798FD6625BE1AED5E6625C7FFD37E5C4586D51049F8353974AF0
B6735C016E50946B8950FF1384EBF571547463EE616C2303E1B7DC6330B12871
762A8C274F1CF039EE025344FCE92F6C23CE5C8CBF92AC36EB2EA4A7F55BBBCB
8D18263699ED33A25171F745E029403062E3EA6C711A97C9E5162E7516B07D5E
7F52C802D3D07C342EBE8CE2662F3018A7B561D92E33994429C17AA186909A9B
FEC492499B17EC1B8A6D363F040481D84356DE02A52674DF07A0CC606A789FF2
0F4CAFDDC32368141A4A5A004DCDFDACF0F0D594C6BDE9E72B68182D7D35D940
44B7BCB675FF26CA40E1FA211339131E55411BA2E03172CE73BF6CB1ECE64C67
399578D335ADB3E1545C40273267716432408F1029B12859E4846F554225D7B3
7489CF5A7FFDA64C7C50A23D4D335E256A3EAA75E3046677F4F27998473A59AF
790EC564C5F20AA3089B8E31A741E9C60AA9ADDCFC787B52172CC6F71E95492F
30430B1A7DA7B94D6D8A58273EBD71A917BF457B0D35B3D8C0B1C86021E7C91C
FBD178FDF91FCDFCAE1A08FDC910B8DCD0007CF91C3FE80CF9434896C2539B1B
1973C627FF12E3240CFD408BE850011EAC2FF2C4C9AA4F10C6A6BA8D030ACBC5
B36E4D0102617C1F78469DCB653CD4A865C97AAC5B33150697A29D66DE8EC633
27029FCB5E734287CED85732484E1834A1C83ACC4F978A7C47D6367A9F86725B
FB53F73BB07C86A93C4593E8F1C351AF60E2FD6F7DE639A738302EC0278E7D6A
B43058028B285772A3F1F6A5232CCD84ABF5E1DF83DDEEFDF84146524D68A1B0
F8DC9AAE053185B8968760907B4EA76BE28C4C3CEE184EE3E85A373ADD25665D
988806BFE16206BB364FD7DC965E8C906EAA698BFDF067E5793CC20CDD2BA430
C03B4B187F490AC271CA3AF5804621C597C1486E48146A2D9F0748FC99D44A70
1773D279EC580B568EC7CBD4574698B516FEEE8EAEB6D3063BAE521E8382CF2A
33C9D6888C237C0C14797654448CDBC382CCF4311A13685DE2B6BB9A16BB79D2
6F5CFDC64372A2460CAFE0AE6C09FB957D60448D0DFFC400BAE9277774F80503
ED015B80A411A295E9FCEB37CEC985E6DE2DD50BC0D931FEB4CFDA182005F8FD
8EE4B79E178E934BF5FFC4954E1675600B22B607B3E4894F2F105C9225E973D0
CEF60AADC781108DF23A7EEFA073E7F13F3F80D8FFFFF41974CBB163DAFB05BD
EBF36A6B21FD39D763F4DD4CF9B2A9983B57D67C0516180ED9748C144EABE8E8
F08BCA5B6B3008EA493925E48CB778BBBB3D8F66D998D6114947FA3C22F1B09E
F8E60A070EC3296AB981B5C433DBA523BA5DEAEDF198D254D2D555EEB687AF7E
46DA7EA8E86230386BD60610BE6D6D0EC36C2368F3CD7B84D7E9667D69FAC1B4
688F9FDC5CBF073BC37D30BEEEB4B7C19372DFF727277D34E64D4A14195FB978
12B6DC9415AB6FE36DB6785B310B701406B28A46AEB72D90D14D39022CBFEB77
50CED0A86F9E4DCC4A9A9726B2509B4C0113452717DE0D2A0F497D5EE207C082
2F38ABB2F8BC23D6A8D3AAC6539F9FBFB1AB53975FDC237AEB2047A0BC9CD8E2
48EA3399184F9880A7812E5622447D63B853320A9393F331ADA5489B81CE2D94
5A1E7033FB6607E3BF324CF7832408A7A685B88C9D997F79001689A8A5B59EA4
2EE1C821116D3ADAE66FEF0259FB85841040DC04A4DC60F146667F897C1DC5E3
DD023299B0AB5345474064C8296E00DF1D3AEFFFA8A948DE329582A23F4ECA58
C504C414FD833197F802E6BE953E363D2DDCDD50C14566B75A64EE8955F08534
C1DC61BABE65578664CB345BCB05E87FC31F3C113BB0EFE2C6AFF5365C6185F0
1EC8C86E4E53F4F5D99BF3EB22735C1D8198A59D03464B2F439C63746F83BA6D
F6C594B7B1528CA85860AA9B25B346FB07578826688C359A97B2FAE5F8FDA600
334DB887EEABEA1795A403FB1A502805175CE410F4D9AF9D10404D82787AA170
0548F19C8A5CEAB42A5DCFB4352F9B12C9A851BABEDFBE985665A80DDA9523A0
1B3088AB6B5A9B112884F64DB227099B7A0ACFAE3816FCD0278760C167C9F794
5162715C72D5FF8B8D1038D6F1BF7D773ACCA0BCBEE95892178263E71AA26B02
79E386A09E779A215E02AC0BD45C511BCA9D81B965534659B5696AC00D4B8009
3EC30D63D6252DF3328F4D9B438DDEF02384BB1626565EE2C43A1E9BB02AE300
B4790D4C0827BE99BDFD0F0DBD4F5DDBBC5F462AFBE4D452C9F0DC5102EF0F0F
71196995F058B8FE4CE2964E853671FB155F80D5C2CA59C0958FB67FDC1649C2
39DDF6F9EB348312C9BFCE975A235D7820DE8B4EF2A9E0476C6FB7FFCD8312C5
325C13A2D4F5C6DEE904B9A634F19E6D404790D0A41ABEF11B643CA711D40C63
04D70051CA0EBA362BBD7710679EB56CACC19F64260EA09AF8CD2A78E58B3CE4
2D78E9D177F77CF0676446C47A132F87956C736294F2A1DEE7E0C51D00E0C513
AA27ABEAA1A67770D06627D2CC72C1445279A8D90CAB3201C66463A1EA5DC0E4
E69A72A3519FC1E993810AD548977F4923C8D67573D6AB445AD599BBDCC9F599
5DE326DC94EC017E804E8247CE06B5E6E022FBCF189A88F3A83E823B277228A9
34D72D96E68D5D05EC6E1B3F6ADDEA7D84C0F20E162FAB03E22662D3DF113195
6E6AA698970B17BCB5310D9DCE45977312525DCE7B6985F1FD64573FBC288F12
A66EDF2E7B5E40ECDA6690421FA358AB2720C5AFB416B4D8BB615D87EB89FD99
1774126D6C6C0734B8EEBB8E1FF8234A296DFD5D6E6E3B2A69FFE8B5AD81AD30
46DAA24C8C5D69FF89088D04D444F6CBC77CD9B3A1E0A914E072D46300D7186A
ADE1BF5386614976F89C956780B37905D9EAEC0F0FE64F656D6235F177167778
E07EF582F9F7ADBC751F3FA9709B3851A813B5D2FC1C6931EA8588E8FD577E10
4A8A57E10904A94AD808A45C53F6369E4DAD1598D149CFEEED583190D6806D3E
00048F99FE52FAC64433B5C87396BD063388AFA7C9203DE7D2B011C81D985089
E13B3FBA7E24F54E8D95BB5EFD0DA0D642BBB02A7CCA9B8C2BA4977E5E5B0E8A
5FFDE66638989CA2D8FFF03FE2871DDB89E4CC9A06518E23509B6E5D349E80B4
156DF36DCB58FA8CD49A80C9E3C490AD03E094C0D11586CDDD3CACD9138090A3
3C15E2440ED80EC9FFCE1B73739C3B4AACAD2273E63C45033750FC700BAD1EEC
88B5112FE27EC30D82CAAAE8639985B61DB1FFAE73BCCD9637BA4ADF3F62D93E
E90B14CC030A9E3B3DAB4268A725B9FA132359A65B85C9EE551999F50ACD0642
EF7CD04FBF909CF8FF323E36B5F9E43FC7B9705D8BCCAA00794339EFE8B1C472
E795AEA47F7F45D146BF98C58E7EBFDB111D033D764CA88F48E9543A20969FA9
7996C25EB3C458483024E6418EF10B22993AB01EF615DE67A30F547D8381BB0A
ADC9DE5A87B982242E4E223EEDF06D5F1E380555C13C980A67F82F29F5E56092
4FFC61B4EEA7BB7FE783F58236B45E8117D7D7861A9E73B5687D7BF084139EFE
EE5AA54E55362E0CF2F75234D1054DC4AD369D19117DD6F2234D37DCF87C40CA
5764769D535F57EFE7A649F3AFFBCA51E8D2EACA6CC22540FD5C4A8D50BB01AC
679765098542F40E5A523553664DDD8FD846344A6DF3A3B21D17C6BEC72332E3
5949EBF5B91D3646B916CCC3B08B45DA1A9B9341D443D32B720F786B85B4AFA7
D75CF95EDD294A6E51087BD722FE938BB80CAEB21FD104747340562B4DF68DE4
A43DB0993FEEC8DAFEF74A2ACECA71D617F9217C03A2E7E29D0302F9FA1320C9
E5CC2F7864ABE01A0C8FAA91B08E57C059453362F1733C25BF7188E87B73DF91
CD9356BEF70AB920AF02A583459F079BBAF3B7C5D3CE587C58024122FF9EA293
4A48BC853AA34B8856E69C2B2A0520CBCE2D0FF65E021F224767C246BB674EA5
EAF238E5146D75B3145DB84713D95EAA48A0B68C4F64FD8B9ADB03832A05DEF3
542D3D9FA23850DC5C27DB2454CFFAB205DE1D80E715BAD079A5FB2B49716C81
233C2614F8A40FFE0979E310BF2E94BB302EFBC4D175DE22ED726BDC9BF5B1A3
84C9DF08B676FBFEC5532AC8A6AF41E566C10467FD5E70A444B7906137D2B1F1
9FF6B43F307A56A59A1F12F484DC2E0BDD84A8FCF60FC9B2387B2F61E1AB7A3F
CDDED5B2F2D99B785BB244180578A51F3773D83BE76CC49F87531C1E4BF495B9
7C24359FDB53C40454A1083CFDE5B8BC991970C988E08C8E5E2136D875448F3F
7DF9564B20A40D03A999F1A7E99A9F4B34F1AEEE014AEAC7FD4781461A32BA1C
9D27592E2F22188D81C017001A81372E66189A907B03698D33AC418AC3A8D25B
FBA2D1106087175C93AFDFCBAA6BC259620A53C587DD89C09E71AF2861261CFA
DD64A08A334CFB1836A2D810AF85082E5E953532EE2B5997925BA755BD4C4498
22D6E80E0BBE82F27548D508CEC0BA9A5A5D50DE2AA9E7971619A0C1567BE458
9FAA2AA906D5733E9FC0251393A99153ABCA3918CE9E7A401E7C46B7E7DB04FA
9183E80D1E81BDBF5E529C01553E93313D397A2119AB7464B1164654DC52A428
84429AD41CF41FDCB992A3F5AE49B48516AE1416F87D23C43849CDDCD3D34AAF
2487DF8A0FB2AFE89C8E7814CD7079959FD252C9785817E0D32076B3BF725506
55EBCE67210897758331F88C4396BA3687D59C36562843BACBB49CBABD7F2603
76E9E6880229633B3C630EB780CE777726D82F232B8BF4AB0E48961DEF06C23C
5CBF3D91C322253CDDA733E0E89763A035E36A83774282E28F6F839B3639ECBB
62544A20E2D44C6D66C354B62E7EB0076A84348D3120A7FBF4C975F73C85E41D
D166D7FBEF21114CEF45E302CD159FB6899F967E1107CAECADFBC256A293F41F
333AC7C72E229D43C71C3F4BD37174C215B06807406E0F3E49AD063B52260B8B
614F1CEA74A8079B5042659719F85C87F016AE906CD227622B52FD72FD58E230
F72EBB452F75843F3B79E08481B91F26FF99D78C86DE7E2C730209487B99C6B4
5FD9C0D044564D2808D62C9F641E05DD54AC3C59456EDF026A09E4CA87D12F77
24B1F6A82AE70663B6C0B735749B2B0C3A12853A5F6BCD12F5EC353261F47A28
0C0FBF6CC24398B50A12CEAFD727351777F7F473040FD3F809B9F643A464B334
0FD048A8FCA5E1680E780E8041C22759F1DFF9703C2D4D6D317471205F431565
22D4435BC217D8D5FAF0170A0DE928E6FA40BB994F393F326B4C4A107D55CAD1
8299EC4AD191A5A9686BFF4B2CD06D0EE3BE5F625EB4756E0FB75925CB1F80E0
546D9BC418F5CF275B3F66E3F8C6FB135C9B83BF579A9D59EF580EE2850DF305
AD7E04C535861DCBB8894E581C3F205DE10F164CD0B2744680BADA0C94CE5A26
D681A2912A71E18F6AA6B3A14F92E71FC5E1C62931644DA9BC7F08924B8EC0A9
76FFEBAA9FC2FC236498C4AE4B066C2A5A87909D8B4A537F375A7A17CB382A22
F2A5276060A318C22F9B9DC337D6138A01BBFA6B39A4BDD0C01DA2929BDBA442
0EB0011C0DC880473BEA9926448FAEB1B866CDA251C03C8A1C13EA3DF834A075
73565F4142788A65AEAC8F5230BAC61EDF73373CE236F4742722BC46E2036AE8
4307F5749BDECCB9EA26D7244C495A2B63D48D64AD944A279E4836A3589B52E7
B2075A6003238A1B03A4343209518BF4208C4138891CD82A4F91694F5508485F
0D73948583AEEB44B9D1E386276692CFCD23ECAE07029EAD5458810AEA07D20B
1A59ED6E682B55406401AB32E872CB9FE4C8A5CA811609DE1FF3823205C20B28
E8DF7BFDFF362E5C76CDCF68A7F95311FE5EAC9D4BEEC6B2370FB330952EC5BD
6234D1FD00B295C39D0FE5A297EC0F45E55B6FE35CD24BB05932DB9F0122409A
3856FFB7962205CB8C21D1824470AF9B62A38DF76D658D48F8ABA3830C51C2E3
73C213827819A89D22D1BDD7A4EB06F8D7CD2A6E19F2F598D0B4D6C3CA8267A6
5EE95FC3B3FFFE6DB72B76F03A374C57024BC7591D8957534F94C606E26ED124
8BA60BD4BB3F2C6520C0106F32C3FDF2C8F690956329A589FE39FA316545FF7B
56088F7117BF413EE00859F78F8F22BBFAABF1EAA4C6AAE84BC6F897FCD432D5
6E3A4BBFAD0F1A16EA085253F151DF5CEE61882910522D959B5FAFA266566297
DE2D34FF2D99EFE1125AC3831121B233CAC76B27AF45D4C0919D08E08C3C70F1
BA73AC7FDC58CB0C14EC0D5B4C6C939B62B2C199D2122C062825330BD22F0748
809E904436DE7934725850E8BA22CFD21FEECAE24BC54296C7AC07D8A8CC3B38
2714439992801FA3199C690CFE5EF8A4672F948F67F9AED2C424594738F865ED
FE6EF65A48D467CC58F2C339785ABF606894A86AB505CF163255AFC2871672D5
C646B6E10383CFAD213DA8C1A2F80809954BCEC189C0F0B340A7C9D5CA4817A1
6D9ABF6FEACCB110C3A2787BFB065F7EA85DE5B6C1FD9A1D007E213B39860CEA
4F2D3505DDD638808643BC2A1EA308B094494071EC0B5DF8092231CD0FC470DD
AA75E80E84C3DADC93EBC4989FFC2CAEE3A68BF4D84BCC24E820AD26B10CEAC1
0D53E281EDEB1504FEF6D46AE4BD4CD0D7B2C8777868A2B8345EC6288837EFA9
3AD81BDD59A025C85732019F87912518C0F5C187C65F114568CAB0DD55FD1C98
A2D6EDF0C714A868523BA183E9C62561BE97D35B3410C29AD29F788C045D427C
38F30762B1CA64E7CB97083A24BF93C4A39F257028007FF110DE462E2FC13604
219272AD67E341F08EBE222C59DEBA2D9D4CAF895CA54261858B9455A3590F40
30BD8490A3EE6383462379831E7D1C597B1F6F16ECA76D832E7313C715D0E494
4563A803716AF579CF8ABCFC6DDA186D41EEBEF426F886DB5CAA5F57474CEC1E
4A07A73847A615CFC0F0EE5E3E3C0B423B960076236E22CAD63A96B3B8406C5E
A7EEC7AA0F6BA6A67CBB48CC2EEF00E9BBC1B65F988FDACC45AA34ADC5AEC267
13FFF8662F88EF535141049C18AE4BE05C9A200D799229D0D5E80A24D7EDDD84
552929868469512C1B0F654F2CE27794A46BCCC1E5D877D3C663AC187A49AD2F
AB302AB5855512A99393D05338B9C5B5DAAD0AAEAEC6EFB368C14B8873D2C9E9
35DA1D88CEB0B82820DC1A2B7FA00C7DE6166113654416E3CF498655036653F2
096A1D24D3A43DB6278107CD807C322F780B23368158FBB6DEC2D9820CD5924C
C9B73DE4FBA8BF21E7DAFEC9426F1F12ACE8498AE71E569F0C6914E0291486A4
2202A62CA0DBD826DCA71FD8101B31A5A907685B3CB3789FBB5DE120F933BC4C
CD74BE9BEF96766ADBCE7723E9DA57D0A6C2AEF07F20B37A500B3C5DA53F02BF
35568EDCB5E293D5167F8530762FDC188F0EC268A191C46E2437DD77004CAE41
9CC093A8AC2831BE76C986C78713782D7B7708EC2B0E041A450B436CDF52D0D5
7242EBFA054FB6E1F39626DDB6B9886CB9CDD6816EEC4098D7662D5B052FD5FC
36FED2CF6732AA2B50EC995AA86CDBF2972E09D202363237D99B4736C26454D6
9B01346A7D4DF3E2DFB1B7B1176D15677894A401914563B5EBF118E33FEBB21A
102F3B480E11D6A49A8029249D2EF5B7DF1483F08D9F85F09407E187BBC07718
1E7EC194A649472C8BEDFAC535D71E130BD8327DB6E5875916627EF6491FA526
C7AFE9B6F9A013FBE8ECA367584790E5E400A972F5C0D40D71F0E978774D639C
2D205B65C82105B776BC8D15598895523CF1DD9630F88E4606F5FDE14AE2CB51
6DE6423499649687321A72FCF64439DB336AA7FB882416C214FCDFCBFF7FF5E3
F2E46548FE9A53616A48A3890E18D8219868AB137474920F3BE44FC44CC8850F
15C208405DE26E6E02D07DF7601C88BBC152B359758363EAA45EEEF3D0060733
F9C10972D6F1F7538F02729C34040B89AF28AD3783FF30207EF5DFBBC95D491F
80C82638401CAFA347EA7F683270C64350F7BE0777997034B59B1F0B13C68678
ACD948C4CEB50E704B334119938BF1A2E5E78EA98E86203F161BC186C51DB0EC
FC8D4F432A937393A386CD06FF7856F3C0FAB1E752339D885B20700EDF9D5BEF
5EC80BC7103A9FCC1AC666743216B38A56E89D58B131DD21F9479EF31E2F516D
6F64ACFF3C575D38C6C474D24DA9ED8216A8879DB346736CA3C6C401FE322561
F3D1EE10922ECE8DDC01EDCA07EFB617E7FC3862E52BF5773220D135282FD768
416B1BA3AB1594F316A8F246ACE61BED34D4B910FF5F94BC45057D5F29B39925
0F7D18B163B3D3CAD9B27985F4DA9D21E1B083791F6FD1103B60A4A3C76672F2
D0FED004EACD836C1C9746B17D4E52CF62C49E9C2428CE1B7E551C679792F79E
A84B9AB8FFF3E92A9C42B7B321BA94279FA37A4A7E4D2336A0481834FDD1ED2C
862F0ACBA0163CF791FBC9EC6B9209BBD9A4948D2FBE407BF66E62A7FBCB7F81
3028A290DEF517CFAB94CBA4779A9F44EA75370B19D63AA5B29277C16AD50A86
CF1B3D6B3284047A2D729F5882B5260B951AAD77EED67944708FDF33CFFFD338
76995E84A797B88F697720E497B38CBA27DE9B6EE03185A7AB86B03E02D2BE86
80C3233F847F131B8B2B8DB5145C0F035D69A65D6455A2E2179602F206DB7DB5
1319A4B32F22EE6E23841DF5C7DA985B4BEBFF539F339ACD1ECB8130D064C685
67125898868822BE4F4F188912B261D0AAD04AFB57AF55ACE58A02ACD60959AE
071076628999DAEDC9CB8AA98E86A565D0DE25E3E1C9F59A2599DBB66C32DFDB
D64119CAD489A8B1FA333957CF5CC2D80F2E47480201CBBFD0793D67EF4ED75D
F42E44FEDDD0DDDD9FD0E7A45F791F374ABA267D5B9D64D6E13CEA218B36C011
66FEDFD7DF45DC1A197CB731474AF05FDB4B044167A63F4538AA5C8EA7B73B9D
03D2CDC5C988533711BF16EABB814354A1950199F92BF0E4C09D070B20C1BAB4
5A908080B57748F56D6CBE7A2F1B334FF1125B27864805A1C39CDB0E136C15CA
DDC40C94A3E2C8DAD13E64B4B7487FA5BD98BBCFA4A653A7BC7FF65B02A1DCEC
40086C9FE55FE6BC5972DADCFF55C9456772794D87A5E09C615BE69F37FADB1F
485EA4692D707233E75A11661852406C15C6420366FC39257C75A8A7693CF5FC
7BBD45554586E36D5CFC7149521711819FC7D9A7F38E94585647F94E022416DB
30047C2C9611DBB2FB738DF812B343E1D4EF94DE0BEB16553F2E141AC200EFC3
31F03E00B4B81CE68360D9D8DCE89F9795D0B0BCD02F818C2687341726EA926B
0C83BC1739F5A3A8ECD2A9B08EB7340040C40A8C0BB43046389300E64FABC5DD
65832F9508D56C6C487556F6E73C09D9772ED471EEC31773E8FE168F6C9662D0
1E0CF484C7D26BD90F53FE72037EEECA9B9E4D5999EA337986ACB9188B0F6E23
7CF7FA5C9294F4511F6301371DB2C044D930E0A500B2A39CA0C110342B2EDDEF
A42262DFABEE7D354E33FFAE55282535D599234EC879F7CF6244DCB2BCCE4AE0
3F0348E39E63015EEF7AE2AB241BE8FB58FF05245E9F6E20C4C303FEBC2180C5
063036F5AB9DBEDAEF990C1A0A542694DF8F181CEB7D9C0FAC6413597B6A06C7
59472256C8895FCF1B5D87D8E290A2D471B01D2C21A45441C2CE223E09FC1431
19A15E04E2095343A6DDC5EDE11B893FF1E67A28805678222DBC47F706E31778
B304067081217FC2C0B23EC2E8471B8AE8CB4B6F9794CF65DE0BC09D92DCE2E4
65FE22A04E125C355338BCDD4B50CCE697EB514471CD988AD6FAF0375AD3D7D1
02D7B2571F462F1F3CB053228F0D1CC4E6C52E75F86D9A3B43DD8724499B9735
01612B1033AA2730A0295ACAD0F97D508842B947CA9E10225502CB96AAB200F7
C570E341429690D4C764CB11085464F6BD8F52432F3C5D9FA0FA39982D4078FE
C2E7B8CB7C84986F5277A00E365EAC46C654559BA6968914670617366B16B907
8258601159860935CA1F8F2C512FC4001F468CDA7FBF0AF70D20F5F599EC0D20
45BDFA62E8E4A8C97994D39AADFBF2595B6B8B452B7224104CC349FAA10A7AF4
62E220110DD8C0548E393606C65F9164C42E7358CB3474BE78BA3C08A01F40E4
890549FAA69201B20209FA1A0420266E94AE3467C1FFEE02C1F67B0535D4BC81
85E175FAD2824CC88A066CE61447CFE70F800154B03BABFD9D5E78E5173BCA76
EDCCF7A8CB93F69D855A703D1A03C99D552CA871F945E8F2902C1507C72E3BDE
385AD6CE93E4C25E85C02E58EF6FF4AEC37BFC3119F112E6ACBBC8829DF3D86B
2941E4AFE7A26D9EE0BC61DB4532254346E72CDE0BA5754CD453DD7C7DB913BE
39835DBF194B6658AE243BC2BAB8CF2FE71800AF3ED17CA8CB887461C38CA7D0
C9ACCB3BA0C927FCDD1FF318CD93EA7801ACDC7D7428FB8584F3EEFE91B52EB6
B1F1A43E1D232B98EF353C21502761727FB0FD247FB971CE5C2D2A896E8F4C50
80C475B0AF2EA44CE699D2ABD3B223ABE9E0ACBB2F3917F9AF889F3914B86FA6
292ABD29D5F7CD6E688864A7E67114CA4BA03C8CC7C449D9B4C115BDBC5F6639
9EAA85EE141853F2C3D4D7784CA4C2D4D067F0ACC062F32215C7A17E5C8B91DA
D453CDE63A4BC5EDADE00971DB8C47D93B65F1D2768287A17FCD8BF601B0D792
EE84DFB68EB7C725373E001AA8C5B1C66D9B6A1AA1518E7525B1911CEFEA2E70
1202219652D1A7D7D8701C7B14FCD8996F02A81017135ECC67A1AD9CEBA82685
E69936C029D5D7D870B4BAA3AC2A35F6EFEEADFD5E2F8DC3AB180A949EDDBB70
B33A3B1ADBAB7F52C79090979E209424339DD055EE13FBFE0B48305DA449938B
1E01F0AC8E7A145416D66C03138D16CBA3A13DF51FD313907229FD559D436F0F
6C414C596BA703FEF0C842FAAFD404C5204411312AD970B821B755E7BF75C02C
E5BA8A22120DD1B0C446719AE8906011767AB7E5D2382B7E73FF8D9147497348
FE6F51B3E7C79859DDB00E87486EBD6E355BFCB8F0D476CB197E1D5F38891752
73AE5690FE15BDCD9A274EF3BA1F7F75021804A9A7877E5D7D44DE9FFA743A9B
8A85F0DDF32724589C5B14D98A588FA5D683960F80489E4F64CCE1F6EB49CD41
C429235475F4FA390D3AC718334CDEA6F1868D3BFEA2DCD4867D9DC96A2EF80B
D3F3A6993FE32D696DFC264941DE363DA78E8DDDDDB102676F33B83405C72241
988B93D6B3847E9C80FCEA672BAFFA3E5F38C3249C4A730E4ECD95C523A21B5C
85B5CF1C9ED2731D2548F2761C827D42B95E0FB1DB0A3319FE4AD13156A46C7C
5304620FD2621A9693E4230DCE92F669647EEF23DAD2BD1316363248C2AC88E9
08A54208535302D3846C4BEF7A45ED30AA110B1A90C636A3F2740370CB54223D
B59E05AA421062D36F71CA4222EFC2A6AB2C6470EA86895446C0FE3647D1DEEF
E10D191D6F51D1FB4FBFB85C438A29E63A6FE9B13B7A843C6FD75CFB841A3115
30CABBDF4E8E78320F7D04E7D9ECCA3F6964AEAFBBAF8A3D403D038E9FA1E75D
C147151ADF06757B560FFBDF6366719CA6447E6C2C7C90B831D86B0918536575
CEEA07DD2FD27E38F10D97CD657BFFC433C7DE04E8CFA0E72C78472E611F6FE3
B39BEFE44D72B421300CEE35CE93D9D6EB142584801CE0AA1EE02DD17D1C81A4
C704D49D7385F2AAD1D98FEFE0849F41BCB2CB5E888EEFC3500E9564110051D0
AF4AE323338E4FCF05E96EE84596267063BD29A501F2769FC86EF524B2DBEE90
EFAE82133A7CEA918208239B182232D12811716CB6A2FB3B4C667D78F5E12357
E15E752725F58E73B3BBCB174B17DB228F67F4D569E1F64ED4E767852A4FBD71
EE47A114259EC1249985874B36C9D4C412038A76DADC3D99952B45A1CC2FADCF
0263587677A9F0A1ED1F3A865B1721DB514419CDDA39921E3E9C3E3D183A6CAE
E73CBB380C3308B9D0E860B6D23291577FA1731366786C3938ED9BEEEF4E8EDF
1DCB33C9A429826C1BA4668B68C7D54B68514E999B0B850381A83391A466CBDC
CC6FFA1E7C09E3C4E3E0E6389871F528A2B316FA77F7163F3A593058E0D25D71
ABBB0C18034AAA8E658FB524BCBE9D2DA7C155E0E1783550E9EFD46550414ED1
5CBD98E560069926007DD1247D5A832AF29C2EF28D9305D35191F67125CA7A55
79FA1D31017F6403AB826CDF5940DB22C8AB7573DB01E8776DBEE9BF70ECC830
8DEEAA5681DA8F4C3A94EDA4E4C6ECB55A6FFF3F317B6598B2CFA1108C01AA05
5B2B8C3F9150C22AD8134D5E50991A1E634E7FBB58C67978DF7D7DFC4ADD3E08
BC241A7B5A5531A0E1EC16B5307BD7F50965BDB2E3C65ED695866EA1CC911B25
1EC048826C96139C40E02DD0BA07EDF226F63DCF833B899F33F0E5E3FC7574A8
6B37CC66CC7CCC15A6053976FCC43ED3E90E371437D3AF6ECCE687E0EF6A2E43
B8E1B3C1F07CB3B1D1B3C3A5E0CD0D8244964D10DDAD2747794FA868A438D7E5
A82CAD28CA393F41CF8EB13900B225A650EFF317FDBC24E1F8FDE5F084169C97
8AA8346EE2F1404AF9068DE50FCD19B5235E648924CC62BDEF90AA11AC89BBCF
4CA10BC5E7542CEAB37095D51DE8ACE00D388BC45B9E5797EC964410C007C61C
9BF6B66D2A9B09DF0DEC0C337637ABA079107498CA19A0BFDA55E470757962C2
677FFC6556A3DF6B8F19D3EF98F2D59D998C7CFFD162A22083C41FFE6FC043D3
E3CAB65BBB1E57EE89E86B8B10C9B67E2CD83EC458C5005D990523CCA5DEA355
99CE5DC49918D3C5DB668B19532115A38D3A0632EA35E136D96203AEA2E91932
630DE2596F18DAE90DD1CD826FE3F28772A260EC0E11B852D8C4C59707B310FE
F0A4DCBC0B8BFB30CEC90E631484E0344376305730658BD074949DEB1195750F
A4C8E3BF9307CF8F91C8E569B2CB7AFD3C0EA0796C62D7364AAF5BA2177EC13F
3864D390A6DF81B83A2731D91AF7280C90D8D08B27C0B1C367585241E9D14442
FD9C063537CB0448056EF0D6D4BF2D02760CD10543E3993A9505A91344D8FDC7
37EE69AF29441B61918505A7D0DC6A10E7E3F0B68DF7E83958FD0E43D8702B51
24724203E4C1130EB8506E2C12113B344399DCA5D5C518E8B8E1A72F88AB9785
1BB5511363A5206125932E3DC44797416881E0829F047FC40E76595AB2C6F391
5B418D027B6BAD9847D523786BCA78A356B11B779145D360CF66182B8210274F
9A1013518787008E868683077561CC6D0AFADB2F5B4C94B5EDDE4A3FBD8D4E14
A33A6E6AE28C5A4B55F78F2AE07BB9828D550211E2D2D2E9818C5E75B14174EF
5A9E34B2DA8C134426588EF4AE7AEF323ED9060F26AFBDDAEAEEE76F08112DAB
3DF3B36C281F1E89F9901EACE33B7FE6DC031EB90E181D78ACBE690D4DB470F4
FBA236844D56A022C48CA10A269B47E639489F27E5495AAA0320CBC325B28283
D638317B1A1B2219C8F1EAD9ACFD66950137DDB2490DAE4B8826672A7C178609
37970817DAECA4CA5BDE6AF7C53F51967BAB8A814A2943EEC7EA5313BF091D12
BD119A76A2F16CAD8CE19730914CF19AC4773F2C938A32EA0A52FE917BA401A5
597852C70C6C49D222F4A17E32F57AA53740F78C086BE65C041742E308E6F233
D48C26E891AB982648711E3C10F453AFB932297C77A992E09567E2AB1D2FA4D5
8084651319A001038A534DCAF68B883C71B280555109649F835FE8231AF29A6B
CCAD88F991CB447237BD8FC1B821AE62394C3112D06714A6453E5955FE5C25B6
E87FE54EA3678645BB7016E11F4855A50D618372C598EFDA6EB28A64EC496326
CB2C35E7EB52C37B663E003C11E4E123F0F91C505186E51561F044AFC36C9799
1ACD5AFA4560F1256F4D631F46F3E90C705E3EC324E86BF4AF82DD227D5679BA
524F9438CCBC70561E53242BE7F290908ABB93ACAC0E6293ABC14B6E9E2A4966
1382CFA74BF00B186B3C5393E969D89CE5572924E3CF0F09F228EBA0334DA00A
01AFAA3181F45EF39F099D47A6E6F96C660BD6C61FF0775E79ED3AB8822198BC
E2C3240A5275D7F894428D9D7D96AEC6C3EE1F43EA3EDC54D95920D9338357F3
7D3DA8ADF8E72B840BDCD274187265B3E4C236106BE2A8F7987D662A57221285
E6D13FB25D728C8B3F52D6328BB5C86D6D50306562FCD0B59016B15B50113FA4
58D692068F9BA8327F1744D772415333D28136CAAA95FC5EEBF4C0BD2413A09D
770F87CC4C63E183112866D8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC13F154032A
A1C45D1A3DD9230A4903FE5523D6EE9BC66EF49B2617BE3C1AEBFE2BE26C3778
EE778AB577C5B9E476CBB0EF69EEE350BBEA9712CD97BB2821612964B30B01E7
B08AE39BC8B715A5C11A351E060C8ACCC73F7D8B3B33CB35844961E68842CFC3
601BD2FED84DC32546F5EEEFA423BBAEE305AFA3FB216983DF61299A86F51A67
1DB10D74D95084ACE3907DCC79E6B2C358D53D1A83C0538DF2F8252B6B963B85
BB230DFCCE6BFD3D847DA4F518B81FADA81814332B622EBE6848AE6001554502
7C5D6643ED9E898E52F229400B725F50C0CC1C0B40C04D1680D51033154CDEFA
C137858D49BA7B27E4904BF8D855940AF0DF3BEEA126AB8ACC2E93B1551E750D
B24390D7F0804F28A5DD460DFAA537CC1DD8B32132A2E7C1B93BF1A2C1CFF129
1DC961C949F1641B11368B8A426B97CCCA4FE1A799E07290CC69337450707969
8C07A7B9A821AE7CAC799DDC5C6C5A4AC9E21CE0ACF1C02A9B72F3C264E40D31
BCFEBE729C666E929DD2CC04C4F66493A56A4D7F7C59675EEAF84F33556BA9EF
15C92469A7666520B873ADBFA7CB2C670B71BDEDA9725503C98440DE5CE23DAC
7D1D4D52E872037221E7F6EA9377730189C0D18861E5F87CDBD81FACC7DD8009
1F968191E7B7F96056299EA698C1A77EDC8CB025B10C08A5B355BFF415BE682F
55D46314BE428EAF295655A9E39C505CCF2C13C8343C21E274982FC4533EEA16
716151F6E7C2DC1E66CD4C0B890E4E8A7796D3DFC578A0356F0E9C2391D138D0
D9487329CCC75B1E69BE9B77107D6B5262104B9D3B06490D1261E5D021B99656
7ABFE151FA5607BDF3286232781AC94326703EEB8DCF9E74222A99B1F09378E5
799447FAEF52D31BE772DCF52FB024C8364F1BCF967FEE2B858E3DD1D270D545
6DD52043ADC089C9F1CC96E65C452DAE2678F0058AECF8482A8F9FCD33BC5F0C
3D63AB782567078B05975B4625D5BF539E5C9D34D5963E2086C854AA22C689EE
739E003209C7960E66BEFD41F70CEF7AA35548174F41D78903B40367915D4EEB
E9B3D1E6CF23E0D97980F20EFD24A6644AA26EBAF342B2A24908967DAF090BF5
4FD4E7303BA3534238448CC2DC6E64CA0D2E3FE7A0A34BEF01D697A194210FB5
200157C000B712BA81D012DE9E08A72C533117A282180B5759BD37EBC1875E80
B39AC00F7086BCB4B36C35CF2E4A42B114C7C5BC2310AF7E66F09F04BBC8B01F
009D09BAD4E0A9FB1943E10792E4096DCC5BAB8E5CAE0B0ACFCBC6B8128AC7F3
F66C8AE30B2A8BB96416FDFF848179580B23FFBCEDB0E2DEF7ACE895397DFAF3
66B982B1E79ADC768C31E35C395C3BF67A79F8B1AC292F38AB2EF23B471B9BFF
F791C452F098F3E8AD8814BCBF2ED9C227B18100BEE64228990E597E21FC63BB
E8685F311F7AFAF1B1BE5B9FD0D277D5AFB48E827DD0B979E7FD807E4406262F
049E69436EB5D87D41C8CC50E20C5E63AFDDCB917279624B80FBDB9AA8F96596
E6D3C833F7B4BB96AA7C31C873CC0C3EDFF7B23D8A22E7E6040D18EE2A58701D
1389AE6E5484C48147AC9926A4E5CCFACA0305B27303AB8B016B22376C8C335B
8BBA0B00EBA300B5D5882F227F5EFEADD582C932F59D55EA3E7C9A4B24C0499F
B1611320491A48DED20371FA68FD3AA8879CA7DE46E110D9A702E2857BC8D355
C9CE05A14F2ABACB90A87376E5CD9F595A712C05C5ADE029B52A590DA0FBD0CC
BA3A05B25B0E98968FBA2BFEE184D89D2A4DF5237545DAB95D8159F2A4C5A397
4B268FF446F974F01DA8B66CE6C6E2484343AE644DF88DD31D9FE8EEE9CC9FB7
8DBF164F52F31EC79ECF1BB8E6B7268BCF2B4DDAA573EC35918A52243149770C
B8978D9476D0631111033B5A1DCC203D15AE5D01B57A15DD0AF81C83B9097C0E
EA28DF3E233F9E8753319929EC7137256C6A801B16C8928B095F5A989FAE633C
D9A5F08020A6D515A5DC46008D953CD8057F7F8A3B5B26D3FEDA26A24CC332F0
CA6C3E55A487E3FC724B2FB8FAB889A9B7BADC8976A41036AC668660F6A3C0AF
1EDDD08DF250EDA0FE0AC0372A03DC4905B5455FFE156BC2A2E48571C3CA4D93
2B6350654FDD01420C5FCAF830532F42E5395AB23BFDDDCC1DD5C92042573E56
191E59D2F1541B00172D16F449EBB25F6451F5A0A7761838A8F8BCDC1524489F
04D50460C0F5C5155208D1FEED1FCD70B4A6855E2109A878CE4621251A2FC2DD
A28F18BCCEAF2AD29C826602033327589A7E0431763ACA5F131550E8340404E2
08B9C0B0A118F40D27E66F10354BDAECB0ADC7DC3FA7B24303B3C291BE889713
79458F91CD3F83B840B2E72336283EB997E4B5356A2ECEE5118D86CD0DC85A9A
53BE7E1C068357E177FDC984EFCB4556AE25FD1C98C243367B2619CA66EB7DA7
468011420DBE034D5AB67817DA21F12135A794147AD18E43156C122CCE24C4A4
74BA19F3AFCC178FF806B504D8C6807C21360D0C3F7742F47CBC2939FB1027D1
41234E6CA6A30546260103133D05A38DBE1AED26025FB7B374414B09CB3CD37A
ADC8016379D0149D298C63AC26EEF70CFE84B3BFFA10EA4B6F44510622A27EBF
A924A3825656F694588DD4594813321299FF62F4B6004A6F2F81BA6E4B03157A
F42FDB1AE66C6126A89C9BEFCD87DB55D57119F2697BD6268A10D5D070441361
091F0E4F77DF43E8992938B2856305810D0B15A23094592C93C83A43D31B156D
033288CB1550B0A914216C8E87B74AE37DFCA1C1CBFB01A6E6ADD882EBF057FD
B0A9F5AA1B40A15D5C060674CFB63367F95F994299965081C7516FBE690A6781
D6342489D3D1F1EB2FBA7391581255CA9B40078FACF161EC3644B29D7CB00456
0D793BF8DA2FA5D8FE690732A4392B6BDB95C753030083F70A66D8989A6B011E
36BB3E0C813EAF27D51349DEFC718440F8A6F503B161571E30075AEEE8CFB6C0
3A599A7B63D5DEC224E4C2F2F0A6CC1F5B21C1A2C2FCA36D344716585ACD6B14
B8389AE0B113DD14501387AE3067716612AB67A2EBE40BC6A91F21C6772E261E
32D82EBEACACC718F5905E864DD54CA062EA1FF40F1F6911750F761F9907A438
DDF4506C6ADBAE868F831FF2A479D744042B565746C26E8B4F0E4D96EB98A14E
DBECDC7CB30AEAFDDFC357BCA4BF0C54DEDA2F6264B06F6F2E53260FA35D9EBB
8914E84E556150729E66DD864EEE5264DC757925CD28890135CE3CF4B7E3F33A
46027CD3C7F0D2F215445E88F7F5C7C09EEC020E54A1F39308EABE2BA1831D6B
3037966A10E375519906118EF9D75F6143CD39B10742FC1C6988F963BB0D7C91
3C5AB05E8304A43319C58B569F751361768EF81F3F563741DF251006BF7EBE75
3A7F2B82FF750829F544FD121CD97988D7002598288EA2C13DBD984020186794
5620B04790905077BBC7B59C5C42CAB2E88D2B4C9B43B91F8C3F67B176705295
DBA064950DC5A7D84F8F77AFC2022271FE6205D65C1785F299C80FDAFECA32B2
C5FCB31171EC43361229041CF01112306DD572D505DC64C6AE6FBCFBD9E90729
91925BCF4F176C207AED523F126651F8DFC7E4708E5CBE9A74A953D0596EA99B
3403EB1C82E98B2A6B198134DFA827D691952DDF039859CDB77F637F99D3B9B1
D048506314462516662F031BEB2450A75AD01DA8E2D9597210796704C9659A6F
1EE109A8916B58CC629B1C66F534374E0BC5E9A397A914EA1ACE4E1D5FFC31FA
BF0A301EC9F7A07D19850BC8F5C4E0AD8139DF9D7BC7F956961AFC377DB1F295
AFC151D0FC54A5030FABBC6AC37FD78E66E03D35D2F8F8F9EEF677EEEE35F621
B4C5C9BF69174A5B2DB50B88CCE89698DFF53B34656B8D18A31435527CB9F93A
09133D3DD02AED767E11D1311B45DE535DF950BCE1F9E731B65CE2E41B44F489
97980F28D55A6A0DFA7062C82B9F8E85D68E16B5AE0ACCDE659529528D01FBDE
FF34286304838501EA357517A476FA846029C063FE09515738F5DE12DC7E3E65
DD743339949D7172A22EFAFEDACCB5E10D80157C36916433607508A3D71296ED
E54CDD8A7B0BCDFB5393EC2C2FF189B3CE6FC1470EB207D088EE8EED33A69085
6894316E56A74DE14A8E4EC95F9B6CC8A33BC9B4E6462FEA63BD490E1C4ECA67
A1A434BF1BD6181A2E7D9D83E40D9E5AF718C5BDE7ADC2866D5CE1B8ECB5062C
9CBBC2B58D97BFFDD874F551F1C0459F35D52EC920FAC9FFA982C3A62779F076
F1EE9F81371ACB6DDF3F44A06034B23A2CE125FA522406DAEAF4B893791EB006
5BA031A86F453614E064378F1E912397E6D80A38C124991BA1369E14055849F9
C14DF33E7E3631228390874B12E020C9DECF71C7CB5B1C295DE9C0DE569495DD
F22671365FFD357CDAC1DB2BD7A3962E8472913812F547EF8F61627487113ED4
682C5B84F61C5C8986923C6F516FE1C1EE5A64B3ED6EC586613C178C66855882
4D8C76BF1EB64EE46C97533DE11E91479A5BE300B6940BA43C574AEF8261BB77
AFE3ACF7B408B240A99FBA99942BD85ACE06759225C897F2C17A3BFE94D69F95
41EBF6CF28BDFE884BC2BBC77DDC7AF6798C8186358CF75D26440AB136C44AC7
9DC927A417622B6A3693799DC0A0C53FBFEEA91DF3D3DA8230E2592E80AD86C3
AE3AD590A9A729E9B5E4082E994BAA7B0FE1617A1BB85C094FE50719E10D2EC8
6CBD14149284C25918D9AB70A92E3E6AD7DDC98C93D84FC119B80CE39EE1A37B
0C29298E83C654D2FEC1DE1BBA8FD5D7849B502507E68B813E3380A25E591E05
31A442061A15ADFED405AB62116926FBA26021B4BCEEEEF28D0AC8ADC2206AB3
06A3010681C7716D062190A33EF4DFBD30E8B5E989BDAB5A46EE3EEF669AC3C5
45E28FAFFC34599DA4D4B99F3C3409D5DF8A393EF1BE92A51F20BAEBD1F1DF2F
978D186373488719E87A98077963B5017C7EBB3D29226084B9ABE03EF7B5DA52
E5F82603E21287761A738634A25D56C898E1E40F8AC61614F4A9915064E7EE69
353131437822B20B5E3967334B850047DD1E00689644E9A9D6E22330BF572FF8
7B0245370FED9E0F297D698CCA8215BA271A098F840FEEED7986DB5424750CEA
579D039411C1E91001090A4A7DDAFA92CE0AE4FA23E512640BD887EB65D2F4C5
B17E2DDDEAEE27653324215D2855B6955770F81C522441AA6FC4E6F91BA5DA79
D7AB6BB91A0A6D6FB96ED1A9AC8C22E4423EA18E2FC03785050C5449D652A4BB
7AC68A26630B34A8F2EEEA4C05990EB23142620576551DC347BCB101AC6FD69D
9EE7E7E6B3126A318F15B21ECD20D872D14C7C4ECCF6A1D4CA22B9ABA26B04BD
6B9F73EAB95C0B8129D43DE91F9D0922CBE43CB5782E34609B04176ACC979388
ACC23ADF1096031DF2400A054E10E28F8BAAAC9FC91E5097DC42725032D28401
9B550A9D973EBB62EC191C6394E2B08F89DA8AE3BD1DF642F5BE16817ECF497D
DBD1C3AE49BB71AD967C4B8437C7A2469DD5449B4EE099A430611F6DB138790B
1B834EA59D047307444395130F667F0D285167231B9F444D42F17CB182EE5841
17FC828951AE1C3FC87971E62DE87DD4061944C363CA1385BD20B73EC76F0B83
1BEEBFC973CFE32377259D400B4B565B3B58DC33153C408ED9FDB7A1BAFF2F16
02E398D58EC6C0E8E27CF34B972AD10DFD269E762E83D1FAF55AA924A4030420
6107EB7B31F81CF520D914DC85F3CE53139390146E54CAA517F16616B76C982C
7CA2079B1EEE75A317120C6332AF71DBDA671CCA4D18A3791C35DA5736029B67
E4E6FD00D9FCC732A3C57440E6063BBFEBA34626866DC862799B0D5ABAA5F7CF
041C903E0682BC980DD485C73C8853F25F8E1228EC06BE5210688FB191C1A988
BB23D9469FB1332B89756310E1BF93DC9C3BE7CA3EF2965992A703E710B894A9
8E7F134CF0782542CDA82D6F342E2432CD9E3232BB8A786F623182A4BF320056
3851DC8989473A26D842EBDE5DE2F464B56CB6941E4E3CE42D2C421069F634F3
2BAD0DA60FDCC184B25D2D9D83A1E3CF9662BBA0C0307B40619ABE9D2E006611
058B21FC10C171905FE96BCDE9A6CC520FF3C45B8C3C4232C85633F075EB0109
939ACB8BCCD7C3B72F0A4EBF904E6C116D038CDAFB865DFBD8391D4D21D497B0
4B0C2D311C4853221D19D368C7CF287C40D408F61709218C74B6CB0410471E9A
AA0CA9BE393066E53F4D3D398CF2D1B66ABABD172D431CE4264F0E86CACB925A
D48969CBD9321F6E3BF88A33B6285FBBDCC4A2B97B4CB744C0479E67717F1992
4BB9615DBB6786777E0AFDEB7939124A0B3F8E87CC79FC3904867B8E1D17A016
3939E597129A46A6E63BE497346D2AB546AABF65964B9490CA5D379F973BD6FD
B5754FDF1939047BA17196AC0A3CADA0BB59C89BE75DC0AF251045D2C2578552
1389F81AA217AF7E46D995D855212ED8DC2A221EAD55F7843194D6142BFE7EFB
D776394448EBC705A327F6E691A6097E0FCB115B22A2CA78BC19320D4BAB31F3
E4C725AD04D3ADE2D12DE3C37B553DDD77A465438E10130D401F7EADC8C44A29
7EFA14F96D5B23516457AFBFAB33B88A3BB336E66A207159E1B3563851B0999F
831AC2A8D8E68DA4D3ABE0CD668B20C687D77FF83CFBEE07A48EFA2055C5B382
64BCEB22E0A2611092669DA46C51F1EFB3D0BE62047345D5347B83160A2317B5
FE9C24E82C010E29EA450CA2E00F1358D9BA3EFD76D3B37DAFA35E7E2386C576
A4973E46A414FAC0682BD3B6F99436F5256A767C7FAC8A7C6199496B6E3E5BED
DCADD69587924B4F8FC4A3C9DDB0206F53C02E7DBE8F472367961A042D8174A1
25E1A268857C7C013561FC27D37D7AB5BF82C21AC331B8FFF79916D5A918EC69
042B74C2856C1D626C4D91F956CCACDDD8F6ABAE569E6AB17E835FD18324A036
5C8C9F028DC07BD30837DBB93AA991017EDD75D4174A580108AC6D81F75AF6FF
FF2969F9CBA40AAC5A77E660864096F3C7F54DE88F3BE654F3E49EFB5AEF7698
549620363803B0C93BAA6B4A6EDF40800D744706A1CE4177B0015D485A3CC554
46C23ACE21163DA100C5732FFF6F8BD0DDDA243CEC5C9E42FC7041F23A4B9807
E18A39957186BB316592596279152991FECEA5E2501112862B864821335B6433
07F2A30CBFA78FD40AD751A10D703B50CD04C95D956153F08ACFDDADC5703A7A
9C5E81F88D53D45EE70C3E1B9552FF525D72AE55B836572FA07F02B356008BCC
8B778E65A5FF0A92A1AFE529F0A422244EE3EACA4308798831703580C97C7E73
ACD917E6B710407106209988703E2E8C72EC749477F79483088E0697E4443978
7DB52876BA12764A5CA6C1BC38E95F49E934C96935535196CA29FA8414C366B4
EE5E6B7FD1A1FCA2C0F6A3E51278563319D2F27C852C97CEE163C48599331499
1D4E4B97F0E586EF8C623A9F8C1413296787B0CD57A4D1952E4823AC7FBE4ADA
853E7C342D57D2CE02D82DE94702037454E1E4E1DA55D4886AE1940F0A510ABC
495FA51A99D8FAFF510DEA6F46D918929C3E3C0CA6784C197E71F69392B0AAE6
789D7EFE573FAAB4FD1707B988DCEFA36A3E21CEC5131EB7CC4B7B4DA9DC3326
2B44B64B1E8219EB33C30189120B69754E4592D8948F5AC74D5D2A885014CF67
7DC43AF73D60AE2227C86360DF3B3C7434978924D31348F237C341A4F79ACB73
90457611CB853458CD4C4FB87316BC32E853BFB0A8A138FEA76884FD016C9517
B9BB56429183650BCBE9134D949FD6C15CB0B2D331AECF846278A0BFC4B2D917
A32FF0E1ED9254513D209DA379DE6A289E0DAF89AF6ED79605B39FE7CEB75757
C0DC9B490150023E50228CF39F95CCD060539FCD786237019A888CC70E28B745
4801654FBCB8B4E4BC7B09ED994F9FB70010B21F6D58CA63D8C22033CE401D7C
2975D03287D74DD105A423D9B450F72268A9550C80C886B4F767E8031C23C396
C2B5018680D513F354C3C7CBCC12146DFE7D2E483155791EA4C6847D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (paper.dvi)
@start /Fa 167[62 88[{}1 74.7198 /MSAM10 rf /Fb 244[45
11[{}1 66.4176 /CMMI8 rf /Fc 212[60 43[{}1 74.7198 /CMR9
rf /Fd 240[38 12[60 1[60{}3 74.7198 /CMSY9 rf /Fe 252[35
2[55{}2 66.4176 /CMSY8 rf /Ff 206[30 49[{ T1Encoding ReEncodeFont }1
49.8132 /SFRM0600 rf /Fg 233[46 10[49 11[{}2 74.7198
/CMMI9 rf /Fh 138[37 26 1[26 2[33 37 55 3[19 37 1[21
30 2[37 11[49 3[48 4[60 19[33 33 33 33 33 33 33 33 33
33 48[{ T1Encoding ReEncodeFont }24 58.1154 /SFRM0700
rf /Fi 134[33 33 1[33 37 21 29 29 1[37 37 37 54 21 2[21
37 37 1[33 37 33 37 37 1[37 1[29 1[29 2[46 1[46 1[42
37 46 54 46 2[62 42 50 5[46 1[50 1[46 2[50 1[50 25 11[21
19 25 3[25 25 36[37 3[{ TeXBase1Encoding ReEncodeFont }45
74.7198 /NimbusRomNo9L-ReguItal rf /Fj 134[41 41 61 41
46 25 36 36 1[46 46 46 66 25 41 1[25 46 46 25 41 46 41
46 46 10[56 1[51 46 56 1[56 66 1[76 51 6[56 66 61 56
13[46 46 46 46 2[23 30 23 44[{ TeXBase1Encoding ReEncodeFont }42
91.3242 /NimbusRomNo9L-ReguItal rf /Fk 133[33 37 37 54
37 42 25 29 33 42 42 37 42 62 21 42 1[21 42 37 25 33
42 33 42 37 10[54 1[50 42 54 2[58 1[71 50 2[29 3[50 54
54 50 7[25 11[19 25 42[42 2[{ TeXBase1Encoding ReEncodeFont }41
74.7198 /NimbusRomNo9L-Medi rf /Fl 130[35 1[35 31 37
37 51 37 39 27 28 27 37 39 35 39 59 20 37 22 20 39 35
22 31 39 31 39 35 1[55 1[20 1[20 43 53 53 1[53 53 51
39 52 1[48 55 53 65 44 55 1[25 53 55 46 48 54 51 50 53
2[55 55 1[20 20 1[35 35 1[35 35 35 35 35 35 35 20 1[20
2[27 27 1[55 1[35 1[35 4[39 29[{ T1Encoding ReEncodeFont }75
66.4176 /SFRM0800 rf /Fm 242[66 13[{}1 58.1154 /CMSY7
rf /Fn 105[33 32[33 18 26 26 2[33 5[18 33 33 1[29 1[29
33 12[48 37 33 2[41 48 1[55 6[41 41 3[41 9[33 33 3[33
33 33 3[17 4[22 39[{ TeXBase1Encoding ReEncodeFont }28
66.4176 /NimbusRomNo9L-ReguItal rf /Fo 134[29 1[42 29
29 16 23 19 29 29 29 29 45 16 29 1[16 29 29 19 26 29
26 29 26 12[36 32 39 1[32 42 42 52 3[19 4[42 39 39 42
54 5[16 1[29 29 29 29 29 29 29 29 29 16 15 19 15 7[29
33[32 2[{ TeXBase1Encoding ReEncodeFont }52 58.1154 /NimbusRomNo9L-Regu
rf /Fp 9[38 16[38 49[30 18[38 33[47 3[34 41 41 55 41
43 30 30 30 41 43 38 43 64 21 41 23 21 43 38 23 34 43
34 43 38 1[60 1[21 1[21 47 58 58 79 58 58 55 43 57 1[52
60 58 70 48 60 39 28 58 60 50 52 59 55 54 58 5[21 21
38 38 38 38 38 38 38 38 38 38 38 21 26 21 60 1[30 30
21 60 64 1[64 4[64 43 43 45 5[38 3[26 26 16[{ T1Encoding ReEncodeFont }
89 74.7198 /SFRM0900 rf /Fq 133[44 50 1[72 50 55 33 39
44 1[55 50 55 83 28 55 1[28 55 50 33 44 55 44 55 50 8[72
100 72 72 66 55 72 1[61 78 72 94 66 78 1[39 1[78 61 66
72 72 66 72 8[50 50 50 50 50 50 50 50 2[25 33 42[55 2[{
 TeXBase1Encoding ReEncodeFont }55 99.6264 /NimbusRomNo9L-Medi
rf /Fr 134[83 2[83 91 50 1[58 1[91 91 91 133 42 2[42
91 1[50 83 91 83 91 83 10[100 8[124 91 6[100 2[108 66[{
 TeXBase1Encoding ReEncodeFont }23 149.44 /NimbusSanL-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 598 111 a Fr(Bluetooth)42 b(Loader)h(f)m(or)f
(mrub)m(y)g(Bytecode)524 277 y(in)g(Multiple)f(Vir)s(tual)f(Mac)o(hine)
i(En)-6 b(vir)m(onment)-152 1202 y Fq(ABSTRA)h(CT)-152
1322 y Fp(Recen)n(tly)f(,)21 b(the)g(pro)r(ductivit)n(y)e(of)j(em)n(b)r
(edded)e(systems)h(has)g(b)r(ecome)-152 1409 y(problematic)f(due)e(to)g
(their)h(increasing)h(complexit)n(y)e(and)g(scale.)33
b(T)-6 b(o)-152 1496 y(impro)n(v)n(e)24 b(the)g(pro)r(ductivit)n(y)-6
b(,)24 b(the)g(mrub)n(y)f(on)h(TOPPERS)h(em)n(b)r(ed-)-152
1583 y(ded)k(comp)r(onen)n(t)g(system)g(\(TECS\))g(framew)n(ork,)j
(whic)n(h)d(emplo)n(ys)-152 1671 y(mrub)n(y)39 b(\(i.e.,)45
b(ligh)n(t)n(w)n(eigh)n(t)c(Rub)n(y\))d(and)h(supp)r(orts)h(comp)r
(onen)n(t-)-152 1758 y(based)18 b(dev)n(elopmen)n(t,)g(has)f(b)r(een)g
(prop)r(osed.)32 b(In)16 b(the)h(curren)n(t)g(mrub)n(y)-152
1845 y(on)37 b(TECS)h(framew)n(ork,)j(mrub)n(y)35 b(programs)j(m)n(ust)
f(b)r(e)f(compiled)-152 1932 y(and)i(link)n(ed)f(ev)n(ery)h(time)g
(they)f(are)h(mo)r(di\034ed,)k(b)r(ecause)c(mrub)n(y)-152
2019 y(b)n(yteco)r(de)24 b(are)h(incorp)r(orated)g(in)g(the)f
(platform.)35 b(Moreo)n(v)n(er,)26 b(while)-152 2107
y(the)33 b(framew)n(ork)i(supp)r(orts)f(m)n(ultiple)f(virtual)h(mac)n
(hines)g(\(VMs\),)-152 2194 y(dev)n(elop)r(ers)28 b(m)n(ust)f(b)r(e)h
(familiar)i(with)d(the)h(functions)g(of)g(real-time)-152
2281 y(op)r(erating)21 b(systems)e(to)h(e\033ectiv)n(ely)f(execute)g(m)
n(ultiple)g(mrub)n(y)f(pro-)-152 2368 y(grams)28 b(concurren)n(tly)e
(or)h(in)g(parallel.)39 b(T)-6 b(o)27 b(impro)n(v)n(e)g(dev)n(elopmen)n
(t)-152 2455 y(e\036ciency)-6 b(,)36 b(w)n(e)d(prop)r(ose)i(a)e(Blueto)
r(oth)i(loader)f(for)g(mrub)n(y)e(b)n(yte-)-152 2542
y(co)r(de)h(as)f(an)g(extension)g(of)g(mrub)n(y)f(on)h(TECS.)h(The)f
(loader)g(exe-)-152 2630 y(cutes)19 b(t)n(w)n(o)g(mrub)n(y)e(b)n(yteco)
r(des,)j(i.e.,)h(the)d(mrub)n(y)g(application)h(b)n(yte-)-152
2717 y(co)r(de)32 b(and)f(mrub)n(y)e(library)j(b)n(yteco)r(de.)50
b(The)31 b(mrub)n(y)f(application)-152 2804 y(b)n(yteco)r(de)i(is)g(mo)
r(di\034ed)g(frequen)n(tly)f(and)h(sen)n(t)f(from)i(a)f(host)g(to)g(a)
-152 2891 y(target)39 b(device)e(b)n(y)g(the)g(dev)n(elop)r(ers,)k
(while)e(the)e(mrub)n(y)g(library)-152 2978 y(b)n(yteco)r(de)24
b(is)g(mo)r(di\034ed)g(infrequen)n(tly)f(and)h(preserv)n(ed)g(b)r
(eforehand)-152 3065 y(on)31 b(a)g(storage/R)n(OM)h(device)e(during)g
(the)g(\034rst)h(compilation.)50 b(In)-152 3153 y(addition,)38
b(m)n(ultiple)d(mrub)n(y)f(programs)i(can)g(run)e(co)r(op)r(erativ)n
(ely)-152 3240 y(in)25 b(the)f(prop)r(osed)i(framew)n(ork.)35
b(Compared)25 b(to)g(mrub)n(y)f(on)h(TECS,)-152 3327
y(the)g(Rite)-6 b(VM)24 b(sc)n(heduler)h(simpli\034es)h(m)n
(ultitasking.)35 b(Sync)n(hroniza-)-152 3414 y(tion)28
b(of)f(initializing)i(m)n(ultiple)f(tasks)f(is)g(also)i(implemen)n(ted)
e(using)-152 3501 y(an)f(Ev)n(en)n(t\035ag.)34 b(Exp)r(erimen)n(tal)25
b(results)h(demonstrate)g(the)f(adv)l(an-)-152 3588 y(tages)i(of)f(the)
g(prop)r(osed)g(framew)n(ork.)-152 3813 y Fq(K)n(eyw)o(ords)-152
3933 y Fp(em)n(b)r(edded)39 b(soft)n(w)n(are;)48 b(scripting)40
b(language;)48 b(comp)r(onen)n(t-based)-152 4020 y(dev)n(elopmen)n(t)
-152 4245 y Fq(1.)100 b(INTR)m(ODUCTION)-77 4353 y Fp(Curren)n(tly)-6
b(,)22 b(em)n(b)r(edded)f(systems,)j(e.g.,)g(In)n(ternet)d(of)h(Things)
h(ap-)-152 4440 y(plications,)31 b(m)n(ust)d(demonstrate)h(high)f
(qualit)n(y)g(and)g(high)g(p)r(erfor-)-152 4527 y(mance.)68
b(This)38 b(requiremen)n(t)e(has)h(led)g(to)g(an)f(increase)i(in)f
(their)-152 4723 y Fo(Permission)20 b(to)f(mak)o(e)g(digital)h(or)g
(hard)f(copies)f(of)i(all)f(or)h(part)f(of)h(this)f(w)o(ork)h(for)f
(personal)g(or)-152 4790 y(classroom)d(use)g(is)g(granted)g(without)h
(fee)f(pro)o(vided)h(that)f(copies)f(are)i(not)f(made)g(or)g(distrib)o
(uted)-152 4856 y(for)j(pro\002t)h(or)f(commercial)f(adv)o(antage)g
(and)g(that)h(copies)f(bear)g(this)g(notice)h(and)f(the)g(full)i(cita-)
-152 4923 y(tion)e(on)f(the)g(\002rst)g(page.)25 b(Cop)o(yrights)18
b(for)g(components)f(of)g(this)g(w)o(ork)h(o)o(wned)f(by)g(others)g
(than)-152 4989 y(A)n(CM)c(must)g(be)g(honored.)18 b(Abstracting)13
b(with)h(credit)f(is)g(permitted.)18 b(T)-5 b(o)13 b(cop)o(y)h
(otherwise,)f(or)g(re-)-152 5055 y(publish,)j(to)f(post)g(on)h(serv)o
(ers)f(or)g(to)h(redistrib)o(ute)g(to)f(lists,)g(requires)h(prior)g
(speci\002c)f(permission)-152 5122 y(and)t(/or)g(a)g(fee.)i(Request)d
(permissions)g(from)i(permissions@acm.or)o(g.)-135 5213
y Fn(EMSOFT)g('16)h(October)h(2\2267,)f(2016,)g(Pittsb)o(ur)n(gh,)g
(USA)-131 5303 y Fo(c)-152 5305 y Fm(\015)e Fo(2016)g(A)n(CM.)e(ISBN)i
(123-4567-24-567/08/06.)9 b(.)g(.)g($15.00)-152 5396
y(DOI:)15 b Fl(10.475/123_4)2040 1202 y Fp(complexit)n(y)24
b(and)g(scale;)i(moreo)n(v)n(er,)f(these)f(systems)h(need)f(to)g(ha)n
(v)n(e)2040 1289 y(lo)n(w)j(pro)r(duction)e(costs)i(and)e(short)h(dev)n
(elopmen)n(t)f(cycles.)2115 1376 y(Complex)33 b(and)f(large-scale)i
(soft)n(w)n(are)g(systems)f(can)f(b)r(e)g(dev)n(el-)2040
1463 y(op)r(ed)f(e\036cien)n(tly)g(b)n(y)e(using)i(comp)r(onen)n
(t-based)g(tec)n(hniques)f([17],)2040 1550 y([16].)78
b(Comp)r(onen)n(t-Based)40 b(Dev)n(elopmen)n(t)f(\(CBD\))h(is)g(a)g
(design)2040 1637 y(tec)n(hnique)34 b(that)h(can)g(b)r(e)g(applied)g
(to)h(reusable)g(soft)n(w)n(are)g(dev)n(el-)2040 1725
y(opmen)n(t.)h(V)-6 b(eri\034cation)26 b(of)h(comp)r(onen)n(t-based)f
(systems)h(has)g(b)r(een)2040 1812 y(extensiv)n(ely)i(researc)n(hed)i
([19],)h([15].)49 b(Individual)29 b(comp)r(onen)n(t)h(di-)2040
1899 y(agrams)e(enable)f(the)g(visualization)h(of)g(an)f(en)n(tire)g
(system.)38 b(In)26 b(ad-)2040 1986 y(dition,)f(comp)r(onen)n(t-based)e
(systems)g(are)h(\035exible)g(with)f(regard)h(to)2040
2073 y(extensibilit)n(y)e(and)f(sp)r(eci\034cation)i(c)n(hanges.)34
b(The)22 b(TOPPERS)g(em-)2040 2160 y(b)r(edded)d(comp)r(onen)n(t)g
(system)g(\(TECS\))h([13],)j(A)n(UTOSAR)17 b([1],)22
b(and)2040 2248 y(Sa)n(v)n(eCCM)g([22])i(are)e(t)n(ypical)g(CBD)g(to)r
(ols)h(for)f(em)n(b)r(edded)f(systems.)2115 2335 y(In)c(addition,)j
(scripting)e(languages,)j(suc)n(h)d(as)g(Rub)n(y)-6 b(,)17
b(Ja)n(v)l(aScript,)2040 2422 y(P)n(erl,)23 b(Python,)f(and)g(Lua,)g
(o\033er)g(e\036cien)n(t)g(approac)n(hes)g(to)g(soft)n(w)n(are)2040
2509 y(dev)n(elopmen)n(t.)42 b(Curren)n(tly)-6 b(,)28
b(most)h(soft)n(w)n(are)h(are)f(programmed)g(in)2040
2596 y(C)34 b(language.)61 b(Ho)n(w)n(ev)n(er,)36 b(dev)n(elopmen)n(t)d
(in)h(C)g(language)h(results)2040 2684 y(in)24 b(large)h(co)r(de)g
(size,)g(incurs)g(high)f(costs,)h(and)f(requires)g(signi\034can)n(t)
2040 2771 y(dev)n(elopmen)n(t)38 b(time.)73 b(In)38 b(con)n(trast,)k
(the)c(use)g(of)i(scripting)f(lan-)2040 2858 y(guages)33
b(impro)n(v)n(es)e(the)h(e\036ciency)f(of)h(soft)n(w)n(are)i
(engineering)e(and)2040 2945 y(can)c(shorten)f(the)g(dev)n(elopmen)n(t)
f(p)r(erio)r(d)i(b)r(ecause)g(it)f(is)h(relativ)n(ely)2040
3032 y(easy)e(to)g(reuse)g(scripts.)2115 3119 y(F)-6
b(or)32 b(em)n(b)r(edded)f(systems,)j(real-time)e(prop)r(erties,)j(suc)
n(h)c(as)i(es-)2040 3207 y(timation)d(of)h(w)n(orst-case)g(execution)e
(time,)i(are)g(v)n(ery)d(imp)r(ortan)n(t.)2040 3294 y(Although)21
b(scripting)h(languages)h(are)f(easy)g(to)g(use)g(and)f(read,)i(their)
2040 3381 y(execution)17 b(requires)h(more)g(time)f(than)g(that)h
(required)e(b)n(y)h(the)g(co)r(des)2040 3468 y(written)22
b(in)f(C.)g(Therefore,)j(applying)d(scripting)h(languages)h(to)e(em-)
2040 3555 y(b)r(edded)k(systems)h(is)g(di\036cult.)2115
3642 y(T)-6 b(o)39 b(address)g(the)f(ab)r(o)n(v)n(e)h(limitation,)k
(\020mrub)n(y)37 b(on)i(TECS,\021)45 b(a)2040 3730 y(comp)r(onen)n
(t-based)37 b(framew)n(ork)h(for)g(running)f(script)g(programs,)2040
3817 y(has)20 b(b)r(een)g(prop)r(osed)g([11].)34 b(This)20
b(framew)n(ork)h(in)n(tegrates)g(t)n(w)n(o)f(tec)n(h-)2040
3904 y(nologies,)45 b(i.e.,)g(mrub)n(y)-6 b(,)42 b(whic)n(h)d(is)h(a)g
(ligh)n(t)n(w)n(eigh)n(t)h(implemen)n(ta-)2040 3991 y(tion)c(of)h(Rub)n
(y)d(for)j(em)n(b)r(edded)e(systems)i([26],)h([5],)i(and)c(TECS,)2040
4078 y(whic)n(h)32 b(is)g(a)f(comp)r(onen)n(t-based)g(framew)n(ork)i
(for)f(em)n(b)r(edded)f(sys-)2040 4165 y(tems)26 b([13],)h([10].)2115
4253 y(Ev)n(en)e(though)h(execution)g(times)g(of)h(mrub)n(y)e(on)h
(TECS)h(are)f(100)2040 4340 y(times)i(faster)h(than)e(those)h(of)g
(mrub)n(y)-6 b(,)27 b(it)g(is)h(not)g(particularly)g(e\036-)2040
4427 y(cien)n(t,)21 b(at)e(presen)n(t,)i(and)e(imp)r(oses)h(a)g(hea)n
(vy)e(burden)g(on)h(dev)n(elop)r(ers.)2040 4514 y(Moreo)n(v)n(er,)34
b(mrub)n(y)c(on)i(TECS)g(only)g(supp)r(orts)f(a)h(storage/R)n(OM)2040
4601 y(device)23 b(for)h(loading)g(mrub)n(y)e(programs.)34
b(Consequen)n(tly)-6 b(,)23 b(if)h(mrub)n(y)2040 4689
y(programs)30 b(are)g(mo)r(di\034ed,)g(a)f(secure)h(digital)g(\(SD\))e
(card)h(m)n(ust)g(b)r(e)2040 4776 y(inserted)j(and)f(remo)n(v)n(ed)g
(rep)r(eatedly)g(or)h(R)n(OM)f(m)n(ust)g(b)r(e)g(rewrit-)2040
4863 y(ten;)44 b(moreo)n(v)n(er,)d(dev)n(elop)r(ers)d(need)g(to)g
(restart)g(real-time)h(op)r(er-)2040 4950 y(ating)33
b(systems)f(\(R)-6 b(TOSs\))32 b(on)g(the)g(target)g(device.)55
b(In)31 b(addition,)2040 5037 y(although)24 b(mrub)n(y)f(on)h(TECS)h
(can)g(supp)r(ort)e(m)n(ultiple)h(virtual)h(ma-)2040
5124 y(c)n(hines)36 b(\(m)n(ulti-VMs\),)i(executing)d(m)n(ultiple)g
(tasks)h(requires)g(the)2040 5212 y(dev)n(elop)r(ers)26
b(to)g(call)h(the)e(OS)g(function.)2115 5299 y(This)g(pap)r(er)f(prop)r
(oses)h(an)g(extended)e(framew)n(ork)i(of)h(mrub)n(y)d(on)p
eop end
%%Page: 2 2
TeXDict begin 2 1 bop -152 993 a @beginspecial 0 @llx
0 @lly 756 @urx 426 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/proposed.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: proposed.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:11:32
%%BoundingBox: 0 0 756 426
%%HiResBoundingBox: 0 0 756 425.2800
%%CropBox: 0 0 756 425.2800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T19:28:59+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T19:28:59+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -425.28 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 425.28 li
756 425.28 li
756 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 425.28 mo
756 425.28 li
756 0 li
0 0 li
0 425.28 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
388.56 232.44 mo
345.72 232.44 li
345.72 157.8 li
388.56 157.8 li
388.56 232.44 li
gsave
/1 
[/DeviceCMYK] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 425.28 ]ct
[43.5661 0 0 75.3612 345.357 192.479 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 120 
/H 209 
/M[120 0 0 -209 0 209 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 120 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 120 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 120 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 120 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
VZ6`S38OY<!!+f3f)W2Y!AZOZ!5&:4/MP9H_Z0]o35P[<!!+f3])^4Y!AZO>!8%8P/MO:,huEincFjO^
!9X=a'?%3`TE+B[!u/ea$(1ed!!<k>UBm"_r;Zs'U?q,_NW9+`Rc"5&BoW/r"J"N1C]"0r!!EC_bfX>d
!1Nrm!G^rem+<]S!29Gt!G10Hi6<S3!3#r&!G:?Oj3K%1!3cG-!F3glbdo"P!4Mq/38si&!MK_I!58F6
2V%ca!LX/:!6"p=2V@ug!Lj;5!6bED0uEn5!K./s!7UuL(rcF>!TmFm!8@JS(VBV'!SUGV!9*tZ(V]h-
!Sp\S!9jIa'rq2U!QIa,!:^$j#+FlTliG'ASH/Eb!X=hFqqqLe(7"q'!!!4fiqqa:^(uq5"9sS'bfp%0
!NHj!!!318k5+EGlZ`Gr!!312g\Th0hf8bo!:^&k!!314hYQ76icG4]!42_-!F!P?bQ>t$!Sd[e!!,.6
q!8%3.FeF8!!,%(ptu1q-dD_6!!,(,pu;D"-cZ56!!+jfpricK,JX<2!!%WEliE:R\cCRe!.=Lu!K7/f
!9F1\IeMe&NWcE`li7$*p<3Pe"Jl+i!!+IspZqq=5+VcN!!+CfpYZ)&4-opJ--Z,D!S9H#!!+:Qr65)_
!Q$a]!!31Al1aNEX8iZr!!31;h=oh.UC6r!ScAfmD;b0K!N$:t!2TYs!Fj4GbQ3t9m/X0e!>**AliH9H
joD[e!=u^7huVV-hZ11e!=ud9irS%4fDr\e!=l%%bQ5dSd/_/d!D_eOliFO)b5fce!D;,@huTqh_uS9e
!DD;DirQ=m]`?de!COp%bQ4:D[K,:e!<f:oliH?IY5mee!<etfhuVY-VuZ;e!<f%hirS(4T`Ffe!<\DW
bQ5jTRK39d!A`d2liFj4QN.(?g#2Y`!OWH)!!+e/q;VS;j0oPc!!+UipWNZ7%fQIu!3-#"!L`]K!UEtQ
!3lM)!Km-7!T-r9!4W"0!L*9<!TI26!5AL7!JL3k!R"6d!6"p=,j"de!Po8i!6bED,2)_K!OrTX!7LoK
,M`%R!P/`S!87DR+3+'!!N-@8!8mhWNV;]==Kheg!!%cIhuH]T!:BgeL\Ba.<MBKd!!%?=bQ(>+!;lft
(?"rR!Oi?$!!*hbpYZ(T#aYMl("`<Bro4$`#aYMl'>jLf".f_t!3?/#!U]pfJ+i4/5kk>c!!!&f!!%9;
huGq1!4i.1!U]pfHM6A!4mE$`!!!&f!!$p1bQ'T^!6G3B#%%r1!!*tnpZqpZ"Pj()!!3=-&+9K!(t/0:
!M9MG!7q2P"^DT,!!*qepYu:J"O@))!!3=%%dsAu(;KUf!KdK*!9O7a")I%7!q60j!eC%3!U),O!:9ah
"(p;"!q60j!dXOu!Sf3:!;$6o")$J'!q60j!dj\%!T,H7!;ca!!aWiP!q60j!cIbV!Qc^l!!**r"6&V!
,4>L4+lN+]!KmJe!!NBre_n[qrW)Kh!?fqehuS`:Y5e_,9\ACO+nl!4!!+4opYu:6!NuJ,!CXfK\fU>@
!WX7XpWNYe!NuJ(2q7in!LO&[!!*4_rTsFJ!TP!"!!+purnmg="RlBl"GZ[/!7q2dnc6B(!B&+#irP;G
n,NIlM"fp1g(ruS`;fol\,OSPK*:ZD!<[ZBbQ5Wrj8dF)!@,J[liH99mf3A<i:lR<DVY<B!!+7QrSR_3
548IP.+S(M!,:!agAh6u]D^ajh`pQ0!@ZRoirEi?!9*tZ*iT%]!Q[:i!!+@^pWNVEa8kK*!>MX4liFp1
n,NInSbMIOaTfT^nGiS'U\isM[gV[*!<nb_huURr])_U+!>MF.irQ[un,NImQhTM@_$.1G!rr<6Q2Ac+
V@)em!<n;RbQ4jMZN(%6P3`,6rTjN$mf3ATkkOKFl:&#Z!XakCqVVEg!!)Nh!C#<6huV\$ZN(%6NT0fp
!,;3.p](=ZhtZ44iBspO!XX>!qTJqGnGiXk!'/0rbQ5jKZiC.2G3Jbg!S\ad!!*P;rp9LJ!2Qt%!X*Jt
q;;;#+7K72%'B9^!1U=q!X*N#q;VM)+7K72%'TEc!1s&f\c;d7B$'km!PTQC!!*J!pWNVtoDl]-!E/"Q
liERVn,NJrlhKfIi?Raja8c69f_=;)PQC7R!F"CUhuV@Ok5`g.!DhJEirPGHn,NJoiqVO7fHT5Rec5_@
`V7RWL&pcD!E.,9bQ5R%f`9h.!DhtSliH67n,NJ,bP:E)lZ^bWj8]3Rh=oh.g-+p*!>rWIhuV_Tb5gi.
!DMGGirRt"n,NJ+_t`6micE$<nc/\Yb4j*\`]3Gf!>_m6bQ5n"]`@j.!=Ge!liF9lnGiRkJG8C2a9]6T
!WWS#p>>tK"7Z?l!dXOu!PSiJ!!*G$rT!b7!N6+j!!*.JpYu:i#ds^6$'P#+!LElX!!*.=pWNZ?#IOO4
38jPt!TlcI!;-<m0];`m!Tl_V!!+t-pYZ)+5P5$S!!+_&ptu2,5.(@k2:qT_!Sp$1!!+_(pu;D25ICIl
0Z*S.!QI1i!!+RdqTK&cbf2[9!5SX9"cN*@!NcLp!!*>-pZqmEmJt<.!<e)LhuTVVnGiRpV>&mJNTU;f
!!*4Wp>Z1N"RuHm#H.=V!05t;ec5^RGkT>^Q36XW!="kabQ*1H!8IPT,LQ8P!TZT:!!-<iq!8%2(XiBE
!!+7`pYZ))54AOQ<o<]1!Qc,$!9sOb,0BT>!S]j.!!-0\pu;D!(<$:D!!+.KpWNZW3Ud"L:<WFV!OicW
!;HNq!Gq)rliF-inGiS0cM6`,kutOr"98E&BA`IA!M]ef!!+"Vptu2/<ODf0!GLKQj8%^9V$-;g!?9)S
irS(=[/^7/?H`,f!mHl2nGiS,ZM;WEb"f;D!>E6BliH-4r;cKj!<JAXliF0g[/^4?[J/S[f0/g-qu?`u
Mtc-1UB.b&!>;m9irRjtnGiRjNVDH6V?+()!>)+%bQ5XAnGiRjIeq:fbQ3t0ZiC,'k4e3CW<D_k!Cl;J
liYlb!!'G-!DM8BhuTMSnGiSWh"]e.boui^]`8(-hY6%2UBL)e!CYi?irRIMnGpK-!Cb''bQ3k/nGiSQ
anX'\\fU,:b5_PLZM3\dj$E28!>WcPliHEWirIL-!=>b"huVFmnGiS(^\H^fhcJS5f`2$ZX7tWTg-5$,
!>NEGirS.AeH"M-!=5.gbQ5XAnGiS&Y5$3Ab>6C`p]1<pnGiSdkP+<DW!;bl!0-a>!Mfb;!<3'!!V$-j
9\fC#!M9Pc!!%cJhuT;J`W6#>rW)Qj!DVJGirPhWnGiQEpYu:G!QG->!VZTk!!,O0pWNZ#"n;QmHM>Va
NWI0#!WuR\nGiP!!5A3o!TH*/!!,LMq!8%0*le6^"&prD!!*P9qr%G2!S01!!!,@=ptu1n*6/$\"'%&F
!!*P;pYu>.2?<:J!C>Q:irR:B`rH/B9e5`6!=YdubQ5U9q#L3j!BS6qbQ5-ja8c>D7,OdFnGiSpkkFEE
N</VN!WWbQq!8%G;9/_?!C>5)#Oqcp=5<Q.!JUXG!!*SErS[V3!SpHE!7:cL!CGD0#Oqcp=Prl5!J^^H
!!*SGpu;D5:%859!!E<a_2\`i!!,m;pWNYa!V-3k%BfKM!Qmms!8dbZ.FIME;t0hg'?Bk6!RDhW!!%fK
liEISj8e<B"=M7Jg/%5=!><*?huUe:nGiQ>pYZ(6!SmbC!!F[kj5!Q%!!*_IpYu:p*:X"/K(n:+Ooa,6
oDf"=[EQW]nGiS$XS9p>ZPr?6!-S%[!J:F!!;lft'=[u-!PfNA!!-j!q!8%I@.=3t7-441!Qu8$!!*_8
rnmgc(@_A*ADR%=!T.,O!!,@<ptu1g(!6LW'<qJr"1T*H!:p0kA`3@D!TIDT!!,C@pu;Cm(!6LW&YB!G
!N$S+!;ZZr>KZ`b!R"F3!!,.#pricB'?^@V#aYGU!pb"2nc/\-d.cl-ZjZF)!>EfSliH64b5_PKNr@l;
hf&Yf!!*nUr8@M2!NHOu!!*_Optu2,43IU)#a##F!oe2$nc/\,aS4]qXUF\"!><HJirRsub5_PJK)Nmp
b@UhH!!*hApWNZ-$Mjbu!!*Y;pricY2Tu.&!HIH'liGZfnGiT7lM0]Hj>ul4!WW4gpZqm(bQ%\FCZ#'J
!Qun]!!.,sptu2*2t6kJOo=58huIc@!!31<ir%g;c7/8`!Hd;qirRmonGiQQpYu6pbQ%\F@a"\n!P'NH
!!-cUpricX1@Y>EK_N[jBDMVW!!,aSqWn6O#P%iq*SL2R!K@3P!!-'_q!8$g#kS,N!!,UCqVVC;#P%iq
)p\39!JU^I!!,pOptu1Q#jhWN!!,XGqVqU@#P%iq*7=N@!J^dJ!!,sSpu;CW#j)-N!!,C*qTJto#4_`p
)8,^f!I=h<!!,[5pric.#N#ON!!+V'q<S.D6h(-VReQ.LdNA#[!?BefliGcdfDtXG!@c=ihuVLqnGiQP
pYZ(m*V'12)UA-9!R;t<!<)s!.a\"O!Sfs1!!&8XirR:Cnc/\0dJ2`&cm6m:""(Y(bkoTb`]EVi!/:0k
!O`p;!!*qLpricN+jU,h(;]b3!N?Cr!!,OOpZqlhnc/[kY5%>alW2=3!>W*<huTMXquHHk!CGT9huI'R
!!*+sptu21;U5=D'tO)!!M]to!<)s!6f7Xu!+,3r!<K+nirS.<cN!tZVYA:8OpLUY"$FZKbk]H_<Up+j
!LEN)!R"*^!!3J$lhB`Hk;`#4!=6mDliQO]%.XB!D<pu`!L3]5!!3IqhtQ%0gc"^'!=6L8huTner;cNk
!GLBchuSf<d/X4SSDs;'!T,g+!!*ACpYu:W%/']"!!-fnpu;C9!RUlK#`Qt$bQ5d>nc/[qYP66ASI4of
!aa'oq9/kj!W)lK!!+"mp$;^L#4_`oHM?b,j=0X"!BB39liFp7oDm_J!?'8WhuT&Gnc/Z3pYZ))-h76<
2;.c_!OiX-!9F1]):S9=!L<o[!!%3:irRm^nc/\Jh"]n1\Idm'li7&%^@f\NLB[5K!,D8P!Q?;S!!+dn
pric9%c79W!!.];p?VhA1@bDG-g16j!,M-*!=73MliH)qfDt^I!IN_thuVLanc/\:h"T_,B(>p&#g)l"
!S/[H!!3.KiqDC5gbA:!!@?XtirE`_!!*ALpu;D..*qqpE6J4(qTJu[/+NZ@,09N&!+#-q!=-+/bQ5U,
ci=(bg@jk7m$n7N!!*,+pZqp`#k@rqSbMIN=O7$K):/!6!L*`c!;?Ho!NGhO!Mp(m!!&;YhuH^&!!*tc
p#?(="SMip!!*,$pYu:P#k@rqQhTM?<R:^H(;9Cb!J^gL!!<7jbfon,!L<u]!!%iLbQ(>_!!%-6liH5s
nc/Yoq!8(Ki?.Uj!FY6gli<$k!!$p0huVRZnc/YjpYZ)&*rQ*4!!-<]ptu.,cN!r`p#?)0-Lq-:=81_U
fH0_dr;Zk(iqVO6LX,r#AG+.Ia!1'S!)E:4!Q#fH!!6*Bbk]H_HHuQl&(gL@!KI3P!!*SfpZqldnc/\>
k5"?Fm(3_R!!*SRp##k*!V69l%Ft42!*\pn!@QXshuU(kr;b=I!=mHKirOr:o)Je#fD";*>Ohap-f4XY
!ON:/!8@JS%D)5V!I=e<!!*MFpWNV8nc/\8a8!jZU'pDii;`jip$;_;'(Z)(!M/uO!Mfqk!!*2Nq!8%>
,3T$j!!$I#huV@?o)JdlQ1s2;Rg&B`!<^F<huV@Oi;i<H!+PW]!S7qT!!*+epYu:G"nM]p"3^K"!S8LK
!;6Bm=S9l=_@Q5<!<J#NbQ3_-o)Jdm[eS&I_B./+r;Zj+de2r,?h+0s=SM._i"be_!20)Q!):c>!Xm',
p>>pSnc/YgpYZ)&'_25(R.oM=8^@A;$d/;*rSml_nc/YipYu;+'_25(RePhB9$[J<$F]WO!`B!uoDekb
pWNZT'(Q#&MYG<p6I#Q2F7nl#]E.g.qZ$X5kP+<C<:U"hCA7&pHHlKjD=uffZ2sOs!#>RipYZ$Jnc/Z#
pYZ$nc2[i^p#?(\!V69l(>o#LrSmlTnc/Z$pYu6sc2[iSoumH2!V69l'Zg$m!_E@loDekqpWNVPc2[k`
ht?=90(T&D"g[mh!Lj/d!;c`s2XC/)!N-+I!!*tep##g$o)JdoWV><OP61=U!&FW4ptu1E"T8>L!!*th
p#?$(o)JdoX7tWTPlgOW!Arg2irPeUp&NeH!>`NEbQ''_!!*4kpWNYm!qQBm0$F%6!K[HQ!9!nY"-<-A
!/U1G!-.c"!SRtR!!*>cq!8%('BfG[!!*1Wp##h$nc/Z*pYZ(u$hF?!#MAh0!P]9+!:Kmg",Z^2!/'hB
!,_Jj!R_DJ!!*>Zpu;Cl'&!?Z!!*.JoumDZnc/Z!pWNZO$M+5u#0$A]!Nm!_!;lft0]r)q!SIkP!!+V8
pZql<nc/Zsq!8%D,gHAj0&-*X!R;)E!!+P*pYZ$-nc/Zjptu2-,0g/h0&HHbrSmq*$hF?!.cL-^!&X6H
!3Z+W!T#'H!!+Rip<3TM$39\u!@Gt`bQ'9d!!&PabQ5a+c2[kLWV5ZZl;m]\qZ$X)`qSg"Dt3l.L%jp6
:!N_>#,1bK!T$`G!!!B,]_C=aC%;6(IeVb#8^7;:#,CnP!T?uK!!*JBqr@Y8!,M-*!.ah(!(tN:!="_\
bQ5jYo)JduX7sg>?iU3!!!%*7bQ'uS!!-$ap?VdUo)JdmL\L-9UB:5kqZ$V!pZqm,bl@c?htGt.SFZ^]
!eC%'!Lj/^!!$!mhuIoE!!,pUp>Z.Eo)JdmK(n:+SHAB_!*/mUro4!%bl@c8bP'-[Nq35O!d47]!K@0P
!!#afbQ)DW!71]H(tJ?H!SS4Y!!,FPq!8%6"nM]o/GJK3U^$Sof)Pgfb4a`ocP#gL!C#E9huV(*o)Jb?
pYZ(A"n;TL!!*n\p>Z2%'(Z)(5N;Iu!RCo?!!"PDirP_Tl2]oG!>W-<bQ5Bgo)JeObP99^\chU)!%.Ha
!KI?D!:0[d"IAcJ!U*5K!!*eepZql,o)JdtiqVj@_[YB$o)JdoNqVB3gdq#:!>EcQhuG%o!!*DWptu1`
%+P@S!!*4ap>Z228b2o_'[c[8!$q.9!=@HSirQe$c2[kIK(dCha[5S!!><'>bQ&gX!!*ACpric<$fV-d
"RQ0i8F$0?qWn3Do)JdsYkRJa?h46u"M=Hq!T=gR!!!/h!!,OFp>>q-o)JdsVt]*L>4V^p"L7a[!S%qE
!!!/h!!,OIp>Z.2qZ-El!=5\!irE?U!!*50pu;D-(#f2n"76'h50ETC!.FJ>!WWImpWNV8o)JdnUA2q5
_@tr0!Y(&)mJm8'bP(9'bmF"B!<IiOm/-,LQ1FtV!K[!A!&`d:!Xs_umJm8&_"Q[e_[5r8!<IWChuJc.
!!*+VpYZ$,irB,hL)97X!>WNGirR.+oDemmIeVk&O88kQ!!*+XpYu60irB,gGSTWH!>D[1bQ5!ToDemm
EqdcXJb&jB!IXXc!&"6Nk5YVsS*G>$mf3@iMtZK<j?)r5!)WFV!R1Z:!!$a-li:>c!:Bgi&<u$o!Ug!h
!eg:*!SBC'!!#^ehuU[qo)Jc#pYZ$Sn,W+]";$mXFoh%3!<S#LirRmpo)JbbpYu:n!V69kAbY3b>3Q%b
!!Eddb%^tG!!*.Gp<3QV1\1SH7JG",YlXFr!*]-@!)_hX!YD$i!pnYVmJm8Pl1XHDHh.4<,NSXd!U(Hn
!!#F]liDb?jo>PqR,6cJ'`A%&!!,4<p>>pno)Je7f_FA*g_o\`!($A;!Ib(3!!Nn%iT&B$p&Omg!BoB7
irF8o!!+:upu;D4)=mh.6MKL@If\[3"V-F4be=_Y!!3-Yb4a$ZC@_E+*l[ou!Qc,K!!#+TbQ2_bk5YPp
T'H=A!.+&5!?'/\m/$&L]`ds-!>*-CliHELo)Jb4pZqpZ"m5je&!l)OhuIle!!*qSp>>tX"S;Zp&%MDm
!T-WC!!")7huTGQk5YPoR,S&)!-[c1!>riMirQRkquHNm!=ug;irS.7o)Jb3pYu:J"Qoad%Z/@-bQ)DG
!!*k@p<3Q4"8)Wq!"Pt&bQ5mVo)Jb0pWNZ#"R#ge';XplliGfSmf3@kT_@^QfcThd!<Sbhm/-,LJ+EX@
$eb=A!Q,3,!!3e&hYl@5cP,aI!<ee`huV+EoDemnPkX)9Gk1n9$dSP*!P&L"!!3h*iVhd;dM2-M!<ekb
irRLJoDemnQM9D>HMRX<!!*JSpu;Cf#j;6i&WY$4bQ5Bimf3@jMY>6p],UAB!<S#MbQ)PP!!*G=pric<
#O)3i';k'lli;+p!!$R'liH9?o)Jc*pZqmWo)Jdq\,>UkliH#Rkl:btS_j8%!,_-(!+5HX!Sg-8!!$R(
huK>>!!*;,ptu5($ioPm!YV-aqr7ZomJm5pp>Z227IpKZAbY3bTCW$`#-dm_!S7bU!:^$j&<G!2bQ)/@
!!$'nbQ5dKo)JbppWNVuo)JdqT(pM1_@,o7q#CI/V<[pD!R1o=!!+\1p?Vd(o)JeLlM0]Gc1:o9!gr`K
!$CM,!rrq'hYQ.2_?fT1!@u^ohuIfh!!+n4ptu.io)JdmOS@Z5*pN_,&Y@t\j8J!=`<bo4!A)msirF2m
!!+q8pu;@oo)JdmP5!u:*pN_,&!"g/bQ>$S!:Tsh-c5T$!,1s(!A;OibQ+s?!!*.RpWNUVl2Ui9htcU>
kY1dPpAb4)^\7!oXn)Mn*7XcM!TFX]!!%6;li9<9!!+S!q;;;/8Fcc[!!*S;p>>qHo)Je0anXcpedh9O
!-.bk!'TTI!@udtirS%/mf3G"\)ZNDirGtJ!!+%_pu;D.%eBZ#F8+\p4mE"J-GfN%!Qd[s!!*P*prif`
ba.i#!>r<@bQ5Tjo)Jc'pWNUrl2UhhT_RjRX6orfN:uT=cP-9XpAb4(^%gppjtQB,!*]-`!+5!k!<nkc
huKP?!!%`HhuUe0pAk0m!=cC1huVOao)JbjpYZ$Tl2UhgReYnCV="<`LA'X.`tS(F!tD^!j8.d:h(J:!
!*8jS!*ndh!<nAUbQ*mq!!%<<bQ5$^oDen#U\N%6`[^Q[!)E:4!)i%]!CZ)GliH&pmf3>ep?Vh=2tR(N
!i#JV!U<V]!;HNo5kjUFId$h56/).m!S&Ue!!#jhhuV@boDemnReYeAhG<eE!WW3`pYZ*s!!)<b!CGW<
irRd\mf3>bp>Z2+2=pkL!hB&G!T?lH!!#1VirFB"!:g*j43%*?!Q$,N!!#UabQ5R6oDemnN;1Ttb"2+(
!&sYr!,_6+q#CF&[.rtfG4,D30AuQj!+PO"!.FV.!-n)8!$h7)!h'/lli7(e$ENs[!-%B,!A2jqhuI'S
!!%6;huIfh!!"2:hu]&C!p]ge$Ej?fr8Rcsmf3A?fCn5)?Ln-sGk^4uFRoJ4,5:+!PQCpP!!*CrpribN
!:Tsh.Dkf&!*/Uj!,VDR!,1s(!$:mY!eg[Wl2UiflM9cI^]jQ7pAb40b4b0%Pk+kT>PIIaT^r-a'ArTO
!jVq3l2UiahYH(1[KQ1%rVus6^\6RcNUm,M<qkMPR.C:Y'%H^7!iZ;*l2UibiVDL7\-2:$!u8]5j7qX7
Nq35N=81_TRe$L['%cp=!ilG,l2UiZb5'6^V?HAg!>DX2bQ?#4JF`a@:A;s4MXpfK&Ae.c!h'2nl2Ui)
chZo.iAL*)!<T@rliF[!rW)Zm!B9<=liG*,oDen%anY3(`s)b5!!+"Wq;;;(1@P8E!i,JI!O2_#!<)s!
1uA#c!PAI*!!*PDptu4e"U4/k!?9)TirRdgn,NIjVY9$NZNBb!"#]&tj8.d:^B*s,!=cm?irZt!"mQ'g
(pj%^!Q$JY!!*.dp<3Q2!qZHn0?X(6!NQ7n!!*M2prif@"U4/k!<JAYli;A#!!%H@liG<EoDen9g%an7
g_'Gaq#CF$[.rthg]duJ!!*+Yptu-omf3?3p>>tf'D)8*+jTl@!RVJO!!3-+WqbKRd09g?!!*+[pu;?t
mf3?4p>Z1l'_DA++jp)F!Rq\Q!!*A-rT!h9!n7DYl2UhcIe_+eC@;-&D"c'RYS-R.!?SoKbQ5EfoDems
S+t2.^'4QAkl:`Pjn\6D_$9B/!Dr+VliGfjoDen*_t`R!j"L$)!<f.km/IXo!:Kmg5hYtk!Or=&!!,dN
pYZ(u..dK?'"Req!S8pq!!*4kpYc&^oDnRb!C>N:irQ^pn,NJ`iqMI6dOFeg!><'?irRjcoDempSG2(D
&+'Aq!!,.#q9/l;"n2Km7EbGL!PKfO!!*Y1pricW.J*T@",uuursn8n!Y`cDqWn7</FWW?/`$0f!U)f@
!!*5)q!8%D7.^H[!Kd'Bs!6h/!><3DhuV4Tn,NJ>deDZ#gcb90!<f4nhuVRuoDemmM>,s.,3](.'>sY+
!RrXt!;-<m/CjLT!T-'4!!*5"pu;D36M(6Y!K6^4s!-b.!>2O2bQ5F)o`4mi!@PYVbQ5gEoDemoQMAZ)
a#inn!<IWCbl8dK!!&8ZliHBVn,NJ+c1^K(@IjI!NqhrAl;dEU!.4J,s#fKF!0-g4!T$oI!!*nRqV_>1
!*o*q!/C:,!T$]F!!%09i;Yh$!!&&TirS+@n,NJ*`qJEo>lXlt!!%iMirS+:o)Jc6pZ)97kPtU5q9/l^
:[e>b'sdPW!*&^nqu?_Cpric]9(N#_CA5sP2!=o?;!@`A!1<6U!=$=4li;b2!!.3.q!7uqo)Jc&p[%oX
kPtWWh"fk.ORN5N"h"'^!.OM>!,hVj!oW!Jo)Jc!pYc'HkPtWXhtc:4P4/GP"h43c!.aY@!,qVl!+u00
pAb2&pZ)9LkPtWPana-\KCAjA"f:q:!-@`3!+biJ!*o3trVuq#pWWY-kPtW'ebSP4a:Ib?!2T>T!N?+l
!!$C#li;P,!!#mjm/LSl!:Kmg)Tqm6!PT'5!!&M^huTMPoDekppYZ$ro)JbbpYc'Xo)SIa!?9;ZirQq*
n,NH[p>Z1K!V??l>kd7YHLh+::A<fK?gIdk!!*qHq9/lA%Ia>tNqUZtOob1T!)iR8!,hB.!(Q_,s&S=`
!WfUnqWn7?1@P8DK(eO3_$fl8!(lqO!139W!'L#Bs)[B(!<K1qhuV=\n,NH8p>>t\$hOE!7JG^?O7N>O
3VVJ3D<Ls#!NZ%V!S9%'!;-<lIJ2\%\I8$0!(Q_C!0QjQ!'9l7s).$#!<JYbbQ5O1o`4mi!-%YU!N$4r
!!#7XbQ*7d!!"kMbl;29!!%9>liHETn,NJsm.]iIbS]sP!BBB>li='W!!"SEm/M\#!!%'8huV_7n,NGm
q;D81!PoTE!!+t6ptu.Ho)Jb?pYc'uk5YL(q;VM8<U]tg?2!:\`"rCRp&G+NiV;F5V"4Qd/,/*(IHLS1
B_fjQb>%I+!)rU8!O*=6!;ulu0Zs17!0d!S!%.Has)@`5!s9Z6#kS)t7-==3!/L%D!CZ,FliGW\oDeqD
i9^:+!5nC.!?^Y&m/N7D!!<<F5R?u^!C5B7huJ;s!!,@?pYZ(p+nPa8.b4@Q!T:N[!!++tpu)11p](Bu
+$g2)!!,CAq;VI,n,NJThtQ.3bou]Z!@udsirHai!;HNp*THkSs,HdR!s0H'#P7us3l_!>!-Rc2!BS<r
bQ53poDen=_YD=TWV$5n!!!q\prrbeqZ$g66$Tfhk"kUL!?BegliFHqnGiSCh=p7:h_+O$!@$(hliGN=
oDen0ir8<Am/NdV!!X'!EidL=9Cr2b)UA0:!NH7l!!+\"pYZ)%/G&oC+j0T<!QPB9!!*qfptu.?!1E]a
"qs1BY0YotoDen2dJ;f'XTS(n!A2jrirRa`oDen8c1p<"ap%D;!>sMbj8YVG!!X#pBUu`S7.^H[(qf[g
!Lj/\!!+O`pWNZS..dK?*k;!h!O`1(!!*kQprj&&MZ<_]0kR60jo+NG[f?d.!!*/;q<S.,)"@S,,hVkX
!U)N8!!*q[q!8%7(\@\.("`6I$*^W6!!Y)bS&a4\huTtfqZ-Kn!<Te,huU\2nGiS6c1g,sgc"d)!>iQH
huV+=oDen+bkU*&Vl'Lp"tsGWb1usU!O)q(!!!'#](t@e`>A%E!@,qbirS$qoDen._t`6mckc6R!>NlT
isD]a!!!3Q=H9i0rQG;6$2"9!!iPq>"3euo(%D8)+1h3j!Qd(g!!*h<pricN'_DA+'"[k^#+1c%,0f*4
qWn7J9_8;bQhftKi%b32oDen0de<#-8Ful_%DV])!So*p!!*bWq!84#^`al<e_g5]!T$B>!!&)UhuV@]
pAk'j!>rlNhuH4<!!*M9ptu2$,kM';'#FA$#.Cr`+iW*nqVqV88b;u_Onn#<f.ZXo!#P^Yp>Z-AoDen#
\+ntaeKjbe!><?Gis*$'*ZhT'bPKE`b!P_#!.t$j!Q$>V!!*kDqonu^!'^#T!=Pb!bQ5I%oDen'YkZEF
VPXM#W;#WZ\-M[,!,_Pu!UE2E!!*MPp?Vfc!;-<m"L\$k!TH$0!!*VIq!8.(`rlO;pYZ(U#PA&sB_gQe
ha6i5!=Qa;huHmT!;lft"K_CV!S0(!!!*S>ptu:g]`\J3pYu:Z#PA&sC&-cii^<59!=Zp?irE6S!!*5*
pu;D.2"UbK%_MMr"M_\S"HiH&!M9Sh!!$@$bQ5mLnGiRsYkH9@;"O_g".f;4"3f!,0(],E%B0'G"g"d*
!%m:,liHE,o`,"]k5"?DAFTX#!lXg!!,qH/!4)Cd!TH';!;?Ho&&J&-"jbKp!%Z^shuV^go`,"Zg\Kb-
?h"*s!kS*`!,;$)!3,bO!S0+%!<)s!%_2;ls2>'?!%cn"irS-mo`,"[hYH13@.=3t!kn<f!,M0+!3>nT
!SK@&!!*S@pu;Ou`rH)e`W"*YbQ5m:o`,"Ta8*pZ<q-.j!ikt<!+>Bu!1N],!Q-S_!!*P,prioJZN't-
M"g69K(T*E-fOmf!.s\?!4;Id!/C(F!3,b[!TZ?7!!*M=q!819f)PdQJbS(&I/<p@!!+Crq;;7#n,NHg
p>>q#o)Jcaptu2*3:m1O$aBEa"jG0j!!@lJirFQ$!!";Ff_OP-Idd=;XnLcTJb&jAU\NjMgH"m+!=Z:/
is!cT!!!(DpWNVWo`,":_Y_OYbfk(r!!&M^bQ)bV!!&2WbQ5[=oDen!T_Qb2])D[1)r15T!R1fA!!*Vb
q<S*Sr;cHi!29,Q!0QjQ!2TDV!Tl]?!!*J:q!A%;rVus:dJ2W#_?BQ4!=mKPhuK/<!;c`rRJ,P=MXpfJ
S+tnBg-,'.!=Q(*i;_:*!!+"fpu;Co"SMfr%b(76!1NBW!1W]B!0$LL!1ruG!Sos3!!*J3puDD*rVus8
^A,nQYlsb#!=cd=bQ*Oi!!%rRbl,`cIe*O>Nqgg!`]3Sj!=GFnbl>KX!!*4gpZql>o`,!=q<S-m#4VZn
S+c1MOT5CS!!&hiliH69oDen![.s"fjSf,["HN67!&jKM!64im!O)du!!&5VhuJZ0!;lfsS+tnBgHY<1
!=Gk%i;_I/!!*4apYu63o`,!5q;VL]#4VZnQ1j5<N:R#MT&]Y,!T$*6!!*G/puDD/rVus$K(mIh1%bMH
[/%oHTEaod!/C3k!.OM>!06m!!mJ\GoDemuS+t5-`Vfc;3pHG+!."5;!42Lf!Q,N>!!&M^li<FE!!&D]
liH<Dr;cTm!=,_"m/6nb2r48e!-@f5!35kQ!P&d3!!&5VhuJl1!!&,UhuVV(p&G0p!!f:mi;EWV38jSl
!-Rr7!3H"V!PB!6!!&;XirG86!!&2WirS%/oDemsVZ,WOj8ArY1<TC9!,;*+!1N`-!N?S!!!%cIbQ*:e
!!%ZHbQ5gPoDemrQ1rK&bl%MB%_h`)!3#Pj!1WfN!R2MP!!&>Yli<^M!!&;ZliH<DoDemsXS2#Z!!*P9
ptu.Eo`+uUq;;:j)"@S+NqVB2R.C:XNVME4gdq&;!=,Cni;EWV%CZ,n!or=7o`+uWq;VLp)"@S+OS7]7
Re$LZO8.`9hb!G?!=,Lqj8ArY%&E[B!0R3[q#CDLq9/lE(@_A)K(dCgMXpfJJb[Fia[5V"!="h_bl%MB
!KHm@!S%5F!!*(Xq<S.3+n5O4NV;]=U%86aPPFJFlW!KV!=,_"m/6nb!J^C-!QkH:!!%]Mi;VX8aWU*R
!/C4*!1EEY!0$^2!T-`G!!*>"p>GlL!<IuNirRC*p&G)Iq;VS$+92E5!!%fJirGS?!!&&SirS.:oDems
VY9'K!!*+HpricK!VQKnGkoPa[iP5Dq>^MAp<3Mpo)Jc?pric^8b;u`#*no+qu?_"q!8%H)"mq0I/3+0
h(/!q!0-^=!35Vj!/L=8!*Adm!=,_"m/-h`<;>APhA>kc!-\1r!R`Cd!!%cNi;DL5U@S?bJG7t%;tL%j
#G_"Nqu?^spu;D6(\Rh/GPU8"eLC"g!/L:.!Mf_f!!%WFirE'N!!*>%p>c&N!)<74!Ql/N!!$g1bQ5I)
nGiQ8p<3N#q#L9l!-S%[!))qa!="h_bkqGA/*?Zo!UE#E!!$m3liH9+nGiQBp?Vd^o)JcGpZqlcoDems
XS2#Y!!+M%q;;;24n\jUB_gQegbJ=!!.OY"!2]8e!.aq(rnmcZoDemsU\<XD!!+P)q;VM84n\jUC&-ci
h_O^%!.X_&!2oDg!.st*!*]@%pAb4!VY9'J!!+Ccq9/l_2td4O?MVeGa=Zo^!-7eW!1*3V!-S%[!)`Ij
rVus'Q1iH"!!*q_q<S.J;YC(jBDCfn3:QtKIeN+.Y4DVnL\L-8B(Q'(#H[Xcqu?a6`VJEmhbNkF!+P`]
!&j?I!-e.p!2]8e!.ah%!+GL"!=,Cni;<QU(WZC4!or99p&G)&pu;?4nGiQ7p>Z.No)JcBpYu6_oDems
VY9'J!!*h@q9/l_8,WGa!!$0sbQ'Bf!!$m0bQ*t#!!%09bQ(c;!!*:hp<<F7!>EEHli:Mg!!$[,li9$8
!!%fJli=3[!!%iLli:Aa!!*>+p?_\W!><!=huI'V!!$L*i;VX72XpbIJG.n$V=OZeJbS(&>4_dq#G_"N
qu?a1^%gUf?M4@!A,,'a2Z<^K!!%WEirH"K!!%ZGirE<U!!*>%p>c&N!>):+bQ(Z:!!$0sbQ'Bl!;c`r
FnX#ZQLb(VG5'2\;Y0qi#*no+qu?a+\G5CjF7oS7?L.FR!''KK!0Hp@!2f>f!0[-D!UEbX!!*>+p?_\W
!=Q++huIWf!!-9\q;;62nGiQGqV_>1!1i]]!/pX1!T-cH!!*>"p>GiK!=Z7.irEuj!!-<`q;VH5nGiQI
p>Z4H!!)Zl!0-d6!TI#L!!*>%p>c&N!=GIobQ)/H!!-!@q9/gnnGiQ;p<3Mtp]13l!.O^e!R"+-!!*:h
p<<F7!=#_%li;P/!!-9gq<S)@nGiQYp?VdKo)Jf\m.ouKkY:[L!=,_"m/-ha#,V+Q!-n2;!EJ"PhuG\*
!!&5VhuK#5!!&5Yhu_il8b;u`#G_"Nqu?a%Vtf9PHM.=><oNl7!&j?I!1!9<!1*3V!1!?>!T-NJ!;HNp
#H%4Tqu?a%QMAZ(DY=&2:<NCV!&=!D!/C3k!/C(F!/C9m!Qd\%!!<3$#*no+qu?a+\G5CjFS5\8>3bqM
!''KK!2fJV!0HdP!2]JW!TlfB!!*D4rp9OKs5X"W!=Q++huIZg!!-*Vq;;62nGiQ[p>>q-o)Jc\ptu2-
61b-X$**dY!7q5&qu?a+Z2!>ZDtX/3<oNl7!&j?I!2&uF!/pFK!1ruG!T$08!!*D-puDD.qu?^(!2'&1
!+bd'!D^f5bQ'Bf!!&)RbQ*(_!!&&SbQ5aGoDemtReY,,`;BT9'?C":rp0Vmp&G)'q<S.J3:QtKYP.;_
L%>9EYk[PcjZ`;:!=QC3m/Pr?!!*_Gptu-VrW)`o!+5Q[!T,d)!!&nihuJ5t!!&qlhuVLmoDen"Y5$rT
e,01H'>O>&!+#=!!<?O'irS-snGiQfp>Z.'o)Jcipu;D14S/US$aBEds47)J!>2F.bQ(T8!!$'tbl5fe
b:rGd!13E'!-@`3!1<Q*!QI%i!!*FuprrcRqu?a;f(nY5lV@-R!,MDs"6M?=!:p0j](YIjHh7:="L\$k
!TH'1!!*SEq!A%.qu?a9bPC&shb*SB!+u&b!ST4%!;ZZqZ1d)UFn>Y7"K_CV!S0+"!!*P:pu)1mqu?a:
cM?K$i_/tF!,),f!SoI"!!'A!irF8p!!*5*pu;D.2=pkL%Cc,ms2k0=!>rBCbQ5mSp&G(uq9/lZ/+ET>
U&3(3bQ)DM!!*1mpricV0D#5F%&NaCs0_b)!A`m7liHE3p&G)9q<S.>/+ET>`:iNuErbk5!=6:3liGuq
oDen&_>*Bsc27PB0AQB]!T,d.!!%!6huV=VnGiR#p>>pfq#L<m!=5t*huV=XoDen%\G5"^_YaB70]2]d
!TH!1!!%'8irRa]nGiR&p>Z-joDemtZhWP]f.?Oo!=l^9j8[*r!!+Ulq9/l_0_PJHB)0XO_'\[P!35b:
!+YX$!=,=pbQH)5_'ejT!=bt%bl=sG!!$a.liH;ap&G)Eq<S.9-h76<$d881!,2!)!=cj>liGoirW)Zm
!>EZOm/Os#!!$O(huVUHp&G)?q;;;"-1V$:$c)Jo!+PR#!=ZF3huV7PpAk0m!><3Ci;^=b!!$U*irS$O
p&G)Aq;VM(-1V$:$cD\u!+b^%!=ZL5irR[VoDen)_t`9l]DMX0>0Qfd!QbuJ!!%$7bQ5C$nc/[tYP-0?
>4_dq$`<^C!P]iN!!*Y7prrc:r;Zj$TD@gSm)nu$!0?sB!Rr:`!!+"dp?Vc\oDen)`;&["gE?+g!>E]P
m/O]r!!*4hptu.equHQn!/LC.!QcJT!!*tXp>>pLoDen(](k1acl_l[!><6Di;^(\!!*4jpu;@ko`+uK
q;VM"+S#L5)9V[5!*&Rj!>3$?irRUNoDen)`;&Bm[/Bt*",clt!3Ytp!.4Ue"3euu*V'12(:Nq\!))qa
!=u4*bQ5EtoDen'YkZHBUAY&m'[ZXA!1EK[!2fSY!Qu>Z!;-<m.baX`!U;oA!!*q[q!8%6(\@\.'[ujD
s0DS'!>EKJhuJo4!!&SchuUV0pAk*k!@Z:ghuV[soDen._"cggbnfpO!>EQLi;]eT!!*eTpu;@<o`+ua
q;VLn(\.P,.+7kM!T?36!!*nRpu;D$(A%S-'[-:3s/Z(u!>;d7bQ*=h!!&)UbQ4m^nc/\9^&#tPbQ5jE
oDen,YP?<B\eOc:!>;j9bl=.1!!$0rli:Pg!!'b/liFd-nc/\Nj7hmBh_"m/p&G+;ebJJ3ee%HR!>sbi
m/NdX!!$!mhuI*V!!'D%huU.lnc/\KfD"2(e1C@pr;ZjAb4slqb7F4F!>j;]i;]5D!!$$nirEHZ!!'J'
irQRrnc/\Lg@sV.f.HUp![5hKq;VM$&+fi&(YAHBs-rre!)<43!*8am!2TG7!M^"m!!+jnpWNZS..dK?
*k;$i!mJ1boDen,_YD@TMuE\W$+0Ko!UD!(!!*/Nq<S-c!V-3k9C)?=!Ri1`!!+\1q!8"&quHKl!$Ct%
s,m9\!=>e$huV^Yp&G*panaiqV?-5f!Cu&AhuUn@oDenBebJ&&^\%R.!!"&6i;\]6!!*D.pu;D7,5)!;
!mLK#!N6%i!!,XMpYu:t+7oO6/D0aX!5\7,!$2$uqr@^8rVus)S+t2.b9$?W!<Tb+bQ4%2nc/\VbP03]
[N+o>!@PbZbQ+g;!!!r3bQ*(lIf9<J2X1#'!OW%'!!*toq<S*InGiPup?Vh"'(c/(5POLEYk%hp0_ar6
Jc5WN1Yq!bhuTn]p&G+1e+qo%Nq!)L?2!1W]Fjc9!'L#6!2oDg!&"$(s*FYE!Ara1ir\8D"82]q(tSNC
!0H^N!+,BZ!P]6=!!#1VirH(M!!"YGj8XN+!!+^ppric0!rW,q!!*kNq9/hjnGiPhp<3Q<&+fi%2YYDq
R.C:X.eh-jDf5UU#H@Ia!+Y[%!BB09li;M)!!%H@liF[$oDeklpZqmHo)JbUpZr'&Du]kCU%dIF?M+:!
2;%ibrnmd#nGiQ5p>>tV"S;Zo;YT)LO7N>O4nmk<C2*_K#G_%R!+5C!!B&X-irFB(!;$6kGkU.uZNTn#
!)rXP!0QjQ!'U):"`.uT!!\V\bQ(]:!!+dmq9/hUpAk'j!,VAQ!MKYg!!#XcbQ*7d!!"tPbQM?_!!$!m
liH#]o`,"ll1sZG>O_[nU\=$SV=OZeDYNJtIIdF=;>9D[?XEd5;"rlKeJIlY!DqVJhuHgJ!!&Mbi;MR6
SFZ^\C%pNcGOke79_[HJ>$:n+;>9)Of,+)[!E%eNirE0N!!&S`irYeP!;-<lCA6`gGk1n8:&!ZN>[.7/
8b^F0_A2_D!D1H0bQ(E.!!&#PbQ*[u!;lfs?h_bED"@W,7eb+0;Gn2CchHc,QNQm\!-e8*!TlE5!!*>@
p?Vd:o)JfIm.foIA+K[#@e]3l;,Iu?`V89kNs#%T!-.hm!STI&!!*>7p>>q'o)JcAq;;>4i*Q!T!+#?W
"ADK''Z]t.!KdKW!!%*9irRspnc/[q](Y.aL%>9EKD4C+?i:!!!!$@"iri(N&e_PFbQ3:so`+u)q9/lZ
1@bDG#,h1=!-e#7!-\+\!*8dnrVupupWWY,"']!^l1sZHjY-6+!2]MX!S/Oe!!+1jp?Vcoo)Jcaq!8%E
9_/5aHhZk14ZuhHc/&BWr87V//bB#CSGD(Db9HKW!?T>UhuI?[!!&G^huVV(o)Jc5pYZ393`fD/i;)C6
gb&-u!1s#H!R;q\!!+.ap>Z-bo)Jc[pu;D48b2o^G5(##4$-24]#sim!QHSb!;c`rNqpm"\KCAB!?8K@
bQ(o>!!%rPbQ5dOo)Jc*pWNn#2$!_&<0>2[r9OHI"n_ir#L</3!Q5K=!!,(?pZqqF7.^H[#.+*k!TZ-1
!!*+^pZr/3,ln#i:l;p:r87U6"SD`q#K6Js!oUX!nc/\Kf_=;)h*CT4!=#S!huVIcoDemmM>,p6,9m3i
,#O<6g&0k2N<JnS!=-[@irQh&r;cNk!B/^,irS((oDemrXSCfVgGAI%!<J,Qis6nU!<F65I]LBabQ3.q
o`,!sZMD]FWXSS$r;ZjQ`V7RWau].p!=#"fbQ5[8oDemmIJ:tc+T)3E%QJ=-dcoU<oDenBhYHL=W<)Pi
!a"aTq!8%7.J*T@'>sV3!T,!k!!*;#q!8(I%M&C:#7WP(UrV<?..dK?.+A"M!MKPb!!#smhuhoqc6r5a
!>;s<huV=KoDemqSG;"Dh@0ql!!`rjBr9&2egU.j!@cUqirPnUnc/Yhp>Z2$-iO,?!!*_Fpu;D,*qTF5
"ePML!oXRtqu?s10OC'Rb.o:p!!+C]q9/l&!V-3j9D6R1]Hd.NrVus1WVF[<_&N"H!<nMYbQ>oq%/Bl+
"<U<@"S;Zp;X+#D!.459!.X_/!QYiE!!=Fum-OT8!SRnQ!!*G;q!8(8"pXl'"9]c:<<Vpo!D_JHhuIoi
!!%9;huUP&oDen8cM6;ucO0:E!=H(+hu_1.#5J6%"<L-8"S;Zp:Z2'/!-[l4!.+A!!Pf6<!!+7ipu;D'
$N'o"!!*G4pu;G&"pXl'"9TT0:':+g!Ct<.bQ)DJ!!$p1bQ4gUoDen5]D0SN]a=?3!WWP"prifO"pX5j
!/gU=!U*&E!!*2'p?Vg\!V??m3U6D+!6as6!=m?Pm/62O_Z^5,!!%ZIhuVV$nc/[mU\<UHUB0ue!B/g0
huLRa!!*PFptu1`"98Sf!!%`KirS%+nc/[mVY9$NV#g2g!B9!4irI!g!!*PIpu;Fg"9eT%m/R-1q9/l]
54S[S!gWK'!L*WW!!+jtpri`Ao)Je"YkZEDW<<@r!;-<m#K-B(!S/Ld!!*n[p?Vd1o)JbtpZqmYo)Je)
iV;a@WWN@j!;lft#J'Zg!QuYW!!*kOp>>pso)JbopYZ%Eo)Je(ebJ&(U&tM]!!*>;q;VM$,4Y^7(<#q,
!.=A<!*o9Y!2B&b!>=&[irZ"Y"6]^c#-%IC!mJ1rnc/\)YkH9@Dt<r/;YSB8P4JYS&An4d!g<ZekPtW9
h>-C<^'4H8p&G+PjnJ*BlW3TW!/C77!.XS?!%.I,!gE`fkPtW7deVf%Zip(&r;ZjTg%XD*hbs%G!.Xb$
!-n)8!$q<s!f[6_kPtW8ebS5+[KQ.$!]Acnpu;D7;tBthJbS1)HLh+:,kp=#NWK:G!!+L_q9/l8"S)Nn
0?3h3"3f!49(N#_FSEuZDY!i.+ns1^J-#f9!!-Knq<S*>nGiQ"p?Vh>2uWgO!!*;)q!8%H<V$1j7JH-K
H0,)->Mo87!/0kB!+5HX!S0+%!<)s!"f(kN!T$]F!!#@[huIi\!!-Bbq;VI0nGiPsp>Z2,2=pkN"f:8>
qVqV8;Y'kg6hfU@FliZ);p5!\!-n#6!*8g;!Q-S_!!*7fpric]9(N#_4SR&"C$,Hs"/kt]!U*AN!!*+h
p?Vh-)"[e/'?0b5!Tl-7!;HNoB(tWl=m#bc".o>H!SgB>!!*+`p>>tl(\@\.'"dqs!ST4"!!3-#@JA[]
;ucp_!!*1pq;VM5:%A8b!L3<<!Qc/M!!*bIpu;D20Co/D@e\m_<VQR`!!*._q9/l]7IgEZ!JU6k!OW[7
!!*\3pricY.e<W?=SL#>:%85X!!+@sq<S.4)tEt0&]+2-!N?+l!!+8#q!8%>%.aH!L%jp63pH_E!!+:f
q;;:r)=db.&@hGl!MKPd!!+4lptu2'$hF>uIeVb#2s1/C,L>E1qr7_%)Y*k/&A%Sq!M]\f!!+4opu;D,
%.aH!JG8((39L8B+1h9l!4W"Fnc/\#VtS=8Oob1T!?K#ObQ5Qfo)Jc3pWNUmk5YNilhTlJVucbqp](=F
htHC:DY!i.554CD_=IX-"JYYW!#k##!F"CVhuTGNoDesn!%?@jhuIK_!!#+ThuL7X!!*4kpYZ#hk5YNf
iq_U8T`O]a!@cY"j8%^8C@_E*4SRk9\aoe%"J#5H!#ar"!E.,:bQ3h,nc/\:_=u.Sb[9rA!&jSq!2f>f
!<\;TbQ&FB!!*5(q<S.JAFTX"AbPHkj#m5>p](;,pZqmGo)Jdr_"d6sfF6sD!<f1nhuV_BnGiPsp>>u'
3V<@R!!$L&huJf/!!*>5ptu1t$g7Qk"K)"T!TIMW!!$I$irRjpo)Jc#rT!e8!0HdP!=-.0irRI7kPtVc
Q2/W)b?"-5!*Am<!Q6hd!!$0rbQ*7d!!*;$pricM$KqHj/DL!e!T#<s!!*8$p?Vh0'(c/)!giZJ!,hW5
q>^O)i:uX>]EdX#!@lIlhuV:Tnc/[nT(_(CaV".F!<S>VhuIK_!!*JXptu1Y#Nu-g/(==S!S/[i!!*4q
p>Z1t&bH&(!g36;!,D**!=[TXj8J!=[0Pmq!@GPVbQ5L)nc/[nOS6m![h&*2!<RlIbQ)#A!!*GDprif6
"p!lf!.O_0!OMq!!!+1mp?VdXo)Je&_t`R!lU:=E!%@U.!MKYl!:TsgGPL(sWWM_k!?KAWhuKD@!!*V@
ptu215k=sU-MQF!R0<'\pAb2=pu;CW!qH<l*R=B=!28ua!=uj<irS.*o)Jb;pYu:D"R?'e!!$m2bQ417
nc/\/\b=5IOn/PR%]T6I!R!Oq!!"5;bQ3V(kl:`#b5Uc*liH?UnGiPbp?VhGC%D<*-g19k!U(Ko!!#gh
li;V#!!*kMq;;;0=7H7j9D79Ehdc6X!@?OrhuVUNo)Jb`pYZ$tkPtW!_YN3mi)ogUp](:fp>Z25Ab,m&
-/\LX!T+ge!!#^eirFJj!!*e:q9/l^:\+Pf!!#F\bQ5mjo)Je8aS<s[aVXOK!(?S*!,q'$!F+mcliGcQ
nc/[lPl9tFliH-*o)JbkpZqn1nc/Z5pZql]kPtWahtc12c4][J!<S8ShuVFdo)JbgpYZ%onc/Z/pYZ$M
kPtWbiq_U8ckGsM!<S;TirRjkquHKl!)rXP!6t'7!-.bn!*&.^!D^i6bQ5<fnc/[lJG.1f`%Uc`!WW3m
pWNWInc/Z%pWNV1kl:_p](kUlP48MQ(!?7:!Qtc@!!*.^rTsFJ!1`W\!<Sbbli8^'!!*S7ptu.1nGiS(
^\6Rd^^0Q4!<S)OhuK#5!!*.cpYZ$'kl:_oZhWP\NUZuL'Z0S(!Q,38!!*.YpYu7>q>g?l!<SS]irC[q
!!*P&pri_enGiS&Y4g'?Y6X\"!<RZCbQ*Fi!!*.UpWNUdrW)9b!EA@[liH60nGiSVlLsQEL@YBG%);Q'
!+PO"!<g76liGuWpAjdb!DqYKhuVRknGiSRhY,k-J+EX@$ao`e!+#0r!<fn,huV=?n,W:b!E%hOirS!r
nGiSSiV):3Jb&jB%(Guk!+,6s!<ft.irRaFkl:`Ub5'6^a"m/b!BJ<rbQ)bV!!*G'pWNV;o)JdnVYJ@9
_%Gr4!=u^;m/H>P[K5q!!<eb_liH62o)Je5k4n9DlR;?)!=Ir`liFd-l2UhpYP@#XXT8D%oDempO7qK4
gH"j*!?TtihuV^^o)Jdug%aJ+ZO?$u!=lC0irQ=ap]10k!<ePYirS!to)Je4h>$"2i[46s!=IWWirQRr
l2UhoTD6V2ScSB^!!<4Qp<3QX2"L\J)ohZs!Qu\Y!!*DGpric6$L.Tl0&ZQl!U<;I!!+(mqs=7I!R:rA
!!#ghliGH:o)JbGpZqpO"6oje/CjRS!T$<9!!+"`p>>ti#P.oq9D@?F`WYl5!&+*)!L3cP!!+\'q;VM7
8+?Q[)pn<=!QPHA!;ZZq9_[QJa9;)7!&40-!LEoR!!+Lbq9/l^5k+gT(q]Lc!O;q$!!#F]bQ5'Ro)Jb@
pWNYo!pTae"D[&pliG'0nGiQ"p$;[6o)JdlLAU?9liECQo)JbupZqm'kl:bfA_Hq<!P8O*!!$C!huJ<!
!!*+MpYZ+5!<D`l!*f3U!-%0&!X*,jqVqUj"n;Qm@.iO[K(AsC!J1"*!K[?X!;c`r?2*@ZETmH)"'ikB
bQ4^InGiPioumDYo)JdlFSEu[JcYHC!)rX9!+tEp!X<o3qs4;hnGiRr[J&qfkW&/6!=?U:li:>^!!&,W
m/H>O8E^$T"`iAphuHsN!!*D-p>>u,2Y-nL$+T`f!*Jdl!/^I.!(HkelMptiFPcoT!*esn!=>q&irS$q
o)Jdt](b4b=n2OmMtc637J?fQ!!3=;a8='\;Xj_f#bC\5!Qd(f!!*A'pWNV6nc/Z<pWNV$n,W4`!XOMD
rTjR)%.O;u1$A8s!R:l?!!+\9q!8%H,k:p8_>*?tiudLc"98E-Iban[!PAg1!!+b.p>>ti"S2To/)C!Y
!T#$k!!'P(huVFNk5YVjJD]DI"68FV%.O;u0AlK`!QP?7!!+Y/pu;D6,Otg7](k:dg)fDW!XEegrQG;C
$N:%t!!+Rjp<3QC"S2To-d)5.!QlMT!!&qlbQ5X$jo>SoPNqN$lVdEVqu?a"NqM`=K(AsC!I"5(!R(i@
!!*Jiq!8$t&*<ir$]Ns#i87<"!!*1Vp##gto)JdlE;/8k_$KW4!=RWVhuU=tjo>SoNoB$Yi_T(E!<\/S
j8@p;Ie*O?!HIko!Q598!!*J`pu;Cd%d!`q$@g4Bbf`NH!!*.IoumGV!;$6l!G;)M!O)h#!!*GHpric:
%HRQn&>8@UZj?1%!@$LrliH;uq#L9l!<p.1liE:Oo)JeOlhKfIRfhaP"V7!Xi2R(Q!!+7np>>u,-M%3;
"9>b%huSc<o)JeLhtZ+1PQU"I"V7']j/iUW!!+7qp>Z22-M%3<"L\-erSmp=!qQBm2raVm!L<iL!!Nji
bKQF\nGiS2_Y21SaWg<V!<f.kbQ<7q!;$6l1<]I:!JU[:!!<t<k!AM;!<I`DliF0go)Je:kkFED<ql[l
!!$m1li:k^!!<q2g-+s+!<IK=huTSRo)Je8h"T_,;XsefB_UEbBD_bn!!<q4h*1?/!<IQ?irQ"Xo)Je9
htQ.2;t9ngC%pWfB_;Ao!!<k"`]3Jg!<I*2bQ3t0o)Je5anO!Z9(Dr^?MDYD?L@gd!!4*^#4VZo(>STL
!))k_!,D8p!T4jd!!&qlliHE5k5bD[!Z>n\nGiS)dIlDt8+HW[AbY*`eJRiW!1ruD!T,iq!!+!W!!_rn
!>X,WirDX@!!$X*irRaKnc/Z_pu;D738so>(M*gJ!;?Ho'>F.`!($/U!*o9B!Q#WC!!&,UbQ5mBi;`i\
o)Sai!-%Vt!Qtf@!!*,.pZqpX#4hfq#MSt>!SAFO!!!/k!!$d5i:u42^^9T4!<K:rhuTAPo)JdrchQE!
bo>UA!!Mck!,VDi"68FZ$1e,t!Nu1W!M9Pe!!*>Qpu;D$*8pkt"7Q9j@J.hFY6b+-p&G*oSbL>/Ns5+T
!=$74bQ59mci=(SfCeJ1DtX20!!+#%pZqlanc/\Gk4n9DZO+tY!=R-EhuIK^!!4%ni:u41<q64k0AH9[
!NHIQ!!*JRp#?$fnc/\.htc:6j5X53!!+e1pu;CV$.&YQ$G,oS!+>?t!>`fObQ(E:!;6Bn/'%G/!La;@
!!%!2liGu^nc/YtpZqq8)tj:1!!-Zsq!8!4cN!r[p##l#)=db->PI%Vcl)BS!aspDq;;7"cN!r]p#?))
)=db-?2*@[di.cW!Fb!`irS1gcN!rRoumHQ(@hG*;tnK:^)->?!E[J>bQ)V[!7_&M)r(&P!KmQU!!'J%
liEjcnc/Z`pZqlMo`3bI!?'8WhuS`<nc/ZlpYZ(A"nDWnRJ5V>7.('8!!+"ep#?(4"7cElYP7&XSH\Qa
!1W`C!(H&Nl2Ui$^@f\NIKK'?!1rr/!K@9R!!%rObQ'ib!:^$hOS.r@j=Bd$!A!@-li:2Z!!*P]q!8%6
+kZkj!!%lKhuVIYnc/\>h"T_,<:U"i%*eS*!R2b8!!3-#MtQ*2gF;[n!@m"$irE*M!!*MSpu;D$+OC)g
IJqCcbQ5[/nc/\;aS3mY:%A8b$bH,W!P0<!!!,"<p?VkIPm$XX!/L=8!SAC_!!,=Hq!8$g$./_R1Y;<X
!K@6\!;6BmJG7t&bo6-Q!Bf*2huTkbd/X2(g@aJ,Ns,.Vr;ZhLpYu;#)tEt04l,nn!NlaV!!+^joumGf
"7cEnFj/)*bQ59lnc/\K`q[aYS-[OC!=#h%liGomnc/\$f_Fe7m%4FO!!%HAli;[c!!*8%p##l!..R?=
%aFb+!LErf!;6BmGPC"qIF/#q"fh7U!S&Xi!!*SUpYu:B"SMio!!%9<irFPU!!*7koumHO-1V$:%D);X
!K%!M!!6u\bk]H_Er#dg!!,ROp$;^8"7cEm>jD(M!*A^k!<Kk.liHEDo)RYJ!CPT6huSB2nc/\lhY5q.
;t9nh!ODLY!T-?4!9O7^7,@Or!J:LF!!-3\pYu6Qnc/[k[J8b_i^W#0m/R/M`q@OVFoq47!Dgl4bQ(<,
!!*+ppric^5McD4!!*_Fp?Vh6-h76<!k%dh!S&4]!!+;!q!8%1+4gMi!!*\;p>>tt-1V$:!j).S!QlAP
!!+7jptu1o*mjrf&HK64irRRSnc/[lY4prWboH9S!?otfirR=Ed/X1XUAN14bQ5C$nc/[lSbL>/\/Fi;
!?SuMbQ5-kci=)"g%Xh6Iff0@!B&p3liE.Lnc/\pl1jTGWW^ZK!A2UkhuS'(q>g<k!A`:$huST8nc/\k
h>#n/U'/gC!A2[mirOH-o)Jgl1YVT`!JppL!!-0Zpu;CN"OI,L.D,>u!H%u0!!+^jrQP/_!IFn=!!,j;
pric&"4$rJ=Q]GG!R`.]!!%iLliH**nc/[kUA+!SCsE"];qq-+!QQ>Q!!%TEhuVCdq>g<k!<JY`huIE8
!!-*Vq;VLu+RoF3KD4C,fer@$!WW7kpYu6ec2[l=a8*p[[N4l<!-\+\!Q-V^!!*+ZrQP/_!+*qN!<J/U
liQEf!V-3k):J9G!NZRt!!*qdq!8%@1sQ(%!JUC.!o7Jinc/\-a7nKmUBpDj!>ilQhuVC`q>f%G!<IrO
ir\.P!V-3k(s;U5!N$.n!!*n[pu;D.1@kM$!!*+GqTK#`?30Ts!>`-<bQ3t6nc/\*\+n/J__(3TiW&ue
\,5LmZk2a-!HdW%liH<LnGiSckkOKF_[to0kl:_lY5@,XWXnV"!H-chhuVV0nGiS_h"]e.\I[Nsn,NIs
Yl!G]XUjq%!H6rlirS%7nGiS`htZ44]FWTopAb4$T)6_4Rh"rg!G'@JbQ5gWnGiSXanX'\W=I8Tr;ZjG
fDY%:hE:<.!?'/VliG$=nGiQRpZqm@b5_Sibi&KY!Rj(!!!*qSpYZ(`'Cc&&NVD?2Ls#c!--uPM"4fL5
!:p0k(rl=1!PK3;!!&&RirFt[!!+:TrQG;X2#%(I!!*k@pWNZ<'(Gr%JG77fI*2Kp!DhkEm-B9+nGiT1
lM'WFG4>P5'?g1;!U!,!!!`Ntg>LoHI09!>!GpWji;DL5E:Eo/'#=;#!Sg2g!!`Nuh;dPTIKT*?!H$fi
irO0#nc/\(_t`6mhakoj#6@64bfn7N!q?6k@`nGh!+u$,q#CF-YP?<Ba?drK"Ts>Am)0e3!!+"]pZqq4
-h76=!(l>JliG?IaoDSIHJdYl)"@S,)8Q")!R)k[!!,OCrS[V3!Q,]J!7LoO"+9+g]bp8>!?&fLirRIP
nGiSZhY?+3`YS(Eg&M9XDp-A)(@_A*(9dJV!P0KF!!,=)pricE'^>\V!!<b5jAGCH!H@>uliEFTnc/[k
QM9_GQJqo-!!<_+fM(c7!G^KchuSl@nc/[kNq_H3NnXR%!!<_.gJ./;!Gp`hirP8Enc/[kOS@c8OOO:'
!!<[q`CB=s!Fa.FbQ3:snc/[kK(mIhK$=;m!!4Ku#4VZo)Tha?!TH<5!!+(cq!8%E9ud56,QW2pnGiS-
^\?XeeiWC%!?/rPhuVV)`rH/dHj0EJp&G+2_=usjff\d)!?9)SirS%0`rH/aD[#e6r;Zj6Y4p-@_`%#b
!>r0<bQ5dO`rH,@#4MToDX-T`liF-knGiSfl1jTGckaY%!<EAn!!-fjq;;A5i1gMH!!,jNptu1m'up:T
!<qrm!G^TfirPt\rW)Qj!DhYKirR49`rH,@"n2Km?cr,e!L*f_!;c`s8':VN!ONNJ!!*qXpZqqA7I^?Y
"/5JU!1:+n!>iKEhuVIsnGiRlRJPk@huJkG!!*nOpYu;/6h(-W".T&F!0[<][f?FDXnU$?`B<Yj!<S2R
bQ*:i!5AL8!Hm]%liF0lnGiS6ebJJ3k=tFG`W-&@Dr16H!M]hg!!+7cptu2.8a-6"!!31?iV2@5V?QJi
!?o__irS%0iW.I.!WclTpWNZ'"n;Qn*k;!h!Q[U^!8@JS.bFF]!TH00!!-Wrq!8%,&(CU=!!+LlpYZ)'
2t-eJ?f1Y:!Q5Jm!9jIa.*qYJ!SKI%!!-Kepu;Cq%`SM<!!+@VpWNZU1@P8E<m19^!O<0L!;HNp#+P>Q
!N#qg!!*J9pZqm6[f?L1!!\\]huTAMnGiRtXnU`RI^K.V#+#8Kq;VLJ!q?6k$a9<b!._HW!=";QbQ?"L
!q?6k$D."9!->OJ!Cl8HliH0(quHBi!BB39liH-*[/^4ph"T_-fJ3%!qu?aUg%aJ+f/0l8!CYi>irRmi
n,NJIh"]n1g,68<!BnNubQ5[7n,NJD`qmm]bfn!Yo`2i/!>**@li<LD!!*.`pZqpr!q$'1!!*V>p>>q6
n,NIjMYH$0[K>Ulci=(W\b>%`PjeYR!fZm6!Or3h!7q2O%]8sD!/9nB!<R`EbQ4RBf`9n0!<R66liH2u
n,NJ1eG/A2lY=fIjo>D`CA-QdfdZCj!?B5VhuV_HaoLf/!<R*2irRpbn,NJ/bkU3!ib$(.oDemn@J7nG
`[:0T!?/HBbQ5ml]E%g/!@-=lli<+8!!$X*liH#`[K$:N!71As!/L"C!+GW[!S&'r!!+:lqr@V7!/^.E
!+P]_!S86u!!+.Sp<3Pa!:Tsg=SL#?_ABZ]!<\;SliGrbq#L0i!>*$?li<N`!!*1Up>>u#*qB:5!!!P;
pYZ%9[K$=1LA'X.efO;\!=u[=j8.d9QF6bo!dXL`!PfZD!!*S+pWNVl[/^4nhtQI;D!q?):@%]A!U)TA
!4r434k05a!,(a#!D;8EhuVUloDl`.!C#-0irEc]!!,aPpu;D43:-^f!!,'qpWNVDmf3AUbP99^aYMuY
ci=+KA`rmU!P&O+!!*D.pZqpr!T*n/!!340h"fk/YR0e!!=>RrhuU7efDsb.!Wlffq;VL]$1Ioq$)[IW
!Or0X!9F1^!a!J=bQ4@Bn,NIpQM8T(V?+g>lMptjMX(**!TQ'+!!,+BpZqld_>s-,!X=;6qqqM,1@G2D
2V[ua!*Zu7q#CI#L#Mph!ST?u!!,%8pYu6XZiC1.#'\5ebQ5X7mf3ADa7mdX;R-9''<V9#rp0Z9"7Q9k
"e#,O!S\'h!!*_.qqqR%!rr>l!!*4bpYZ)!%'fj6&uPQd!IFqD!;QTq"I&T?!RhI_!!*Xsqof(Y!q?6l
!!IuLbQ5EcYlFeOa8P?*_\MV?!A3C2m/-,LK<P=V,ea07!P&p5!!+V&pYZ%"nGp?)!@5GYirQe,mf3A>
g\9_.Id-pR!!+7ErQG;A'(5f$-cPi(!-7*"bl@o5g?e1g9CDi]"./cK!TYEZ!7UuP4jW'Eg.1T3!<\DW
huVIQeH">("[:Apj5!8p!!*1apYu;/+O0uH!!P?qbfn'mmf3@iK(mIi`>uu!kl:kg@ccs>#4DNm/*6Nl
!L*]%!:Tsl!aXL;M[&VM!@ZXqhuSf>\H)@("Ti#cj,F93!!+P(pYu:7"0qq+!!NF(`lrl9mf3A7`qR[X
J-)kR!X=D(!$Ue2!<JP]liH6)XT/G-J&3?*!;-<m!K[!5!S]<1!!<FV`?=dQqu?`uOn[l:hD),4!sWkP
*U`t/!J:'i!QQam!!3]k!Ug!h.-CBmrp0Z]#-7e+%lOIW!!+G#pYZ.C"TSP*!!3Zh!Ug!h-JeFV!M0Ji
!4;e.%P\"Q!!+:`pWNYu"n;Sj!!&A[liH?;kl@jd!0?m4!Sos!!4;e,On[l:i'5rr]Dqq`pWNZ\3Re&I
!!+b7pZqp`$-`In!!+\)pYZ(K$,utn!!+\,pYu:P$,6Jn!!+OgpWNZ(#e0ln!!*,!pZqqF7BcdU!!*+m
pYZ).6E'tR!!*+opYu;46_XSS!!*+_pWNZ\4IZ?L!!,ILpZqpa$C:_o5MP,khuT\^QN.%OhYH16j5['F
QN.%Ia7mdYQO3WknGoTi!<p%.liH64joD[e!<fY$huVOnhZ11e!<f_&irRsufDr\e!<f(ibQ5^Ad/_2e
!F"^]liEsgaoK]e!EIqLhuTAR_Z83e!ES+PirPbW]E$^e!D^c2bQ3b/[/f7f!>NfQliH-.XT7Ye!>E?E
huVFhV?$/e!>NNIirRjoT)eZe!>;[3bQ5X<QiI-fL%aj6RK]&Y!<IZIi;;F5Op%-P!<I`EirG;D"IK/i
!H[tY!JL[R!1j/k2;\)o!SK!p!2TYr1=Q!U!R<.\!3?/$1Y2<\!RN=X!4)Y+0#75*!P9]8!4r43$*<mf
!pb:9f)WYf!=>Oqhu_e[!RLhg!!*D'pYu>7Glc"eci=(PQ1rK(bA@9s!8%8Q!FP$aliG0F\cCUf!WcK[
pYZ(d(pa5)!!31+htQ.3^_j-Qm/R1g;TSUV!Nd-6!;$6l.+.eU!U!aZ!;c`s-HGl=!SgeD!!">GanOfr
hcZ9G!@"rKbl,`daAA6(!=>FmliOI#!1<ff$(1GE!N?J&!:^&n!!*Cpp>Z1S$fV/q!!*@_p<3Q+$JPQq
!!311k4e3Ch*09f`W-&@?/,,3!Ra'R!6kKF!FFXWirR[m`;nBf!Wc<ApWNZQ2SK1G!!+OspZqtHK`\^`
iW'!,a7nKnhL5O1!9jIa-d)2D!o\Y2W;uDf!@,&IbQ>q.!ho\h!!%?=liG-BRK3<e!-Iqm!PK57!!%3A
j8%^9^D3(8!,D8P!mI_ZQN.%7d.lr.k"kmTRfEI9`q\Hmg.V)=U&Y3@aS=crh+[5:W;lrC[.qiG`^Jti
YQ+_*@-@CQ!pc<YhuL4d!WcN\qVVG4PQ]Y>^&S38?/PM=!ofLKdK%5d!Wc6@qTK#aL',U!b5_PNV>BNZ
e/uR.dJs:USGM.EaW8"of`2$\T).IJbT4(khuEcbNr$s#[i2CLjo>E5ebnb7ku4GZm/R/:b5C/uh+sXC
oDenBc2?T&i)#d@qZ$XD\GXPOb".Zq!!*+8kl'iKPQR'K!WclfrSR[8!!AAa!WcojrSmp="8`(c!!31+
ao0EaJ-,?CnGo]l!=Q(0liG?Eg]4_^!=Pb'huU\-eH!5^!=Ph)irR+3c2b`^!=G.lbQ4s[`rO3]">\`u
jupHZci=2%d,<Y>\,b+\">J<bhE.tBh>d[/^<FVTWW;,\"9ET.I0-/Dli7.hD;BC;S,i-\"9EDuGQO-1
q>^X!A'/ThNW9.]$\SqI!!3OW$iU-e!!3OX%/0af!!3LJ$Le%d!!3O]%-[bf!!3OW$fV/e!!3OX%,1cf
!!3LJ$K1u8~>

%%EndBinary
grestore
np
2.04 lw
0 lc
0 lj
10 ml
[8.16 6.12 ] 0 dsh
true sadj
14.94 371.34 mo
337.02 371.34 li
337.02 35.1 li
14.94 35.1 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
249 391.68 mo
320.88 391.68 li
320.88 353.88 li
249 353.88 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
43 <001C60D8A8C9B61AE94F5D0456ECBCBA90CCFBAD8FDFDE1C76A25DC4FB2C
0A2F1A737ABA942A0D167DB52780D6> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [25.224 0 0 -25.224 0 0 ]msf
256.25 378.984 mo
(\000+\000R\000V\000W)
[18.7413 14.9829 12.5616 0 ]xsh
199.56 45.24 mo
311.14 45.24 li
327.6 61.7 li
327.6 144 li
199.56 144 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.96 lw
[] 0 dsh
199.56 45.24 mo
311.14 45.24 li
327.6 61.7 li
327.6 144 li
199.56 144 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 5 GetGlyphDirectory
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
229.66 80.81 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83734 11.6431 11.4924 0 ]xsh
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 6 GetGlyphDirectory
37 <001C60D8A8C9B654A4F8155C331190650E5C458B09F0ADB770BE1877FCB8
910F579D71D9DF3F0C0573230C61F43F4845DBF05498F3910AD33494AEBFA7C3
A18F78E3EEC2DE8F18C55CF37B718E4D70A33E560C66441849273B64230A55CA
C1E945C71BD5257BD7A0BE53CBD725F3A5E119E48DAD9C4DFBD0C2A0AEC05216
5D957E9D8F11E9FD44B22227449941F7CC5624A755FACF677CEF96F2E0E7B9ED
A64A4EABA3CAE4277CB2A168CE5B182DCE2112DBBC> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
3 <001C60D8A8C9B816D234> |
20 <001C60D8A8C9B6605B97E3474607F65DA83467005204B5F48E11F4969E87
21827C7B7F47B5579624C0429CB1D21355B681041D4720> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.864 0 0 -18.864 0 0 ]msf
208.06 103.49 mo
(\000%\000\\\000W\000H\000F\000R\000G\000H\000\003\000\024)
[12.6956 10.6769 7.14941 10.8844 9.56413 11.2051 11.4693 10.941 6.47028 0 ]xsh
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
17 <001C60D8A8C9B80F37F28BBD69438B6F09441D6BA20ED3CF1C> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
229.18 126.19 mo
(\000\013\000\021)
[8.27991 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
244.06 126.19 mo
(\000P\000U\000E)
[18.0676 7.83731 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
281.5 126.19 mo
(\000\014)sh
20.28 45.24 mo
91.88 45.24 li
106.2 59.56 li
106.2 144 li
20.28 144 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
20.28 45.24 mo
91.88 45.24 li
106.2 59.56 li
106.2 144 li
20.28 144 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
29.736 68.93 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83734 11.643 11.4924 0 ]xsh
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
28.056 91.63 mo
(\0006\000R\000X\000U\000F\000H\000\003)
[11.9633 11.1908 11.6431 7.78082 9.60847 10.8706 0 ]xsh
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
41 <001C60D8A8C9B7E02AA5ACADA8FE7995E150DE81112B203AC844BE0BCD5A
C5CB5DED59D44BB9B606B3> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
35.016 114.31 mo
(\000\)\000L\000O\000H\000\003\000\024)
[10.7576 4.823 4.78532 10.9083 6.12292 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
38.376 136.99 mo
(\000\013\000\021)
[8.27991 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
53.256 136.99 mo
(\000U\000E)
[7.79992 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
72.6 136.99 mo
(\000\014\000\003)
[8.27991 0 ]xsh
118.09 106.5 mo
175.12 106.35 li
175.11 101.31 li
118.07 101.46 li
cp
172.62 111.4 mo
187.72 103.8 li
172.58 96.28 li
cp
f
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
120.17 67.66 mo
(\000P\000U\000X\000E\000\\)
[15.1226 6.49228 9.71489 9.65211 0 ]xsh
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
83 <001C60D8A8C9B7DB133A6BF1DC72AFF4D9E1D88066B503430ED7CA204AEE
347A7EAE3CB3884EB4FFBB8F90017827BA9DCD885413704044F3F41AD14D2D6A
CED61CEA6A04B229BF5A6BC738FEA6377C17D19B447D1E3C5DDC24F2FD35A82E
DAE48699B344D31AB5EDBC945652C2C08D> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.744 0 0 -15.744 0 0 ]msf
120.17 86.62 mo
(\000&\000R\000P\000S\000L\000O\000H)
[10.5799 9.35184 15.1615 9.60387 3.99895 3.92021 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
120.17 105.48 mo
(\000U)sh
20.28 151.68 mo
91.88 151.68 li
106.2 166 li
106.2 250.44 li
20.28 250.44 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
20.28 151.68 mo
91.88 151.68 li
106.2 166 li
106.2 250.44 li
20.28 250.44 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
29.736 175.46 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83734 11.643 11.4924 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
28.056 198.14 mo
(\0006\000R\000X\000U\000F\000H\000\003)
[11.9633 11.1908 11.6431 7.78082 9.60847 10.8706 0 ]xsh
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
21 <001C60D8A8C9B6605B97B971C90101384E5F55BFDC60B70BA13CBEBD8079
87DEE773C6D32C924661DB9596D2057D023C05B990EDB59F8EE8FE5A9465DF9F
5C71FFEFFDBBC50880551E2ACA565AFE9EE26169EFE24A7FA44292793C21F963
028EE33626F245AD451978534A938D5D74D06B6686AFB07603> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
35.016 220.82 mo
(\000\)\000L\000O\000H\000\003\000\025)
[10.7576 4.823 4.78532 10.9083 6.12292 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
38.376 243.5 mo
(\000\013\000\021)
[8.27991 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
53.256 243.5 mo
(\000U\000E)
[7.79992 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
72.6 243.5 mo
(\000\014\000\003)
[8.27991 0 ]xsh
20.28 258.24 mo
91.88 258.24 li
106.2 272.56 li
106.2 357 li
20.28 357 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
20.28 258.24 mo
91.88 258.24 li
106.2 272.56 li
106.2 357 li
20.28 357 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
29.736 281.98 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83734 11.643 11.4924 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
28.056 304.66 mo
(\0006\000R\000X\000U\000F\000H\000\003)
[11.9633 11.1908 11.6431 7.78082 9.60847 10.8706 0 ]xsh
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
22 <001C60D8A8C9B6605B98FACCBBA7A41C9903FD40C3E16D2A898429F24F9C
A57C4CC310A044D87F6AC87496A40150D342AC53D462CDCFD3AB53C69B171BF6
7E9C075978A02491CDA1EFE0732B776B4E0C85ED7D38AA8FB41D1DE87C4E57B9
505DD05BEB22DF4DCBA88C015FC9E527DB5A92F7B2A4FB6C778DAA4D8C1871B0
CB2DC1AA61BBF6BE683F456ACF25D2694817C2A28C0154DF6CBC3428D8DF1088
F28484EE9B3F> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
35.016 327.336 mo
(\000\)\000L\000O\000H\000\003\000\026)
[10.7576 4.823 4.78532 10.9083 6.12292 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
38.376 350.04 mo
(\000\013\000\021)
[8.27991 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
53.256 350.04 mo
(\000U\000E)
[7.79992 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
72.6 350.04 mo
(\000\014\000\003)
[8.27991 0 ]xsh
118.33 228.9 mo
175.36 228.75 li
175.35 223.71 li
118.31 223.86 li
cp
172.86 233.8 mo
187.96 226.2 li
172.82 218.68 li
cp
f
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
120.43 190.1 mo
(\000P\000U\000X\000E\000\\)
[15.0755 6.49226 9.7149 9.62067 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.744 0 0 -15.744 0 0 ]msf
120.43 209.06 mo
(\000&\000R\000P\000S\000L\000O\000H)
[10.5799 9.35185 15.0985 9.57237 3.99895 3.99893 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
120.43 227.93 mo
(\000U)sh
118.09 329.339 mo
175.12 329.192 li
175.11 324.15 li
118.07 324.3 li
cp
172.62 334.239 mo
187.72 326.64 li
172.58 319.12 li
cp
f
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.744 0 0 -15.744 0 0 ]msf
120.17 290.59 mo
(\000P\000U\000X\000E\000\\)
[15.0985 6.53366 9.72974 9.61961 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
120.17 309.58 mo
(\000&\000R\000P\000S\000L\000O\000H)
[10.5638 9.38475 15.1226 9.60495 3.99284 3.92996 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
120.17 328.416 mo
(\000U)sh
199.56 151.68 mo
311.14 151.68 li
327.6 168.14 li
327.6 250.44 li
199.56 250.44 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
199.56 151.68 mo
311.14 151.68 li
327.6 168.14 li
327.6 250.44 li
199.56 250.44 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.864 0 0 -18.864 0 0 ]msf
229.66 187.32 mo
(\000P\000U\000X\000E\000\\)
[18.0906 7.79073 11.6579 11.5259 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
208.06 210.02 mo
(\000%\000\\\000W\000H\000F\000R\000G\000H\000\003\000\025)
[12.6794 10.701 7.0838 10.8706 9.62732 11.1909 11.4547 10.9271 6.46204 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
229.18 232.7 mo
(\000\013\000\021)
[8.27991 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
244.06 232.7 mo
(\000P\000U\000E)
[18.0676 7.83731 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
281.5 232.7 mo
(\000\014)sh
199.56 258 mo
311.14 258 li
327.6 274.46 li
327.6 356.76 li
199.56 356.76 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
199.56 258 mo
311.14 258 li
327.6 274.46 li
327.6 356.76 li
199.56 356.76 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.864 0 0 -18.864 0 0 ]msf
229.66 293.57 mo
(\000P\000U\000X\000E\000\\)
[18.0906 7.79073 11.6579 11.5259 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
208.06 316.27 mo
(\000%\000\\\000W\000H\000F\000R\000G\000H\000\003\000\026)
[12.6794 10.701 7.0838 10.8706 9.62732 11.1909 11.4547 10.9271 6.46204 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
229.18 338.952 mo
(\000\013\000\021)
[8.27991 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
244.06 338.952 mo
(\000P\000U\000E)
[18.0676 7.83731 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
281.5 338.952 mo
(\000\014)sh
2.04 lw
[8.16 6.12 ] 0 dsh
397.5 371.34 mo
702.3 371.34 li
702.3 35.1 li
397.5 35.1 li
cp
@
504.24 391.68 mo
687 391.68 li
687 353.88 li
504.24 353.88 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 5 GetGlyphDirectory
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
39 <001C60D8A8C9B6E081B04FC435829385C5BEDC68DDC35DE8CE7C5EDA488D
6B3D34241C637D17663805636ABD3B433EB8517B7BE139E4B8BA2B0A5F589491
BFB4E8873019EA26DF68E10022DBC58622EA817B140FFE44A9DFABA30D8E7300
B0B48771> |
89 <001C60D8A8C9B7E52216419985ABDC2A2C8279C7A2E84BC8C8D658828106
065B1850310ED427E848> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [25.224 0 0 -25.224 0 0 ]msf
511.51 378.984 mo
(\0007\000D\000U\000J\000H\000W\000\003\000'\000H\000Y\000L\000F\000H)
[13.0913 14.6299 10.4174 15.3109 14.5541 9.55988 8.37427 18.8926 14.4785 14.2767 6.40686 12.6877 
0 ]xsh
410.76 298.64 mo
410.76 293.43 414.99 289.2 420.2 289.2 cv
486.28 289.2 li
491.49 289.2 495.72 293.43 495.72 298.64 cv
495.72 336.4 li
495.72 341.613 491.49 345.84 486.28 345.84 cv
420.2 345.84 li
414.99 345.84 410.76 341.613 410.76 336.4 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.96 lw
[] 0 dsh
410.76 298.64 mo
410.76 293.43 414.99 289.2 420.2 289.2 cv
486.28 289.2 li
491.49 289.2 495.72 293.43 495.72 298.64 cv
495.72 336.4 li
495.72 341.613 491.49 345.84 486.28 345.84 cv
420.2 345.84 li
414.99 345.84 410.76 341.613 410.76 336.4 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
!
end
end end
%ADOEndSubsetFont
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
421.27 322.32 mo
(\0005\000L\000W\000H\0009\0000)
[12.8677 4.78531 7.06497 10.8706 12.8677 0 ]xsh
406.8 208.32 mo
675.46 208.32 li
687 219.86 li
687 277.56 li
406.8 277.56 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
406.8 208.32 mo
675.46 208.32 li
687 219.86 li
687 277.56 li
406.8 277.56 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
514.18 227.9 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83734 11.643 11.4924 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
514.9 250.61 mo
(\000O\000L\000E\000U\000D\000U\000\\)
[4.78534 4.78528 11.5302 7.55469 10.9272 8.0069 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
513.82 273.29 mo
(\000\013\000\021)
[8.27991 0 ]xsh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
528.7 273.29 mo
(\000P\000U\000E)
[18.0676 7.83734 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
566.14 273.29 mo
(\000\014)sh
410.52 54.36 mo
481.22 54.36 li
495.36 68.5 li
495.36 200.28 li
410.52 200.28 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
410.52 54.36 mo
481.22 54.36 li
495.36 68.5 li
495.36 200.28 li
410.52 200.28 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
469.18 100.9 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83731 11.6431 11.4924 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
443.74 76.18 mo
(\000%\000\\\000W\000H\000F\000R\000G\000H\000\003)
[12.6794 10.701 7.0838 10.8706 9.62732 11.1909 11.4547 10.9271 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
443.62 187.2 mo
(\000\024)sh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
418.18 100.54 mo
(\000\013\000\021)
[8.27991 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
418.18 115.42 mo
(\000P\000U\000E)
[18.0676 7.83731 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
418.18 152.88 mo
(\000\014)sh
509.28 298.64 mo
509.28 293.43 513.51 289.2 518.72 289.2 cv
584.8 289.2 li
590.01 289.2 594.24 293.43 594.24 298.64 cv
594.24 336.4 li
594.24 341.613 590.01 345.84 584.8 345.84 cv
518.72 345.84 li
513.51 345.84 509.28 341.613 509.28 336.4 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
509.28 298.64 mo
509.28 293.43 513.51 289.2 518.72 289.2 cv
584.8 289.2 li
590.01 289.2 594.24 293.43 594.24 298.64 cv
594.24 336.4 li
594.24 341.613 590.01 345.84 584.8 345.84 cv
518.72 345.84 li
513.51 345.84 509.28 341.613 509.28 336.4 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
519.74 322.32 mo
(\0005\000L\000W\000H\0009\0000)
[12.8677 4.78534 7.06494 10.8706 12.8677 0 ]xsh
605.76 298.64 mo
605.76 293.43 609.99 289.2 615.2 289.2 cv
681.28 289.2 li
686.49 289.2 690.72 293.43 690.72 298.64 cv
690.72 336.4 li
690.72 341.613 686.49 345.84 681.28 345.84 cv
615.2 345.84 li
609.99 345.84 605.76 341.613 605.76 336.4 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
605.76 298.64 mo
605.76 293.43 609.99 289.2 615.2 289.2 cv
681.28 289.2 li
686.49 289.2 690.72 293.43 690.72 298.64 cv
690.72 336.4 li
690.72 341.613 686.49 345.84 681.28 345.84 cv
615.2 345.84 li
609.99 345.84 605.76 341.613 605.76 336.4 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
616.25 322.32 mo
(\0005\000L\000W\000H\0009\0000)
[12.8677 4.78534 7.06494 10.8706 12.8677 0 ]xsh
509.28 54.36 mo
580.08 54.36 li
594.24 68.52 li
594.24 200.28 li
509.28 200.28 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
509.28 54.36 mo
580.08 54.36 li
594.24 68.52 li
594.24 200.28 li
509.28 200.28 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
567.98 100.9 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83731 11.6431 11.4924 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
542.54 76.18 mo
(\000%\000\\\000W\000H\000F\000R\000G\000H\000\003)
[12.6794 10.701 7.0838 10.8706 9.62732 11.1909 11.4547 10.9271 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
542.42 187.2 mo
(\000\025)sh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
516.98 100.54 mo
(\000\013\000\021)
[8.27991 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
516.98 115.42 mo
(\000P\000U\000E)
[18.0676 7.83731 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
516.98 152.88 mo
(\000\014)sh
605.76 54.36 mo
676.56 54.36 li
690.72 68.52 li
690.72 200.28 li
605.76 200.28 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
605.76 54.36 mo
676.56 54.36 li
690.72 68.52 li
690.72 200.28 li
605.76 200.28 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
664.49 100.9 mo
(\000P\000U\000X\000E\000\\)
[18.0676 7.83731 11.6431 11.4924 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
639.05 76.18 mo
(\000%\000\\\000W\000H\000F\000R\000G\000H\000\003)
[12.6794 10.701 7.0838 10.8706 9.62732 11.1909 11.4547 10.9271 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.84 0 0 -18.84 0 0 ]msf
638.93 187.2 mo
(\000\026)sh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
613.49 100.54 mo
(\000\013\000\021)
[8.27991 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
613.49 115.42 mo
(\000P\000U\000E)
[18.0676 7.83731 0 ]ysh
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-8.2896e-7 18.84 18.84 8.2896e-7 0 0 ]msf
613.49 152.88 mo
(\000\014)sh
2.04 lw
697.14 34.74 mo
703.83 34.74 709.26 41.9 709.26 50.73 cv
709.26 101.55 li
709.26 110.38 714.69 117.54 721.38 117.54 cv
714.69 117.54 709.26 124.7 709.26 133.53 cv
709.26 184.35 li
709.26 193.18 703.83 200.34 697.14 200.34 cv
@
697.14 208.86 mo
703.83 208.86 709.26 216.02 709.26 224.85 cv
709.26 261.57 li
709.26 270.4 714.69 277.56 721.38 277.56 cv
714.69 277.56 709.26 284.72 709.26 293.55 cv
709.26 330.27 li
709.26 339.101 703.83 346.26 697.14 346.26 cv
@
%ADOBeginSubsetFont: HIBBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb6d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c796644689d4700008f5c000038b668656164f31caa1e00000f640000
0036686865610dad0c0300000f9c00000024686d747803b21f6000000fc0
00002fd66c6f636174b983b500003f9800001e546d617870213925390000
5dec000000206e616d651fad718400005e0c00000d3e707265706baf02fe
00006b4c00002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005e1478aed4d4f5f0f3cf500190800
00000000bbeb7ccc00000000d219014cfbfafd8b09ec0836000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008c2040e0000000000000000000001cf00000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000045a00ac000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000020400ac000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000035d00ac000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000040400a103cb006d00000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000047800a1000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a100000000000000000000000000000000
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000003fd0021000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000362005a000000000000
0000000000000000000000000000076f005a000000000601005a00000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000664009904340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000043400990000
00000000000002ca00990000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002ae0021000000000000000000000000000000000475002100000000
000000000000000000000000000000000000000000000000000000000475
0021051300210000000006d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
00000000039d002200000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002ac004400000000024e
004402e5004802b80047000000000000000002e9006c0163006100000000
00000000015e006c0456006c02e6006c02e6004502e5006c0000000001f6
006c0000000001e3002302e9006c0285001f000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002e7008e000000000000
00000000000000000000000000000000000001a6008e0000000000000000
025b008e046d008e00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000002e7008e0000000000000000
0000000000000000000000000000000001a6008e0000000000000000025b
008e046d008e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a101570157
015701570157015701570157015701570157015701570157015701570157
015701570157015701570157015701570157015701570157015701a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201f001f0
01f001f001f001f0029d029d029d029d029d029d029d029d029d029d029d
029d029d029d029d029d029d029d029d029d029d029d029d029d029d029d
029d029d029d029d029d029d029d029d029d029d029d029d029d029d029d
029d029d029d029d029d029d029d029d029d029d029d029d029d029d029d
029d029d029d029d029d029d029d03030303030303030303030303030303
03030303030303030303037303d903d903d903d903d903d9041b041b041b
041b04740474047404740474047404740474047404740474047404740474
0474047404d204d204d204fe04fe04fe04fe04fe04fe04fe04fe05090509
05090509050905090509053e053e053e053e053e053e05b4062006200620
062006200620066e066e066e066e066e066e066e066e066e066e066e066e
06c506c506c5073f073f073f073f073f073f073f073f073f073f07800780
0780078007d007d007d007d007d007d007d007d007d007d007d008220822
0822082208220822082208220822082208220822082208220822082208d1
08d108d108d108d108d108d108d108d108d108d108d108d108d1095d095d
095d095d095d095d0a310a310b100b100ba70ba70ba70ba70c480c480c48
0c480c480c480c480c480c480c480c480c480c480c480c480c480c480c48
0c480c480c480c480c480c480c480c480c480c480c480c480c480c480c48
0c480c480c480c480c480c480c480c480c480c480c480c480c480c480c48
0c480c480c480c480c480c480c480c480c480c480c480c480ccc0ccc0ccc
0d450d450d450d450d450d450d450d450d450d710d710d710d710d710d71
0d710d710d710db40db40db40db40db40db40e950f260f260f260f260f26
0f260f260fb40fb40fb40fb40fb40fb40fb40fb40fb40fb40fb40fb4104b
104b104b10c410c410c410c410c410c410c410c410c410c410c410c410c4
10c411401140114011401140114c114c114c114c114c114c114c114c114c
11c212741274128012801280128012801280128012801280133f13cf13cf
13cf13cf13cf13cf13cf13cf13cf13cf13cf148614861486148614861486
148614861486148614861486148614861486148614861486148614fc14fc
155215b8161c161c161c167916bd16bd16bd16e9176917bf180818731873
18c618c61920197919d119d119d119d119d119d119d119d119d119d119d1
19d119d119d119d119d119d119d119d119d119d119d119d119d119d119d1
19d119d119d119d119d119d119d119d119d119d119d119d119d119d119d1
19d119d119d119d119d119d119d119d119d119d119d119d119d119d119d1
19d119d119d119d119d119f51a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a191a19
1a191a191a191a191a191a191a191a191a191a191a191a191a191a5e1a5e
1a5e1a5e1a5e1a5e1a5e1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac
1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac
1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac
1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac
1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac1aac
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21af21af2
1af21af21af21af21af21af21af21af21af21af21af21af21af21afa1afa
1afa1afa1afa1afa1afa1b021b021b021b0a1b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b121b121b121b121b121b121b121b121b121b12
1b121b121b121b121b121b841b841b841b841b841b841b841bb21bb21bb2
1bea1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b1c5b
1c5b1c5b1c5b1c5b1c5b1c5b1c5b000100000f29007f0005007800030002
0010002f0065000011902410000200010000002d02220000000300000000
006400000000000300000001000e00640000000300000002000e03040000
000300000003002403120000000300000004000e00640000000300000005
001803360000000300000006000e006400000003000000070076034e0000
000300000008002a000e0000000300000009002003c4000000030000000a
02a00064000000030000000b005603e4000000030000000c002a043a0000
00030000000d02980464000000030000000e006c06fc0001000000000000
0032076800010000000000010007079a0001000000000002000708ea0001
000000000003001208f100010000000000040007079a0001000000000005
000c090300010000000000060007079a0001000000000007003b090f0001
0000000000080015076f00010000000000090010094a000100000000000a
0150079a000100000000000b002b095a000100000000000c001509850001
00000000000d014c099a000100000000000e00360ae60003000104090000
006400000003000104090001000e00640003000104090002000e03040003
000104090003002403120003000104090004000e00640003000104090005
001803360003000104090006000e006400030001040900070076034e0003
000104090008002a000e0003000104090009002003c4000300010409000a
02a00064000300010409000b005603e4000300010409000c002a043a0003
00010409000d02980464000300010409000e006c06fc00a9002000320030
003100340020004d006900630072006f0073006f0066007400200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e00430061006c0069006200720069002000690073002000610020006d
006f006400650072006e002000730061006e007300200073006500720069
0066002000660061006d0069006c00790020007700690074006800200073
007500620074006c006500200072006f0075006e00640069006e00670073
0020006f006e0020007300740065006d007300200061006e006400200063
006f0072006e006500720073002e00200049007400200066006500610074
00750072006500730020007200650061006c0020006900740061006c0069
00630073002c00200073006d0061006c006c00200063006100700073002c
00200061006e00640020006d0075006c007400690070006c00650020006e
0075006d006500720061006c00200073006500740073002e002000490074
0073002000700072006f0070006f007200740069006f006e007300200061
006c006c006f00770020006800690067006800200069006d007000610063
007400200069006e002000740069006700680074006c0079002000730065
00740020006c0069006e006500730020006f006600200062006900670020
0061006e006400200073006d0061006c006c002000740065007800740020
0061006c0069006b0065002e002000430061006c00690062007200690027
00730020006d0061006e0079002000630075007200760065007300200061
006e006400200074006800650020006e0065007700200072006100730074
0065007200690073006500720020007400650061006d0020007500700020
0069006e0020006200690067006700650072002000730069007a00650073
00200074006f002000720065007600650061006c00200061002000770061
0072006d00200061006e006400200073006f006600740020006300680061
007200610063007400650072002e0052006500670075006c00610072004d
006900630072006f0073006f00660074003a002000430061006c00690062
0072006900560065007200730069006f006e00200035002e003800380043
0061006c0069006200720069002000690073002000610020007400720061
00640065006d00610072006b0020006f006600200074006800650020004d
006900630072006f0073006f00660074002000670072006f007500700020
006f006600200063006f006d00700061006e006900650073002e004c0075
00630028006100730029002000640065002000470072006f006f00740068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f006300740066006f006e00740073006800740074
0070003a002f002f0066006f006e007400660061006200720069006b002e
0063006f006d0059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
00450055004c004100200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c007500640065006400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e0074002e00200059006f00750020006d006100790020
006f006e006c0079002000280069002900200065006d0062006500640020
007400680069007300200066006f006e007400200069006e00200063006f
006e00740065006e00740020006100730020007000650072006d00690074
007400650064002000620079002000740068006500200065006d00620065
006400640069006e00670020007200650073007400720069006300740069
006f006e007300200069006e0063006c007500640065006400200069006e
0020007400680069007300200066006f006e0074003b00200061006e0064
00200028006900690029002000740065006d0070006f0072006100720069
006c007900200064006f0077006e006c006f006100640020007400680069
007300200066006f006e007400200074006f002000610020007000720069
006e0074006500720020006f00720020006f00740068006500720020006f
00750074007000750074002000640065007600690063006500200074006f
002000680065006c00700020007000720069006e007400200063006f006e
00740065006e0074002e0068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f0066006f006e0074
0073002f00640065006600610075006c0074002e0061007300700078a920
32303134204d6963726f736f667420436f72706f726174696f6e2e20416c
6c205269676874732052657365727665642e43616c696272692069732061
206d6f6465726e2073616e732073657269662066616d696c792077697468
20737562746c6520726f756e64696e6773206f6e207374656d7320616e64
20636f726e6572732e204974206665617475726573207265616c20697461
6c6963732c20736d616c6c20636170732c20616e64206d756c7469706c65
206e756d6572616c20736574732e204974732070726f706f7274696f6e73
20616c6c6f77206869676820696d7061637420696e2074696768746c7920
736574206c696e6573206f662062696720616e6420736d616c6c20746578
7420616c696b652e2043616c696272692773206d616e7920637572766573
20616e6420746865206e65772072617374657269736572207465616d2075
7020696e206269676765722073697a657320746f2072657665616c206120
7761726d20616e6420736f6674206368617261637465722e526567756c61
724d6963726f736f66743a2043616c6962726956657273696f6e20352e38
3843616c6962726920697320612074726164656d61726b206f6620746865
204d6963726f736f66742067726f7570206f6620636f6d70616e6965732e
4c7563286173292064652047726f6f74687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f666f6e7466616272696b2e636f6d596f75206d6179207573
65207468697320666f6e74206173207065726d6974746564206279207468
652045554c4120666f72207468652070726f6475637420696e2077686963
68207468697320666f6e7420697320696e636c7564656420746f20646973
706c617920616e64207072696e7420636f6e74656e742e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f
6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[14519 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> HIBBAA+Calibri AddT42Char 
2 322 17 <000300ac00000401050e001e002b003800c8401a1f1810014d1f100f014d
1f100d014d1f180c014d1f200b014d1fb8022e40281a154010014d15400f
014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c200b014d
2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0b30f014d
33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b80210400d
a00bc00b020b1a27f431310724b80109b2105134b8010bb10754003fed3f
ed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b12392f2b2b39
e12b2b2b2b2b313001140e0423212226351134363321321e0215140e0207
1e0301342e0223231133323e0213342e0223231133323e0204011f384f63
7149feae17292917012674946332162b412a355c4528fefd1a385a4ab2c4
435236194e25476b51cefa3b58432601733d67523e2a151f270482271f2c
547a4d2e544738120a35526e02012f4c351cfe5d233b4ffddd3a583c1ffe
381c3752>HIBBAA+Calibri AddT42Char 
2 836 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>HIBBAA+Calibri AddT42Char 
2 4164 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>HIBBAA+Calibri AddT42Char 
2 5664 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>HIBBAA+Calibri AddT42Char 
2 5966 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>HIBBAA+Calibri AddT42Char 
2 6288 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>HIBBAA+Calibri AddT42Char 
2 6552 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>HIBBAA+Calibri AddT42Char 
2 6882 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>HIBBAA+Calibri AddT42Char 
2 7756 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>HIBBAA+Calibri AddT42Char 
2 8584 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>HIBBAA+Calibri AddT42Char 
2 9854 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>HIBBAA+Calibri AddT42Char 
2 10142 448 <00010022fffa037b03bc002c00e3b90023fff840170b0c014c1f080b0c01
4c251f011e080b0c014c251e0116b8fff0b30b014d15b8fff0b30b014d14
b8ffe8b30b014d13b8ffe8b30b014d12b8ffe8b30b014d11b8fff040370b
014d37110126110127100128050122280b014d3d220124220121280b014d
3f210124210120280b014d3d2001242001270f0176210121b8ffd0400911
1548212013014d21b8ffe8400910014d21200f014d21b8ffe8b30c014d21
b8fff0400c0b014d212849210b1a490b4c003f3f12393f012f2b2b2b2b2b
002b5d31305d5d5d2b5d5d2b5d5d2b015d5d5d5d2b2b2b2b2b2b5d2b5d2b
2b01140e0207010e0323222e0227012e0235343e0233321e021713173713
3e0333321e02037b01020302fecd040d1a281e1e28190e04fece04050108
131f171d23130904fe0403fb020a13211b171e1107039f04090a0c07fca9
0b0e080304080e0a03570c120903080c070203080c09fd1a0c0c02e6090c
080302080b00>HIBBAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>HIBBAA+Calibri AddT42Char 
HIBBAA+Calibri /CharStrings get begin
/space 3 def
/B 17 def
/L 62 def
/a 258 def
/d 282 def
/e 286 def
/h 346 def
/i 349 def
/l 367 def
/o 381 def
/t 410 def
/u 437 def
/v 448 def
end
HIBBAA+Calibri /Encoding get
dup 32 /space put
dup 66 /B put
dup 76 /L put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 116 /t put
dup 117 /u put
dup 118 /v put
pop
end
%ADOEndSubsetFont
/XCRBIW+Calibri /HIBBAA+Calibri findfont ct_VMDictPut
/XCRBIW+Calibri*1 
[32{/.notdef}rp /space 33{/.notdef}rp /B 9{/.notdef}rp /L 20{/.notdef}rp /a 
2{/.notdef}rp /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 
2{/.notdef}rp /o 4{/.notdef}rp /t /u /v 137{/.notdef}rp]
XCRBIW+Calibri nf
XCRBIW+Calibri*1 [-6.9168e-7 15.72 15.72 6.9168e-7 0 0 ]msf
733.3 50.28 mo
(Load via Bluetooth)
[6.60236 8.28433 7.52994 8.28436 3.36404 7.10538 3.61554 7.52994 3.55267 8.55179 3.61554 8.2529 
7.70282 5.15625 8.28433 8.28433 5.2663 0 ]ysh
%ADOBeginSubsetFont: HIBBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+Calibri gcheck setglobal} if
2 686 47 <000100acfffa0158051400150050b73f174f17af170300b8ffe8b310014d
00b8fff0b30f014d00b8fff0b30d014d00b8fff6b30c014d00b8ffe8b30b
014d00ba0211000affc0b715014d0a10520555003f3f012f2be12b2b2b2b
2b31305d25140e0223222e023511343e0233321e02150158081421191822
140809152117192114081a080c070505070c0804da080c070505070c0800
>HIBBAA+Calibri AddT42Char 
2 4514 272 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>HIBBAA+Calibri AddT42Char 
2 7016 373 <00010099fffa05d003ca005000ea401b12100b014d13180b014d26100b0c
014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b014d13b8
fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8401e1e16
0d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f10014c0ab801
f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27b8fff0b3
10014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200100106b2
4b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f1239393f
ed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b2b2b2b39
31305d002b2b2b2b25140e0223222e023511342e022322060711140e0223
222e023511342e022322060711140e0223222e023511343e0233321e0215
15363633321e02173e0333321e021505d00812201819201308142c442e39
73450813201817211307162c432e397444081220191820130706121c1716
1d10074c8f4938594430102d514b47245776491f19080b080404080b0802
23395e44245855fd8b080b080404080b080223395e44245855fd8b080b08
0404080b080384080b090303090b0877554f1a2f412831442a133d66894c
>HIBBAA+Calibri AddT42Char 
2 7466 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>HIBBAA+Calibri AddT42Char 
2 8040 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>HIBBAA+Calibri AddT42Char 
HIBBAA+Calibri /CharStrings get begin
/I 47 def
/c 272 def
/m 373 def
/n 374 def
/p 393 def
end
HIBBAA+Calibri /Encoding get
dup 73 /I put
dup 99 /c put
dup 109 /m put
dup 110 /n put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XCRBIW+Calibri*1 
[32{/.notdef}rp /space 33{/.notdef}rp /B 6{/.notdef}rp /I 2{/.notdef}rp /L 
20{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h 
/i 2{/.notdef}rp /l /m /n /o /p 3{/.notdef}rp 
/t /u /v 137{/.notdef}rp]
XCRBIW+Calibri nf
XCRBIW+Calibri*1 [-6.9168e-7 15.72 15.72 6.9168e-7 0 0 ]msf
732.41 215.93 mo
(Implement in advance)
[3.96143 12.5602 8.30006 3.61554 7.82857 12.5602 7.82858 8.12714 5.26633 3.59982 3.61554 8.2529 
3.59985 7.52994 8.30005 6.83813 7.52994 8.30008 6.60248 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XCRBIW+Calibri*1 uf
/XCRBIW+Calibri uf
/HIBBAA+Calibri uf
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBIV+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial -21 1262 a Fp(Figure)27 b(1:)35 b(System)25
b(mo)r(del)h(of)g(the)g(prop)r(osed)f(framew)n(ork)-152
1518 y(TECS)34 b(that)f(comprises)h(a)f(Blueto)r(oth)h(loader)g(for)g
(mrub)n(y)d(b)n(yte-)-152 1605 y(co)r(de)39 b(and)e(a)i(Rite)-6
b(VM)37 b(sc)n(heduler)h(for)g(fairly)h(executing)f(mrub)n(y)-152
1692 y(programs.)59 b(T)-6 b(o)33 b(impro)n(v)n(e)g(dev)n(elopmen)n(t)f
(e\036ciency)-6 b(,)35 b(in)e(the)g(pro-)-152 1780 y(p)r(osed)i(framew)
n(ork,)j(dev)n(elop)r(ers)c(need)g(to)h(implemen)n(t)f(the)g(plat-)-152
1867 y(form)23 b(on)f(a)g(storage)h(device)e(only)h(once)g(at)g(the)f
(b)r(eginning)h(and)g(can)-152 1954 y(transfer)31 b(mrub)n(y)d
(application)j(programs)g(from)f(a)g(host)g(to)g(a)g(tar-)-152
2041 y(get)j(device)f(using)g(the)g(Blueto)r(oth)g(loader.)55
b(Note)32 b(that)f(Rite)-6 b(VM)-152 2128 y(is)41 b(the)f(Rub)n(y)e(VM)
i(sp)r(eci\034cally)i(designed)e(for)h(em)n(b)r(edded)e(sys-)-152
2215 y(tems.)34 b(The)21 b(Rite)-6 b(VM)21 b(sc)n(heduler)h(manages)h
(the)e(execution)g(of)h(m)n(ul-)-152 2303 y(tiple)27
b(Rite)-6 b(VMs)26 b(and)f(allo)n(ws)j(dev)n(elop)r(ers)f(to)f(program)
h(m)n(ultitask-)-152 2390 y(ing)22 b(more)g(easily)g(than)f(the)g
(curren)n(t)g(v)n(ersion)g(of)h(mrub)n(y)e(on)i(TECS.)-77
2477 y Fk(Contrib)o(utions)p Fp(:)35 b(The)27 b(prop)r(osed)g(framew)n
(ork)h(pro)n(vides)f(the)f(fol-)-152 2564 y(lo)n(wing)h(con)n
(tributions:)-62 2696 y(1.)38 b Fk(Impr)o(o)o(v)o(ed)27
b(softwar)o(e)g(de)o(v)o(elopment)f(ef\002ciency)-5 b(.)60
b Fp(Dev)n(elop)r(ers)35 2783 y(do)41 b(not)f(need)h(to)g(rewrite)g(a)h
(storage/R)n(OM)g(device)e(and)35 2871 y(restart)25 b(an)g(R)-6
b(TOS.)24 b(The)h(Blueto)r(oth)g(loader)h(supp)r(orts)e(con-)35
2958 y(tin)n(uous)j(loading,)j(whic)n(h)d(reduces)h(Blueto)r(oth)g
(set-up)f(time)35 3045 y(\(i.e.,)g(pairing\).)-62 3185
y(2.)38 b Fk(Execution)25 b(of)h(multiple)e(mruby)h(pr)o(ograms)h
(concurr)o(ently)f(or)35 3272 y(in)f(parallel.)52 b Fp(Dev)n(elop)r
(ers)32 b(can)g(implemen)n(t)g(m)n(ultiple)g(tasks)35
3359 y(without)26 b(R)-6 b(TOS)25 b(kno)n(wledge)i(b)r(ecause)f(the)g
(Rite)-6 b(VM)26 b(sc)n(hed-)35 3446 y(uler)g(switc)n(hes)g(tasks)g
(cyclically)-6 b(.)-62 3586 y(3.)38 b Fk(Synchr)o(onized)22
b(execution)i(of)g(multiple)f(RiteVM)g(tasks.)51 b Fp(The)35
3673 y(prop)r(osed)18 b(framew)n(ork)g(sync)n(hronizes)f(m)n(ultiple)g
(Rite)-6 b(VM)17 b(tasks)35 3760 y(\(i.e.,)27 b(mrub)n(y)d
(applications\).)-62 3900 y(4.)38 b Fk(Bene\002ts)21
b(of)g(CBD:)28 b Fp(The)h(pap)r(er)f(fo)r(cuses)i(on)f(the)f(b)r
(ene\034ts)g(of)35 3987 y(CBD)e(and)f(pro)n(vides)h(sp)r(eci\034c)g
(examples.)-77 4119 y Fk(Or)o(ganization)p Fp(:)38 b(The)27
b(reminder)g(of)h(this)f(pap)r(er)g(is)h(organized)g(as)-152
4206 y(follo)n(ws.)73 b(Section)38 b(2)g(in)n(tro)r(duces)g(the)f
(basic)i(tec)n(hnologies,)j(i.e.,)-152 4293 y(mrub)n(y)-6
b(,)39 b(TECS,)f(and)f(mrub)n(y)f(on)h(TECS.)h(Section)g(3)f(describ)r
(es)-152 4380 y(the)27 b(design)g(and)f(implemen)n(tation)h(of)h(the)e
(prop)r(osed)h(framew)n(ork.)-152 4468 y(Section)h(4)g(ev)l(aluates)g
(the)f(prop)r(osed)h(framew)n(ork.)41 b(Related)28 b(w)n(ork)-152
4555 y(is)33 b(discussed)f(in)g(Section)g(5.)54 b(Conclusions)33
b(and)e(suggestions)j(for)-152 4642 y(future)26 b(w)n(ork)g(are)g
(presen)n(ted)f(in)g(Section)h(6.)-152 4834 y Fq(2.)100
b(B)m(A)-5 b(CKGR)m(OUND)-77 4942 y Fp(Figure)28 b(1)f(sho)n(ws)h(the)f
(system)g(mo)r(del)h(of)g(the)f(prop)r(osed)g(frame-)-152
5029 y(w)n(ork.)61 b(Note)34 b(that)g(the)g(Rite)-6 b(VMs)33
b(and)h(the)g(mrub)n(y)f(library)h(are)-152 5116 y(assumed)f(to)f(b)r
(e)g(prepared)f(in)h(adv)l(ance.)53 b(Byteco)r(des)33
b(are)f(trans-)-152 5203 y(ferred)24 b(from)g(the)f(host)g(to)h(the)f
(target)h(device)f(via)g(Blueto)r(oth,)i(and)-152 5290
y(eac)n(h)e(Rite)-6 b(VM)22 b(is)h(allo)r(cated)h(a)e(b)n(yteco)r(de.)
33 b(Byteco)r(des)23 b(transferred)-152 5378 y(from)k(the)e(host)h(via)
g(Blueto)r(oth)g(can)g(run)f(in)g(m)n(ultitask.)2040
991 y @beginspecial 0 @llx 0 @lly 960 @urx 540 @ury 2437
@rwi @clip @setspecial
%%BeginDocument: figure/mruby.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: mruby.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:12:00
%%BoundingBox: 0 0 960 540
%%HiResBoundingBox: 0 0 960 540
%%CropBox: 0 0 960 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T19:43:34+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T19:43:34+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
960 540 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 540 mo
960 540 li
960 -6.10352e-5 li
0 -6.10352e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
2.04 lw
0 lc
0 lj
10 ml
[8.16 6.12 ] 0 dsh
true sadj
48.18 484.26 mo
249.3 484.26 li
249.3 15.66 li
48.18 15.66 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
165.48 503.64 mo
239.16 503.64 li
239.16 467.28 li
165.48 467.28 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
43 <001C60D8A8C9B61AE94F5D0456ECBCBA90CCFBAD8FDFDE1C76A25DC4FB2C
0A2F1A737ABA942A0D167DB52780D6> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
172.66 491.424 mo
(\000+\000R\000V\000W)
[17.8319 14.3039 11.952 0 ]xsh
90.24 194.52 mo
212.14 194.52 li
225.72 208.1 li
225.72 276 li
90.24 276 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.96 lw
[] 0 dsh
90.24 194.52 mo
212.14 194.52 li
225.72 208.1 li
225.72 276 li
90.24 276 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 5 GetGlyphDirectory
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
122.86 219.62 mo
(\000P\000U\000X\000E\000\\)
[19.2184 8.27641 12.3846 12.1844 0 ]xsh
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
37 <001C60D8A8C9B654A4F8155C331190650E5C458B09F0ADB770BE1877FCB8
910F579D71D9DF3F0C0573230C61F43F4845DBF05498F3910AD33494AEBFA7C3
A18F78E3EEC2DE8F18C55CF37B718E4D70A33E560C66441849273B64230A55CA
C1E945C71BD5257BD7A0BE53CBD725F3A5E119E48DAD9C4DFBD0C2A0AEC05216
5D957E9D8F11E9FD44B22227449941F7CC5624A755FACF677CEF96F2E0E7B9ED
A64A4EABA3CAE4277CB2A168CE5B182DCE2112DBBC> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
109.66 243.62 mo
(\000%\000\\\000W\000H\000F\000R\000G\000H)
[13.487 11.3425 7.59512 11.5029 10.1604 11.9036 12.2445 0 ]xsh
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
17 <001C60D8A8C9B80F37F28BBD69438B6F09441D6BA20ED3CF1C> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
122.5 267.62 mo
(\000\013\000\021)
[8.75987 0 ]xsh
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
138.22 267.62 mo
(\000P\000U\000E)
[19.2184 8.27641 0 ]xsh
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
177.94 267.62 mo
(\000\014)sh
90.24 30.48 mo
212.14 30.48 li
225.72 44.06 li
225.72 111.96 li
90.24 111.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
90.24 30.48 mo
212.14 30.48 li
225.72 44.06 li
225.72 111.96 li
90.24 111.96 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.064 0 0 -20.064 0 0 ]msf
122.86 55.56 mo
(\000P\000U\000X\000E\000\\)
[19.2414 8.28633 12.3192 12.1989 0 ]xsh
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 5 GetGlyphDirectory
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
3 <001C60D8A8C9B816D234> |
41 <001C60D8A8C9B7E02AA5ACADA8FE7995E150DE81112B203AC844BE0BCD5A
C5CB5DED59D44BB9B606B3> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
101.26 79.58 mo
(\0006\000R\000X\000U\000F\000H\000\003\000\)\000L\000O\000H)
[12.7253 11.9036 12.3846 8.27641 10.1604 11.563 6.67325 11.4428 4.98993 5.09012 0 ]xsh
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
132.1 103.58 mo
(\000\013\000\021)
[8.75987 0 ]xsh
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
147.82 103.58 mo
(\000U\000E)
[8.27989 0 ]xsh
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
168.34 103.58 mo
(\000\014\000\003)
[8.75987 0 ]xsh
155.52 111.96 mo
155.52 191.37 li
160.56 191.37 li
160.56 111.96 li
cp
150.48 188.85 mo
158.04 203.97 li
165.6 188.85 li
cp
f
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
83 <001C60D8A8C9B7DB133A6BF1DC72AFF4D9E1D88066B503430ED7CA204AEE
347A7EAE3CB3884EB4FFBB8F90017827BA9DCD885413704044F3F41AD14D2D6A
CED61CEA6A04B229BF5A6BC738FEA6377C17D19B447D1E3C5DDC24F2FD35A82E
DAE48699B344D31AB5EDBC945652C2C08D> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
55.296 148.49 mo
(\000P\000U\000X\000E\000\\)
[19.2184 8.27641 12.3846 12.1844 0 ]xsh
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.064 0 0 -20.064 0 0 ]msf
55.296 172.49 mo
(\000&\000R\000P\000S\000L\000O\000H\000U)
[13.4829 11.8376 19.2414 12.199 5.09621 4.97583 11.5768 0 ]xsh
84.84 401.16 mo
84.84 394.53 90.213 389.16 96.84 389.16 cv
219.12 389.16 li
225.75 389.16 231.12 394.53 231.12 401.16 cv
231.12 449.16 li
231.12 455.787 225.75 461.16 219.12 461.16 cv
96.84 461.16 li
90.213 461.16 84.84 455.787 84.84 449.16 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
84.84 401.16 mo
84.84 394.53 90.213 389.16 96.84 389.16 cv
219.12 389.16 li
225.75 389.16 231.12 394.53 231.12 401.16 cv
231.12 449.16 li
231.12 455.787 225.75 461.16 219.12 461.16 cv
96.84 461.16 li
90.213 461.16 84.84 455.787 84.84 449.16 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
103.42 433.2 mo
(\0005\000L\000W\000H\0009\0000)
[21.8997 8.14419 12.1522 18.4046 21.8997 0 ]xsh
155.52 276 mo
155.52 376.6 li
160.56 376.6 li
160.56 276 li
cp
150.48 374.07 mo
158.04 389.19 li
165.6 374.07 li
cp
f
3 lw
[3 3 ] 0 dsh
4.74 300.66 mo
899.6 300.66 li
1 /0 /CSD get_res sepcs
.651 sep
@
2.04 lw
[8.16 6.12 ] 0 dsh
343.26 480.42 mo
544.38 480.42 li
544.38 313.62 li
343.26 313.62 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
350.88 500.52 mo
565.2 500.52 li
565.2 464.16 li
350.88 464.16 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 6 GetGlyphDirectory
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
39 <001C60D8A8C9B6E081B04FC435829385C5BEDC68DDC35DE8CE7C5EDA488D
6B3D34241C637D17663805636ABD3B433EB8517B7BE139E4B8BA2B0A5F589491
BFB4E8873019EA26DF68E10022DBC58622EA817B140FFE44A9DFABA30D8E7300
B0B48771> |
89 <001C60D8A8C9B7E52216419985ABDC2A2C8279C7A2E84BC8C8D658828106
065B1850310ED427E848> |
36 <001C60D8A8C9B65B43E736E97338B3171E4D5FC9AD2E09D53507110EAE30
BBE0AD4E51A448FF6ED2C8399AE02E57D1E794E82EDCABB32C42C690> |
!
end
end end
%ADOEndSubsetFont
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
358.13 488.28 mo
(\0007\000D\000U\000J\000H\000W\000\003\000'\000H\000Y\000L\000F\000H\000\003\000$)
[12.48 13.92 9.91187 14.5679 13.8479 9.09595 8.15991 17.9758 13.8479 13.5118 6.09595 12.1681 
13.7759 8.25586 0 ]xsh
379.92 397.32 mo
379.92 390.69 385.29 385.32 391.92 385.32 cv
514.2 385.32 li
520.83 385.32 526.2 390.69 526.2 397.32 cv
526.2 445.32 li
526.2 451.947 520.83 457.32 514.2 457.32 cv
391.92 457.32 li
385.29 457.32 379.92 451.947 379.92 445.32 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.96 lw
[] 0 dsh
379.92 397.32 mo
379.92 390.69 385.29 385.32 391.92 385.32 cv
514.2 385.32 li
520.83 385.32 526.2 390.69 526.2 397.32 cv
526.2 445.32 li
526.2 451.947 520.83 457.32 514.2 457.32 cv
391.92 457.32 li
385.29 457.32 379.92 451.947 379.92 445.32 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
398.52 429.36 mo
(\0005\000L\000W\000H\0009\0000)
[21.8997 8.1442 12.1522 18.4046 21.8997 0 ]xsh
2.04 lw
[8.16 6.12 ] 0 dsh
606.78 480.42 mo
807.9 480.42 li
807.9 313.62 li
606.78 313.62 li
cp
@
614.52 500.52 mo
828.72 500.52 li
828.72 464.16 li
614.52 464.16 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
621.74 488.28 mo
(\0007\000D\000U\000J\000H\000W\000\003\000'\000H\000Y\000L\000F\000H\000\003\000%)
[12.48 13.92 9.91187 14.5679 13.8479 9.09595 8.15991 17.9758 13.8479 13.5118 6.09595 12.1681 
13.7759 8.25586 0 ]xsh
643.56 397.32 mo
643.56 390.69 648.93 385.32 655.56 385.32 cv
777.72 385.32 li
784.35 385.32 789.72 390.69 789.72 397.32 cv
789.72 445.32 li
789.72 451.947 784.35 457.32 777.72 457.32 cv
655.56 457.32 li
648.93 457.32 643.56 451.947 643.56 445.32 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.96 lw
[] 0 dsh
643.56 397.32 mo
643.56 390.69 648.93 385.32 655.56 385.32 cv
777.72 385.32 li
784.35 385.32 789.72 390.69 789.72 397.32 cv
789.72 445.32 li
789.72 451.947 784.35 457.32 777.72 457.32 cv
655.56 457.32 li
648.93 457.32 643.56 451.947 643.56 445.32 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
662.16 429.36 mo
(\0005\000L\000W\000H\0009\0000)
[21.8997 8.14423 12.1522 18.4046 21.8997 0 ]xsh
2.04 lw
818.58 40.02 mo
827.1 40.02 834 49.13 834 60.36 cv
834 139.5 li
834 150.73 840.9 159.84 849.42 159.84 cv
840.9 159.84 834 168.95 834 180.18 cv
834 259.32 li
834 270.55 827.1 279.66 818.58 279.66 cv
@
818.58 308.34 mo
827.1 308.34 834 317.45 834 328.68 cv
834 374.7 li
834 385.93 840.9 395.04 849.42 395.04 cv
840.9 395.04 834 404.15 834 415.38 cv
834 461.396 li
834 472.632 827.1 481.74 818.58 481.74 cv
@
%ADOBeginSubsetFont: GFNBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /GFNBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb6d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c796693e073d200008f6800002d6868656164f31caa1e00000f640000
0036686865610dad0c0900000f9c00000024686d7478d9761a3c00000fc0
00002fe26c6f6361b796c47300003fa400001e546d617870213925250000
5df8000000206e616d651fad718400005e1800000d3e707265706baf02fe
00006b5800002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005e1475a78d5b85f0f3cf500190800
00000000bbeb7ccc00000000d219014cfbfafd8b09ec0836000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008c8040e0000000000000000000001cf00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000004ec00ac0000000000000000
0000000003e800ac00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000045800ac0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000046500a100000000000000000000
0000038000a1000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001ec00a10000000000000000
000000000000000000000000000000000000000001ec0011000000000000
00000000000000000000000000000000000002e000a10000000000000000
000000000000000000000000060600a1049100a100000000000000000000
0000000000000000000004aa006600000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000003c5
00a1000000000000000003ed00a100000000000000000000000000000000
00000000000000000000000000000000000000000359001c000000000000
000000000000048d009f0000000000000000000000000000000000000000
000000000000000000000000000000000000000003fd0021000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
0000000001d6009900000000000000000000000000000000000000000000
0000000000000000000001d6009900000000000000000000000000000000
000000000664009904340099000000000000000000000000000000000000
0000000000000438005a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000043400990000
00000000000002ca00990000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002ae0021000000000000000000000000000000000475002100000000
000000000000000000000000000000000000000000000000000000000475
0021051300210000000006d9002100000000000000000000000000000000
0000000000000000000000000000000006d9002104340094000000000000
000000000000000000000000000000000000000000000000000000000000
00000000039d002200000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002e5004802b800470000000000000000000000000163006100000000
00000000015e006c0456006c02e6006c02e6004502e5006c0000000001f6
006c0000000001e3002302e9006c0285001f000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001d6000001ce000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000034b
008e02a8008e000000000000000000000000000000000000000000000000
00000000046d008e00000000000000000000000000000000029b00570000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000034b008e
02a8008e0000000000000000000000000000000000000000000000000000
0000046d008e0000000000000000000000000000000000000000029b0057
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a1010e010e010e010e
018a018a018a018a018a018a018a018a018a018a018a018a018a018a018a
018a018a018a018a018a018a018a018a018a018a018a018a018a018a018a
018a018a018a018a018a018a018a018a018a018a02370237023702370237
023702370237023702370237023702370237023702370237023702370237
0237023702e202e202e202e202e202e202e202e202e202e202e202e202e2
02e202e202e202e202e202e202e202e202e202e202e202e202e202e202e2
02e202e202e202e202e202e202e202e202e202e202e202e202e202e202e2
02e202e202e202e202e202e202e202e202e202e202e202e202e202e202e2
02e202e202e20324032403240324037d037d037d037d037d037d037d037d
037d037d037d037d037d037d037d037d037d037d037d03a903a903a903a9
03a903a903a903a903b403b403b403b403b403b403b403e903e903e903e9
03e903e9045f04cb04cb04cb04cb04cb04cb051905190519051905190519
05190519051905190519051905700570057005ea05ea05ea05ea05ea05ea
05ea05ea05ea05ea062b062b062b062b067b067b067b067b067b067b067b
067b067b067b067b06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd
06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd
06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd06cd0764
076407640764080508050805080508050805080508050805080508050805
080508050805080508050805080508050805080508050805080508050805
080508050805080508050805080508050805080508050805080508050805
080508050805080508050805080508050805080508050805080508050805
080508050805080508050805087e087e087e087e087e087e087e087e087e
08aa08aa08aa08aa08aa08aa08aa08aa08aa08ed08ed08ed08ed08ed08ed
09ce0a5f0a5f0a5f0a5f0a5f0a5f0a5f0aed0aed0aed0aed0aed0aed0aed
0aed0aed0aed0aed0aed0b840b840b840bfd0bfd0bfd0bfd0bfd0bfd0bfd
0bfd0bfd0bfd0bfd0bfd0bfd0bfd0c790c790c790c790c790c850c850c85
0c850c850c850c850c850c850cfb0dad0dad0db90db90db90db90db90db9
0db90db90db90e780f080f080f080f080f080f080f080f080f080f080f08
0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf0fbf
0fbf0fbf0fbf0fbf0fbf0fbf0fbf1025108910891089108910cd10cd10cd
10f9117911cf12181283128312d612d61330138913e113e113e113e113e1
13e113e113e113e113e113e113e113e113e113e113e113e113e113e113e1
13e113e113e113e113e113e113e113e113e113e113e113e113e113e113e1
13e113e113e113e113e113e113e113e113e113e113e113e113e113e113e1
13e113e113e113e113e113e113e113e113e113e113e11405142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
142914291429142914291429142914291429142914291429142914291429
1429142914291429146e146e146e146e146e146e146e14bc14bc14bc14bc
14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc
14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc
14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc
14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc14bc
14bc14bc14bc14bc14bc14bc150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150215021502150215021502150215021502
150215021502150215021502150a15121512151215121512151215121512
151a151a151a151a151a1522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
152215221522152215221522152215221522152215221522152215221522
1522152215221522152215221522152215221522152215221522156415bd
15bd15bd15bd15bd15bd15bd15bd162e162e162e162e162e162e16b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b416b416b4
16b416b416b416b416b416b416b416b416b416b416b416b416b400010000
0f29006b00050078000300020010002f0065000011902410000200010000
002d02220000000300000000006400000000000300000001000e00640000
000300000002000e03040000000300000003002403120000000300000004
000e00640000000300000005001803360000000300000006000e00640000
0003000000070076034e0000000300000008002a000e0000000300000009
002003c4000000030000000a02a00064000000030000000b005603e40000
00030000000c002a043a000000030000000d02980464000000030000000e
006c06fc00010000000000000032076800010000000000010007079a0001
000000000002000708ea0001000000000003001208f10001000000000004
0007079a0001000000000005000c090300010000000000060007079a0001
000000000007003b090f00010000000000080015076f0001000000000009
0010094a000100000000000a0150079a000100000000000b002b095a0001
00000000000c00150985000100000000000d014c099a000100000000000e
00360ae60003000104090000006400000003000104090001000e00640003
000104090002000e03040003000104090003002403120003000104090004
000e00640003000104090005001803360003000104090006000e00640003
0001040900070076034e0003000104090008002a000e0003000104090009
002003c4000300010409000a02a00064000300010409000b005603e40003
00010409000c002a043a000300010409000d02980464000300010409000e
006c06fc00a9002000320030003100340020004d006900630072006f0073
006f0066007400200043006f00720070006f0072006100740069006f006e
002e00200041006c006c0020005200690067006800740073002000520065
007300650072007600650064002e00430061006c00690062007200690020
00690073002000610020006d006f006400650072006e002000730061006e
0073002000730065007200690066002000660061006d0069006c00790020
007700690074006800200073007500620074006c006500200072006f0075
006e00640069006e006700730020006f006e0020007300740065006d0073
00200061006e006400200063006f0072006e006500720073002e00200049
00740020006600650061007400750072006500730020007200650061006c
0020006900740061006c006900630073002c00200073006d0061006c006c
00200063006100700073002c00200061006e00640020006d0075006c0074
00690070006c00650020006e0075006d006500720061006c002000730065
00740073002e0020004900740073002000700072006f0070006f00720074
0069006f006e007300200061006c006c006f007700200068006900670068
00200069006d007000610063007400200069006e00200074006900670068
0074006c007900200073006500740020006c0069006e006500730020006f
0066002000620069006700200061006e006400200073006d0061006c006c
0020007400650078007400200061006c0069006b0065002e002000430061
006c0069006200720069002700730020006d0061006e0079002000630075
007200760065007300200061006e006400200074006800650020006e0065
007700200072006100730074006500720069007300650072002000740065
0061006d00200075007000200069006e0020006200690067006700650072
002000730069007a0065007300200074006f002000720065007600650061
006c002000610020007700610072006d00200061006e006400200073006f
006600740020006300680061007200610063007400650072002e00520065
00670075006c00610072004d006900630072006f0073006f00660074003a
002000430061006c006900620072006900560065007200730069006f006e
00200035002e0038003800430061006c0069006200720069002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00670072006f007500700020006f006600200063006f006d00700061006e
006900650073002e004c0075006300280061007300290020006400650020
00470072006f006f00740068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f006300740066006f
006e007400730068007400740070003a002f002f0066006f006e00740066
0061006200720069006b002e0063006f006d0059006f00750020006d0061
007900200075007300650020007400680069007300200066006f006e0074
0020006100730020007000650072006d0069007400740065006400200062
00790020007400680065002000450055004c004100200066006f00720020
007400680065002000700072006f006400750063007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
00200069007300200069006e0063006c007500640065006400200074006f
00200064006900730070006c0061007900200061006e0064002000700072
0069006e007400200063006f006e00740065006e0074002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002e0068007400740070
003a002f002f007700770077002e006d006900630072006f0073006f0066
0074002e0063006f006d002f007400790070006f00670072006100700068
0079002f0066006f006e00740073002f00640065006600610075006c0074
002e0061007300700078a92032303134204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
43616c696272692069732061206d6f6465726e2073616e73207365726966
2066616d696c79207769746820737562746c6520726f756e64696e677320
6f6e207374656d7320616e6420636f726e6572732e204974206665617475
726573207265616c206974616c6963732c20736d616c6c20636170732c20
616e64206d756c7469706c65206e756d6572616c20736574732e20497473
2070726f706f7274696f6e7320616c6c6f77206869676820696d70616374
20696e2074696768746c7920736574206c696e6573206f66206269672061
6e6420736d616c6c207465787420616c696b652e2043616c696272692773
206d616e792063757276657320616e6420746865206e6577207261737465
7269736572207465616d20757020696e206269676765722073697a657320
746f2072657665616c2061207761726d20616e6420736f66742063686172
61637465722e526567756c61724d6963726f736f66743a2043616c696272
6956657273696f6e20352e383843616c6962726920697320612074726164
656d61726b206f6620746865204d6963726f736f66742067726f7570206f
6620636f6d70616e6965732e4c7563286173292064652047726f6f746874
74703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f677261
7068792f6374666f6e7473687474703a2f2f666f6e7466616272696b2e63
6f6d596f75206d617920757365207468697320666f6e7420617320706572
6d6974746564206279207468652045554c4120666f72207468652070726f
6475637420696e207768696368207468697320666f6e7420697320696e63
6c7564656420746f20646973706c617920616e64207072696e7420636f6e
74656e742e20596f75206d6179206f6e6c792028692920656d6265642074
68697320666f6e7420696e20636f6e74656e74206173207065726d697474
65642062792074686520656d62656464696e67207265737472696374696f
6e7320696e636c7564656420696e207468697320666f6e743b20616e6420
286969292074656d706f726172696c7920646f776e6c6f61642074686973
20666f6e7420746f2061207072696e746572206f72206f74686572206f75
747075742064657669636520746f2068656c70207072696e7420636f6e74
656e742e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f74
79706f6772617068792f666f6e74732f64656661756c742e617370780000
00>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[11625 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> GFNBAA+Calibri AddT42Char 
2 322 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>GFNBAA+Calibri AddT42Char 
2 540 28 <000100ac0000037c050e002c0076b11a27b8ffe8b310014d27b8fff0b30f
014d27b8fff0b30d014d27b8fff6b30c014d27b8ffe8b30b014d27b80211
400909132013200009001ab80108400d802601c02601d0260126260619b8
010cb20d5127b8010cb10654003fed3fed12392f5d7172ed012f2f123939
2f2f10e12b2b2b2b2b32313025140e0223212226351134363321321e0215
140e0223211121321e0215140e0223211121321e02037c040a0d08fd9317
2929170266080d080505080d08fe0601b2080d090404090d08fe4e020108
0d0a0447121b12081f270482271f08121b14121b1108fe6a09101c13121a
1007fe3108111b00>GFNBAA+Calibri AddT42Char 
2 3784 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>GFNBAA+Calibri AddT42Char 
2 4106 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>GFNBAA+Calibri AddT42Char 
2 4436 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>GFNBAA+Calibri AddT42Char 
2 4570 373 <00010099fffa05d003ca005000ea401b12100b014d13180b014d26100b0c
014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b014d13b8
fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8401e1e16
0d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f10014c0ab801
f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27b8fff0b3
10014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200100106b2
4b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f1239393f
ed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b2b2b2b39
31305d002b2b2b2b25140e0223222e023511342e022322060711140e0223
222e023511342e022322060711140e0223222e023511343e0233321e0215
15363633321e02173e0333321e021505d00812201819201308142c442e39
73450813201817211307162c432e397444081220191820130706121c1716
1d10074c8f4938594430102d514b47245776491f19080b080404080b0802
23395e44245855fd8b080b080404080b080223395e44245855fd8b080b08
0404080b080384080b090303090b0877554f1a2f412831442a133d66894c
>GFNBAA+Calibri AddT42Char 
2 5020 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>GFNBAA+Calibri AddT42Char 
2 5310 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>GFNBAA+Calibri AddT42Char 
2 5594 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>GFNBAA+Calibri AddT42Char 
2 5896 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>GFNBAA+Calibri AddT42Char 
2 6138 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>GFNBAA+Calibri AddT42Char 
2 7696 448 <00010022fffa037b03bc002c00e3b90023fff840170b0c014c1f080b0c01
4c251f011e080b0c014c251e0116b8fff0b30b014d15b8fff0b30b014d14
b8ffe8b30b014d13b8ffe8b30b014d12b8ffe8b30b014d11b8fff040370b
014d37110126110127100128050122280b014d3d220124220121280b014d
3f210124210120280b014d3d2001242001270f0176210121b8ffd0400911
1548212013014d21b8ffe8400910014d21200f014d21b8ffe8b30c014d21
b8fff0400c0b014d212849210b1a490b4c003f3f12393f012f2b2b2b2b2b
002b5d31305d5d5d2b5d5d2b5d5d2b015d5d5d5d2b2b2b2b2b2b5d2b5d2b
2b01140e0207010e0323222e0227012e0235343e0233321e021713173713
3e0333321e02037b01020302fecd040d1a281e1e28190e04fece04050108
131f171d23130904fe0403fb020a13211b171e1107039f04090a0c07fca9
0b0e080304080e0a03570c120903080c070203080c09fd1a0c0c02e6090c
080302080b00>GFNBAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>GFNBAA+Calibri AddT42Char 
GFNBAA+Calibri /CharStrings get begin
/space 3 def
/D 24 def
/E 28 def
/e 286 def
/i 349 def
/l 367 def
/m 373 def
/n 374 def
/o 381 def
/p 393 def
/r 396 def
/t 410 def
/v 448 def
end
GFNBAA+Calibri /Encoding get
dup 32 /space put
dup 68 /D put
dup 69 /E put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 118 /v put
pop
end
%ADOEndSubsetFont
/XCRBJA+Calibri /GFNBAA+Calibri findfont ct_VMDictPut
/XCRBJA+Calibri*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D /E 31{/.notdef}rp /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /.notdef /t /.notdef /v 137{/.notdef}rp]
XCRBJA+Calibri nf
XCRBJA+Calibri*1 [-1.056e-6 24 24 1.056e-6 0 0 ]msf
889.25 19.25 mo
(Development Environment)
[14.7601 11.88 10.5599 11.952 5.5199 12.6478 12.5999 19.1759 12 12.3599 8.04016 5.42395 
11.7122 12.2639 10.8479 5.5199 7.992 12.6478 12.5999 19.1759 11.952 12.3839 0 ]ysh
gsave
1.4305e-5 540 mo
960 540 li
960 0 li
1.4305e-5 0 li
cp
eclp
%ADOBeginSubsetFont: GFNBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GFNBAA+Calibri gcheck setglobal} if
2 1134 90 <000200acfffa040b050e003600440091401e102e1137080b014d37100f01
4d37100c0d014c371810014d37180b014d37b80233b7294010014d293f11
b8fff0b310014d11b8fff0b30f014d11b8fff0b30d014d11b8fff6b30c01
4d11b8ffe8b30b014d11b80211b21c2e10b80108b67040014040173db801
0bb5215117550555003f3f3fed12392f5ded39012fe12b2b2b2b2b32d42b
e12b2b2b2b2b123939313025140e0223222e0227032e03232311140e0223
222e023511343633213216171e0315140e02071e03171316160134262726
2623231133323e02040b0614241e1a21140b0477152d3e543b7309132119
192114082917011331411a4b734e2723425c3920342d2814740e08fefd44
50193f3391a84463421f1a080c08040409100c013134573f23fdd9080c07
0505070c0804ae271f05030d38566f4341674f3a140e2b3c4e31fee3241d
03854c69170706fe4c213b50>GFNBAA+Calibri AddT42Char 
2 7408 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>GFNBAA+Calibri AddT42Char 
GFNBAA+Calibri /CharStrings get begin
/R 90 def
/u 437 def
end
GFNBAA+Calibri /Encoding get
dup 82 /R put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XCRBJA+Calibri*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D /E 12{/.notdef}rp /R 18{/.notdef}rp 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /.notdef /t /u /v 137{/.notdef}rp]
XCRBJA+Calibri nf
XCRBJA+Calibri*1 [-1.056e-6 24 24 1.056e-6 0 0 ]msf
889.25 313.18 mo
(Runtime Environment)
[13.032 12.5999 12.4078 8.04016 5.5199 19.1759 11.952 5.35196 11.7122 12.2879 10.8479 5.5199 
7.99197 12.6478 12.5999 19.1759 11.952 12.3839 0 ]ysh
grestore
158.52 273.53 mo
704.82 380.46 li
703.85 385.41 li
157.56 278.47 li
cp
703.31 375.03 mo
716.7 385.35 li
700.41 389.87 li
cp
f
158.92 273.64 mo
442.17 378.61 li
440.42 383.34 li
157.16 278.36 li
cp
441.56 373.01 mo
453.11 385.35 li
436.31 387.19 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBIZ+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
/XCRBJA+Calibri*1 uf
/XCRBJA+Calibri uf
/GFNBAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 2411 1260 a(Figure)h(2:)35 b(mrub)n(y/Rite)-6
b(VM)24 b(mec)n(hanism)2040 1923 y @beginspecial 0 @llx
0 @lly 555 @urx 142 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/component_diagram.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: component_diagram.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:12:55
%%BoundingBox: 0 0 555 142
%%HiResBoundingBox: 0 0 554.5201 141.7201
%%CropBox: 0 0 554.5201 141.7201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T19:47:16+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T19:47:16+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -141.72 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 141.72 li
554.52 141.72 li
554.52 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 141.72 mo
554.52 141.72 li
554.52 -1.52588e-5 li
0 -1.52588e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
9.12 105.36 mo
158.64 105.36 li
158.64 44.04 li
9.12 44.04 li
cp
ef
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
9.12 105.36 mo
158.64 105.36 li
158.64 44.04 li
9.12 44.04 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
8.263e-6 141.72 mo
554.52 141.72 li
554.52 0 li
8.263e-6 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.48 0 0 -18.48 0 0 ]msf
13.224 60.216 mo
(\000W\000&\000D\000O\000O\000H\000U)
[7.00388 12.4185 10.7184 4.69388 4.69388 10.6629 0 ]xsh
grestore
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.744 0 0 -27.744 0 0 ]msf
45.744 93.84 mo
(\000&\000D\000O\000O\000H\000U)
[18.6439 16.0916 7.04691 7.04692 16.0082 0 ]xsh
395.76 105.36 mo
545.4 105.36 li
545.4 44.04 li
395.76 44.04 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
395.76 105.36 mo
545.4 105.36 li
545.4 44.04 li
395.76 44.04 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
!
end
end end
%ADOEndSubsetFont
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.48 0 0 -18.48 0 0 ]msf
399.98 60.216 mo
(\000W\0000\000R\000W\000R\000U)
[7.00388 15.3568 10.8846 7.00385 10.8846 0 ]xsh
gsave
8.263e-6 141.72 mo
554.52 141.72 li
554.52 0 li
8.263e-6 0 li
cp
eclp
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.744 0 0 -27.744 0 0 ]msf
431.66 93.84 mo
(\0000\000R\000W\000R\000U)
[23.0551 16.4798 10.5149 16.4798 0 ]xsh
grestore
395.76 86.4 mo
421.92 73.68 li
395.76 60.96 li
cp
ef
1 lj
395.76 86.4 mo
421.92 73.68 li
395.76 60.96 li
cp
@
.72 lw
158.64 74.64 mo
395.76 74.64 li
@
%ADOBeginSubsetFont: XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
3 <001C60D8A8C9B816D234> |
83 <001C60D8A8C9B7DB133A6BF1DC72AFF4D9E1D88066B503430ED7CA204AEE
347A7EAE3CB3884EB4FFBB8F90017827BA9DCD885413704044F3F41AD14D2D6A
CED61CEA6A04B229BF5A6BC738FEA6377C17D19B447D1E3C5DDC24F2FD35A82E
DAE48699B344D31AB5EDBC945652C2C08D> |
29 <001C60D8A8C9B76D61AE9E96E6A51E6B1AB2BC7F7D2CB956D27F5DF6E619
2305213574119DC9> |
!
end
end end
%ADOEndSubsetFont
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [16.224 0 0 -16.224 0 0 ]msf
165.94 33.82 mo
(\000F\000D\000O\000O\000\003\000S\000R\000U\000W\000\035)
[8.16074 9.36128 4.12085 4.03975 5.62967 9.86421 9.57207 6.94379 6.14886 0 ]xsh
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [16.224 0 0 -16.224 0 0 ]msf
165.94 53.28 mo
(\000F\0000\000R\000W\000R\000U)
[8.16074 13.482 9.55585 6.14885 9.57208 0 ]xsh
%ADOBeginSubsetFont: XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
end end
%ADOEndSubsetFont
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [16.224 0 0 -16.224 0 0 ]msf
290.98 33.82 mo
(\000H\000Q\000W\000U\000\\\000\003\000S\000R\000U\000W\000\035)
[9.36118 10.0264 6.14886 6.94379 9.18268 5.38632 9.86423 9.63696 6.95999 6.14886 0 ]xsh
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [16.224 0 0 -16.224 0 0 ]msf
322.56 53.28 mo
(\000H\0000\000R\000W\000R\000U)
[9.36118 13.4821 9.55582 6.14886 9.57208 0 ]xsh
%ADOBeginSubsetFont: XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
!
end
end end
%ADOEndSubsetFont
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [16.224 0 0 -16.224 0 0 ]msf
237.1 98.208 mo
(\000V\000L\000J\000Q\000D\000W\000X\000U\000H\000\035)
[8.07957 4.03973 9.84789 9.94525 9.36127 6.14886 9.92902 6.70044 9.36118 0 ]xsh
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [16.2 0 0 -16.2 0 0 ]msf
250.54 117.672 mo
(\000V\0000\000R\000W\000R\000U)
[8.04002 13.4345 9.59512 6.11215 9.59512 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBJH+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 2517 2093 a(Figure)i(3:)35 b(Comp)r(onen)n(t)26
b(Diagram)2040 2374 y Fq(2.1)99 b(mruby)2115 2482 y Fp(mrub)n(y)24
b(is)j(a)f(ligh)n(t-w)n(eigh)n(t)h(implemen)n(tation)f(of)h(the)f(Rub)n
(y)e(pro-)2040 2569 y(gramming)h(language)h(complying)f(to)f(part)g(of)
h(the)f(ISO)f(standard.)2040 2656 y(Rub)n(y)16 b(is)i(an)g(ob)t
(ject-orien)n(ted)h(scripting)f(language)h([8])g(with)f(classes)2040
2743 y(and)28 b(metho)r(ds,)g(exceptions,)h(and)e(garbage)i(collection)
h(functions.)2040 2830 y(It)i(is)h(easy)f(to)h(use)f(and)g(read)g(due)g
(to)g(its)h(simple)g(grammar)g(and)2040 2917 y(Rub)n(y)f(requires)i
(few)n(er)h(lines)f(of)h(co)r(de)f(than)f(C.)i(Rub)n(y)d(impro)n(v)n
(es)2040 3005 y(the)d(pro)r(ductivit)n(y)e(of)j(soft)n(w)n(are)h(dev)n
(elopmen)n(t)d(due)g(to)i(its)f(simple)2040 3092 y(grammar)e(and)e(ob)t
(ject-orien)n(ted)h(functions.)2115 3179 y(mrub)n(y)-6
b(,)17 b(whic)n(h)g(retains)h(the)f(usabilit)n(y)g(and)g(readabilit)n
(y)g(of)h(Rub)n(y)-6 b(,)2040 3266 y(requires)25 b(few)n(er)h
(resources,)h(and)d(th)n(us,)h(is)g(suitable)h(for)g(em)n(b)r(edded)
2040 3353 y(systems.)33 b(In)20 b(addition,)h(mrub)n(y)e(includes)h(a)h
(VM)f(mec)n(hanism,)i(and)2040 3441 y(th)n(us,)28 b(mrub)n(y)f
(programs)i(can)f(run)f(on)h(an)n(y)f(op)r(erating)i(system)f(as)2040
3528 y(long)g(as)f(a)h(VM)f(is)g(implemen)n(ted.)38 b(The)27
b(mrub)n(y/Rite)-6 b(VM)26 b(mec)n(ha-)2040 3615 y(nism)j(is)h(sho)n
(wn)f(in)f(Figure)i(2.)44 b(The)29 b(mrub)n(y)f(compiler)h(translates)
2040 3702 y(an)22 b(mrub)n(y)e(co)r(de)i(in)n(to)g(a)g(b)n(yteco)r(de,)
g(whic)n(h)g(can)g(b)r(e)g(in)n(terpreted)f(b)n(y)2040
3789 y(a)32 b(Rite)-6 b(VM;)32 b(th)n(us,)h(mrub)n(y)d(programs)j(can)f
(b)r(e)g(executed)f(on)h(an)n(y)2040 3876 y(target)26
b(device)g(with)g(a)g(Rite)-6 b(VM.)2040 4040 y Fq(2.2)99
b(TECS)2115 4148 y Fp(TECS)27 b(is)g(a)f(comp)r(onen)n(t)g(system)h
(suitable)g(for)g(em)n(b)r(edded)e(sys-)2040 4235 y(tems.)37
b(TECS)27 b(can)g(increase)g(pro)r(ductivit)n(y)e(and)h(reduce)g(dev)n
(elop-)2040 4322 y(men)n(t)i(costs)i(due)f(to)g(impro)n(v)n(ed)f
(reusabilit)n(y)h(of)h(soft)n(w)n(are)g(comp)r(o-)2040
4409 y(nen)n(ts.)i(TECS)21 b(also)h(pro)n(vides)e(comp)r(onen)n(t)g
(diagrams,)j(whic)n(h)e(help)2040 4496 y(dev)n(elop)r(ers)26
b(visualize)h(the)e(o)n(v)n(erall)h(structure)g(of)g(a)g(system.)2115
4583 y(In)39 b(TECS,)i(comp)r(onen)n(t)e(deplo)n(ymen)n(t)g(and)g(comp)
r(osition)i(are)2040 4671 y(p)r(erformed)26 b(statically)-6
b(.)35 b(Consequen)n(tly)-6 b(,)25 b(connecting)g(comp)r(onen)n(ts)2040
4758 y(do)r(es)40 b(not)f(incur)g(signi\034can)n(t)g(o)n(v)n(erhead)g
(and)g(memory)g(require-)2040 4845 y(men)n(ts)c(can)h(b)r(e)g(reduced.)
63 b(TECS)37 b(can)f(b)r(e)f(implemen)n(ted)g(in)h(C,)2040
4932 y(and)21 b(demonstrates)h(v)l(arious)g(feature)g(suc)n(h)f(as)i
(source)f(lev)n(el)g(p)r(orta-)2040 5019 y(bilit)n(y)k(and)f
(\034ne-grained)g(comp)r(onen)n(ts.)2063 5182 y Fj(2.2.1)90
b(Component)21 b(Model)2115 5290 y Fp(Figure)k(3)g(sho)n(ws)g(a)g(comp)
r(onen)n(t)g(diagram.)35 b(A)24 b Fi(cell)p Fp(,)h(whic)n(h)f(is)i(an)
2040 5378 y(instance)33 b(of)h(a)f(comp)r(onen)n(t)f(in)h(TECS,)g
(consists)h(of)g Fi(entry)f Fp(p)r(orts,)p eop end
%%Page: 3 3
TeXDict begin 3 2 bop 40 -137 1801 4 v -49 -60 a Fh(1)56
b Fl(signature)25 b(sMotor)g({)-49 15 y Fh(2)183 b Fl(in)n(t32_t)25
b(getCoun)n(ts)r(\()f(v)n(oid)f(\);)-49 90 y Fh(3)183
b Fl(ER)23 b(resetCoun)n(ts)s(\()h(v)n(oid)g(\);)-49
165 y Fh(4)183 b Fl(ER)23 b(setP)n(o)n(w)n(er)r(\()h([in])o(in)n(t)g(p)
r(o)n(w)n(er)h(\);)-49 239 y Fh(5)183 b Fl(ER)23 b(stop)q(\()h([in])f
(b)r(o)r(ol_t)h(brak)n(e)h(\);)-49 314 y Fh(6)183 b Fl(ER)23
b(rotate)s(\()h([)o(in])f(in)n(t)h(degrees)r(,)f([in)o(])g(uin)n(t32_t)
i(sp)r(eed_abs)q(,)-49 389 y Fh(7)501 b Fl([)o(in])23
b(b)r(o)r(ol_t)h(blo)r(c)n(king)g(\);)-49 464 y Fh(8)183
b Fl(v)n(oid)24 b(initializeP)n(ort)q(\()g([)o(in]in)n(t32_t)g(t)n(yp)r
(e)h(\);)-49 538 y Fh(9)56 b Fl(};)p 40 589 V 312 804
a Fp(Figure)26 b(4:)35 b(Signature)26 b(Description)p
40 950 V -49 1027 a Fh(1)56 b Fl(cellt)n(yp)r(e)25 b(tCaller)f({)-49
1102 y Fh(2)183 b Fl(call)23 b(sMotor)i(cMotor)q(;)-49
1176 y Fh(3)56 b Fl(};)-49 1251 y Fh(4)g Fl(cellt)n(yp)r(e)25
b(tMotor)g({)-49 1326 y Fh(5)183 b Fl(en)n(try)25 b(sMotor)g(eMotor)q
(;)-49 1400 y Fh(6)183 b Fl(attr)25 b({)-49 1475 y Fh(7)310
b Fl(in)n(t32_t)25 b(p)r(ort)q(;)-49 1550 y Fh(8)183
b Fl(};)-49 1625 y Fh(9)g Fl(v)l(ar)25 b({)-82 1699 y
Fh(10)310 b Fl(in)n(t32_t)25 b(curren)n(tSp)r(eed)i(=)c(0;)-82
1774 y Fh(11)183 b Fl(};)-82 1849 y Fh(12)56 b Fl(};)p
40 1899 V 332 2115 a Fp(Figure)27 b(5:)34 b(Cellt)n(yp)r(e)26
b(Description)-152 2386 y Fi(call)31 b Fp(p)r(orts,)h(attributes)f(and)
f(in)n(ternal)h(v)l(ariables.)50 b(An)30 b Fi(entry)h
Fp(p)r(ort)-152 2473 y(is)e(an)g(in)n(terface)g(that)f(pro)n(vides)h
(functions)g(to)f(other)h Fi(cell)p Fp(s,)g(and)f(a)-152
2561 y Fi(call)i Fp(p)r(ort)f(is)h(an)g(in)n(terface)g(that)g(enables)g
(the)f(use)g(of)i(other)e Fi(cell)p Fp('s)-152 2648 y(functions.)35
b(A)24 b Fi(cell)h Fp(has)g(one)g(or)g(more)g Fi(entry)h
Fp(p)r(orts)f(and)f Fi(call)h Fp(p)r(orts.)-152 2735
y Fi(Cell)g Fp(functions)h(are)h(implemen)n(ted)e(in)h(C.)-77
2822 y(The)d(t)n(yp)r(e)e(of)j Fi(entry)p Fp(/)p Fi(call)f
Fp(p)r(ort)f(is)h(de\034ned)f(b)n(y)f(a)i Fi(signatur)m(e)p
Fp(,)i(whic)n(h)-152 2909 y(is)31 b(a)g(set)g(of)g(functions.)50
b(A)30 b Fi(signatur)m(e)i Fp(is)f(the)f(in)n(terface)h(de\034nition)
-152 2996 y(of)f(a)f Fi(cell)p Fp(.)44 b(The)29 b Fi(cell)p
Fp('s)h Fi(call)f Fp(p)r(ort)f(can)h(b)r(e)g(connected)g(to)g(the)f
Fi(entry)-152 3084 y Fp(p)r(ort)37 b(of)g(another)f Fi(cell)g
Fp(b)n(y)f(the)h(same)h Fi(signatur)m(e)p Fp(.)68 b(Here,)39
b Fi(celltype)-152 3171 y Fp(de\034nes)23 b(one)g(or)g(more)h
Fi(call)p Fp(/)p Fi(entry)g Fp(p)r(orts,)g(attributes,)g(and)f(in)n
(ternal)-152 3258 y(v)l(ariables)k(of)f(a)g Fi(cell)p
Fp(.)-129 3412 y Fj(2.2.2)90 b(Component)21 b(Description)-77
3520 y Fp(In)41 b(TECS,)h(comp)r(onen)n(ts)f(are)h(describ)r(ed)f(b)n
(y)f Fi(signatur)m(e)p Fp(,)47 b Fi(cell-)-152 3608 y(type)p
Fp(,)33 b(and)e(build)f(written)h(in)g(comp)r(onen)n(t)f(description)i
(language)-152 3695 y(\(CDL\).)26 b(These)g(comp)r(onen)n(ts)g(are)g
(describ)r(ed)g(as)g(follo)n(ws.)-152 3860 y Fk(Signatur)o(e)18
b(Description)35 3947 y Fp(The)39 b Fi(signatur)m(e)g
Fp(de\034nes)f(a)h Fi(cell)f Fp(in)n(terface.)74 b(The)38
b Fi(signatur)m(e)35 4034 y Fp(name)26 b(follo)n(ws)h(the)e(k)n(eyw)n
(ord)g Fi(signatur)m(e)i Fp(and)e(tak)n(es)g(the)g(pre-)35
4121 y(\034x)35 b(\020s\021)41 b(e.g.,)f(sMotor)c(\(Figure)g(4\).)65
b(In)34 b(TECS,)j(to)f(clarify)35 4208 y(the)25 b(function)g(of)h(an)f
(in)n(terface,)h(sp)r(eci\034ers)g(suc)n(h)f(as)g([in])h(and)35
4296 y([out])k(are)g(used,)h(whic)n(h)f(represen)n(t)f(input)g(and)g
(output,)h(re-)35 4383 y(sp)r(ectiv)n(ely)-6 b(.)-152
4531 y Fk(Celltype)19 b(Description)35 4619 y Fp(The)30
b Fi(celltype)g Fp(de\034nes)f Fi(entry)h Fp(p)r(orts,)i
Fi(call)d Fp(p)r(orts,)i(attributes,)35 4706 y(and)c(v)l(ariables.)40
b(A)27 b Fi(celltype)g Fp(name)h(with)f(the)g(pre\034x)f(\020t\021)33
b(fol-)35 4793 y(lo)n(ws)c(the)e(k)n(eyw)n(ord)g Fi(celltype)p
Fp(,)i(e.g.,)h(tCaller)f(\(Figure)f(5\).)40 b(T)-6 b(o)35
4880 y(de\034ne)25 b Fi(entry)g Fp(p)r(orts,)h(a)g Fi(signatur)m(e)p
Fp(,)h(e.g.,)g(sMotor,)f(and)f(an)g Fi(en-)35 4967 y(try)j
Fp(p)r(ort)g(name,)h(e.g.,)h(eMotor,)g(follo)n(w)g(the)e(k)n(eyw)n(ord)
f Fi(entry)p Fp(.)35 5054 y Fi(Call)k Fp(p)r(orts)g(are)h(de\034ned)e
(similarly)-6 b(.)52 b(A)n(ttributes)30 b(and)h(v)l(ari-)35
5142 y(ables)c(follo)n(w)g(the)f(k)n(eyw)n(ords)f Fi(attr)g
Fp(and)h Fi(var)p Fp(,)g(resp)r(ectiv)n(ely)-6 b(.)-152
5290 y Fk(Build)17 b(Description)35 5378 y Fp(The)31
b(build)f(description)h(is)g(used)g(to)g(instan)n(tiate)g(and)f(con-)p
2232 -137 V 2143 -60 a Fh(1)56 b Fl(cell)23 b(tMotor)i(Motor)g({)2143
15 y Fh(2)183 b Fl(p)r(ort)25 b(=)e(C_EXP\("POR)-6 b(T_A"\);)2143
90 y Fh(3)56 b Fl(};)2143 165 y Fh(4)g Fl(cell)23 b(tCaller)h(Caller)g
({)2143 239 y Fh(5)183 b Fl(cMotor)25 b(=)e(Motor)q(.eMotor)q(;)2143
314 y Fh(6)56 b Fl(};)p 2232 365 V 2573 580 a Fp(Figure)26
b(6:)35 b(Build)26 b(Description)2040 1854 y @beginspecial
0 @llx 0 @lly 960 @urx 540 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/mrubyontecs.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: mrubyontecs.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:11:41
%%BoundingBox: 0 0 960 540
%%HiResBoundingBox: 0 0 960 540
%%CropBox: 0 0 960 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T19:49:49+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T19:49:49+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
960 540 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 540 mo
960 540 li
960 -6.10352e-5 li
0 -6.10352e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 56.16 mo
10.92 44.69 20.215 35.4 31.68 35.4 cv
185.76 35.4 li
197.23 35.4 206.52 44.69 206.52 56.16 cv
206.52 139.2 li
206.52 150.67 197.23 159.96 185.76 159.96 cv
31.68 159.96 li
20.215 159.96 10.92 150.67 10.92 139.2 cv
cp
ef
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
10.92 56.16 mo
10.92 44.69 20.215 35.4 31.68 35.4 cv
185.76 35.4 li
197.23 35.4 206.52 44.69 206.52 56.16 cv
206.52 139.2 li
206.52 150.67 197.23 159.96 185.76 159.96 cv
31.68 159.96 li
20.215 159.96 10.92 150.67 10.92 139.2 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 6 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.96 0 0 -27.96 0 0 ]msf
64.392 66.38 mo
(\000P\000U\000X\000E\000\\)
[26.8696 11.5473 17.2792 17.0556 0 ]xsh
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
51 <001C60D8A8C9B7C7F3AB8C913496B09857977C9DC6242A9162060173AC59
9393DA1940FF4DBBBB7DC58141AB33AD646160390F69558CE684F038371A8CA4
BBDE854FF6E871389797481AE0511B0909CE7DDDBB9990A8EC8C41B5BDE134> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.96 0 0 -27.96 0 0 ]msf
50.712 103.34 mo
(\0003\000U\000R\000J\000U\000D\000P)
[16.664 11.5473 16.6081 16.8597 11.1559 16.2168 0 ]xsh
gsave
1.4305e-5 540 mo
960 540 li
960 0 li
1.4305e-5 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 7 GetGlyphDirectory
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.984 0 0 -27.984 0 0 ]msf
27.792 140.3 mo
(\000\013\000E\000\\\000W\000H\000F\000R\000G\000H\000V\000\014)
[12.2848 17.0143 15.8388 10.6059 16.0067 14.188 16.5384 17.0143 16.1467 13.936 0 ]xsh
grestore
206.52 56.16 mo
206.52 44.69 215.81 35.4 227.28 35.4 cv
381.36 35.4 li
392.83 35.4 402.12 44.69 402.12 56.16 cv
402.12 139.2 li
402.12 150.67 392.83 159.96 381.36 159.96 cv
227.28 159.96 li
215.81 159.96 206.52 150.67 206.52 139.2 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
206.52 56.16 mo
206.52 44.69 215.81 35.4 227.28 35.4 cv
381.36 35.4 li
392.83 35.4 402.12 44.69 402.12 56.16 cv
402.12 139.2 li
402.12 150.67 392.83 159.96 381.36 159.96 cv
227.28 159.96 li
215.81 159.96 206.52 150.67 206.52 139.2 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.96 0 0 -27.96 0 0 ]msf
260.06 66.38 mo
(\000P\000U\000X\000E\000\\)
[26.8136 11.5473 17.2792 16.9997 0 ]xsh
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.96 0 0 -27.96 0 0 ]msf
246.38 103.34 mo
(\0003\000U\000R\000J\000U\000D\000P)
[16.664 11.5473 16.6081 16.8597 11.1559 16.2169 0 ]xsh
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.984 0 0 -27.984 0 0 ]msf
223.46 140.3 mo
(\000\013\000E\000\\\000W\000H\000F\000R\000G\000H\000V\000\014)
[12.2849 17.0143 15.8388 10.6059 16.0067 14.188 16.5384 17.0143 16.1467 13.936 0 ]xsh
402.12 56.04 mo
402.12 44.57 411.41 35.28 422.88 35.28 cv
577.08 35.28 li
588.55 35.28 597.84 44.57 597.84 56.04 cv
597.84 139.08 li
597.84 150.55 588.55 159.84 577.08 159.84 cv
422.88 159.84 li
411.41 159.84 402.12 150.55 402.12 139.08 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
402.12 56.04 mo
402.12 44.57 411.41 35.28 422.88 35.28 cv
577.08 35.28 li
588.55 35.28 597.84 44.57 597.84 56.04 cv
597.84 139.08 li
597.84 150.55 588.55 159.84 577.08 159.84 cv
422.88 159.84 li
411.41 159.84 402.12 150.55 402.12 139.08 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.984 0 0 -27.984 0 0 ]msf
455.71 66.29 mo
(\000P\000U\000X\000E\000\\)
[26.8366 11.5573 17.294 17.0143 0 ]xsh
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.96 0 0 -27.96 0 0 ]msf
442.03 103.27 mo
(\0003\000U\000R\000J\000U\000D\000P)
[16.664 11.5473 16.6081 16.8597 11.1559 16.2169 0 ]xsh
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.96 0 0 -27.96 0 0 ]msf
419.11 140.23 mo
(\000\013\000E\000\\\000W\000H\000F\000R\000G\000H\000V\000\014)
[12.2743 16.9997 15.8252 10.5968 16.1328 14.0919 16.608 16.9998 16.1328 13.9241 0 ]xsh
10.92 177.48 mo
10.92 167.94 18.657 160.2 28.2 160.2 cv
189.24 160.2 li
198.78 160.2 206.52 167.94 206.52 177.48 cv
206.52 246.6 li
206.52 256.14 198.78 263.88 189.24 263.88 cv
28.2 263.88 li
18.657 263.88 10.92 256.14 10.92 246.6 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 177.48 mo
10.92 167.94 18.657 160.2 28.2 160.2 cv
189.24 160.2 li
198.78 160.2 206.52 167.94 206.52 177.48 cv
206.52 246.6 li
206.52 256.14 198.78 263.88 189.24 263.88 cv
28.2 263.88 li
18.657 263.88 10.92 256.14 10.92 246.6 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
54.168 220.3 mo
(\0005\000L\000W\000H\0009\0000)
[21.8997 8.14419 12.1522 18.4046 21.8997 0 ]xsh
206.52 176.4 mo
206.52 166.86 214.26 159.12 223.8 159.12 cv
384.84 159.12 li
394.38 159.12 402.12 166.86 402.12 176.4 cv
402.12 245.52 li
402.12 255.06 394.38 262.8 384.84 262.8 cv
223.8 262.8 li
214.26 262.8 206.52 255.06 206.52 245.52 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
206.52 176.4 mo
206.52 166.86 214.26 159.12 223.8 159.12 cv
384.84 159.12 li
394.38 159.12 402.12 166.86 402.12 176.4 cv
402.12 245.52 li
402.12 255.06 394.38 262.8 384.84 262.8 cv
223.8 262.8 li
214.26 262.8 206.52 255.06 206.52 245.52 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
249.82 219.24 mo
(\0005\000L\000W\000H\0009\0000)
[21.8833 8.13809 12.1431 18.4869 21.8833 0 ]xsh
402.12 176.76 mo
402.12 167.22 409.86 159.48 419.4 159.48 cv
580.56 159.48 li
590.1 159.48 597.84 167.22 597.84 176.76 cv
597.84 245.88 li
597.84 255.42 590.1 263.16 580.56 263.16 cv
419.4 263.16 li
409.86 263.16 402.12 255.42 402.12 245.88 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
402.12 176.76 mo
402.12 167.22 409.86 159.48 419.4 159.48 cv
580.56 159.48 li
590.1 159.48 597.84 167.22 597.84 176.76 cv
597.84 245.88 li
597.84 255.42 590.1 263.16 580.56 263.16 cv
419.4 263.16 li
409.86 263.16 402.12 255.42 402.12 245.88 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
445.49 219.6 mo
(\0005\000L\000W\000H\0009\0000)
[21.8833 8.13809 12.1431 18.4869 21.8833 0 ]xsh
10.92 270.96 mo
10.92 266.65 14.412 263.16 18.72 263.16 cv
198.72 263.16 li
203.03 263.16 206.52 266.65 206.52 270.96 cv
206.52 302.16 li
206.52 306.47 203.03 309.96 198.72 309.96 cv
18.72 309.96 li
14.412 309.96 10.92 306.47 10.92 302.16 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 270.96 mo
10.92 266.65 14.412 263.16 18.72 263.16 cv
198.72 263.16 li
203.03 263.16 206.52 266.65 206.52 270.96 cv
206.52 302.16 li
206.52 306.47 203.03 309.96 198.72 309.96 cv
18.72 309.96 li
14.412 309.96 10.92 306.47 10.92 302.16 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
78 <001C60D8A8C9B794D33B340B990850C065E40D166F6B8A65A7F0F8858ECE
050176CE5B3D54865610F2C7BA0E6A48EB238D93222848> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
74.28 293.45 mo
(\0007\000D\000V\000N)
[16.6929 18.5833 15.9559 0 ]xsh
206.52 272.04 mo
206.52 267.73 210.01 264.24 214.32 264.24 cv
394.32 264.24 li
398.63 264.24 402.12 267.73 402.12 272.04 cv
402.12 303.24 li
402.12 307.55 398.63 311.04 394.32 311.04 cv
214.32 311.04 li
210.01 311.04 206.52 307.55 206.52 303.24 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
206.52 272.04 mo
206.52 267.73 210.01 264.24 214.32 264.24 cv
394.32 264.24 li
398.63 264.24 402.12 267.73 402.12 272.04 cv
402.12 303.24 li
402.12 307.55 398.63 311.04 394.32 311.04 cv
214.32 311.04 li
210.01 311.04 206.52 307.55 206.52 303.24 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
269.93 294.48 mo
(\0007\000D\000V\000N)
[16.6929 18.5833 15.956 0 ]xsh
402.12 271.1 mo
402.12 266.78 405.62 263.28 409.94 263.28 cv
590.02 263.28 li
594.34 263.28 597.84 266.78 597.84 271.1 cv
597.84 302.38 li
597.84 306.7 594.34 310.2 590.02 310.2 cv
409.94 310.2 li
405.62 310.2 402.12 306.7 402.12 302.38 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
402.12 271.1 mo
402.12 266.78 405.62 263.28 409.94 263.28 cv
590.02 263.28 li
594.34 263.28 597.84 266.78 597.84 271.1 cv
597.84 302.38 li
597.84 306.7 594.34 310.2 590.02 310.2 cv
409.94 310.2 li
405.62 310.2 402.12 306.7 402.12 302.38 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
465.6 293.59 mo
(\0007\000D\000V\000N)
[16.6733 18.5972 15.9679 0 ]xsh
10.92 332.26 mo
10.92 320.28 20.635 310.56 32.62 310.56 cv
576.14 310.56 li
588.12 310.56 597.84 320.28 597.84 332.26 cv
597.84 419.06 li
597.84 431.04 588.12 440.76 576.14 440.76 cv
32.62 440.76 li
20.635 440.76 10.92 431.04 10.92 419.06 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 332.26 mo
10.92 320.28 20.635 310.56 32.62 310.56 cv
576.14 310.56 li
588.12 310.56 597.84 320.28 597.84 332.26 cv
597.84 419.06 li
597.84 431.04 588.12 440.76 576.14 440.76 cv
32.62 440.76 li
20.635 440.76 10.92 431.04 10.92 419.06 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
263.28 372.02 mo
(\0007\000\(\000&\0006)
[20.3775 19.8006 21.5308 0 ]xsh
597.84 144.96 mo
597.84 113.41 623.41 87.84 654.96 87.84 cv
883.44 87.84 li
914.99 87.84 940.56 113.41 940.56 144.96 cv
940.56 399.48 li
940.56 431.03 914.99 456.6 883.44 456.6 cv
654.96 456.6 li
623.41 456.6 597.84 431.03 597.84 399.48 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
597.84 144.96 mo
597.84 113.41 623.41 87.84 654.96 87.84 cv
883.44 87.84 li
914.99 87.84 940.56 113.41 940.56 144.96 cv
940.56 399.48 li
940.56 431.03 914.99 456.6 883.44 456.6 cv
654.96 456.6 li
623.41 456.6 597.84 431.03 597.84 399.48 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
49 <001C60D8A8C9B6184AB5445E2049CE7834CACA1B144F394B59C0765899E8
457350BF2483D2D78DD2E6F35B65> |
89 <001C60D8A8C9B7E52216419985ABDC2A2C8279C7A2E84BC8C8D658828106
065B1850310ED427E848> |
3 <001C60D8A8C9B816D234> |
18 <001C60D8A8C9B77AEA5E94F4C4913454F61865807FFA2320A92BA3C5> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
651.1 201.86 mo
(\0001\000D\000W\000L\000Y\000H\000\003\000\022\000\003)
[23.7416 18.5833 12.1431 8.13812 17.9102 18.4869 10.8935 14.3861 0 ]xsh
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
786.24 201.86 mo
(\000P\000U\000X\000E\000\\)
[30.7263 13.2324 19.8006 19.2881 0 ]xsh
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
47 <001C60D8A8C9B7EE7C16355902DB0AD05E58E1D387F79781FB3D99981E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
702.94 244.1 mo
(\000/\000L\000E\000U\000D\000U\000L\000H\000V)
[17.8465 8.13806 19.4804 12.7197 18.5833 13.2323 8.13812 18.4869 0 ]xsh
10.92 441.96 mo
10.92 437.65 14.412 434.16 18.72 434.16 cv
932.76 434.16 li
937.07 434.16 940.56 437.65 940.56 441.96 cv
940.56 473.16 li
940.56 477.468 937.07 480.96 932.76 480.96 cv
18.72 480.96 li
14.412 480.96 10.92 477.468 10.92 473.16 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 441.96 mo
10.92 437.65 14.412 434.16 18.72 434.16 cv
932.76 434.16 li
937.07 434.16 940.56 437.65 940.56 441.96 cv
940.56 473.16 li
940.56 477.468 937.07 480.96 932.76 480.96 cv
18.72 480.96 li
14.412 480.96 10.92 477.468 10.92 473.16 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
50 <001C60D8A8C9B6EFA83FE463A0987A11EEA716904A67C72122A66ADBC001
395B8B74FF7EE0E45B38298DD5B35482E6FF0A1AECD115B8456F10761475E357
F2C318AC306FA5311069C953AA74DF31651BEED7D0408C44AD051720F0645E90
327451737F3C8880F85CF3A99F798D6AE3C377DF10BD504640D2F66734E88678
A38CAC542CE6E159CF35> |
43 <001C60D8A8C9B61AE94F5D0456ECBCBA90CCFBAD8FDFDE1C76A25DC4FB2C
0A2F1A737ABA942A0D167DB52780D6> |
21 <001C60D8A8C9B6605B97B971C90101384E5F55BFDC60B70BA13CBEBD8079
87DEE773C6D32C924661DB9596D2057D023C05B990EDB59F8EE8FE5A9465DF9F
5C71FFEFFDBBC50880551E2ACA565AFE9EE26169EFE24A7FA44292793C21F963
028EE33626F245AD451978534A938D5D74D06B6686AFB07603> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
291.89 464.472 mo
(\0005\0007\0002\0006\000\003\000\013\0007\0002\0003\0003\000\(\0005\0006\000\022\000+\0005\0003\000\025\000\014)
[21.1143 19.6726 24.4143 20.3452 10.8935 13.9373 19.6726 24.4143 19.0956 19.0956 19.8006 21.8833 
20.3452 14.3861 23.7095 21.8832 19.0956 19.8969 0 ]xsh
10.92 488.54 mo
10.92 484.221 14.421 480.72 18.74 480.72 cv
932.74 480.72 li
937.06 480.72 940.56 484.221 940.56 488.54 cv
940.56 519.82 li
940.56 524.139 937.06 527.64 932.74 527.64 cv
18.74 527.64 li
14.421 527.64 10.92 524.139 10.92 519.82 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 488.54 mo
10.92 484.221 14.421 480.72 18.74 480.72 cv
932.74 480.72 li
937.06 480.72 940.56 484.221 940.56 488.54 cv
940.56 519.82 li
940.56 524.139 937.06 527.64 932.74 527.64 cv
18.74 527.64 li
14.421 527.64 10.92 524.139 10.92 519.82 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
90 <001C60D8A8C9B6B41CB5F8AAE2E772244E76F61D77AF2FDBAC902FEC5AAD
CBE7BFC65CE7EDC25DB0A3C3A806ED836B9EC03B6E395F78113BB954DFD1987C
9A3E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
345.29 511.08 mo
(\0007\000D\000U\000J\000H\000W\000\003\000+\000D\000U\000G\000Z\000D\000U\000H)
[16.6733 18.5972 13.2422 19.4627 18.5008 12.0239 10.8055 23.8234 18.5972 13.1461 19.4949 26.3564 
18.5972 13.2422 0 ]xsh
461.28 344.34 mo
461.28 335.69 468.29 328.68 476.94 328.68 cv
718.62 328.68 li
727.27 328.68 734.28 335.69 734.28 344.34 cv
734.28 406.98 li
734.28 415.63 727.27 422.64 718.62 422.64 cv
476.94 422.64 li
468.29 422.64 461.28 415.63 461.28 406.98 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
0 lj
8 ml
461.28 344.34 mo
461.28 335.69 468.29 328.68 476.94 328.68 cv
718.62 328.68 li
727.27 328.68 734.28 335.69 734.28 344.34 cv
734.28 406.98 li
734.28 415.63 727.27 422.64 718.62 422.64 cv
476.94 422.64 li
468.29 422.64 461.28 415.63 461.28 406.98 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
499.13 361.22 mo
(\000P\000U\000X\000E\000\\)
[30.7263 13.2324 19.8006 19.3843 0 ]xsh
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
16 <001C60D8A8C9B76427DFA955A144EE0C70067A7772E4832C> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
600.31 361.22 mo
(\000\020)sh
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.04 0 0 -32.04 0 0 ]msf
614.35 361.22 mo
(\0007\000\(\000&\0006)
[20.3775 19.8006 21.5308 0 ]xsh
%ADOBeginSubsetFont: XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
37 <001C60D8A8C9B654A4F8155C331190650E5C458B09F0ADB770BE1877FCB8
910F579D71D9DF3F0C0573230C61F43F4845DBF05498F3910AD33494AEBFA7C3
A18F78E3EEC2DE8F18C55CF37B718E4D70A33E560C66441849273B64230A55CA
C1E945C71BD5257BD7A0BE53CBD725F3A5E119E48DAD9C4DFBD0C2A0AEC05216
5D957E9D8F11E9FD44B22227449941F7CC5624A755FACF677CEF96F2E0E7B9ED
A64A4EABA3CAE4277CB2A168CE5B182DCE2112DBBC> |
!
end
end end
%ADOEndSubsetFont
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
547.63 403.46 mo
(\000%\000U\000L\000G\000J\000H)
[21.5792 13.2422 8.14417 19.495 19.4626 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBIX+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 2157 2124 a(Figure)g(7:)35 b(System)25 b(mo)r(del)h(of)h
(existing)f(mrub)n(y)e(on)i(TECS)2227 2396 y(nect)k Fi(cell)p
Fp(s.)50 b(Figure)32 b(6)f(sho)n(ws)h(an)e(example)h(of)h(a)f(build)f
(de-)2227 2483 y(scription.)37 b(A)25 b Fi(celltype)i
Fp(name)f(and)g Fi(cell)g Fp(name,)h(e.g.,)h(tMotor)2227
2571 y(and)k(Motor,)j(resp)r(ectiv)n(ely)-6 b(,)33 b(follo)n(w)h(the)e
(k)n(eyw)n(ord)g Fi(cell)p Fp(.)53 b(T)-6 b(o)2227 2658
y(comp)r(ose)37 b Fi(cell)p Fp(s,)h(a)f Fi(call)e Fp(p)r(ort,)k
Fi(cell)p Fp('s)d(name,)j(and)c(an)h Fi(entry)2227 2745
y Fp(p)r(ort)f(are)g(describ)r(ed)h(in)f(that)f(order.)63
b(In)34 b(Figure)i(6,)i Fi(entry)2227 2832 y Fp(p)r(ort)f(eMotor)i(in)e
Fi(cell)g Fp(Motor)h(is)g(connected)f(to)g Fi(call)h
Fp(p)r(ort)2227 2919 y(cMotor)32 b(in)e Fi(cell)h Fp(Caller.)51
b Fi(C_EXP)29 b Fp(calls)j(macros)g(de\034ned)e(in)2227
3007 y(C)c(\034les.)2040 3173 y Fq(2.3)99 b(mruby)26
b(on)f(TECS)2063 3350 y Fj(2.3.1)90 b(System)21 b(Model)2115
3458 y Fp(The)32 b(presen)n(t)f(mrub)n(y)f(on)i(TECS)g(system)g(mo)r
(del)g(is)h(sho)n(wn)f(in)2040 3545 y(Figure)e(7.)46
b(Eac)n(h)30 b(mrub)n(y)e(program,)k(whic)n(h)d(is)h(a)g(b)n(yteco)r
(de,)g(runs)2040 3632 y(on)i(its)g(o)n(wn)f(Rite)-6 b(VM)31
b(as)h(a)g(comp)r(onen)n(tized)g(task)f(of)i(an)e(R)-6
b(TOS.)2040 3719 y(TECS)31 b(comp)r(onen)n(ts)g(supp)r(ort)f(v)l
(arious)g(em)n(b)r(edded)g(driv)n(ers)g(suc)n(h)2040
3806 y(as)c(motor)h(and)e(sensor)h(driv)n(ers.)2115 3894
y(An)16 b(mrub)n(y-TECS)g(bridge)i(pro)n(vides)e(nativ)n(e)h(libraries)
i(for)f(mrub)n(y)2040 3981 y(and)34 b(can)h(call)h(a)f(nativ)n(e)f
(program)h(\(e.g.,)k(C)34 b(legacy)i(co)r(de\))f(from)2040
4068 y(an)26 b(mrub)n(y)f(program.)38 b(The)26 b(mrub)n(y-TECS)g
(bridge)g(also)i(pro)n(vides)2040 4155 y(TECS)18 b(comp)r(onen)n(ts)f
(for)h(receiving)g(the)f(in)n(v)n(o)r(cation)g(from)h(an)f(mrub)n(y)
2040 4242 y(program.)2115 4329 y(In)34 b(this)g(pap)r(er,)k
(TOPPERS/HRP2)c([28],)j([21])f(is)f(the)f(target)2040
4417 y(R)-6 b(TOS)28 b(and)h(is)h(based)g(on)f Fg(\026)p
Fp(ITR)n(ON)g([25])i(with)e(memory)h(protec-)2040 4504
y(tion.)62 b(Ho)n(w)n(ev)n(er,)38 b(mrub)n(y)33 b(on)i(TECS)g(do)r(es)h
(not)e(dep)r(end)g(on)h(the)2040 4591 y(R)-6 b(TOS)26
b(b)r(ecause)i(TECS)g(supp)r(orts)f(not)g(only)g(TOPPERS/HRP2)2040
4678 y(but)19 b(also)j(the)e(other)g(R)-6 b(TOSs)19 b(suc)n(h)h(as)h
(OSEK)e([24])j(and)e(TOPPER-)2040 4765 y(S/ASP)25 b([12],)j([27].)2063
4921 y Fj(2.3.2)90 b(mruby-TECS)21 b(Bridg)o(e)2115 5029
y Fp(There)40 b(is)g(a)h(signi\034can)n(t)f(di\033erence)g(b)r(et)n(w)n
(een)f(the)h(execution)2040 5116 y(times)33 b(of)g(mrub)n(y)e(and)g(C)i
(language)g(co)r(des.)55 b(A)n(ccording)33 b(to)f([11],)2040
5203 y(mrub)n(y)g(programs)i(are)g(sev)n(eral)f(h)n(undred)f(times)h
(slo)n(w)n(er)i(than)d(C)2040 5290 y(programs)41 b(and)e(the)g
(execution)h(of)g(an)f(mrub)n(y)g(b)n(yteco)r(de)g(on)g(a)2040
5378 y(Rite)-6 b(VM)34 b(is)i(not)e(as)i(e\036cien)n(t)f(as)g(that)g
(of)h(C)f(co)r(de.)63 b(Th)n(us,)37 b(it)e(is)p eop end
%%Page: 4 4
TeXDict begin 4 3 bop -152 368 a @beginspecial 0 @llx
0 @lly 555 @urx 142 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/mruby_TECS_bridge.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: mruby_TECS_bridge.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:11:51
%%BoundingBox: 0 0 555 142
%%HiResBoundingBox: 0 0 554.5201 141.7201
%%CropBox: 0 0 554.5201 141.7201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T19:53:24+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T19:53:24+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -141.72 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 141.72 li
554.52 141.72 li
554.52 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 141.72 mo
554.52 141.72 li
554.52 -1.52588e-5 li
0 -1.52588e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
8.04 48.96 mo
8.04 42.863 12.983 37.92 19.08 37.92 cv
117.96 37.92 li
124.06 37.92 129 42.863 129 48.96 cv
129 93.12 li
129 99.217 124.06 104.16 117.96 104.16 cv
19.08 104.16 li
12.983 104.16 8.04 99.217 8.04 93.12 cv
cp
ef
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
8.04 48.96 mo
8.04 42.863 12.983 37.92 19.08 37.92 cv
117.96 37.92 li
124.06 37.92 129 42.863 129 48.96 cv
129 93.12 li
129 99.217 124.06 104.16 117.96 104.16 cv
19.08 104.16 li
12.983 104.16 8.04 99.217 8.04 93.12 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
8.263e-6 141.72 mo
554.52 141.72 li
554.52 0 li
8.263e-6 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 6 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.024 0 0 -18.024 0 0 ]msf
16.344 75.264 mo
(\000P\000U\000X\000E\000\\)
[17.285 7.44381 11.1388 10.9586 0 ]xsh
grestore
%ADOBeginSubsetFont: XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
!
end
end end
%ADOEndSubsetFont
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.024 0 0 -18.024 0 0 ]msf
79.368 75.264 mo
(\000F\000R\000G\000H)
[9.13824 10.7062 10.8685 0 ]xsh
362.76 23.28 mo
362.76 118.08 li
206.03 118.08 li
190.99 118.08 178.8 105.891 178.8 90.854 cv
178.8 50.506 li
178.8 35.47 190.99 23.28 206.03 23.28 cv
362.76 23.28 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
362.76 23.28 mo
362.76 118.08 li
206.03 118.08 li
190.99 118.08 178.8 105.891 178.8 90.854 cv
178.8 50.506 li
178.8 35.47 190.99 23.28 206.03 23.28 cv
362.76 23.28 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
!
end
end end
%ADOEndSubsetFont
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
187.8 46.896 mo
(\0007\000V\0000\000R\000W\000R\000U)
[9.84602 8.96402 15.0119 10.6919 6.82196 10.6919 0 ]xsh
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.024 0 0 -18.024 0 0 ]msf
187.8 70.656 mo
(\000W\000V\0000\000R\000W\000R\000U)
[6.83105 8.97597 15.0139 10.7061 6.83105 10.7061 0 ]xsh
%ADOBeginSubsetFont: XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
37 <001C60D8A8C9B654A4F8155C331190650E5C458B09F0ADB770BE1877FCB8
910F579D71D9DF3F0C0573230C61F43F4845DBF05498F3910AD33494AEBFA7C3
A18F78E3EEC2DE8F18C55CF37B718E4D70A33E560C66441849273B64230A55CA
C1E945C71BD5257BD7A0BE53CBD725F3A5E119E48DAD9C4DFBD0C2A0AEC05216
5D957E9D8F11E9FD44B22227449941F7CC5624A755FACF677CEF96F2E0E7B9ED
A64A4EABA3CAE4277CB2A168CE5B182DCE2112DBBC> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
!
end
end end
%ADOEndSubsetFont
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
214.92 100.464 mo
(\000%\000U\000L\000G\000J\000H\0000\000R\000W\000R\000U)
[16.1683 9.92177 6.17412 14.6066 14.5825 13.7656 19.9638 14.2701 9.10504 14.2701 0 ]xsh
408.36 96.84 mo
529.08 96.84 li
529.08 37.92 li
408.36 37.92 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
408.36 96.84 mo
529.08 96.84 li
529.08 37.92 li
408.36 37.92 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
410.33 52.584 mo
(\000W\0000\000R\000W\000R\000U)
[6.82196 14.9939 10.6919 6.82193 10.6919 0 ]xsh
gsave
8.263e-6 141.72 mo
554.52 141.72 li
554.52 0 li
8.263e-6 0 li
cp
eclp
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.984 0 0 -27.984 0 0 ]msf
434.21 86.328 mo
(\0000\000R\000W\000R\000U)
[23.2545 16.6223 10.6059 16.4824 0 ]xsh
grestore
408.36 85.32 mo
434.64 70.68 li
408.36 56.04 li
cp
ef
1 lj
408.36 85.32 mo
434.64 70.68 li
408.36 56.04 li
cp
@
.72 lw
362.76 70.68 mo
420.82 70.681 li
@
129 71.49 mo
173.88 71.211 li
173.87 70.211 li
129 70.49 li
cp
172.89 73.717 mo
178.87 70.68 li
172.85 67.717 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBIY+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 335 637 a Fp(Figure)26 b(8:)35 b(mrub)n(y-TECS)24
b(bridge)-152 2043 y @beginspecial 0 @llx 0 @lly 960
@urx 596 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/system_model.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: system_model.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:11:09
%%BoundingBox: 0 0 960 596
%%HiResBoundingBox: 0 0 960 595.2001
%%CropBox: 0 0 960 595.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-03-20T01:46:05+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-03-20T01:46:05+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -595.2 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 595.2 li
960 595.2 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
16.92 24.7 mo
16.92 15.76 24.164 8.52002 33.1 8.52002 cv
172.22 8.52002 li
181.16 8.52002 188.4 15.76 188.4 24.7 cv
188.4 89.42 li
188.4 98.36 181.16 105.6 172.22 105.6 cv
33.1 105.6 li
24.164 105.6 16.92 98.36 16.92 89.42 cv
cp
ef
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
16.92 24.7 mo
16.92 15.76 24.164 8.52002 33.1 8.52002 cv
172.22 8.52002 li
181.16 8.52002 188.4 15.76 188.4 24.7 cv
188.4 89.42 li
188.4 98.36 181.16 105.6 172.22 105.6 cv
33.1 105.6 li
24.164 105.6 16.92 98.36 16.92 89.42 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 6 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
64.512 35.14 mo
(\000P\000U\000X\000E\000\\)
[23.016 9.95986 14.8319 14.664 0 ]xsh
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 9 GetGlyphDirectory
36 <001C60D8A8C9B65B43E736E97338B3171E4D5FC9AD2E09D53507110EAE30
BBE0AD4E51A448FF6ED2C8399AE02E57D1E794E82EDCABB32C42C690> |
83 <001C60D8A8C9B7DB133A6BF1DC72AFF4D9E1D88066B503430ED7CA204AEE
347A7EAE3CB3884EB4FFBB8F90017827BA9DCD885413704044F3F41AD14D2D6A
CED61CEA6A04B229BF5A6BC738FEA6377C17D19B447D1E3C5DDC24F2FD35A82E
DAE48699B344D31AB5EDBC945652C2C08D> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
38.472 66.82 mo
(\000$\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q)
[16.2719 14.664 14.592 6.14395 6.09595 12.1681 13.92 9.09595 6.09595 14.2559 0 ]xsh
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
17 <001C60D8A8C9B80F37F28BBD69438B6F09441D6BA20ED3CF1C> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
64.032 98.5 mo
(\000\013\000\021)
[10.5599 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
82.992 98.5 mo
(\000P\000U\000E)
[23.039 9.92178 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
130.66 98.5 mo
(\000\014)sh
557.64 24.72 mo
557.64 15.64 565 8.28003 574.08 8.28003 cv
710.88 8.28003 li
719.96 8.28003 727.32 15.64 727.32 24.72 cv
727.32 90.48 li
727.32 99.56 719.96 106.92 710.88 106.92 cv
574.08 106.92 li
565 106.92 557.64 99.56 557.64 90.48 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
557.64 24.72 mo
557.14 24.72 li
557.14 15.3637 564.724 7.78028 574.08 7.78003 cv
710.88 7.78003 li
720.236 7.78028 727.82 15.3637 727.82 24.72 cv
727.82 90.4799 li
727.82 99.8364 720.236 107.42 710.88 107.42 cv
574.08 107.42 li
564.724 107.42 557.14 99.8364 557.14 90.4799 cv
557.14 24.72 li
557.64 24.72 li
558.14 24.72 li
558.14 90.4799 li
558.14 94.8835 559.923 98.8654 562.809 101.751 cv
565.695 104.637 569.676 106.42 574.08 106.42 cv
710.88 106.42 li
715.283 106.42 719.265 104.637 722.151 101.751 cv
725.037 98.8654 726.82 94.8835 726.82 90.4799 cv
726.82 24.72 li
726.82 20.3166 725.037 16.3347 722.151 13.4487 cv
719.265 10.5633 715.283 8.78035 710.88 8.78011 cv
574.08 8.78011 li
569.676 8.78035 565.695 10.5633 562.809 13.4487 cv
559.923 16.3347 558.14 20.3166 558.14 24.72 cv
557.64 24.72 li
1 /0 /CSD get_res sepcs
1 sep
f
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
604.49 35.06 mo
(\000P\000U\000X\000E\000\\)
[23.039 9.92181 14.8948 14.6066 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
578.45 66.77 mo
(\000$\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q)
[16.2719 14.6641 14.592 6.14392 6.09595 12.1681 13.92 9.09595 6.09595 14.2559 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
604.01 98.45 mo
(\000\013\000\021)
[10.5599 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
622.97 98.45 mo
(\000P\000U\000E)
[23.016 9.95984 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
670.61 98.45 mo
(\000\014)sh
16.44 362.14 mo
16.44 358.11 19.708 354.84 23.74 354.84 cv
180.74 354.84 li
184.77 354.84 188.04 358.11 188.04 362.14 cv
188.04 391.34 li
188.04 395.37 184.77 398.64 180.74 398.64 cv
23.74 398.64 li
19.708 398.64 16.44 395.37 16.44 391.34 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
16.44 362.14 mo
16.44 358.11 19.708 354.84 23.74 354.84 cv
180.74 354.84 li
184.77 354.84 188.04 358.11 188.04 362.14 cv
188.04 391.34 li
188.04 395.37 184.77 398.64 180.74 398.64 cv
23.74 398.64 li
19.708 398.64 16.44 395.37 16.44 391.34 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
78 <001C60D8A8C9B794D33B340B990850C065E40D166F6B8A65A7F0F8858ECE
050176CE5B3D54865610F2C7BA0E6A48EB238D93222848> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
76.416 382.08 mo
(\0007\000D\000V\000N)
[12.48 13.92 11.952 0 ]xsh
559.68 360.84 mo
559.68 356.73 563.01 353.4 567.12 353.4 cv
721.92 353.4 li
726.03 353.4 729.36 356.73 729.36 360.84 cv
729.36 390.6 li
729.36 394.71 726.03 398.04 721.92 398.04 cv
567.12 398.04 li
563.01 398.04 559.68 394.71 559.68 390.6 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
559.68 360.84 mo
559.68 356.73 563.01 353.4 567.12 353.4 cv
721.92 353.4 li
726.03 353.4 729.36 356.73 729.36 360.84 cv
729.36 390.6 li
729.36 394.71 726.03 398.04 721.92 398.04 cv
567.12 398.04 li
563.01 398.04 559.68 394.71 559.68 390.6 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
618.72 381.1 mo
(\0007\000D\000V\000N)
[12.48 13.92 11.952 0 ]xsh
10.92 446.8 mo
10.92 439.75 16.633 434.04 23.68 434.04 cv
722.96 434.04 li
730.01 434.04 735.72 439.75 735.72 446.8 cv
735.72 497.84 li
735.72 504.887 730.01 510.6 722.96 510.6 cv
23.68 510.6 li
16.633 510.6 10.92 504.887 10.92 497.84 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 446.8 mo
10.92 439.75 16.633 434.04 23.68 434.04 cv
722.96 434.04 li
730.01 434.04 735.72 439.75 735.72 446.8 cv
735.72 497.84 li
735.72 504.887 730.01 510.6 722.96 510.6 cv
23.68 510.6 li
16.633 510.6 10.92 504.887 10.92 497.84 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
374.66 487.03 mo
(\0007\000\(\000&\0006)
[15.264 14.8319 16.1279 0 ]xsh
735.72 400.32 mo
735.72 388.06 745.66 378.12 757.92 378.12 cv
920.4 378.12 li
932.66 378.12 942.6 388.06 942.6 400.32 cv
942.6 489.12 li
942.6 501.38 932.66 511.32 920.4 511.32 cv
757.92 511.32 li
745.66 511.32 735.72 501.38 735.72 489.12 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
735.72 400.32 mo
735.72 388.06 745.66 378.12 757.92 378.12 cv
920.4 378.12 li
932.66 378.12 942.6 388.06 942.6 400.32 cv
942.6 489.12 li
942.6 501.38 932.66 511.32 920.4 511.32 cv
757.92 511.32 li
745.66 511.32 735.72 501.38 735.72 489.12 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 5 GetGlyphDirectory
49 <001C60D8A8C9B6184AB5445E2049CE7834CACA1B144F394B59C0765899E8
457350BF2483D2D78DD2E6F35B65> |
89 <001C60D8A8C9B7E52216419985ABDC2A2C8279C7A2E84BC8C8D658828106
065B1850310ED427E848> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
3 <001C60D8A8C9B816D234> |
18 <001C60D8A8C9B77AEA5E94F4C4913454F61865807FFA2320A92BA3C5> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
750.62 424.27 mo
(\0001\000D\000W\000L\000Y\000H\000\003\000\022\000\003)
[17.7839 13.92 9.09595 6.09595 13.3439 13.8479 8.15991 10.8481 0 ]xsh
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
851.81 424.27 mo
(\000P\000U\000X\000E\000\\)
[23.016 9.95984 14.8319 14.6641 0 ]xsh
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
47 <001C60D8A8C9B7EE7C16355902DB0AD05E58E1D387F79781FB3D99981E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
789.5 455.95 mo
(\000/\000L\000E\000U\000D\000U\000L\000H\000V)
[13.3682 6.09595 14.592 9.62384 13.92 9.91187 6.14398 13.8479 0 ]xsh
10.92 517.78 mo
10.92 514.212 13.812 511.32 17.38 511.32 cv
936.14 511.32 li
939.71 511.32 942.6 514.212 942.6 517.78 cv
942.6 543.62 li
942.6 547.188 939.71 550.08 936.14 550.08 cv
17.38 550.08 li
13.812 550.08 10.92 547.188 10.92 543.62 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 517.78 mo
10.92 514.212 13.812 511.32 17.38 511.32 cv
936.14 511.32 li
939.71 511.32 942.6 514.212 942.6 517.78 cv
942.6 543.62 li
942.6 547.188 939.71 550.08 936.14 550.08 cv
17.38 550.08 li
13.812 550.08 10.92 547.188 10.92 543.62 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 5 GetGlyphDirectory
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
50 <001C60D8A8C9B6EFA83FE463A0987A11EEA716904A67C72122A66ADBC001
395B8B74FF7EE0E45B38298DD5B35482E6FF0A1AECD115B8456F10761475E357
F2C318AC306FA5311069C953AA74DF31651BEED7D0408C44AD051720F0645E90
327451737F3C8880F85CF3A99F798D6AE3C377DF10BD504640D2F66734E88678
A38CAC542CE6E159CF35> |
51 <001C60D8A8C9B7C7F3AB8C913496B09857977C9DC6242A9162060173AC59
9393DA1940FF4DBBBB7DC58141AB33AD646160390F69558CE684F038371A8CA4
BBDE854FF6E871389797481AE0511B0909CE7DDDBB9990A8EC8C41B5BDE134> |
43 <001C60D8A8C9B61AE94F5D0456ECBCBA90CCFBAD8FDFDE1C76A25DC4FB2C
0A2F1A737ABA942A0D167DB52780D6> |
21 <001C60D8A8C9B6605B97B971C90101384E5F55BFDC60B70BA13CBEBD8079
87DEE773C6D32C924661DB9596D2057D023C05B990EDB59F8EE8FE5A9465DF9F
5C71FFEFFDBBC50880551E2ACA565AFE9EE26169EFE24A7FA44292793C21F963
028EE33626F245AD451978534A938D5D74D06B6686AFB07603> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
339 536.064 mo
(\0005\0007\0002\0006\000\003\000\013\0007\0002\0003\0003\000\(\0005\0006\000\022\000+\0005\0003\000\025\000\014)
[15.84 14.64 18.2878 15.2399 8.15991 10.5359 14.616 18.2878 14.2318 14.3038 14.8319 16.4399 
15.2399 10.7761 17.8799 16.392 14.3038 14.9041 0 ]xsh
10.92 555.9 mo
10.92 552.885 13.365 550.44 16.38 550.44 cv
937.14 550.44 li
940.16 550.44 942.6 552.885 942.6 555.9 cv
942.6 577.74 li
942.6 580.755 940.16 583.2 937.14 583.2 cv
16.38 583.2 li
13.365 583.2 10.92 580.755 10.92 577.74 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
10.92 555.9 mo
10.92 552.885 13.365 550.44 16.38 550.44 cv
937.14 550.44 li
940.16 550.44 942.6 552.885 942.6 555.9 cv
942.6 577.74 li
942.6 580.755 940.16 583.2 937.14 583.2 cv
16.38 583.2 li
13.365 583.2 10.92 580.755 10.92 577.74 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
90 <001C60D8A8C9B6B41CB5F8AAE2E772244E76F61D77AF2FDBAC902FEC5AAD
CBE7BFC65CE7EDC25DB0A3C3A806ED836B9EC03B6E395F78113BB954DFD1987C
9A3E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
378.89 572.232 mo
(\0007\000D\000U\000J\000H\000W\000\003\000+\000D\000U\000G\000Z\000D\000U\000H)
[12.48 13.92 9.91187 14.5679 13.8479 9.09595 8.15991 17.8319 13.92 9.91187 14.688 19.8238 
13.92 9.91187 0 ]xsh
577.44 472 mo
577.44 469.13 579.77 466.8 582.64 466.8 cv
871.88 466.8 li
874.75 466.8 877.08 469.13 877.08 472 cv
877.08 492.8 li
877.08 495.672 874.75 498 871.88 498 cv
582.64 498 li
579.77 498 577.44 495.672 577.44 492.8 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
0 lj
8 ml
577.44 472 mo
577.44 469.13 579.77 466.8 582.64 466.8 cv
871.88 466.8 li
874.75 466.8 877.08 469.13 877.08 472 cv
877.08 492.8 li
877.08 495.672 874.75 498 871.88 498 cv
582.64 498 li
579.77 498 577.44 495.672 577.44 492.8 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
630.96 486.79 mo
(\000P\000U\000X\000E\000\\)
[19.2183 8.27643 12.3846 12.1844 0 ]xsh
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
16 <001C60D8A8C9B76427DFA955A144EE0C70067A7772E4832C> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
694.44 486.79 mo
(\000\020)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
37 <001C60D8A8C9B654A4F8155C331190650E5C458B09F0ADB770BE1877FCB8
910F579D71D9DF3F0C0573230C61F43F4845DBF05498F3910AD33494AEBFA7C3
A18F78E3EEC2DE8F18C55CF37B718E4D70A33E560C66441849273B64230A55CA
C1E945C71BD5257BD7A0BE53CBD725F3A5E119E48DAD9C4DFBD0C2A0AEC05216
5D957E9D8F11E9FD44B22227449941F7CC5624A755FACF677CEF96F2E0E7B9ED
A64A4EABA3CAE4277CB2A168CE5B182DCE2112DBBC> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
703.2 486.79 mo
(\0007\000\(\000&\0006\000\003\000%\000U\000L\000G\000J\000H)
[12.7455 12.3846 13.3867 12.7253 6.71332 13.487 8.27643 4.98993 12.1843 12.1642 0 ]xsh
876.24 141.72 mo
949.08 141.72 li
949.08 110.28 li
876.24 110.28 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
883.61 130.82 mo
(\000+\000R\000V\000W)
[14.8896 11.9036 9.97998 0 ]xsh
grestore
807.96 271.08 mo
949.08 271.08 li
949.08 239.64 li
807.96 239.64 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
815.28 260.21 mo
(\0007\000D\000J\000H\000W)
[10.3206 11.6232 12.1642 11.4828 0 ]xsh
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
39 <001C60D8A8C9B6E081B04FC435829385C5BEDC68DDC35DE8CE7C5EDA488D
6B3D34241C637D17663805636ABD3B433EB8517B7BE139E4B8BA2B0A5F589491
BFB4E8873019EA26DF68E10022DBC58622EA817B140FFE44A9DFABA30D8E7300
B0B48771> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
875.28 260.21 mo
(\000'\000H\000Y\000L\000F\000H)
[15.0098 11.563 11.3425 5.09009 10.1604 0 ]xsh
grestore
46.8 453.08 mo
46.8 447.47 51.349 442.92 56.96 442.92 cv
272.8 442.92 li
278.41 442.92 282.96 447.47 282.96 453.08 cv
282.96 493.72 li
282.96 499.331 278.41 503.88 272.8 503.88 cv
56.96 503.88 li
51.349 503.88 46.8 499.331 46.8 493.72 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
ef
46.8 453.08 mo
46.8 447.47 51.349 442.92 56.96 442.92 cv
272.8 442.92 li
278.41 442.92 282.96 447.47 282.96 453.08 cv
282.96 493.72 li
282.96 499.331 278.41 503.88 272.8 503.88 cv
56.96 503.88 li
51.349 503.88 46.8 499.331 46.8 493.72 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
62.136 478.78 mo
(\0005\000L\000W\000H\0009\0000)
[16.4084 6.15009 9.10505 13.8617 16.4084 0 ]xsh
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
75 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD73F
D89BDC334BB07BF4F917382A46FB6D56C6B324D7C5BF3C1737059B4BD3BA89BE
96A60CAFE7B49CB909CA56114770> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
152.04 478.78 mo
(\0006\000F\000K\000H\000G\000X\000O\000H)
[15.2551 12.1082 14.8467 13.8618 14.6066 14.8467 6.10205 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
257.52 478.78 mo
(\000U)sh
gsave
0 595.2 mo
960 595.2 li
960 -.000242384 li
0 -.000242384 li
0 595.2 li
eclp
2.04 lw
[6.12 2.04 ] 0 dsh
.06 148.02 mo
960.06 148.02 li
960.06 4.62006 li
.06 4.62006 li
cp
@
grestore
gsave
0 595.2 mo
960 595.2 li
960 -.000242384 li
0 -.000242384 li
0 595.2 li
eclp
2.04 lw
[6.12 2.04 ] 0 dsh
.06 595.26 mo
960.06 595.26 li
960.06 230.34 li
.06 230.34 li
cp
@
grestore
gsave
672.36 143.16 mo
612.6 143.16 li
612.6 108.84 li
672.36 108.84 li
672.36 143.16 li
clp
612.6 108.84 mo
672.36 108.84 li
672.36 143.16 li
612.6 143.16 li
cp
gsave
/1 
[/DeviceCMYK] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 595.2 ]ct
[0 -35.0425 60.48 0 612.24 486.721 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 97 
/H 168 
/M[97 0 0 -168 0 168 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
\Gu[:D$J5bf)PjXBEbR>o`,%!Ba(73!XE$8nc5rq!XNWIe,[hq!XNHC[K,^q!XNKDUAt?#?3U-)X8i>(
Hfe)X!6P9D!d36i]`@6r!s3Z&9;DOj!c#bC!2TYu9'5Kd&E<c.!!GdFi5H5G!9!n\8)<4G&#TC3!!#:(
bd.eV!!+4jrp0Z=!p]j"!!+1^rnmg+!mL`"!!+1aro4$/!j;V"!!+(JrlbC`!iQ)"$*O6n!TQ01!4Mq/
$)RUY!S93Y!7_&M$)da^!STE>!:p0k#aYG5!Q6[k!!34Klhp)M[KcR.YlFh,Fl3,T!NcO\!7(WH!d<T$
irQ=e^&[O#!Wm,[r6,25"f_P'7caI5!U3[c!!,I>qqqM2;r[l!!!,LBqr7_8<5ek"!!,7%qof)`9</$p
"MF*fqs4@.'!)'6"L@j]!Q#H7!5\^:"L\'c!Q>Yq!8mhX"/>V8!O30=!;ulu?0_7P!-P=B!En:ThuI]d
!4i.2>2f;;!-$EffDkqLb5'6]A[VU4!!*;/q<S.;,HLkG#,q@U!RW(e!;?K,!!*;(q;VM*,16JG!!*:l
q9/lR*jbqB!!,"?q<S-@!NZ8%1Y_``!JLRL!4;e-1uA&g!JUX/!7LoK0$!e3!I4^Y!:^$i!fd$B!TYB)
!!*.Uq;;A-*rl;D!!*.Vq;VM1+5m4D!!*.Iq9/lY*5_d@!!+1qq<S-I!iuA&*mafCrSR^9!iuA&*n'lE
!KR<H!5nj<)nl'k!J(<q!9!nXJ,/F3i%1u1!WW4Fq;;;(.]WOLHMQS%f.6=j]DqqLq9/lV-IMnJ!!*na
q<S*LZiKk$!>``OhuJn?!!*kXq;VI=pAhT$!>N!<bQ*=L!7CiIDu&`#jrM)7n,NH&q;;;-)lir=C\cum
h&HCpXT/?/q9/lZ);tSM!!**%o)Je!e+r>2K`T*lq#CEr!qQBm$cr/%!Ib'^!!**%o)Je!bPgK"irOZ2
]Dqs5!qQBm$F]cS!HS;+!7UuL<*Abl!,VJt!S&%1!:g*j:fQuc!,),c!Ql4k!!,qsoDepm!,22g!R2Fn
!!,Ycnc/Yrq9/lL(%;4K!!>=?dMqcX!>EfTli:tP!:0[f37Ptdo)Je(`VJElBtXKK3S2ClquHKl!>ENL
irEl.!!>$n[MSN8!>2[6bQ)&F!6>-D--trENWJ_O!-\2)!R1r)!9O7b,K8U!L&plG!-%bl!Q#/X!!4Fd
ir\7s!V69kEr"_r`<j9Z"X(.qb^'<]!!$X,bQG*U!!)`nbQ%YV^]*R#kV_r3!>F8bliH?Gf)Y(9!>2a=
huVUgo)Je(dJDc%h+GH_!>2g?irS$no)Je(eGA2+i(Lic!=u%+bQ5g<o)Je&^A?%Sb!Z(,`W-#HU\sHZ
ZjQF*!<IuOliF$fhZ2^;!=G=ohuTkcoDemmJGJ+(TEN+3!"&^sr8Rg\$M4<!!J:.-!MT_6!!*Ccr6,23
$1n2u!Hn7_!mHf0_>jUmlMTuLlXKGc!A*7,liH2qjoF3;!J0,*huV_@o)Je@f)";*fd4]>qZ$YLiV_^:
ia23V!@uk"irRp]_>jU[b5BHab>n-6!%%]`qTJu[,/XB]AF'*Y!SJ@_!!*.uq<S*7m/Y`<!FOa\huV+?
oDemnSb_1DIa8#e!!-KeqVqV')"[e/!h];K!.Vld!ERD?bQ5<kq>gBm!<S>XbQ)\$!!%B@liE"FoDekZ
q<S./&G6%M!!%0:huSK3oDekVq;;:n&(^gL!!%3;irOl8oDekWq;VLs&&\GJCA?!QGQ7d:!!#(UbQ5'\
_uKfGdJ<,0i@"6t!=6O<liHBKquFh=!=QsDhuV@SoDemt\GG+ahG)i,k5YMjanartfHp.i!=6:5irS+6
_uKlH[EQklbQ5R)oDemsVu"U<b!s8K!F"a`li<(;!!%!7liQOL!lP'><SdK/!/C(F!,D>f!Lj/Q!8dbW
<oEf6!/U4H!,VJk!M0A6!;ulu:<NCV!.+5:!+G]I!KI6"!!*A2q<S.?-M.9<*rt3pliH2e_uKfDWVPHQ
eKjbe!?TbehuVLKm/Yc=!=5b%irRaWoDen5fD=M.g`"K=p&G*uReb/._BJOO!?8lObQ5^"_Z0]skkXQG
N<8tWq>^Mjq<S)s_Z0]ph"fk/L'$uI!1WfB!+tj'ci=)(htc:5LB@)J!1irG!,'j_mJm8Aana-]H33^=
!0-fu!+!JB!<SP^li?#F,4kj8:&4,V\d$(Q!<S8VhuVCPoDek_q;;:Y"oJAB!!*.^q;VM/+nPa79)7KJ
ZN]1ck5YMaJbdLj_]JFM!(-M*!MK\7!!4G#m/$&LNWJeQ!>O)\liH,s_Z0]]d.uT#L&prI!>EWPhuVFX
q#JS<!@-(hirOr:o`,",c2-H$g*tbVkl:`+^A5tRH3*[=!>;p=bQ5X._>jRrrTsLL!So'p!!*+fq<S)r
_>jRjq;;;%,P;$;!Kd-8!G)8K!!%iNirR[Uo`,!nP54,<B&WgL!!%?@bQ5I$o`,!nKDE^k>gWNP02V?B
!rr<Liq_p@M"CZJ8F$'<!4U>U!A.";!!+Ftq;;7(oDet^hVd>ihuKq-!!+ZGoDen=g%jY.KCf-E7H++'
!3k\fkl:`57J$Q\,/a6#!-[u7!C"[&bQ+6_!!<nObn^3Xp](<sRec:NfaRNR!=IQWliH8ddf9I_\AK$R
!!*1bq;;;!$hs`$!!*GQqVVD0(Xi?d'>)6uo`,!pPkj>?d1#[J!=I9OirS$RnGqSL!thK;'(l5*!epHo
!PAd4!!*D>qTJu]("<3`$3[<om"GK5!!+h:q<S)doDelSq<S)he,TXZTA\XV!VHEn0A?6[!`o@%p&G)N
q;;6We,TXZU#Y0`!VHEn0AZHa!*Jjn!0-g7!+#@"h#ITbOj)$j!VHEn.`V;.!)N4e!.Oaf!)qSOqu?p&
JElLfj=Ks(!<K.pliFHto`,"dlh]rKUB/pG"p0),i8E6;o`,!nT`*gIhuTh]o`,"`htl73RfV(?"p0/1
j5\lEo`,!nUA<gMXTe@t!D2;IirYbP!7q2T!cH0)bf(q%!!*+`q9/l/"n_ir6Hf5L!K@->!;-<m=6ohO
!NH@s!!,4FqWn7F2>$qM(t\WN!R_Y4!!-$UrSR^N#58*"!!#%7qVVD.1A(VJ(X2a6!QPi(!!-'YrSmpS
#5%rs3oBeo!SoR)!!*n^ro<t;!Ql),!!,a9rQG;+#5%rs1s#O;!QHbb!!*hGqTJuK&a9;a!!,+8r9OIJ
;tU+k#.+-l!0$RN!<K%nliHE9f)Ph0dJVo'ge[nLp](=!WqkQQL%PEH!M'#E!T,uj!!,%.r8Rh8;"Xeh
#-@X\!/C4J!rr<%T).IJi]Pfm!A_CebQ5gVo`,!sReb/-H1_.<!KR$#!R!Cj!9jIa)U8-F!Qt]?!!$F&
liGiPo`+tuq<S*3fDkpi_u8NmhuUUso`+trq;;;#&+oo&>5@(VH.W)t)92O5!Q,*6!!$=#irda@!!)`n
!*f9Z!.3>u!>`!;bQ4mNo`+tjq9/lR%eTf%;YeN:DYF.k!!*S7q!7u_o`,")i;2d@lXBGd!?CD$liFs(
g&M-_W;,9N;tU+k&CpX8!T./T!!+"pqVVCa!SRMS%BB3`!*/[l!>*l]j8S'>ia)3W!?:"oirQamg&M-^
RJ=u+9_AAd%`8(d!R"I8!!*qZqTK&?!<<,T!!+qAq!8$m$2"8uRec:NWWVqp!<^F>liH,ci;i]S!AWI+
huU(ho`+uTq;;:J"82]q"2=Wi!S84C!!+k6pu;C]$24E$!!&8ZirPqXp&G*q_#!'lg)AZF!A2IhbQ4CC
o`+uGq9/l'!qlTp!j2FFrlbD](]49j!!*4sq!8%I;=sni6Kn:4!T"ji!!%fNliHEKh>mKS!<ekdhuV_0
o`,"Vh"oq0di7r[!.aq(!T-T)!!*4mpu;D7:A"Se560U;irR^No`+uDqVqV9:"fRJ"-!$!!R!t*!!,+%
qTJuU)>*t0Fo';_b=1(a!As!7liFj'p&G+$`qes$=7lOo9C)H@!.s;4o`,"Ih"]e.[0-+&!=QR9huH^K
!!,UIqVV@$f`2%.htZ44[fcO.qZ$X)^\Qmi<:p4l8E0L+!.NT$!A2CfbQ4OAp&G+#X80s>9D&8b5lf+)
bQ)Y8!!&M`liH??o`+u8q<S*Wo`,"5gA:.:\-D=#m/R-Mptu2/6hLEZE;ADlS+Qa^)peB=!Nu^\!!&;Z
irS(+o`+u4q;VIHo`,"4de_u)Ym/k]!/C9m!QmRu!!$X,bQ*\#!;c`s)85mj!M9SL!!+V-q!8$W"82]q
-gUWq!SS4\!!*27qWn7@(\@^i!!+Ltptu1B"82]q-/\RW!RDDP!!*2-qVVD)(>/Zh.G*VUirP_Rp&G+>
iqh[9dM)<S!<]b+irRaIf`2%!_>)4TNWSnS!@#_`bQ5Bhp&G*pUAE(7_A(Z'!<JG[liH)ip&G*t`qo$&
l;.'Q!/UI;!($J^hZ*ZXNVME4efj_e!<p.4huV\-o`+uCq;;69h#RBR!<J5UirRgVp&G*s^\ZskiCrnE
!/(+-!']'9!<I`GbQ5U&p&G*sX8:$@b!bn&!-\1^!'&U2!AEa5li;2$!!%]JliEISp&G(jq<S*"fDkq(
hY?"/DtO)1Iehn&O9,%T!)E@J!,:Koo`,"EiV;F5E:j22J,/+*Oob7V!)NFN!,L3e!@c1dbQ)5O!;c`r
Er!o[K)tZG!(Zk/!+=FZ!<KJ#liG-3p&G+\l2'`Ie.)*O!?^V'li<[1!!*,!ptu1d#PJ,u5Mc1o!QbcD
!!++sqVV@?lN$>Q!<K4qirQn"p&G+Yi;2I7bRF1F!?L.qirGM"!!*+gpric?#5/#t3m.<C!OiI1!!+"\
qTJqsf)PhFl1sZHkX>+E!>*`Uli8s@!;lft#g)r0!R(`"!!,XHq;;;/5kY0Y&'4S)!&O<K!=6I:huUXs
o)RnQ!D25FirS%'p&G+(bPC/u2"gnM#f6At!Q5,n!!5L0bkfNaaZB+q!=lR6bQ'9h!!*>-qTJuE"P<\T
$cVo-!LX#_!!&Vdli:hp!!*+rqWn7>+4pPo$bQ2l!KdHW!!&>\huIB_!!*+iqVVD'*r5lo!!*JApu;C=
!qlToR/,bBBD)<+!M9/J!S/=I!;ulu$EEmF!JCOJ!!%lObQ(rB!!*+\qTJuU)qP&iG51D)g(3lW!E8@]
li<mT!!%3=liHB>f)Peiptu2!%e]l&:\ioKSFlj^E;JJnhE]Zm!-7kp!R_JO!!#jkirG\D!!%$8irS+)
irJ`P!+u#M!PJs9!!#RcbQ*[r!!$X-bQ5jIf)Ph"l1jTF7/Hu^!!*tuqWn7/$MFH#9^DQA!,C*c!@HXt
huH%9!!*qhqVVCn$MFH$8DiA&huI?f!87DR-K+[Z!($;Y!>sSfirR1-p&G+biqh[8B&E[a!!+:dpri_!
p&G+/`VRdZZO-=*!CG!+bQ(o2!!!/m!!*;5q!8!?p](Br!!g77liH3$p&G+?iqi!AP32fF"S)Nn"g7XY
!/C1I!=-".huVL_p&G+=f)=P+huJ\u!!!/m!!*8-pu;@0p&G*u[ef"bgb&4"!@6@pirG)%!!!,l!!*7p
pri_ap&G*tV#&:9`[UT]!?oAWbQ*+U!!,?@nGiQ(q!8('$39f#!0R*D!+#9u!=.0OliFQukl:`IJai^?
Abb0a^'aQ6!/gU1!*T$r!WWJJqVVCW"R,me4bN8)!+u#d!Pf'9!!%uRirE9V!!*>LqVqU\"Rc?f!!,$%
nGiPopric@$2+?!Ieh1f;>'tj#.XNR!M0DY!!>UFjsfj$!@$J#m/?8Oju2o5!+#Ee!1!3W!4;Uh!SRnG
!!>I7g*cFk!?p"hhuVRgp&G(qq;;74rW)]n!3>tS!RD,<!!>L;h'_an!?p(jirS!np&G(rq;VI9o`+up
qVqV)$MFJm!!>9t`Zt$S!?T,RbQ5a:p&G(iq9/hio`+u^qTJuR$0qQp7bm@sQNQj[!WW82q!8!)p&G+G
k5+EFaTV;;!0?sB!$LS-"[g\qi/\!3!!*,(ptu-lp&G+EgATt/huURqp&G)Kq;;5plMq)VeDoSO"7lKn
!O;F[!-@i6!A3.(irQt!p&G)Mq;VGsr;c9d"[0TDb^oof!!*+mpri_Np&G+A`qmm[Xon@t!.=Ud!$(>*
!D)&GliH)rqZ-Bk!."A+!4):u!=.9RliHDcp&G)-q<S)Jli7&Tdf//*egU(h!-@qn!3,\m!WWJMqVVD3
'(u;*AGP-`53r7M7FhCt!SJpm!!%0:irH.R!!*>NqVqV9'D;D+Ac(Khj5WAj!!,9urlbD\-1V$9C&#mP
Re?^^#.jZT!Qu)K!!$7!bQ'Zj!!,gRr9OEHnc/\MlhTlJj9G;X!3,e\!'9fR!(-MJ!+P<q!D1l?huJ]+
!!+t7q;;A-"onYu!!&_ghuG_0!!#4YhuI'M!!,^Fr8Rd:nc/\Jiq_U8gBR?O!2KAM!''ZP!'g;>!+,$m
!CF^%bQ*+_!!+dsq9/lY#5/#sP53<%1A1\J3Vgl!<UKhe/HFW(liGfVo)Je'deN//1%kSIG5:J)@.jR$
,3esj!.jP<!@uUqhuV.>o)Je&a8FlohuGG(!!%!6huI!T!!+8!qVV@"mJm8=ebeA-dMDES!>*EKirCb+
!!%'8irEB`!;ZZr+lN4W!.=27!@PYZbQ5Bko)Je$[eS&H.eWiBB)0XN;t^1l*m4?'!,qK0qZ$X1chcu.
C@_E+!M9)Q!,;-,!)*.S!/:+H!>F,^li<aI!!*_OqVV?bo)JdlQMBA<A+fm&8,;'CIeEaB'$^:2!1E6T
!>ENMirE]_!!*+fpu;?cp&G(`qr7b<j+-h'!>EfUirGS:!!*\<qTJqEo)JdlM>59p>4qpr62A_)F7oS7
&\@h_!/p^So)Jc;qWn6t#kJ#rB_^ooSFup`.I$]q!3>en!=QmCliOp&!Ug!gFo("s[0ZX0q#CD(ptu.:
p&G+@h>6%0U\4Zg$bQ8n!jr%0mf3?2qVqUc#kJ#rAGG0bQM(:Z-fFj]!2]Ah!=QX<irZ[j!Ug!gCAQ-T
V$HSl!*]0A!/L7J!@,b`bQ*n$!!*G,qTK#;!<MWh!?L%oliHE.o)JeOkkXQG`sh\B!>X2^liG38pAb3r
Z23egcOLHR!!+%fqqqJ3!&4!E!B/a/huUM!pAb4.bPL,t^C']8!<]:shu^k,%IX8t*7k#I!TGj*!!,%9
q;VLj%/p8'!!*eZqVqUm$MON$"024X!lk`Zmf3A+_#)=Vb:N5b!A_dmbQ4dPpAb4,\baMNXpOh&!<S\c
bQ>*Z%.=/s!griN!/'kC!>"/bliH)hpAb4"_#!BugE-%g!1*KJ!nnV6mf3@iOS[l:I/j9?!!*S[q;;;)
+SPj:#e'Tf!RMh[!!&&Uhu_4C)XdY,!g<E?!.OM>!=mcXirRgUqZ-Qp!=643irRUKp&G)SqVqY*)]S5G
!<RoMbQ)\T!!*PGq9/lW*VTO7#H%@A!PTKG!!%WMbl,`e]bhUS!!,OPqs4@*$1e,s_"d6r48&XSUAF3W
lSeG:!.F_1!otdZmJm>Ugu.,hhuUS!o)Jd!ptu-3p&G)]qVVD31\LeKGP^5!fI&'7!!,IEqr7^n$1e,s
\G5(a3VEFQSGM7Hi\^?/!-nA#!o#(MmJm8Mans9_XpFV!!2fP8!&O<K!0$cu!R!+k!<)ruD#2?W`?QVq
!!*>Lqs4@H47`FPO8/&A@.jR#IJN40>P8$sAGPTl3q34L!!*>BqqqM13:d+MM"om.>P8$sGPU.s<qZLn
?hrX[2spYH#KHZ$!T,p/!!8&<j8.d9?1n6uGkpA"=7uUo@/8j_3:6bI#."-M!Q[(g!!%EAbQ(T8!!$j2
bQ1H=pAb1oq98jom/R-EqWn3+o)Jc"q!8!4p&G(pq<S*&p&G(iq<\,Wp]1!f!/14,!-.T1!+#BX!.=J?
!)r^O!,_E0!)34Hs%D_Z!/C@1!-@l7r;Zh(pu;@'p&G(mq;VHmp&G(eq;_KKm/R-2qTJqPo)Jbjpri_X
p&G(drlk;a!+Y^&!(Qe.s$Z5S!C5uJliFHqoDekSq!8!\p&G+QlMBiIM=poM4mDh0s(;92mf3AOhtu=4
WWVkn!'9o5!2B/e!B&a1huJB&!!,.:qV_B^m/R/Miqqa<XTJP'p&G(Spu;@Mp&G+NiVMR7K_>BH45ftq
s'k?q!B84!bQ417oDekKpri`%q#LBo!AM[mbQ)h[!!+t"qTStAm/R/#deiA3jUh%a!@6h'li>9'!!+>/
qWn3Rp&G+CkPacHm/M@u!!*_QqqqM.&+fi&,22kN!5\@/!?p:qhuK):!!+M'qV_Bpm/R/#b5UH#irRpG
oDen:h>-(2`:a03,2i=X!1<H[!@Zk%j8X8h!!*\?qof)\%eK`%+3+-#!O)Ru!!+.`qTJqrp&G+=aSO-\
C$bm$!M]GW!(?GZ!>NuXliH,VpAb4)kkaWG[J'Y&!#Obnm/Mt1!!*+hqVV?>oDen*a8+Wof+%HS!=mo]
huKkP!!*kgqV_C+mf3Fi!!/VdirDF<!!*eVq;VM0%JKi'%c@-C!3Z"q!>aJej8Xi#!!*+ZqTJq$oDen)
[f4MKbQ5WjpAb4'anj3]Sb<$a'ZU!ns*+5<!!2cn!,DAs!-[u7!=$@8liH5npAb3piVMm@bPhM;!!*Dd
qX"6Mp](9pp&G)'qVV?moDemq[e\h^g*-1j!<LaIhuLRd!!*DXqV_C9p](<q!;?HnAbtEeEqB>4"h=Bg
!Snso!!*,QqVqRnp&G+"gA9k0PP>+X!VQKn>PcPDB(c3,!!!2"q9/lZ*qoX8!Q+]W!3c(r!=6X?bl<@n
!!EKWArd2k!!+k>qs4<\o)Jcdq<S.F2"gnLc2I#.liH)Hp&G*JqX"6]qZ$a&.Ue,<pAb4Ih>?+1T(;p^
S,(tCgbJL&!5nZk!S.;F!!(FCi;]ML!!WE'"Y4&>#PS3!0];ig!2/o`!1s#H!T,[+!!(%8irRg6p&G*B
qW%UNqZ$a&-<PX"pAb4Eb59B_OSo1R!!&&TbQ5d:p&G)uqTJuX!VQKn^A?%^P*,eF"s-[+cK4EY>k\4!
#N>RH!QkfB!!&#SliHEAp](?q!4Vgk!Tt'g!!(=@ljUA4!!!3C:5m-Ei87W1!!*>TqqqLi$hOE!LABa.
ha@);!3Z1V!Se7[!!'t7i!nVIXoJG+*)DU8guIBrpAb4!f_a\0_@,u9!/LC1!THN@!!'8"irS$Kp&G*5
qVr!gYQ+Y-)Fo:_`luV%pAb3u_Yq[\bfm3soDel;q9/l_4n\jUT)-Y3a:@nD!4)IF"eM;D2S%iEliFs3
pAb3*qs4@@,4kj8I/*%0=TAHs!!&biliH;rp&G*.qWnC+a"oNUf)+A+\-r$2!3uFZ!Rr:b!!%3;huHaM
!!&JahuVUXp&G*$qV_Ce"#Mj?g&'e1]+"E6!4;X`!S8Le!!%6<irE*Q!!&PcirS$_p&G*&qVqao^Fh.3
_u%XYW!`8!!2BA7!5SXVoDel,pri_4p&G)OqTJu^+SGd8VY\L>XK2sE_tr^#lWEl]!0@!C!''TN!,D;q
!,_W6qZ$VWqWn7J2YI+N[/0+ld*N:6\bb4bhc'7L!/UL0!&aBK!+bl_!,2'+!/UL0!T#X+!!91Yi;DL9
`l8N"]_^Xhi`5^Q!/gX5!&aBK!+krc!,;-,!/gX5!T>m/!!'.tirmHE%M#K7bQ5m\pAb2@qTJpnoDekq
pri_Ep&G)?qTJu_0(o8FS,1>3['Tf5;#0GXY4hnrB):io<qH@l=S_:am"4p2!/gX>!U;T:!!'8"libkh
!!#^ghuKVJ!!$I(huH[I!!#smhuJ,t!!%ZJhuV[jq>gHo!2o\O"Nnje!)<:L!2oPk!+Pfb!)rLi!*/gS
!.FP@!/::0!T>m/!!'"pirmWO!!#I`bQ*t-!;c`r=Sg5A9(W)`9_cg3E:s83GP]MaatEAf!1<W,"h;&B
!!KM%liH#fp](:^qWn3*oDen\m.ouJPP+tVJGSU5l9Y+D!3#b\"l\D?!!K1qhuV@Np](:[qVV?moDekX
ptu.2p&G)<qVVD24n\jUT_dRMe^XX""K;1W!S8Ih!!#@^irF)k!!#C]irG,5!!%BBirS+&p&G)eqVqb3
fDkmRQi,&0bfmpEp](:UqTJqOoDekRpri_fp&G)1qTJu_3;*=PP5<E&_YsN9;X4/G!UF@m!!+\9qs4<H
q#L<m!'9oA!1!6X!.aq4!U<&G!!&nmm/Q2H!!,jOqqqM4@JBg'/)C*\!0$OM!&s]2!0-[P!dW_^r87V4
5P>'WSbh:Eg&:sP:Z;32!TIS`!!+Y/qr7[:oDekNpu;@8p&G)>qVqV85kY0XTDIUJh#@?U!(Y3/bQ5mh
p](=Bb59B_J+N^@1AK&nJbB'DDYhQXau]4r!0@!#s2P$<!=d<MliEpaq#CF:g\^=<VuZJj!'9oA!1WZ^
!-\5*!UEDP!!&Pam/?tc%)_r"!Ls5e!!+(dqqqIHoDekMptu.:q>gHo!-%em!T-E@!!&8Yi;N]W%*&/(
!M0Ag!!+(gqr7[MoDekNpu;@?p&G)5qVqV98G3#`QMokAj8K#Z$aTWQ!KI6W!!+"Pqof&&oDekHpri_m
p&G))qTJu`61t9YL\T*l!!%lPliG<:q#CI0dHpet!4qe&!&OE:!29)d!-S/)!UEJR!!&Pam/6naK)4C+
_$To;!><HMhuL%S!!"_JhuK2=!!$s6huV_,p&G)Wpu))N!/14/!Q5<?!!*_Sqr7[_oDekGpu;@Dp&G)3
qVqV99)&Af!!&>[j8ArXG5BD`YR(%)!>)[9bQ+@/!!"SFbQ*Rp!!$U,bQ5mRp&G)Jprr[:!)`UZ!U1O$
!;ulu$d&;4!6k'8!&+-6!2fGi!,VJt!*8dn!1`iNr;ZglqVVD1)>O75$buSs!5\:-!%n3.qqqIFp&G)*
q;;6Np&G)Wpu))N!)ECN!T4jk!!*JDqr7[poDekCpu;@Hp&G)+q;VNT!!)co!1*E?r;ZgeqTJu_(ARq2
$Ej9M!3l(q!%I]e!0?gR!+,KF!(uqb!/L?nr;Zj@kPXZJm-I%6!!*5=qs4=?oDekAq!8!^p&G),q<S)b
p&G)_q!@qZ!?^+nhuGq9!!*54qqqJ(pAk0m!%@X#!2K5f!+Yi_!*/^m!0m9:r;Zj?htl@555>0Z"M4Kj
!8$iC!%I^'!2fGi!+l,hrSmlYp&G)YpuD;Q!?B2WbQ'Wu!!*2"qof&VoDek;pri`'p&G(rq9/h6p&G)J
prr[:!>!TSli:&\!!'e2li?5@!!"8=li=-\!!$a/li:Jf!!&Pam/6nb%`eG(!)`Lk!4D^^!8RPRpAb1:
ptu.Ip&G)&q;;6Xp&G)Wpu))N!=m6JirE!P!!'M*irJ!/!!"5<irGtO!!3-#Abk?d?1n6uQMBM=!!*P:
qTJq3p](;jqof&]oDek4pri`'p&G(rq9/h<p&G)Jqoo&`r;Zj*`;8g#BD;H,^&.-rkO\`S0)4c5WqHDm
D#*Dt=nVgqSG;IL!!*G<qVV?_p](<#ro!e6!8R2H!%dp'!2B/e!,),c!*&Xl!0m9:r;Zj*^&$ahA,$$(
[eo(bht-mK/bn?-U]:Di!!$^.irE*Q!!&>[j8ArY$**jG!*T's!2KG8!6Fd4!%@Wd!0d*V!+,KF!)<.e
!/L?nr;Zj&\,,FkG5)%;[/91ikO\`S3;Dh?U%SHdG5CP+lVI3S!1`iNr;Zj%Y57&VE;0D5Wr(]Sh"1RH
2Yc21RJ$U\E;JJnhb3YC!0m9:r;Zj%YkmA[EVKM6Xo%,Yht-mK2Yc;4S,<9`!!%$8irS.5p&G)YpuD;Q
!<o(kbQ)8M!!&McbQ,`V!!"bKbQ*Rp!!$X-bQ5mTp&G/Lbfoq-r;Zj'^&%'qEVKM6Zhs(hkO\`S6MTmI
PkG(WJbn^6lUCLI!298Us5s7[!=,t-huIQf!!'%rhuMR)!!#4XhuJc1!!%?AhuV_%p&G)\qV_D.r;Zj'
[ef"aD>4)2XS_#Xht-mK5Pa=?j,Wg5!.=Y'!THK?!!&Mbj8\!7!!*;!qTJqKp](;_qof&]oDekOpri_g
p&G)2qTJu`4Sf'V!!%rRbl>`^!!*SSqWn2fp](<-qs4=FoDekcq!8!=p&G)MqWn7J4n\jUWVYu]i;EWV
%Dqu"!a,L'q>^N%qqqJ.oDek_ptu.*p&G)FqVVD23q`ORU&*^IeboIK%E82(!*]-t!4Mdb!8[8I!D;DJ
irFi-!!%`LirS+#p&G)fqW%V-r;Zj,Z22ZE;>:+kU\i78`q0626MSb)GkM+;GP]Maau/km!0[3&s2+^7
!>XMgli9WQ!!*5>qs4=9oDekmq!8!3p&G)WqWn7J1\LeKZhj%geboIK'\*-?rSRZEq#CEu\GP1acL_):
;u#8NHM.==NV_Q6hD"X'!35nRs2t9?!>O/^irDRE!!*57qr7\'q#L<m!*&aR!.=J?!06p9!T>d,!!'+s
j8[C&!!*_KqTJq(q#CEtW;Fd=]CZ('9DH^2DtX/4JBZ78bQ5j;p&G)]qTSuLr;Zg[q<S)6q#CF%aSY<(
ch%2;AGGKkG4kn9Sbh[RkpuH-!4hsms3:QD!WW3\q;;6(q#CF%^AHgg`Uj-1?hiOZE:s83Q29D>h'hss
!3l=Xs24d8!'9r9!%n!H!=?R=irR1#o`+u"pu;?pp&G)ZqVqV7.J<`AZMNV]`r,l;2#5>q./<iD#d+!J
!42:t!*8m=!+u'-r;ZhRqTJu_-2%<=T_cn4ZMab'G5CP+g(!iX!>*NQli=op!!%??li:bn!!&toliH;m
p&G*-rTsOMs2P!;!-%em!RD2M!!*VJqqqIaoDel5ptu-^p&G)bqVVD0+8,[7[JJh]]_qg1Er+esdL>pO
!Y<<2r8RdhoDel7pu;?cp&G)dqVqV6+8,[7\,,.b^\n-4B)9^P]aOW9!=lF4bQ+U6!!$d/bQ(i?!!&/X
bQ5g*p&G)hqTSu?rVus%\GGOmZ39t'!?9_hli=9^!!&2XliHEJp&G*"qWn7G(&.b1!!(.;m/O]s!!*5+
qVVCR"Si#u):&-;!2oGh!/p[2!T-QD!!'%qhuVUIp&G*-qV_CYrVus%Z23J]Ws&A$r;Zj:dJMr(WUp/j
NVVT8i_9%G!3Q+X!T+Ub!!'k3j8ZLc!!*1oqTJu/"8Mot(VKXh!1<BY!.Opkr6,2b7.pT\S,1>0a:e1H
!3Z1Bs.]Jm!B'!8li;S2!!+G-qs4<KoDelkq<S.G3;*=Pank?+k6M%fp](<IqX"6`rVusSg%sV,H2%@?
,hW"P!06[O!2B;I!SfR+!!'e1huVU=p&G*<qV_CKrVusTh#$+4j*UP$!@6FsirG25!!&hjirS$pp&G*/
qVqV6#ke5udJDo'VZ$Pr0#mb3!,hQ3!?oGZbQ*7h!<)ruPPNE'aY<Dg!3Z1B!QYN>!!'\.bQX8s!!!%_
qWn7F3;<IR4SnCEIJ!R@"i'm"!TkO!!!*/]rTsOM!7UWA!=7`^liilJ!!!%XqVVD/2>@.O3VqY6GP(q:
"L\'`!SSXi!!*/QqVV@pp&G+!fD=D/PEPtH!KHs9!T#^/!!#(VirF>s!!*53q;VM3+85a9!o!M2!6b'9
!=7EUirt^5!!!%KqTJu\0_bVJ2#>DrD#OG0!!*5!q9/lZ*;9F6!lXrZ!4MS$!=-R>bQW`U!!";'qWn7$
"o&&t?Ma!gAb?$(&C(%;!TFI]!!3-7kkaWG](Q+)(ZbGZ"cA0;!$]tihuUClp](:tqVV?]o`,"'_ti3k
edD-O!>F8bhuL%U!!*kfqqq\:K7a.(,M;kQ!PJX2!!$7"irEN\!!*VMq;VM/$MON$']8cI!42A!!>aGd
irt-j!!"+XqTJu?"S_rs;Z4i=bQ(`;!!*S8q9/lW$24E#'$:!o!29)d!>NNLbQN-6"pV"$li;&"!!%ZJ
li9BF!!+5%q<S+.rW)`o!A!F2li<^P!!+G/qWn?2H3FJDq;;6gpAb2AqVV?;o`,"7f(n5(`qBB5.GajY
!1<H[!$hR!qV_Bq!X/b#q;VHlpAb2BqVqQ?o`,"7g%jY.aS#T7.cC0`!1NT]!@6OuirjOK"U1"`bQ),H
!!%'9bQ'Zr!!+(Wq9/iGp&G+?b50<^MY7#N+ijH'"DV[K;<RfB!S\^j!!'"qliH)lo`+tTq!8!gqZ-No
!CQ2Lli;b5!!,(CqWn?"C.q=VqVVD$*qoX7U&3aKeg'hf!'9o5!3Gko!C,K<huJ6"!!>+6i8FOk"Cu%;
:#Gg-!Ri+a!!&ekirRgYo`+tRpu;@Wp&G+Yiqh[8JG&sD2;e8j"D).67`bGM!PTNI!!&2ZbQ5U(o`+tL
pri`/p&G+SbPKE_F7oS70Zj18#$Y:g1k`X,r9OH9!VcWq!ndD:!RDAN!!$[,li<.@!!$7!li:eo!!,dZ
qWnDd<A?4W[G:]<!IFkB!!*/GqqqLo&G6#'@eej]M=poL<r(YRAbc?*!!,XJqVVQT;)0nV\)7,D!IY"D
!!*/Iqr7^t&G6#'A,,'aMtR,N=8CkVB(c3*8`KU,##\>N/TR]/r6,1\!W<#r!!*/4qof)I%eTf%=np2@
IJ*X@:AN*6>kS-u6Hf5Ls%<7j#6u>XU!i/Y(A@e0,j>-l!Oi.'!!85Jm/$&KAbH*(G5:J);>'tiA,>Nn
lT73-!!``M>+*FdcP?0S!@$=rhuTt^o`+uJptu-[p&G)3q;;9I!;?Hn?M`R]h`*Up!!``M>armndM;KV
!@-M!irQ@co`+uLpu;?_p&G)4q;VHLp&G)"qVqY:3B@'="U5oDMmg_.]bC,?!?]G\bQ4::o`+u>pri_>
p&G))q9/h.p&G(nqTK#a1Gek-!Y7Fap&G+mlhg#KMYI2M!!'G%li9-@!!&Mali9$=!!%ECliQ9!/,B5I
%Q[#O!!,pRqqqI,oDelmptu-3p&G)Vro!_4!&aHM!-\4s!netMq>^R,4%8iC!E%kRirFf*!!'1sirD+5
!!&;[irCt1!!%6>irn-d.0'AG!!3Te55"sW8^%"T!-e&8!1io/!&O<K!/C<n!&4*H!,MGT!lcN4li7$I
qWn8]!!)`n!=I]ZliGo_pAb3u^&%'ri["3t!0m?H!neP5li7$BqVV?Ko`,""e+qo&dMqu^!rr<*ZhiS\
efsef!0-j5!mV]&li7$DqVqQOo`,""f(n>,eK";`!=$"/irRgXp&G)Qr8Rq?j3\ebli7$6qTJq0o`,"!
_"l1T^DZbG!=#=qbQ5U'p&G)CqTK#R(`;W?!=QjFm/?8N)ta132sC)(!QGK@!!*eaqWn7/&bc8+!j;Cd
!mV8cm/R.p])(=b)>*t11u.ob!k\j?p](=.b51#s`=VbD!<T+ohu^h+%IF,r$bcDs!#kM1!B&d1irQn%
pAb4.c2-H$`t7tF!<T1qir[71%IF,r$EEsH!#P;.!ADRjbQ4aNpAb4,\GFDMZOZ^0!<SS`bQ>'Y%.=/u
!!"P4qs4@,"n_iqCA@,qV=jli/*cut!OMn%!!*JHqWn:"!Wq`h!@Zb#huUUro`+u&r8@P3!1``_!@cn%
huThYpAb4%]DCFe[fQWu!!+P+qr7^p"SD`pAbb9cT(W-b.cL6a!NcD%!;ZZr$blJt!kA@6m/R/5aSX0^
Y6=Lu!*f6B!06aQ!@GtcbQ416pAb4$Wqsp@V?-hm!;HNoDu/f$OTG.U!<Jeeli;5&!!#jkli<"<!!*hg
qWn3VlMpp!qVVC3!VQKo!LEN=!-%W3!)34H!/:+H!>NlVhuK53!!$g2irP)>p&G*oR/#\AEqTJ5:&ErP
j5Ymf!!*e^qVqRGlMpomqTJth!VQKo!K$Tq!+tp)!(H_-!."8<!><*BbQ*V!!:g*j!l+X!!U<;M!!*PO
q!7u?p&G)<q<S)hp&G+>lh]rJK'WI<!k%p`!T$<D!;ZZr%);Sq!&aHM!-@to!*f-s!@-LuhuJ/k!!*/1
qr7_98+ci_%)Vf"!&aHM!-S+t!+#9u!@6\$irFPp!!*.tqof)`5kP*X$a09K!&4*H!,;8Q!)rRk!?fS^
bQ)YL!!+Y4qs4@9(A.Y./Euus!TF=W!!&eili9!<!!#F_li:J\!!+S&qqqM"(%hP-.c'pY!S.JK!!&Ma
huGV-!!#:[huI$K!!+V*qr7_'(%hP-/)^6`!SI\U!;ZZqSb_:G2>."M62BO@?0hOl-H>r,!P/s;!!+Fh
q9/lW#5/#sNVUcu0D5AH3m@HE!`T."mJm65qWn3[oDel2q!8!_p&G*qc2-c-kn!If!,;8q!(#rO!-J(q
!hKAlp&G).ptu.Jp&G*q_tr9lh%',Y!+Yi_!'TZK!-\5!!2/ra!,_Mk!2fPlrVus$`qn]ri"#G\!+kud
!']`L!,DAS!0HgQ!+P`I!1*<Y!<TS'bQ5iqp&G(rrQP5a!''?G!>!HOli:#X!!*,1q!8!!p&G+@jSJ3D
aTV;;!0I$C!$LY/!=m$Hi;MR6;"Xeh!O):V!,;-,!@?CphuURqp&G)Lq;;5pm/R.s`qn]q;=sni!O;F[
!G_]0!!+D#qVqUm"SMfqMtuB5+70%/%C5iS!(lh`!<JhfbQ)&E!!+:_qTJuC"8Dit!!%HCbQ&XM!!#so
liGZMo`,"8htcU>kVr28!*B!_!MTVg!!'J(liGrNmf3Ch!)NIL!Qu)J!!+1kq;;;/2"gnL;u,>PRK<*^
!3Q+U!RhGD!!#jlirRF;o`,"7fDXb.irS$pp&G(lq;VLG!VQKnYPR8[edLjF!(ct1!P&a6!!+(Uq9/l]
0D5AG9DQd6Mu`nYp](;cqTJuU$LRlp#.OHq!K$pN!!-Elq<S.-&G?)(O88,BDY=&2#hSq>!P&@,!;QTq
"g7^[!J:FG!!-9\q;;:l&,#u'M##s/C%_N-#gE/'!O)^p!!*8-qVqU1!VQKp!*eIYirR12p&G)Mq;VHi
p&G+!chcZ&Z39Rq!<o(kbQ2ngo`,"jbPB?_Z4?R.!.=^grlb@Lp&G*u])'VOTEFT^!Cu>MliH6.o`,!p
V"j9VPP+tW#f6B(!U)Q;!!+A(qWn3JquH9f!CY`?huVOho`,!pS+tnAN:m5P#e0Zg!SfU,!!+:oqVV@6
m/R/UhtuF7h)5*1q>^NuT(q=GNqNGR#eBfl!T,j0!!+=sqVqR;m/R/NaSX0^`\@&c!<S;VbQ*.d!!*>%
qTJu^1A1\K+2[lu!.sV=!<fn.liFBmo`,"6jnS0B6hUK\*p<Cd!Rq_T!!,ORqs4@MC[M0'"KqUZ!N?+m
!!+(mptu-:p&G+5h"oq0aUn.G!CGZ>huIBW!!*5,qVqUW!VHEn*8L>L!'p5X!?C"nirR@8p&G+\iVMR7
BC5a#".oA5!La&^!!+"Xpri_!r;cZo!?0&UbQ50_p&G+Ub50<^?1%[n%ESG5!UE;K!!%!5liGWGp&G(f
q<S*Yo`+u5qWn7K7IC-V%)2Vs!T-?<!!$d/huUt/p&G(bq;;7Do`+u/qVVD36LFgS%)Dc#!THQ?!!$j1
irRC5p&G(cq;VIIo`+u0qVqV96gapT$a'<M!R!\!!!$I'bQ?"u$haQ#6i"q+O7`JQA,=CMb<5.l!@Z7k
liF^)o`,"!_t`R!O9,%T!/p[>!,DB2qu?a!U&+*Vi$7Uh!@Gb_huU(ho`,"!\bP(`M#m;M!/11+!+kj(
!<S\chuV@Oo)SXf!@GkbirQLno`,"!]_LLfMZNMO!/C=0!+tp)!<SbeirRaUm/R/2ZM_oIU'UDl!XPdL
q9/kf!VQKnGkoP`>kS-u!fQp!!Q#oE!!+e)rp0[N<:g.k53Mb.!U3#G!!*GNqWn4J!&4*H!=?pFliG?8
li7&=bPpE#hGEhE!B]*4huVY"p&G+#_><'jh_+U&!=?O;huU_!q>g*e!A;[sirS+9oDenShtc:5i'R,;
!=HdAirS-lp&G+"_YW9n`Wb]/!@kYZbQ5jXp]16m!B/$pbQ5jJp&G+"YklQEb:<2c!=5k)bQ5!QlMq)M
hX'U@"n_ir!LrlN!RM;L!!51Cm/-,Me.)*O!?11uli<aE!!P@2i8CjCo`,!nPka/;`XMP@!B/^/huUq.
p&G+2h"oq0R/lOQ"Zb/oj0Ss^!!*+dpu;Cr%/'Z%2r=Dk!R(uG!!*tpqVqRFl2V&F^s(#s"98Gr!!*+T
pricG$haQ$1<978!OiI1!!*kWqTJqtkl:fUhr[5s!!+J3q!8!.q#L?n!.jt4!M9Ge!!#^gli:ne!!>X=
g-,'.!@?RshuIrn!!%?@huT/Gp&G(`ro!_4!,2<2m/R5WfA/X_!!+D(pu;?uo`+u>q;VLD!qlTo8bqBH
C$>U"5/G5uqZ-Hm!@#\]bQ)GO!!$s5bQ3S&p&G(Zq9/hFkl:ed<M9Wh!!&)TliH,lp&G*s`VJj#@J'U#
K)+a54QuhJ!E#6goDelHptu2),5)!;"M=Kf!*o0s!.4V$!oVuskl:ed;O[j^!!%lNirRjYp&G*r^A6dh
?1e0tIJMn'3p?VG!D87M"nVcpHhbec`#n[Q!<fFubQ(W8!!%!6bQ'K_!!!;s!!+>"q!8$P!rW,q!!"SG
liGuap&G*p]_^sqh\G;S!!r2s!?okchuT)Ep&G(Bq;;;')tj73!W]P&huV=Ak5YJfoDen9eG/&)QNHj\
!%[m*!S8=b!!*//qVqV.'^Ynt!!!8r!!+.Tpribp!qlTo-Mbjd_&;qH!<T"lbQ5Nmf`2#'q!8%G6hLEZ
G5:J)YOqkr*812T!P&Ef!!%??huVXuo`+u2q;;7MqZ-Kn!?08[huU%df`2#"pu;D55kP*WEr"_qW:^,k
)q"NB!O;q%!9O7]DtqNWau]1q!+u&N!13?Y!>rKGbQ4@@g&M3ti9]h,liFs+p&G*t^%q!p?1e0u7-aX8
!.rl(!?]kehuU=jp&G*tZh`MZ=S2Xp5i2@q!.<H"!?]qgirQapp&G*t[e\q`=nMaq6/h\#!.ObEhuEct
_YD=UVuu_n!=#=pbQ(K4!!,.'qTJqZg].EV!!JY`liHEXo`,"Ok5+EFhAu7h!.t(6!U<>3!!*4`ptu21
=nMar1tpmbhuV:Go`+u>qVVD28(mqD"HiK>!TI;U!!+t5qVqV-*;':3Ier(*iCMZ&!<[rKbQ5mao`,"G
`qmm[^_ueF!-.kZ!Qm^g!;HNp4QcG*!Q>QA!!&,VliF$ep&G*p_YWU"iY^AL!BJp0huUG!q#L?n!/^O0
!M9Jf!!*/2qVVD*(YSii3o9Yl!PT$9!!%rQirPhUp&G0r]AqrLirRgLg&M.1a8!jZWXSP#!.F[e!KdHW
!!*/"qTJuX($Yei!!*>6pZql]o`,")i;2d@lWWr]!?LJ%li=fS!!*>-pYZ*O!!)`n!>*fXhuV_8o`,"3
hYQ.1[FtT]#I*s_!*&Uk!>*lZirS.?p]19n!?C(pirHRB!!*:qpWNV1o`,"&_YVIWb>.^1!?'&VbQ+L/
!:'Uc1?J;t!Q>68!!$L(liH/^o`+trq<S*5g&M.,g&'_,huUFmo`+ttq;;;+'_MG+<r(YRI+eQ$0\lH`
!PS^0!!$@$ire$M!!)`n!*B!V!.NW%!@u1bbQ4^Ho`+tlq9/lY'(l5):AN*6EVBIo!!*+Tq<S.G;"Xeh
#eTp!!2/ub!<JhhliHE;g&M*R!.Xh&!SgBA!!*A1q;;7?o`,!nQhoV@h`]Zn!<IcIirS%3o`,!u[/At`
irGP@!!*+gqVqV94k]l:!He.]!Qde'!!*>!q9/hro`,!nMYbNtb;]D#g].?c[JK4j\-M[,!B93<liH?;
o`,",de`;2eJ7!Bq>^O+XSUiUY6X_#!ArU.huVXto`,"+a84]paqWM/!=l:/irQCio`,"Mhtl@6i'6l7
!>N]QirRC=f`2$^SbgP2T*Frg!ADOjbQ5jHo`,"*[f">ObfmR0qZ,IQ!?ftkliH6/oDelZq<S-n#k\/u
8*g$<!MfbP!;lft+3XT?!S]O)!!&/WhuU(go`,"\htl73RfV.A!?]VbirS!qoDerVj5^$s!OE()!!,OJ
qVqUJ!S@AQ*4c!k!QQtf!!%]JbQ4CBo`,"VbPKE_NW9+3!!,jVrTjQF!qcNo.,t'h!+5?u!0?sB!+Y$h
oDenag&9h0L'%#J!@HCnhuHsQ!!%iNhuI*7!!,aJrSmp7!r)cp!!+G"q;VH[oDelKq;VH^ec5_<`r4*^
H33a>!@#GWbQ(Q5!!7PlbkoTa<n76O!dak4!R2DQ!!*.aq<S.9%J9]%#1`S:!U:cl!:9ae!d+G"!Q,ZF
!!*.Zq;;;"%.sT$"j6]"!T"mK!!*.Ero4%!(&e4.!!*.\q;VM(%.sT$"jQo(!T>*N!!*.9rlbDK'D2>+
!e0sh!PJm9!<)s!"h=EQ!QlA3!!EM1m-.C>!!+M-q<S*5oDenWl2'`H^$l$`!!EM(i8%-"!!+Ftq;;7#
oDenTh>6%0Zd\sU#,q[ai(inE!@HLqirFQ#!!,7@qVqRae,TUUR*<]BoDen9_thLVEW,t4!!,%$qTJr7
df9IlcCkI7!!&5YliH#poDelPq<S*!pAj"L"!,=J"nVcpN;;B4eL:%i!/UI/!,:*dqZ$^=a.!8)!!&&T
irRa\oDelKq;VHidf9IgZASnY!!%NGbQH)5_BngS!.=Ud!+4.S!B;:q!!+V-q<S-W!VHEn'@QaD!TGU.
!7_&M2Bh\m!@ZInhuT;Jo`,"*a84]pegTGVo)JeL+nPa8.G+CU!M'8a!!*bUqVqV0.+/(r0core!$qW]
q9/l!!VHEn&[qP[!Q-2$!!*+]q<S.H2Y6tL9)IrWm-M7d_uKf=M##s0h)"['!(QeB!O)^i!8[\V!K-^5
!T5g,!!#ObirQFgaT25=!<ITDbQ5j=oDekVq9/l4"N19@.cgEl!MT_h!!&\fli:n?!!+M#q;;:B"S;Zo
R/,Y?B^GfO!!+M&q;VLG"S;ZoRebtDC!QeP!!+@aq9/ku"7uQnMYYHr?GlgE"f;%]!TZ'5!;c`s)Vb,T
!TkHA!!*4mq;;;+0_>>G):86<!S\Ud!7:cI"J5GL!S]@$!!*tdqVqV5*7b,Y!!*4_q9/lY/G&oC(;BXh
!QQ+s!!-!]q<S-O!;$6kCAI2sVuss<!D_GGhuK#5!!$U+huTGPqZ+b=!DhVKirGD:!!$X,irPhUh#QX=
!Ct9-bQ*Ch!!$:"bQ3h-`;foIc2I#-liH&poDems^A@0slW(k'!=Qg@huV@VoDems[//\]hbj+Jc2[kR
`qeWqfI6@l!=-(0irS.;f`:@=!=H..bQ5R+oDemrV#&:9b=]_R!<ITDliQO9!qZHn46ub0!Rqe%!!*+D
ptu11!qZHn38aSj!QbuR!6>-@!I+>!!K7*P!!,+>qVqV#'&WcP!!*+9pribf!qZHn1X#X=!OiWZ!!4\,
m/$&Li#hRk!<J\cli<$`!!+Osq;;;(*qTF5!L*E=!oW!k_uKffebS5+f,jPa!<JJ]irFks!8dbW-GTB#
!Q#fJ!!*+Tq9/hba8l/=!/((5!.aY@!@?V!liH9(_uKdcptu-to)Jb8!7Uf&!Sf?H!!%KCirFGt!!+@r
qVqV60C8bl!!%'7bQ)PP!!+4XqTJu].aJ+g!!+(\qWn7#'(c/)!J:.6!Nu^G!!+"PqVVCb&buG)!!*+J
q;;:N"iLBA)o2=1!PB$:!!*+Lq;VLS"nVfB!!*q=qTJu>&+fi&!HIqZ!LEu@!:Bgf1ZSE"!UE/F!!*Yb
qWn7J<Pe_:0\?6\"5c?D!;-<m&'t+1!T$\j!!+h.r8Rh;61Y'W&(:=7!T?rQ!6G3A/B%J1!R!Oq!!*SC
qTJu_9&'F/!!--_rTjQJ!V69kD#*Ducj@Mg!`Ib1rnmg8!V69kBDLHd`X0H]!E7hQirP,?o)Jc(q;VLs
$,HTB9#ghR!Ib(@!!$@$bQ5'VirIs:!<[lOliGKRo)Je)bPCK)G/OCZ!!*1Irnmgt)Y3q0'#=>$!-#^R
!<[]JirR7@o)Je(_uA]oirF,8!!*.=rlbDN)"R_.&?koR!+tHqf)PpXVsN_Lnc/Z(q<S.8*6S?T!!ELt
i87E&!!$O)huV+A^AnB@T]>$0oDepm!+kud!RVk$!!ELfbf`WL!!$3ubQ5?nn,Uc7!uJnQ#4hfq$dne:
!J^^(!:9ag(:p%?o)Je!a8+WoJ-!@a!uASB"oA;q!!*JLq;VL-!PSO9'WR2to)Jdu[JA#IFTM4:`rH,f
,Otg8B^>N]!TkNW!9F1],pDgZ!Fjs_huVOR]DqsY,4Y^7AE*IG!Snj1!!+8bnc/\obPKE``Z4pWpAhc)
!>EZPli<I'!8%8P'#=>$!0O\ip&G++_ti<mPH+Za&?koR!/1.JZN'uDq<S.A0\ZTT!!$a/huVC]]`@L$
!,MDj!SK*+!!$F&bQ>[3!3H5%)qk&R!LNrJ!6Y?C):&'9!K[B$!9jIa)U\B@!KmMc!!*nKrQP5a!J:HU
!!*+Rq<S.E-KkHK!!*+Lq;;;-,g$,I!!*+Mq;VM3,cgtH!HS"[!QH:a!!+V2q<S-A!Ug$&!!+P$q;;:.
!RUo&!!+S(q;VL2!ODe&!!+Fcq9/kc!Nc>&"fV7`!S\mm!4W"0"JGSK!RN%B!7h,N"JY_P!Ri:(!;$6l
"HrT)!PTYW!!-'_q<S*/qZ*l$!DqSIhuIrV!7(WG;;_30!-c0Xm/R/Yana-\CTIL:&^U:>!6kKWX8i84
`VJEm_\2#1aT)>Qa8+`r`Y6>lk5YMmZh_fGZ4X2=!<RrRm/62Nl!(4h!<R`GhuVY7l2\^%!<RcHirS(>
bQ-T%!<R<;bQ5j]XoJP(!(>oDliFHtX8i8df_OG+Ws/"n]Dqsug\Kk1Xp*8Sg&M.7`VI^YS-?;#q#CF)
anb9(jZ9IC!=Za=huVLipAjpf^]4BD_>3*lgc3U[h>dQaY5-9B`\Oe!r;Zj#N;2`?KEA7U!<\&NhuS9.
oDlH&!<\)OirOW2ec=>&!<RQAbQ2_c\,c4&!>O#YliGEEX8i87aSF`p`=VkGZN("?bPC0!`t7#+d/X1[
[e\,JZOX\LmJm8tlhg#Lk=hlU!FF[\hu_\)!36)#?fLtC!T-K.!6G3A<m1Ba!Q[UG!9X=_"ge*m!Lj7m
!!<A(i8FRl!L!Yd!!*5(qr7^B"R,p'!!*4kqof(q"Npf&!!+V)rTjR5(T[W8!!+LprSR^s(8q36.F\7U
!Ql2H!4i.2-,0?%!O`]i!8%8P!Gqc%!TcqZ!;6Bn!GDDi!SKr?!!*+6ro4%78+ckg!!*+,rlbD_5h?"_
!!NV;m-KQ1\H)$t"UD6hi.;$-!!NV4j5YdoquEbt"U:UCb]X'E!6>-B0\sJS^B!Br""r$0%\s(+0%IE2
%\s(,._hehj8csq!Gs[4!8[\VBJHCbqu?b3184aL?7kFB\GuYI1s>sO!!-afXoS+p!GO<`!!-CXnGr:`
J,~>

%%EndBinary
grestore
np
grestore
132.48 141.36 mo
72.72 141.36 li
72.72 107.04 li
132.48 107.04 li
132.48 141.36 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 595.2 ]ct
[0 -35.0425 60.48 0 72.36 488.521 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 97 
/H 168 
/M[97 0 0 -168 0 168 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
\Gu[:D$J5bf)PjXBEbR>o`,%!Ba(73!XE$8nc5rq!XNWIe,[hq!XNHC[K,^q!XNKDUAt?#?3U-)X8i>(
Hfe)X!6P9D!d36i]`@6r!s3Z&9;DOj!c#bC!2TYu9'5Kd&E<c.!!GdFi5H5G!9!n\8)<4G&#TC3!!#:(
bd.eV!!+4jrp0Z=!p]j"!!+1^rnmg+!mL`"!!+1aro4$/!j;V"!!+(JrlbC`!iQ)"$*O6n!TQ01!4Mq/
$)RUY!S93Y!7_&M$)da^!STE>!:p0k#aYG5!Q6[k!!34Klhp)M[KcR.YlFh,Fl3,T!NcO\!7(WH!d<T$
irQ=e^&[O#!Wm,[r6,25"f_P'7caI5!U3[c!!,I>qqqM2;r[l!!!,LBqr7_8<5ek"!!,7%qof)`9</$p
"MF*fqs4@.'!)'6"L@j]!Q#H7!5\^:"L\'c!Q>Yq!8mhX"/>V8!O30=!;ulu?0_7P!-P=B!En:ThuI]d
!4i.2>2f;;!-$EffDkqLb5'6]A[VU4!!*;/q<S.;,HLkG#,q@U!RW(e!;?K,!!*;(q;VM*,16JG!!*:l
q9/lR*jbqB!!,"?q<S-@!NZ8%1Y_``!JLRL!4;e-1uA&g!JUX/!7LoK0$!e3!I4^Y!:^$i!fd$B!TYB)
!!*.Uq;;A-*rl;D!!*.Vq;VM1+5m4D!!*.Iq9/lY*5_d@!!+1qq<S-I!iuA&*mafCrSR^9!iuA&*n'lE
!KR<H!5nj<)nl'k!J(<q!9!nXJ,/F3i%1u1!WW4Fq;;;(.]WOLHMQS%f.6=j]DqqLq9/lV-IMnJ!!*na
q<S*LZiKk$!>``OhuJn?!!*kXq;VI=pAhT$!>N!<bQ*=L!7CiIDu&`#jrM)7n,NH&q;;;-)lir=C\cum
h&HCpXT/?/q9/lZ);tSM!!**%o)Je!e+r>2K`T*lq#CEr!qQBm$cr/%!Ib'^!!**%o)Je!bPgK"irOZ2
]Dqs5!qQBm$F]cS!HS;+!7UuL<*Abl!,VJt!S&%1!:g*j:fQuc!,),c!Ql4k!!,qsoDepm!,22g!R2Fn
!!,Ycnc/Yrq9/lL(%;4K!!>=?dMqcX!>EfTli:tP!:0[f37Ptdo)Je(`VJElBtXKK3S2ClquHKl!>ENL
irEl.!!>$n[MSN8!>2[6bQ)&F!6>-D--trENWJ_O!-\2)!R1r)!9O7b,K8U!L&plG!-%bl!Q#/X!!4Fd
ir\7s!V69kEr"_r`<j9Z"X(.qb^'<]!!$X,bQG*U!!)`nbQ%YV^]*R#kV_r3!>F8bliH?Gf)Y(9!>2a=
huVUgo)Je(dJDc%h+GH_!>2g?irS$no)Je(eGA2+i(Lic!=u%+bQ5g<o)Je&^A?%Sb!Z(,`W-#HU\sHZ
ZjQF*!<IuOliF$fhZ2^;!=G=ohuTkcoDemmJGJ+(TEN+3!"&^sr8Rg\$M4<!!J:.-!MT_6!!*Ccr6,23
$1n2u!Hn7_!mHf0_>jUmlMTuLlXKGc!A*7,liH2qjoF3;!J0,*huV_@o)Je@f)";*fd4]>qZ$YLiV_^:
ia23V!@uk"irRp]_>jU[b5BHab>n-6!%%]`qTJu[,/XB]AF'*Y!SJ@_!!*.uq<S*7m/Y`<!FOa\huV+?
oDemnSb_1DIa8#e!!-KeqVqV')"[e/!h];K!.Vld!ERD?bQ5<kq>gBm!<S>XbQ)\$!!%B@liE"FoDekZ
q<S./&G6%M!!%0:huSK3oDekVq;;:n&(^gL!!%3;irOl8oDekWq;VLs&&\GJCA?!QGQ7d:!!#(UbQ5'\
_uKfGdJ<,0i@"6t!=6O<liHBKquFh=!=QsDhuV@SoDemt\GG+ahG)i,k5YMjanartfHp.i!=6:5irS+6
_uKlH[EQklbQ5R)oDemsVu"U<b!s8K!F"a`li<(;!!%!7liQOL!lP'><SdK/!/C(F!,D>f!Lj/Q!8dbW
<oEf6!/U4H!,VJk!M0A6!;ulu:<NCV!.+5:!+G]I!KI6"!!*A2q<S.?-M.9<*rt3pliH2e_uKfDWVPHQ
eKjbe!?TbehuVLKm/Yc=!=5b%irRaWoDen5fD=M.g`"K=p&G*uReb/._BJOO!?8lObQ5^"_Z0]skkXQG
N<8tWq>^Mjq<S)s_Z0]ph"fk/L'$uI!1WfB!+tj'ci=)(htc:5LB@)J!1irG!,'j_mJm8Aana-]H33^=
!0-fu!+!JB!<SP^li?#F,4kj8:&4,V\d$(Q!<S8VhuVCPoDek_q;;:Y"oJAB!!*.^q;VM/+nPa79)7KJ
ZN]1ck5YMaJbdLj_]JFM!(-M*!MK\7!!4G#m/$&LNWJeQ!>O)\liH,s_Z0]]d.uT#L&prI!>EWPhuVFX
q#JS<!@-(hirOr:o`,",c2-H$g*tbVkl:`+^A5tRH3*[=!>;p=bQ5X._>jRrrTsLL!So'p!!*+fq<S)r
_>jRjq;;;%,P;$;!Kd-8!G)8K!!%iNirR[Uo`,!nP54,<B&WgL!!%?@bQ5I$o`,!nKDE^k>gWNP02V?B
!rr<Liq_p@M"CZJ8F$'<!4U>U!A.";!!+Ftq;;7(oDet^hVd>ihuKq-!!+ZGoDen=g%jY.KCf-E7H++'
!3k\fkl:`57J$Q\,/a6#!-[u7!C"[&bQ+6_!!<nObn^3Xp](<sRec:NfaRNR!=IQWliH8ddf9I_\AK$R
!!*1bq;;;!$hs`$!!*GQqVVD0(Xi?d'>)6uo`,!pPkj>?d1#[J!=I9OirS$RnGqSL!thK;'(l5*!epHo
!PAd4!!*D>qTJu]("<3`$3[<om"GK5!!+h:q<S)doDelSq<S)he,TXZTA\XV!VHEn0A?6[!`o@%p&G)N
q;;6We,TXZU#Y0`!VHEn0AZHa!*Jjn!0-g7!+#@"h#ITbOj)$j!VHEn.`V;.!)N4e!.Oaf!)qSOqu?p&
JElLfj=Ks(!<K.pliFHto`,"dlh]rKUB/pG"p0),i8E6;o`,!nT`*gIhuTh]o`,"`htl73RfV(?"p0/1
j5\lEo`,!nUA<gMXTe@t!D2;IirYbP!7q2T!cH0)bf(q%!!*+`q9/l/"n_ir6Hf5L!K@->!;-<m=6ohO
!NH@s!!,4FqWn7F2>$qM(t\WN!R_Y4!!-$UrSR^N#58*"!!#%7qVVD.1A(VJ(X2a6!QPi(!!-'YrSmpS
#5%rs3oBeo!SoR)!!*n^ro<t;!Ql),!!,a9rQG;+#5%rs1s#O;!QHbb!!*hGqTJuK&a9;a!!,+8r9OIJ
;tU+k#.+-l!0$RN!<K%nliHE9f)Ph0dJVo'ge[nLp](=!WqkQQL%PEH!M'#E!T,uj!!,%.r8Rh8;"Xeh
#-@X\!/C4J!rr<%T).IJi]Pfm!A_CebQ5gVo`,!sReb/-H1_.<!KR$#!R!Cj!9jIa)U8-F!Qt]?!!$F&
liGiPo`+tuq<S*3fDkpi_u8NmhuUUso`+trq;;;#&+oo&>5@(VH.W)t)92O5!Q,*6!!$=#irda@!!)`n
!*f9Z!.3>u!>`!;bQ4mNo`+tjq9/lR%eTf%;YeN:DYF.k!!*S7q!7u_o`,")i;2d@lXBGd!?CD$liFs(
g&M-_W;,9N;tU+k&CpX8!T./T!!+"pqVVCa!SRMS%BB3`!*/[l!>*l]j8S'>ia)3W!?:"oirQamg&M-^
RJ=u+9_AAd%`8(d!R"I8!!*qZqTK&?!<<,T!!+qAq!8$m$2"8uRec:NWWVqp!<^F>liH,ci;i]S!AWI+
huU(ho`+uTq;;:J"82]q"2=Wi!S84C!!+k6pu;C]$24E$!!&8ZirPqXp&G*q_#!'lg)AZF!A2IhbQ4CC
o`+uGq9/l'!qlTp!j2FFrlbD](]49j!!*4sq!8%I;=sni6Kn:4!T"ji!!%fNliHEKh>mKS!<ekdhuV_0
o`,"Vh"oq0di7r[!.aq(!T-T)!!*4mpu;D7:A"Se560U;irR^No`+uDqVqV9:"fRJ"-!$!!R!t*!!,+%
qTJuU)>*t0Fo';_b=1(a!As!7liFj'p&G+$`qes$=7lOo9C)H@!.s;4o`,"Ih"]e.[0-+&!=QR9huH^K
!!,UIqVV@$f`2%.htZ44[fcO.qZ$X)^\Qmi<:p4l8E0L+!.NT$!A2CfbQ4OAp&G+#X80s>9D&8b5lf+)
bQ)Y8!!&M`liH??o`+u8q<S*Wo`,"5gA:.:\-D=#m/R-Mptu2/6hLEZE;ADlS+Qa^)peB=!Nu^\!!&;Z
irS(+o`+u4q;VIHo`,"4de_u)Ym/k]!/C9m!QmRu!!$X,bQ*\#!;c`s)85mj!M9SL!!+V-q!8$W"82]q
-gUWq!SS4\!!*27qWn7@(\@^i!!+Ltptu1B"82]q-/\RW!RDDP!!*2-qVVD)(>/Zh.G*VUirP_Rp&G+>
iqh[9dM)<S!<]b+irRaIf`2%!_>)4TNWSnS!@#_`bQ5Bhp&G*pUAE(7_A(Z'!<JG[liH)ip&G*t`qo$&
l;.'Q!/UI;!($J^hZ*ZXNVME4efj_e!<p.4huV\-o`+uCq;;69h#RBR!<J5UirRgVp&G*s^\ZskiCrnE
!/(+-!']'9!<I`GbQ5U&p&G*sX8:$@b!bn&!-\1^!'&U2!AEa5li;2$!!%]JliEISp&G(jq<S*"fDkq(
hY?"/DtO)1Iehn&O9,%T!)E@J!,:Koo`,"EiV;F5E:j22J,/+*Oob7V!)NFN!,L3e!@c1dbQ)5O!;c`r
Er!o[K)tZG!(Zk/!+=FZ!<KJ#liG-3p&G+\l2'`Ie.)*O!?^V'li<[1!!*,!ptu1d#PJ,u5Mc1o!QbcD
!!++sqVV@?lN$>Q!<K4qirQn"p&G+Yi;2I7bRF1F!?L.qirGM"!!*+gpric?#5/#t3m.<C!OiI1!!+"\
qTJqsf)PhFl1sZHkX>+E!>*`Uli8s@!;lft#g)r0!R(`"!!,XHq;;;/5kY0Y&'4S)!&O<K!=6I:huUXs
o)RnQ!D25FirS%'p&G+(bPC/u2"gnM#f6At!Q5,n!!5L0bkfNaaZB+q!=lR6bQ'9h!!*>-qTJuE"P<\T
$cVo-!LX#_!!&Vdli:hp!!*+rqWn7>+4pPo$bQ2l!KdHW!!&>\huIB_!!*+iqVVD'*r5lo!!*JApu;C=
!qlToR/,bBBD)<+!M9/J!S/=I!;ulu$EEmF!JCOJ!!%lObQ(rB!!*+\qTJuU)qP&iG51D)g(3lW!E8@]
li<mT!!%3=liHB>f)Peiptu2!%e]l&:\ioKSFlj^E;JJnhE]Zm!-7kp!R_JO!!#jkirG\D!!%$8irS+)
irJ`P!+u#M!PJs9!!#RcbQ*[r!!$X-bQ5jIf)Ph"l1jTF7/Hu^!!*tuqWn7/$MFH#9^DQA!,C*c!@HXt
huH%9!!*qhqVVCn$MFH$8DiA&huI?f!87DR-K+[Z!($;Y!>sSfirR1-p&G+biqh[8B&E[a!!+:dpri_!
p&G+/`VRdZZO-=*!CG!+bQ(o2!!!/m!!*;5q!8!?p](Br!!g77liH3$p&G+?iqi!AP32fF"S)Nn"g7XY
!/C1I!=-".huVL_p&G+=f)=P+huJ\u!!!/m!!*8-pu;@0p&G*u[ef"bgb&4"!@6@pirG)%!!!,l!!*7p
pri_ap&G*tV#&:9`[UT]!?oAWbQ*+U!!,?@nGiQ(q!8('$39f#!0R*D!+#9u!=.0OliFQukl:`IJai^?
Abb0a^'aQ6!/gU1!*T$r!WWJJqVVCW"R,me4bN8)!+u#d!Pf'9!!%uRirE9V!!*>LqVqU\"Rc?f!!,$%
nGiPopric@$2+?!Ieh1f;>'tj#.XNR!M0DY!!>UFjsfj$!@$J#m/?8Oju2o5!+#Ee!1!3W!4;Uh!SRnG
!!>I7g*cFk!?p"hhuVRgp&G(qq;;74rW)]n!3>tS!RD,<!!>L;h'_an!?p(jirS!np&G(rq;VI9o`+up
qVqV)$MFJm!!>9t`Zt$S!?T,RbQ5a:p&G(iq9/hio`+u^qTJuR$0qQp7bm@sQNQj[!WW82q!8!)p&G+G
k5+EFaTV;;!0?sB!$LS-"[g\qi/\!3!!*,(ptu-lp&G+EgATt/huURqp&G)Kq;;5plMq)VeDoSO"7lKn
!O;F[!-@i6!A3.(irQt!p&G)Mq;VGsr;c9d"[0TDb^oof!!*+mpri_Np&G+A`qmm[Xon@t!.=Ud!$(>*
!D)&GliH)rqZ-Bk!."A+!4):u!=.9RliHDcp&G)-q<S)Jli7&Tdf//*egU(h!-@qn!3,\m!WWJMqVVD3
'(u;*AGP-`53r7M7FhCt!SJpm!!%0:irH.R!!*>NqVqV9'D;D+Ac(Khj5WAj!!,9urlbD\-1V$9C&#mP
Re?^^#.jZT!Qu)K!!$7!bQ'Zj!!,gRr9OEHnc/\MlhTlJj9G;X!3,e\!'9fR!(-MJ!+P<q!D1l?huJ]+
!!+t7q;;A-"onYu!!&_ghuG_0!!#4YhuI'M!!,^Fr8Rd:nc/\Jiq_U8gBR?O!2KAM!''ZP!'g;>!+,$m
!CF^%bQ*+_!!+dsq9/lY#5/#sP53<%1A1\J3Vgl!<UKhe/HFW(liGfVo)Je'deN//1%kSIG5:J)@.jR$
,3esj!.jP<!@uUqhuV.>o)Je&a8FlohuGG(!!%!6huI!T!!+8!qVV@"mJm8=ebeA-dMDES!>*EKirCb+
!!%'8irEB`!;ZZr+lN4W!.=27!@PYZbQ5Bko)Je$[eS&H.eWiBB)0XN;t^1l*m4?'!,qK0qZ$X1chcu.
C@_E+!M9)Q!,;-,!)*.S!/:+H!>F,^li<aI!!*_OqVV?bo)JdlQMBA<A+fm&8,;'CIeEaB'$^:2!1E6T
!>ENMirE]_!!*+fpu;?cp&G(`qr7b<j+-h'!>EfUirGS:!!*\<qTJqEo)JdlM>59p>4qpr62A_)F7oS7
&\@h_!/p^So)Jc;qWn6t#kJ#rB_^ooSFup`.I$]q!3>en!=QmCliOp&!Ug!gFo("s[0ZX0q#CD(ptu.:
p&G+@h>6%0U\4Zg$bQ8n!jr%0mf3?2qVqUc#kJ#rAGG0bQM(:Z-fFj]!2]Ah!=QX<irZ[j!Ug!gCAQ-T
V$HSl!*]0A!/L7J!@,b`bQ*n$!!*G,qTK#;!<MWh!?L%oliHE.o)JeOkkXQG`sh\B!>X2^liG38pAb3r
Z23egcOLHR!!+%fqqqJ3!&4!E!B/a/huUM!pAb4.bPL,t^C']8!<]:shu^k,%IX8t*7k#I!TGj*!!,%9
q;VLj%/p8'!!*eZqVqUm$MON$"024X!lk`Zmf3A+_#)=Vb:N5b!A_dmbQ4dPpAb4,\baMNXpOh&!<S\c
bQ>*Z%.=/s!griN!/'kC!>"/bliH)hpAb4"_#!BugE-%g!1*KJ!nnV6mf3@iOS[l:I/j9?!!*S[q;;;)
+SPj:#e'Tf!RMh[!!&&Uhu_4C)XdY,!g<E?!.OM>!=mcXirRgUqZ-Qp!=643irRUKp&G)SqVqY*)]S5G
!<RoMbQ)\T!!*PGq9/lW*VTO7#H%@A!PTKG!!%WMbl,`e]bhUS!!,OPqs4@*$1e,s_"d6r48&XSUAF3W
lSeG:!.F_1!otdZmJm>Ugu.,hhuUS!o)Jd!ptu-3p&G)]qVVD31\LeKGP^5!fI&'7!!,IEqr7^n$1e,s
\G5(a3VEFQSGM7Hi\^?/!-nA#!o#(MmJm8Mans9_XpFV!!2fP8!&O<K!0$cu!R!+k!<)ruD#2?W`?QVq
!!*>Lqs4@H47`FPO8/&A@.jR#IJN40>P8$sAGPTl3q34L!!*>BqqqM13:d+MM"om.>P8$sGPU.s<qZLn
?hrX[2spYH#KHZ$!T,p/!!8&<j8.d9?1n6uGkpA"=7uUo@/8j_3:6bI#."-M!Q[(g!!%EAbQ(T8!!$j2
bQ1H=pAb1oq98jom/R-EqWn3+o)Jc"q!8!4p&G(pq<S*&p&G(iq<\,Wp]1!f!/14,!-.T1!+#BX!.=J?
!)r^O!,_E0!)34Hs%D_Z!/C@1!-@l7r;Zh(pu;@'p&G(mq;VHmp&G(eq;_KKm/R-2qTJqPo)Jbjpri_X
p&G(drlk;a!+Y^&!(Qe.s$Z5S!C5uJliFHqoDekSq!8!\p&G+QlMBiIM=poM4mDh0s(;92mf3AOhtu=4
WWVkn!'9o5!2B/e!B&a1huJB&!!,.:qV_B^m/R/Miqqa<XTJP'p&G(Spu;@Mp&G+NiVMR7K_>BH45ftq
s'k?q!B84!bQ417oDekKpri`%q#LBo!AM[mbQ)h[!!+t"qTStAm/R/#deiA3jUh%a!@6h'li>9'!!+>/
qWn3Rp&G+CkPacHm/M@u!!*_QqqqM.&+fi&,22kN!5\@/!?p:qhuK):!!+M'qV_Bpm/R/#b5UH#irRpG
oDen:h>-(2`:a03,2i=X!1<H[!@Zk%j8X8h!!*\?qof)\%eK`%+3+-#!O)Ru!!+.`qTJqrp&G+=aSO-\
C$bm$!M]GW!(?GZ!>NuXliH,VpAb4)kkaWG[J'Y&!#Obnm/Mt1!!*+hqVV?>oDen*a8+Wof+%HS!=mo]
huKkP!!*kgqV_C+mf3Fi!!/VdirDF<!!*eVq;VM0%JKi'%c@-C!3Z"q!>aJej8Xi#!!*+ZqTJq$oDen)
[f4MKbQ5WjpAb4'anj3]Sb<$a'ZU!ns*+5<!!2cn!,DAs!-[u7!=$@8liH5npAb3piVMm@bPhM;!!*Dd
qX"6Mp](9pp&G)'qVV?moDemq[e\h^g*-1j!<LaIhuLRd!!*DXqV_C9p](<q!;?HnAbtEeEqB>4"h=Bg
!Snso!!*,QqVqRnp&G+"gA9k0PP>+X!VQKn>PcPDB(c3,!!!2"q9/lZ*qoX8!Q+]W!3c(r!=6X?bl<@n
!!EKWArd2k!!+k>qs4<\o)Jcdq<S.F2"gnLc2I#.liH)Hp&G*JqX"6]qZ$a&.Ue,<pAb4Ih>?+1T(;p^
S,(tCgbJL&!5nZk!S.;F!!(FCi;]ML!!WE'"Y4&>#PS3!0];ig!2/o`!1s#H!T,[+!!(%8irRg6p&G*B
qW%UNqZ$a&-<PX"pAb4Eb59B_OSo1R!!&&TbQ5d:p&G)uqTJuX!VQKn^A?%^P*,eF"s-[+cK4EY>k\4!
#N>RH!QkfB!!&#SliHEAp](?q!4Vgk!Tt'g!!(=@ljUA4!!!3C:5m-Ei87W1!!*>TqqqLi$hOE!LABa.
ha@);!3Z1V!Se7[!!'t7i!nVIXoJG+*)DU8guIBrpAb4!f_a\0_@,u9!/LC1!THN@!!'8"irS$Kp&G*5
qVr!gYQ+Y-)Fo:_`luV%pAb3u_Yq[\bfm3soDel;q9/l_4n\jUT)-Y3a:@nD!4)IF"eM;D2S%iEliFs3
pAb3*qs4@@,4kj8I/*%0=TAHs!!&biliH;rp&G*.qWnC+a"oNUf)+A+\-r$2!3uFZ!Rr:b!!%3;huHaM
!!&JahuVUXp&G*$qV_Ce"#Mj?g&'e1]+"E6!4;X`!S8Le!!%6<irE*Q!!&PcirS$_p&G*&qVqao^Fh.3
_u%XYW!`8!!2BA7!5SXVoDel,pri_4p&G)OqTJu^+SGd8VY\L>XK2sE_tr^#lWEl]!0@!C!''TN!,D;q
!,_W6qZ$VWqWn7J2YI+N[/0+ld*N:6\bb4bhc'7L!/UL0!&aBK!+bl_!,2'+!/UL0!T#X+!!91Yi;DL9
`l8N"]_^Xhi`5^Q!/gX5!&aBK!+krc!,;-,!/gX5!T>m/!!'.tirmHE%M#K7bQ5m\pAb2@qTJpnoDekq
pri_Ep&G)?qTJu_0(o8FS,1>3['Tf5;#0GXY4hnrB):io<qH@l=S_:am"4p2!/gX>!U;T:!!'8"libkh
!!#^ghuKVJ!!$I(huH[I!!#smhuJ,t!!%ZJhuV[jq>gHo!2o\O"Nnje!)<:L!2oPk!+Pfb!)rLi!*/gS
!.FP@!/::0!T>m/!!'"pirmWO!!#I`bQ*t-!;c`r=Sg5A9(W)`9_cg3E:s83GP]MaatEAf!1<W,"h;&B
!!KM%liH#fp](:^qWn3*oDen\m.ouJPP+tVJGSU5l9Y+D!3#b\"l\D?!!K1qhuV@Np](:[qVV?moDekX
ptu.2p&G)<qVVD24n\jUT_dRMe^XX""K;1W!S8Ih!!#@^irF)k!!#C]irG,5!!%BBirS+&p&G)eqVqb3
fDkmRQi,&0bfmpEp](:UqTJqOoDekRpri_fp&G)1qTJu_3;*=PP5<E&_YsN9;X4/G!UF@m!!+\9qs4<H
q#L<m!'9oA!1!6X!.aq4!U<&G!!&nmm/Q2H!!,jOqqqM4@JBg'/)C*\!0$OM!&s]2!0-[P!dW_^r87V4
5P>'WSbh:Eg&:sP:Z;32!TIS`!!+Y/qr7[:oDekNpu;@8p&G)>qVqV85kY0XTDIUJh#@?U!(Y3/bQ5mh
p](=Bb59B_J+N^@1AK&nJbB'DDYhQXau]4r!0@!#s2P$<!=d<MliEpaq#CF:g\^=<VuZJj!'9oA!1WZ^
!-\5*!UEDP!!&Pam/?tc%)_r"!Ls5e!!+(dqqqIHoDekMptu.:q>gHo!-%em!T-E@!!&8Yi;N]W%*&/(
!M0Ag!!+(gqr7[MoDekNpu;@?p&G)5qVqV98G3#`QMokAj8K#Z$aTWQ!KI6W!!+"Pqof&&oDekHpri_m
p&G))qTJu`61t9YL\T*l!!%lPliG<:q#CI0dHpet!4qe&!&OE:!29)d!-S/)!UEJR!!&Pam/6naK)4C+
_$To;!><HMhuL%S!!"_JhuK2=!!$s6huV_,p&G)Wpu))N!/14/!Q5<?!!*_Sqr7[_oDekGpu;@Dp&G)3
qVqV99)&Af!!&>[j8ArXG5BD`YR(%)!>)[9bQ+@/!!"SFbQ*Rp!!$U,bQ5mRp&G)Jprr[:!)`UZ!U1O$
!;ulu$d&;4!6k'8!&+-6!2fGi!,VJt!*8dn!1`iNr;ZglqVVD1)>O75$buSs!5\:-!%n3.qqqIFp&G)*
q;;6Np&G)Wpu))N!)ECN!T4jk!!*JDqr7[poDekCpu;@Hp&G)+q;VNT!!)co!1*E?r;ZgeqTJu_(ARq2
$Ej9M!3l(q!%I]e!0?gR!+,KF!(uqb!/L?nr;Zj@kPXZJm-I%6!!*5=qs4=?oDekAq!8!^p&G),q<S)b
p&G)_q!@qZ!?^+nhuGq9!!*54qqqJ(pAk0m!%@X#!2K5f!+Yi_!*/^m!0m9:r;Zj?htl@555>0Z"M4Kj
!8$iC!%I^'!2fGi!+l,hrSmlYp&G)YpuD;Q!?B2WbQ'Wu!!*2"qof&VoDek;pri`'p&G(rq9/h6p&G)J
prr[:!>!TSli:&\!!'e2li?5@!!"8=li=-\!!$a/li:Jf!!&Pam/6nb%`eG(!)`Lk!4D^^!8RPRpAb1:
ptu.Ip&G)&q;;6Xp&G)Wpu))N!=m6JirE!P!!'M*irJ!/!!"5<irGtO!!3-#Abk?d?1n6uQMBM=!!*P:
qTJq3p](;jqof&]oDek4pri`'p&G(rq9/h<p&G)Jqoo&`r;Zj*`;8g#BD;H,^&.-rkO\`S0)4c5WqHDm
D#*Dt=nVgqSG;IL!!*G<qVV?_p](<#ro!e6!8R2H!%dp'!2B/e!,),c!*&Xl!0m9:r;Zj*^&$ahA,$$(
[eo(bht-mK/bn?-U]:Di!!$^.irE*Q!!&>[j8ArY$**jG!*T's!2KG8!6Fd4!%@Wd!0d*V!+,KF!)<.e
!/L?nr;Zj&\,,FkG5)%;[/91ikO\`S3;Dh?U%SHdG5CP+lVI3S!1`iNr;Zj%Y57&VE;0D5Wr(]Sh"1RH
2Yc21RJ$U\E;JJnhb3YC!0m9:r;Zj%YkmA[EVKM6Xo%,Yht-mK2Yc;4S,<9`!!%$8irS.5p&G)YpuD;Q
!<o(kbQ)8M!!&McbQ,`V!!"bKbQ*Rp!!$X-bQ5mTp&G/Lbfoq-r;Zj'^&%'qEVKM6Zhs(hkO\`S6MTmI
PkG(WJbn^6lUCLI!298Us5s7[!=,t-huIQf!!'%rhuMR)!!#4XhuJc1!!%?AhuV_%p&G)\qV_D.r;Zj'
[ef"aD>4)2XS_#Xht-mK5Pa=?j,Wg5!.=Y'!THK?!!&Mbj8\!7!!*;!qTJqKp](;_qof&]oDekOpri_g
p&G)2qTJu`4Sf'V!!%rRbl>`^!!*SSqWn2fp](<-qs4=FoDekcq!8!=p&G)MqWn7J4n\jUWVYu]i;EWV
%Dqu"!a,L'q>^N%qqqJ.oDek_ptu.*p&G)FqVVD23q`ORU&*^IeboIK%E82(!*]-t!4Mdb!8[8I!D;DJ
irFi-!!%`LirS+#p&G)fqW%V-r;Zj,Z22ZE;>:+kU\i78`q0626MSb)GkM+;GP]Maau/km!0[3&s2+^7
!>XMgli9WQ!!*5>qs4=9oDekmq!8!3p&G)WqWn7J1\LeKZhj%geboIK'\*-?rSRZEq#CEu\GP1acL_):
;u#8NHM.==NV_Q6hD"X'!35nRs2t9?!>O/^irDRE!!*57qr7\'q#L<m!*&aR!.=J?!06p9!T>d,!!'+s
j8[C&!!*_KqTJq(q#CEtW;Fd=]CZ('9DH^2DtX/4JBZ78bQ5j;p&G)]qTSuLr;Zg[q<S)6q#CF%aSY<(
ch%2;AGGKkG4kn9Sbh[RkpuH-!4hsms3:QD!WW3\q;;6(q#CF%^AHgg`Uj-1?hiOZE:s83Q29D>h'hss
!3l=Xs24d8!'9r9!%n!H!=?R=irR1#o`+u"pu;?pp&G)ZqVqV7.J<`AZMNV]`r,l;2#5>q./<iD#d+!J
!42:t!*8m=!+u'-r;ZhRqTJu_-2%<=T_cn4ZMab'G5CP+g(!iX!>*NQli=op!!%??li:bn!!&toliH;m
p&G*-rTsOMs2P!;!-%em!RD2M!!*VJqqqIaoDel5ptu-^p&G)bqVVD0+8,[7[JJh]]_qg1Er+esdL>pO
!Y<<2r8RdhoDel7pu;?cp&G)dqVqV6+8,[7\,,.b^\n-4B)9^P]aOW9!=lF4bQ+U6!!$d/bQ(i?!!&/X
bQ5g*p&G)hqTSu?rVus%\GGOmZ39t'!?9_hli=9^!!&2XliHEJp&G*"qWn7G(&.b1!!(.;m/O]s!!*5+
qVVCR"Si#u):&-;!2oGh!/p[2!T-QD!!'%qhuVUIp&G*-qV_CYrVus%Z23J]Ws&A$r;Zj:dJMr(WUp/j
NVVT8i_9%G!3Q+X!T+Ub!!'k3j8ZLc!!*1oqTJu/"8Mot(VKXh!1<BY!.Opkr6,2b7.pT\S,1>0a:e1H
!3Z1Bs.]Jm!B'!8li;S2!!+G-qs4<KoDelkq<S.G3;*=Pank?+k6M%fp](<IqX"6`rVusSg%sV,H2%@?
,hW"P!06[O!2B;I!SfR+!!'e1huVU=p&G*<qV_CKrVusTh#$+4j*UP$!@6FsirG25!!&hjirS$pp&G*/
qVqV6#ke5udJDo'VZ$Pr0#mb3!,hQ3!?oGZbQ*7h!<)ruPPNE'aY<Dg!3Z1B!QYN>!!'\.bQX8s!!!%_
qWn7F3;<IR4SnCEIJ!R@"i'm"!TkO!!!*/]rTsOM!7UWA!=7`^liilJ!!!%XqVVD/2>@.O3VqY6GP(q:
"L\'`!SSXi!!*/QqVV@pp&G+!fD=D/PEPtH!KHs9!T#^/!!#(VirF>s!!*53q;VM3+85a9!o!M2!6b'9
!=7EUirt^5!!!%KqTJu\0_bVJ2#>DrD#OG0!!*5!q9/lZ*;9F6!lXrZ!4MS$!=-R>bQW`U!!";'qWn7$
"o&&t?Ma!gAb?$(&C(%;!TFI]!!3-7kkaWG](Q+)(ZbGZ"cA0;!$]tihuUClp](:tqVV?]o`,"'_ti3k
edD-O!>F8bhuL%U!!*kfqqq\:K7a.(,M;kQ!PJX2!!$7"irEN\!!*VMq;VM/$MON$']8cI!42A!!>aGd
irt-j!!"+XqTJu?"S_rs;Z4i=bQ(`;!!*S8q9/lW$24E#'$:!o!29)d!>NNLbQN-6"pV"$li;&"!!%ZJ
li9BF!!+5%q<S+.rW)`o!A!F2li<^P!!+G/qWn?2H3FJDq;;6gpAb2AqVV?;o`,"7f(n5(`qBB5.GajY
!1<H[!$hR!qV_Bq!X/b#q;VHlpAb2BqVqQ?o`,"7g%jY.aS#T7.cC0`!1NT]!@6OuirjOK"U1"`bQ),H
!!%'9bQ'Zr!!+(Wq9/iGp&G+?b50<^MY7#N+ijH'"DV[K;<RfB!S\^j!!'"qliH)lo`+tTq!8!gqZ-No
!CQ2Lli;b5!!,(CqWn?"C.q=VqVVD$*qoX7U&3aKeg'hf!'9o5!3Gko!C,K<huJ6"!!>+6i8FOk"Cu%;
:#Gg-!Ri+a!!&ekirRgYo`+tRpu;@Wp&G+Yiqh[8JG&sD2;e8j"D).67`bGM!PTNI!!&2ZbQ5U(o`+tL
pri`/p&G+SbPKE_F7oS70Zj18#$Y:g1k`X,r9OH9!VcWq!ndD:!RDAN!!$[,li<.@!!$7!li:eo!!,dZ
qWnDd<A?4W[G:]<!IFkB!!*/GqqqLo&G6#'@eej]M=poL<r(YRAbc?*!!,XJqVVQT;)0nV\)7,D!IY"D
!!*/Iqr7^t&G6#'A,,'aMtR,N=8CkVB(c3*8`KU,##\>N/TR]/r6,1\!W<#r!!*/4qof)I%eTf%=np2@
IJ*X@:AN*6>kS-u6Hf5Ls%<7j#6u>XU!i/Y(A@e0,j>-l!Oi.'!!85Jm/$&KAbH*(G5:J);>'tiA,>Nn
lT73-!!``M>+*FdcP?0S!@$=rhuTt^o`+uJptu-[p&G)3q;;9I!;?Hn?M`R]h`*Up!!``M>armndM;KV
!@-M!irQ@co`+uLpu;?_p&G)4q;VHLp&G)"qVqY:3B@'="U5oDMmg_.]bC,?!?]G\bQ4::o`+u>pri_>
p&G))q9/h.p&G(nqTK#a1Gek-!Y7Fap&G+mlhg#KMYI2M!!'G%li9-@!!&Mali9$=!!%ECliQ9!/,B5I
%Q[#O!!,pRqqqI,oDelmptu-3p&G)Vro!_4!&aHM!-\4s!netMq>^R,4%8iC!E%kRirFf*!!'1sirD+5
!!&;[irCt1!!%6>irn-d.0'AG!!3Te55"sW8^%"T!-e&8!1io/!&O<K!/C<n!&4*H!,MGT!lcN4li7$I
qWn8]!!)`n!=I]ZliGo_pAb3u^&%'ri["3t!0m?H!neP5li7$BqVV?Ko`,""e+qo&dMqu^!rr<*ZhiS\
efsef!0-j5!mV]&li7$DqVqQOo`,""f(n>,eK";`!=$"/irRgXp&G)Qr8Rq?j3\ebli7$6qTJq0o`,"!
_"l1T^DZbG!=#=qbQ5U'p&G)CqTK#R(`;W?!=QjFm/?8N)ta132sC)(!QGK@!!*eaqWn7/&bc8+!j;Cd
!mV8cm/R.p])(=b)>*t11u.ob!k\j?p](=.b51#s`=VbD!<T+ohu^h+%IF,r$bcDs!#kM1!B&d1irQn%
pAb4.c2-H$`t7tF!<T1qir[71%IF,r$EEsH!#P;.!ADRjbQ4aNpAb4,\GFDMZOZ^0!<SS`bQ>'Y%.=/u
!!"P4qs4@,"n_iqCA@,qV=jli/*cut!OMn%!!*JHqWn:"!Wq`h!@Zb#huUUro`+u&r8@P3!1``_!@cn%
huThYpAb4%]DCFe[fQWu!!+P+qr7^p"SD`pAbb9cT(W-b.cL6a!NcD%!;ZZr$blJt!kA@6m/R/5aSX0^
Y6=Lu!*f6B!06aQ!@GtcbQ416pAb4$Wqsp@V?-hm!;HNoDu/f$OTG.U!<Jeeli;5&!!#jkli<"<!!*hg
qWn3VlMpp!qVVC3!VQKo!LEN=!-%W3!)34H!/:+H!>NlVhuK53!!$g2irP)>p&G*oR/#\AEqTJ5:&ErP
j5Ymf!!*e^qVqRGlMpomqTJth!VQKo!K$Tq!+tp)!(H_-!."8<!><*BbQ*V!!:g*j!l+X!!U<;M!!*PO
q!7u?p&G)<q<S)hp&G+>lh]rJK'WI<!k%p`!T$<D!;ZZr%);Sq!&aHM!-@to!*f-s!@-LuhuJ/k!!*/1
qr7_98+ci_%)Vf"!&aHM!-S+t!+#9u!@6\$irFPp!!*.tqof)`5kP*X$a09K!&4*H!,;8Q!)rRk!?fS^
bQ)YL!!+Y4qs4@9(A.Y./Euus!TF=W!!&eili9!<!!#F_li:J\!!+S&qqqM"(%hP-.c'pY!S.JK!!&Ma
huGV-!!#:[huI$K!!+V*qr7_'(%hP-/)^6`!SI\U!;ZZqSb_:G2>."M62BO@?0hOl-H>r,!P/s;!!+Fh
q9/lW#5/#sNVUcu0D5AH3m@HE!`T."mJm65qWn3[oDel2q!8!_p&G*qc2-c-kn!If!,;8q!(#rO!-J(q
!hKAlp&G).ptu.Jp&G*q_tr9lh%',Y!+Yi_!'TZK!-\5!!2/ra!,_Mk!2fPlrVus$`qn]ri"#G\!+kud
!']`L!,DAS!0HgQ!+P`I!1*<Y!<TS'bQ5iqp&G(rrQP5a!''?G!>!HOli:#X!!*,1q!8!!p&G+@jSJ3D
aTV;;!0I$C!$LY/!=m$Hi;MR6;"Xeh!O):V!,;-,!@?CphuURqp&G)Lq;;5pm/R.s`qn]q;=sni!O;F[
!G_]0!!+D#qVqUm"SMfqMtuB5+70%/%C5iS!(lh`!<JhfbQ)&E!!+:_qTJuC"8Dit!!%HCbQ&XM!!#so
liGZMo`,"8htcU>kVr28!*B!_!MTVg!!'J(liGrNmf3Ch!)NIL!Qu)J!!+1kq;;;/2"gnL;u,>PRK<*^
!3Q+U!RhGD!!#jlirRF;o`,"7fDXb.irS$pp&G(lq;VLG!VQKnYPR8[edLjF!(ct1!P&a6!!+(Uq9/l]
0D5AG9DQd6Mu`nYp](;cqTJuU$LRlp#.OHq!K$pN!!-Elq<S.-&G?)(O88,BDY=&2#hSq>!P&@,!;QTq
"g7^[!J:FG!!-9\q;;:l&,#u'M##s/C%_N-#gE/'!O)^p!!*8-qVqU1!VQKp!*eIYirR12p&G)Mq;VHi
p&G+!chcZ&Z39Rq!<o(kbQ2ngo`,"jbPB?_Z4?R.!.=^grlb@Lp&G*u])'VOTEFT^!Cu>MliH6.o`,!p
V"j9VPP+tW#f6B(!U)Q;!!+A(qWn3JquH9f!CY`?huVOho`,!pS+tnAN:m5P#e0Zg!SfU,!!+:oqVV@6
m/R/UhtuF7h)5*1q>^NuT(q=GNqNGR#eBfl!T,j0!!+=sqVqR;m/R/NaSX0^`\@&c!<S;VbQ*.d!!*>%
qTJu^1A1\K+2[lu!.sV=!<fn.liFBmo`,"6jnS0B6hUK\*p<Cd!Rq_T!!,ORqs4@MC[M0'"KqUZ!N?+m
!!+(mptu-:p&G+5h"oq0aUn.G!CGZ>huIBW!!*5,qVqUW!VHEn*8L>L!'p5X!?C"nirR@8p&G+\iVMR7
BC5a#".oA5!La&^!!+"Xpri_!r;cZo!?0&UbQ50_p&G+Ub50<^?1%[n%ESG5!UE;K!!%!5liGWGp&G(f
q<S*Yo`+u5qWn7K7IC-V%)2Vs!T-?<!!$d/huUt/p&G(bq;;7Do`+u/qVVD36LFgS%)Dc#!THQ?!!$j1
irRC5p&G(cq;VIIo`+u0qVqV96gapT$a'<M!R!\!!!$I'bQ?"u$haQ#6i"q+O7`JQA,=CMb<5.l!@Z7k
liF^)o`,"!_t`R!O9,%T!/p[>!,DB2qu?a!U&+*Vi$7Uh!@Gb_huU(ho`,"!\bP(`M#m;M!/11+!+kj(
!<S\chuV@Oo)SXf!@GkbirQLno`,"!]_LLfMZNMO!/C=0!+tp)!<SbeirRaUm/R/2ZM_oIU'UDl!XPdL
q9/kf!VQKnGkoP`>kS-u!fQp!!Q#oE!!+e)rp0[N<:g.k53Mb.!U3#G!!*GNqWn4J!&4*H!=?pFliG?8
li7&=bPpE#hGEhE!B]*4huVY"p&G+#_><'jh_+U&!=?O;huU_!q>g*e!A;[sirS+9oDenShtc:5i'R,;
!=HdAirS-lp&G+"_YW9n`Wb]/!@kYZbQ5jXp]16m!B/$pbQ5jJp&G+"YklQEb:<2c!=5k)bQ5!QlMq)M
hX'U@"n_ir!LrlN!RM;L!!51Cm/-,Me.)*O!?11uli<aE!!P@2i8CjCo`,!nPka/;`XMP@!B/^/huUq.
p&G+2h"oq0R/lOQ"Zb/oj0Ss^!!*+dpu;Cr%/'Z%2r=Dk!R(uG!!*tpqVqRFl2V&F^s(#s"98Gr!!*+T
pricG$haQ$1<978!OiI1!!*kWqTJqtkl:fUhr[5s!!+J3q!8!.q#L?n!.jt4!M9Ge!!#^gli:ne!!>X=
g-,'.!@?RshuIrn!!%?@huT/Gp&G(`ro!_4!,2<2m/R5WfA/X_!!+D(pu;?uo`+u>q;VLD!qlTo8bqBH
C$>U"5/G5uqZ-Hm!@#\]bQ)GO!!$s5bQ3S&p&G(Zq9/hFkl:ed<M9Wh!!&)TliH,lp&G*s`VJj#@J'U#
K)+a54QuhJ!E#6goDelHptu2),5)!;"M=Kf!*o0s!.4V$!oVuskl:ed;O[j^!!%lNirRjYp&G*r^A6dh
?1e0tIJMn'3p?VG!D87M"nVcpHhbec`#n[Q!<fFubQ(W8!!%!6bQ'K_!!!;s!!+>"q!8$P!rW,q!!"SG
liGuap&G*p]_^sqh\G;S!!r2s!?okchuT)Ep&G(Bq;;;')tj73!W]P&huV=Ak5YJfoDen9eG/&)QNHj\
!%[m*!S8=b!!*//qVqV.'^Ynt!!!8r!!+.Tpribp!qlTo-Mbjd_&;qH!<T"lbQ5Nmf`2#'q!8%G6hLEZ
G5:J)YOqkr*812T!P&Ef!!%??huVXuo`+u2q;;7MqZ-Kn!?08[huU%df`2#"pu;D55kP*WEr"_qW:^,k
)q"NB!O;q%!9O7]DtqNWau]1q!+u&N!13?Y!>rKGbQ4@@g&M3ti9]h,liFs+p&G*t^%q!p?1e0u7-aX8
!.rl(!?]kehuU=jp&G*tZh`MZ=S2Xp5i2@q!.<H"!?]qgirQapp&G*t[e\q`=nMaq6/h\#!.ObEhuEct
_YD=UVuu_n!=#=pbQ(K4!!,.'qTJqZg].EV!!JY`liHEXo`,"Ok5+EFhAu7h!.t(6!U<>3!!*4`ptu21
=nMar1tpmbhuV:Go`+u>qVVD28(mqD"HiK>!TI;U!!+t5qVqV-*;':3Ier(*iCMZ&!<[rKbQ5mao`,"G
`qmm[^_ueF!-.kZ!Qm^g!;HNp4QcG*!Q>QA!!&,VliF$ep&G*p_YWU"iY^AL!BJp0huUG!q#L?n!/^O0
!M9Jf!!*/2qVVD*(YSii3o9Yl!PT$9!!%rQirPhUp&G0r]AqrLirRgLg&M.1a8!jZWXSP#!.F[e!KdHW
!!*/"qTJuX($Yei!!*>6pZql]o`,")i;2d@lWWr]!?LJ%li=fS!!*>-pYZ*O!!)`n!>*fXhuV_8o`,"3
hYQ.1[FtT]#I*s_!*&Uk!>*lZirS.?p]19n!?C(pirHRB!!*:qpWNV1o`,"&_YVIWb>.^1!?'&VbQ+L/
!:'Uc1?J;t!Q>68!!$L(liH/^o`+trq<S*5g&M.,g&'_,huUFmo`+ttq;;;+'_MG+<r(YRI+eQ$0\lH`
!PS^0!!$@$ire$M!!)`n!*B!V!.NW%!@u1bbQ4^Ho`+tlq9/lY'(l5):AN*6EVBIo!!*+Tq<S.G;"Xeh
#eTp!!2/ub!<JhhliHE;g&M*R!.Xh&!SgBA!!*A1q;;7?o`,!nQhoV@h`]Zn!<IcIirS%3o`,!u[/At`
irGP@!!*+gqVqV94k]l:!He.]!Qde'!!*>!q9/hro`,!nMYbNtb;]D#g].?c[JK4j\-M[,!B93<liH?;
o`,",de`;2eJ7!Bq>^O+XSUiUY6X_#!ArU.huVXto`,"+a84]paqWM/!=l:/irQCio`,"Mhtl@6i'6l7
!>N]QirRC=f`2$^SbgP2T*Frg!ADOjbQ5jHo`,"*[f">ObfmR0qZ,IQ!?ftkliH6/oDelZq<S-n#k\/u
8*g$<!MfbP!;lft+3XT?!S]O)!!&/WhuU(go`,"\htl73RfV.A!?]VbirS!qoDerVj5^$s!OE()!!,OJ
qVqUJ!S@AQ*4c!k!QQtf!!%]JbQ4CBo`,"VbPKE_NW9+3!!,jVrTjQF!qcNo.,t'h!+5?u!0?sB!+Y$h
oDenag&9h0L'%#J!@HCnhuHsQ!!%iNhuI*7!!,aJrSmp7!r)cp!!+G"q;VH[oDelKq;VH^ec5_<`r4*^
H33a>!@#GWbQ(Q5!!7PlbkoTa<n76O!dak4!R2DQ!!*.aq<S.9%J9]%#1`S:!U:cl!:9ae!d+G"!Q,ZF
!!*.Zq;;;"%.sT$"j6]"!T"mK!!*.Ero4%!(&e4.!!*.\q;VM(%.sT$"jQo(!T>*N!!*.9rlbDK'D2>+
!e0sh!PJm9!<)s!"h=EQ!QlA3!!EM1m-.C>!!+M-q<S*5oDenWl2'`H^$l$`!!EM(i8%-"!!+Ftq;;7#
oDenTh>6%0Zd\sU#,q[ai(inE!@HLqirFQ#!!,7@qVqRae,TUUR*<]BoDen9_thLVEW,t4!!,%$qTJr7
df9IlcCkI7!!&5YliH#poDelPq<S*!pAj"L"!,=J"nVcpN;;B4eL:%i!/UI/!,:*dqZ$^=a.!8)!!&&T
irRa\oDelKq;VHidf9IgZASnY!!%NGbQH)5_BngS!.=Ud!+4.S!B;:q!!+V-q<S-W!VHEn'@QaD!TGU.
!7_&M2Bh\m!@ZInhuT;Jo`,"*a84]pegTGVo)JeL+nPa8.G+CU!M'8a!!*bUqVqV0.+/(r0core!$qW]
q9/l!!VHEn&[qP[!Q-2$!!*+]q<S.H2Y6tL9)IrWm-M7d_uKf=M##s0h)"['!(QeB!O)^i!8[\V!K-^5
!T5g,!!#ObirQFgaT25=!<ITDbQ5j=oDekVq9/l4"N19@.cgEl!MT_h!!&\fli:n?!!+M#q;;:B"S;Zo
R/,Y?B^GfO!!+M&q;VLG"S;ZoRebtDC!QeP!!+@aq9/ku"7uQnMYYHr?GlgE"f;%]!TZ'5!;c`s)Vb,T
!TkHA!!*4mq;;;+0_>>G):86<!S\Ud!7:cI"J5GL!S]@$!!*tdqVqV5*7b,Y!!*4_q9/lY/G&oC(;BXh
!QQ+s!!-!]q<S-O!;$6kCAI2sVuss<!D_GGhuK#5!!$U+huTGPqZ+b=!DhVKirGD:!!$X,irPhUh#QX=
!Ct9-bQ*Ch!!$:"bQ3h-`;foIc2I#-liH&poDems^A@0slW(k'!=Qg@huV@VoDems[//\]hbj+Jc2[kR
`qeWqfI6@l!=-(0irS.;f`:@=!=H..bQ5R+oDemrV#&:9b=]_R!<ITDliQO9!qZHn46ub0!Rqe%!!*+D
ptu11!qZHn38aSj!QbuR!6>-@!I+>!!K7*P!!,+>qVqV#'&WcP!!*+9pribf!qZHn1X#X=!OiWZ!!4\,
m/$&Li#hRk!<J\cli<$`!!+Osq;;;(*qTF5!L*E=!oW!k_uKffebS5+f,jPa!<JJ]irFks!8dbW-GTB#
!Q#fJ!!*+Tq9/hba8l/=!/((5!.aY@!@?V!liH9(_uKdcptu-to)Jb8!7Uf&!Sf?H!!%KCirFGt!!+@r
qVqV60C8bl!!%'7bQ)PP!!+4XqTJu].aJ+g!!+(\qWn7#'(c/)!J:.6!Nu^G!!+"PqVVCb&buG)!!*+J
q;;:N"iLBA)o2=1!PB$:!!*+Lq;VLS"nVfB!!*q=qTJu>&+fi&!HIqZ!LEu@!:Bgf1ZSE"!UE/F!!*Yb
qWn7J<Pe_:0\?6\"5c?D!;-<m&'t+1!T$\j!!+h.r8Rh;61Y'W&(:=7!T?rQ!6G3A/B%J1!R!Oq!!*SC
qTJu_9&'F/!!--_rTjQJ!V69kD#*Ducj@Mg!`Ib1rnmg8!V69kBDLHd`X0H]!E7hQirP,?o)Jc(q;VLs
$,HTB9#ghR!Ib(@!!$@$bQ5'VirIs:!<[lOliGKRo)Je)bPCK)G/OCZ!!*1Irnmgt)Y3q0'#=>$!-#^R
!<[]JirR7@o)Je(_uA]oirF,8!!*.=rlbDN)"R_.&?koR!+tHqf)PpXVsN_Lnc/Z(q<S.8*6S?T!!ELt
i87E&!!$O)huV+A^AnB@T]>$0oDepm!+kud!RVk$!!ELfbf`WL!!$3ubQ5?nn,Uc7!uJnQ#4hfq$dne:
!J^^(!:9ag(:p%?o)Je!a8+WoJ-!@a!uASB"oA;q!!*JLq;VL-!PSO9'WR2to)Jdu[JA#IFTM4:`rH,f
,Otg8B^>N]!TkNW!9F1],pDgZ!Fjs_huVOR]DqsY,4Y^7AE*IG!Snj1!!+8bnc/\obPKE``Z4pWpAhc)
!>EZPli<I'!8%8P'#=>$!0O\ip&G++_ti<mPH+Za&?koR!/1.JZN'uDq<S.A0\ZTT!!$a/huVC]]`@L$
!,MDj!SK*+!!$F&bQ>[3!3H5%)qk&R!LNrJ!6Y?C):&'9!K[B$!9jIa)U\B@!KmMc!!*nKrQP5a!J:HU
!!*+Rq<S.E-KkHK!!*+Lq;;;-,g$,I!!*+Mq;VM3,cgtH!HS"[!QH:a!!+V2q<S-A!Ug$&!!+P$q;;:.
!RUo&!!+S(q;VL2!ODe&!!+Fcq9/kc!Nc>&"fV7`!S\mm!4W"0"JGSK!RN%B!7h,N"JY_P!Ri:(!;$6l
"HrT)!PTYW!!-'_q<S*/qZ*l$!DqSIhuIrV!7(WG;;_30!-c0Xm/R/Yana-\CTIL:&^U:>!6kKWX8i84
`VJEm_\2#1aT)>Qa8+`r`Y6>lk5YMmZh_fGZ4X2=!<RrRm/62Nl!(4h!<R`GhuVY7l2\^%!<RcHirS(>
bQ-T%!<R<;bQ5j]XoJP(!(>oDliFHtX8i8df_OG+Ws/"n]Dqsug\Kk1Xp*8Sg&M.7`VI^YS-?;#q#CF)
anb9(jZ9IC!=Za=huVLipAjpf^]4BD_>3*lgc3U[h>dQaY5-9B`\Oe!r;Zj#N;2`?KEA7U!<\&NhuS9.
oDlH&!<\)OirOW2ec=>&!<RQAbQ2_c\,c4&!>O#YliGEEX8i87aSF`p`=VkGZN("?bPC0!`t7#+d/X1[
[e\,JZOX\LmJm8tlhg#Lk=hlU!FF[\hu_\)!36)#?fLtC!T-K.!6G3A<m1Ba!Q[UG!9X=_"ge*m!Lj7m
!!<A(i8FRl!L!Yd!!*5(qr7^B"R,p'!!*4kqof(q"Npf&!!+V)rTjR5(T[W8!!+LprSR^s(8q36.F\7U
!Ql2H!4i.2-,0?%!O`]i!8%8P!Gqc%!TcqZ!;6Bn!GDDi!SKr?!!*+6ro4%78+ckg!!*+,rlbD_5h?"_
!!NV;m-KQ1\H)$t"UD6hi.;$-!!NV4j5YdoquEbt"U:UCb]X'E!6>-B0\sJS^B!Br""r$0%\s(+0%IE2
%\s(,._hehj8csq!Gs[4!8[\VBJHCbqu?b3184aL?7kFB\GuYI1s>sO!!-afXoS+p!GO<`!!-CXnGr:`
J,~>

%%EndBinary
grestore
np
16.98 181.6 mo
16.98 172.27 24.547 164.7 33.88 164.7 cv
171.56 164.7 li
180.89 164.7 188.46 172.27 188.46 181.6 cv
188.46 249.2 li
188.46 258.53 180.89 266.1 171.56 266.1 cv
33.88 266.1 li
24.547 266.1 16.98 258.53 16.98 249.2 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
3 lw
1 lj
[3 3 ] 0 dsh
16.98 181.6 mo
16.98 172.27 24.547 164.7 33.88 164.7 cv
171.56 164.7 li
180.89 164.7 188.46 172.27 188.46 181.6 cv
188.46 249.2 li
188.46 258.53 180.89 266.1 171.56 266.1 cv
33.88 266.1 li
24.547 266.1 16.98 258.53 16.98 249.2 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
64.632 191.57 mo
(\000P\000U\000X\000E\000\\)
[23.016 9.95987 14.8319 14.664 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
38.472 223.25 mo
(\000$\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q)
[16.2719 14.664 14.592 6.14395 6.09595 12.1681 13.92 9.09595 6.09595 14.2559 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
64.032 254.93 mo
(\000\013\000\021)
[10.5599 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
82.992 254.93 mo
(\000P\000U\000E)
[23.039 9.92178 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
130.66 254.93 mo
(\000\014)sh
557.7 181.58 mo
557.7 172.26 565.26 164.7 574.58 164.7 cv
710.5 164.7 li
719.82 164.7 727.38 172.26 727.38 181.58 cv
727.38 249.1 li
727.38 258.42 719.82 265.98 710.5 265.98 cv
574.58 265.98 li
565.26 265.98 557.7 258.42 557.7 249.1 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
557.7 181.58 mo
557.7 172.26 565.26 164.7 574.58 164.7 cv
710.5 164.7 li
719.82 164.7 727.38 172.26 727.38 181.58 cv
727.38 249.1 li
727.38 258.42 719.82 265.98 710.5 265.98 cv
574.58 265.98 li
565.26 265.98 557.7 258.42 557.7 249.1 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
604.49 191.57 mo
(\000P\000U\000X\000E\000\\)
[23.016 9.95984 14.8319 14.6641 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
578.45 223.25 mo
(\000$\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q)
[16.2719 14.6641 14.592 6.14392 6.09595 12.1681 13.92 9.09595 6.09595 14.2559 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
604.01 254.93 mo
(\000\013\000\021)
[10.5599 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
622.97 254.93 mo
(\000P\000U\000E)
[23.016 9.95984 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
670.61 254.93 mo
(\000\014)sh
196.56 221.4 mo
247.68 221.4 li
247.68 8.28003 li
196.56 8.28003 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-9.77856e-7 22.224 22.224 9.77856e-7 0 0 ]msf
225.26 15.53 mo
(\000/\000R\000D\000G\000\003\000E\000\\\000\003)
[12.3789 13.2009 12.8233 13.5122 7.48944 13.5122 12.6231 0 ]ysh
grestore
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-9.77856e-7 22.224 22.224 9.77856e-7 0 0 ]msf
225.26 108.43 mo
(\000%\000O\000X\000H\000W\000R\000R\000W\000K)
[14.8902 5.64484 13.7344 12.8232 8.42285 13.2009 13.1342 8.42285 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
61 <001C60D8A8C9B67E8BC3F2A8451362BD4C9A58409830B76203E2E4F8C417
11CC1F72DC9218DC853CC5DD2C> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-6.1776e-7 14.04 14.04 6.1776e-7 0 0 ]msf
205.56 47.81 mo
(\000\013\000=\0000\0002\000'\000\(\0000\000\003\0003\000U\000R\000W\000R\000F\000R\000O\000\014)
[6.1214 9.14001 11.6251 10.6984 10.5159 8.67667 11.6671 4.52084 8.36774 5.79843 8.26947 5.32114 
8.24139 7.11835 8.24139 3.56613 0 ]ysh
290.04 25.6 mo
290.04 16.7 297.26 9.48004 306.16 9.48004 cv
443.48 9.48004 li
452.38 9.48004 459.6 16.7 459.6 25.6 cv
459.6 90.08 li
459.6 98.98 452.38 106.2 443.48 106.2 cv
306.16 106.2 li
297.26 106.2 290.04 98.98 290.04 90.08 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
[] 0 dsh
290.04 25.6 mo
290.04 16.7 297.26 9.48004 306.16 9.48004 cv
443.48 9.48004 li
452.38 9.48004 459.6 16.7 459.6 25.6 cv
459.6 90.08 li
459.6 98.98 452.38 106.2 443.48 106.2 cv
306.16 106.2 li
297.26 106.2 290.04 98.98 290.04 90.08 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
336.82 36.1 mo
(\000P\000U\000X\000E\000\\)
[23.016 9.95987 14.8319 14.664 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
310.78 67.78 mo
(\000$\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q)
[16.2881 14.6066 14.6787 6.10205 6.10205 12.1802 13.934 9.10504 6.10205 14.2701 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
336.34 99.48 mo
(\000\013\000\021)
[10.5599 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
355.3 99.48 mo
(\000P\000U\000E)
[23.016 9.95987 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
402.94 99.48 mo
(\000\014)sh
404.76 143.4 mo
345 143.4 li
345 109.08 li
404.76 109.08 li
404.76 143.4 li
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 595.2 ]ct
[0 -35.0425 60.48 0 344.64 486.481 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 97 
/H 168 
/M[97 0 0 -168 0 168 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
\Gu[:D$J5bf)PjXBEbR>o`,%!Ba(73!XE$8nc5rq!XNWIe,[hq!XNHC[K,^q!XNKDUAt?#?3U-)X8i>(
Hfe)X!6P9D!d36i]`@6r!s3Z&9;DOj!c#bC!2TYu9'5Kd&E<c.!!GdFi5H5G!9!n\8)<4G&#TC3!!#:(
bd.eV!!+4jrp0Z=!p]j"!!+1^rnmg+!mL`"!!+1aro4$/!j;V"!!+(JrlbC`!iQ)"$*O6n!TQ01!4Mq/
$)RUY!S93Y!7_&M$)da^!STE>!:p0k#aYG5!Q6[k!!34Klhp)M[KcR.YlFh,Fl3,T!NcO\!7(WH!d<T$
irQ=e^&[O#!Wm,[r6,25"f_P'7caI5!U3[c!!,I>qqqM2;r[l!!!,LBqr7_8<5ek"!!,7%qof)`9</$p
"MF*fqs4@.'!)'6"L@j]!Q#H7!5\^:"L\'c!Q>Yq!8mhX"/>V8!O30=!;ulu?0_7P!-P=B!En:ThuI]d
!4i.2>2f;;!-$EffDkqLb5'6]A[VU4!!*;/q<S.;,HLkG#,q@U!RW(e!;?K,!!*;(q;VM*,16JG!!*:l
q9/lR*jbqB!!,"?q<S-@!NZ8%1Y_``!JLRL!4;e-1uA&g!JUX/!7LoK0$!e3!I4^Y!:^$i!fd$B!TYB)
!!*.Uq;;A-*rl;D!!*.Vq;VM1+5m4D!!*.Iq9/lY*5_d@!!+1qq<S-I!iuA&*mafCrSR^9!iuA&*n'lE
!KR<H!5nj<)nl'k!J(<q!9!nXJ,/F3i%1u1!WW4Fq;;;(.]WOLHMQS%f.6=j]DqqLq9/lV-IMnJ!!*na
q<S*LZiKk$!>``OhuJn?!!*kXq;VI=pAhT$!>N!<bQ*=L!7CiIDu&`#jrM)7n,NH&q;;;-)lir=C\cum
h&HCpXT/?/q9/lZ);tSM!!**%o)Je!e+r>2K`T*lq#CEr!qQBm$cr/%!Ib'^!!**%o)Je!bPgK"irOZ2
]Dqs5!qQBm$F]cS!HS;+!7UuL<*Abl!,VJt!S&%1!:g*j:fQuc!,),c!Ql4k!!,qsoDepm!,22g!R2Fn
!!,Ycnc/Yrq9/lL(%;4K!!>=?dMqcX!>EfTli:tP!:0[f37Ptdo)Je(`VJElBtXKK3S2ClquHKl!>ENL
irEl.!!>$n[MSN8!>2[6bQ)&F!6>-D--trENWJ_O!-\2)!R1r)!9O7b,K8U!L&plG!-%bl!Q#/X!!4Fd
ir\7s!V69kEr"_r`<j9Z"X(.qb^'<]!!$X,bQG*U!!)`nbQ%YV^]*R#kV_r3!>F8bliH?Gf)Y(9!>2a=
huVUgo)Je(dJDc%h+GH_!>2g?irS$no)Je(eGA2+i(Lic!=u%+bQ5g<o)Je&^A?%Sb!Z(,`W-#HU\sHZ
ZjQF*!<IuOliF$fhZ2^;!=G=ohuTkcoDemmJGJ+(TEN+3!"&^sr8Rg\$M4<!!J:.-!MT_6!!*Ccr6,23
$1n2u!Hn7_!mHf0_>jUmlMTuLlXKGc!A*7,liH2qjoF3;!J0,*huV_@o)Je@f)";*fd4]>qZ$YLiV_^:
ia23V!@uk"irRp]_>jU[b5BHab>n-6!%%]`qTJu[,/XB]AF'*Y!SJ@_!!*.uq<S*7m/Y`<!FOa\huV+?
oDemnSb_1DIa8#e!!-KeqVqV')"[e/!h];K!.Vld!ERD?bQ5<kq>gBm!<S>XbQ)\$!!%B@liE"FoDekZ
q<S./&G6%M!!%0:huSK3oDekVq;;:n&(^gL!!%3;irOl8oDekWq;VLs&&\GJCA?!QGQ7d:!!#(UbQ5'\
_uKfGdJ<,0i@"6t!=6O<liHBKquFh=!=QsDhuV@SoDemt\GG+ahG)i,k5YMjanartfHp.i!=6:5irS+6
_uKlH[EQklbQ5R)oDemsVu"U<b!s8K!F"a`li<(;!!%!7liQOL!lP'><SdK/!/C(F!,D>f!Lj/Q!8dbW
<oEf6!/U4H!,VJk!M0A6!;ulu:<NCV!.+5:!+G]I!KI6"!!*A2q<S.?-M.9<*rt3pliH2e_uKfDWVPHQ
eKjbe!?TbehuVLKm/Yc=!=5b%irRaWoDen5fD=M.g`"K=p&G*uReb/._BJOO!?8lObQ5^"_Z0]skkXQG
N<8tWq>^Mjq<S)s_Z0]ph"fk/L'$uI!1WfB!+tj'ci=)(htc:5LB@)J!1irG!,'j_mJm8Aana-]H33^=
!0-fu!+!JB!<SP^li?#F,4kj8:&4,V\d$(Q!<S8VhuVCPoDek_q;;:Y"oJAB!!*.^q;VM/+nPa79)7KJ
ZN]1ck5YMaJbdLj_]JFM!(-M*!MK\7!!4G#m/$&LNWJeQ!>O)\liH,s_Z0]]d.uT#L&prI!>EWPhuVFX
q#JS<!@-(hirOr:o`,",c2-H$g*tbVkl:`+^A5tRH3*[=!>;p=bQ5X._>jRrrTsLL!So'p!!*+fq<S)r
_>jRjq;;;%,P;$;!Kd-8!G)8K!!%iNirR[Uo`,!nP54,<B&WgL!!%?@bQ5I$o`,!nKDE^k>gWNP02V?B
!rr<Liq_p@M"CZJ8F$'<!4U>U!A.";!!+Ftq;;7(oDet^hVd>ihuKq-!!+ZGoDen=g%jY.KCf-E7H++'
!3k\fkl:`57J$Q\,/a6#!-[u7!C"[&bQ+6_!!<nObn^3Xp](<sRec:NfaRNR!=IQWliH8ddf9I_\AK$R
!!*1bq;;;!$hs`$!!*GQqVVD0(Xi?d'>)6uo`,!pPkj>?d1#[J!=I9OirS$RnGqSL!thK;'(l5*!epHo
!PAd4!!*D>qTJu]("<3`$3[<om"GK5!!+h:q<S)doDelSq<S)he,TXZTA\XV!VHEn0A?6[!`o@%p&G)N
q;;6We,TXZU#Y0`!VHEn0AZHa!*Jjn!0-g7!+#@"h#ITbOj)$j!VHEn.`V;.!)N4e!.Oaf!)qSOqu?p&
JElLfj=Ks(!<K.pliFHto`,"dlh]rKUB/pG"p0),i8E6;o`,!nT`*gIhuTh]o`,"`htl73RfV(?"p0/1
j5\lEo`,!nUA<gMXTe@t!D2;IirYbP!7q2T!cH0)bf(q%!!*+`q9/l/"n_ir6Hf5L!K@->!;-<m=6ohO
!NH@s!!,4FqWn7F2>$qM(t\WN!R_Y4!!-$UrSR^N#58*"!!#%7qVVD.1A(VJ(X2a6!QPi(!!-'YrSmpS
#5%rs3oBeo!SoR)!!*n^ro<t;!Ql),!!,a9rQG;+#5%rs1s#O;!QHbb!!*hGqTJuK&a9;a!!,+8r9OIJ
;tU+k#.+-l!0$RN!<K%nliHE9f)Ph0dJVo'ge[nLp](=!WqkQQL%PEH!M'#E!T,uj!!,%.r8Rh8;"Xeh
#-@X\!/C4J!rr<%T).IJi]Pfm!A_CebQ5gVo`,!sReb/-H1_.<!KR$#!R!Cj!9jIa)U8-F!Qt]?!!$F&
liGiPo`+tuq<S*3fDkpi_u8NmhuUUso`+trq;;;#&+oo&>5@(VH.W)t)92O5!Q,*6!!$=#irda@!!)`n
!*f9Z!.3>u!>`!;bQ4mNo`+tjq9/lR%eTf%;YeN:DYF.k!!*S7q!7u_o`,")i;2d@lXBGd!?CD$liFs(
g&M-_W;,9N;tU+k&CpX8!T./T!!+"pqVVCa!SRMS%BB3`!*/[l!>*l]j8S'>ia)3W!?:"oirQamg&M-^
RJ=u+9_AAd%`8(d!R"I8!!*qZqTK&?!<<,T!!+qAq!8$m$2"8uRec:NWWVqp!<^F>liH,ci;i]S!AWI+
huU(ho`+uTq;;:J"82]q"2=Wi!S84C!!+k6pu;C]$24E$!!&8ZirPqXp&G*q_#!'lg)AZF!A2IhbQ4CC
o`+uGq9/l'!qlTp!j2FFrlbD](]49j!!*4sq!8%I;=sni6Kn:4!T"ji!!%fNliHEKh>mKS!<ekdhuV_0
o`,"Vh"oq0di7r[!.aq(!T-T)!!*4mpu;D7:A"Se560U;irR^No`+uDqVqV9:"fRJ"-!$!!R!t*!!,+%
qTJuU)>*t0Fo';_b=1(a!As!7liFj'p&G+$`qes$=7lOo9C)H@!.s;4o`,"Ih"]e.[0-+&!=QR9huH^K
!!,UIqVV@$f`2%.htZ44[fcO.qZ$X)^\Qmi<:p4l8E0L+!.NT$!A2CfbQ4OAp&G+#X80s>9D&8b5lf+)
bQ)Y8!!&M`liH??o`+u8q<S*Wo`,"5gA:.:\-D=#m/R-Mptu2/6hLEZE;ADlS+Qa^)peB=!Nu^\!!&;Z
irS(+o`+u4q;VIHo`,"4de_u)Ym/k]!/C9m!QmRu!!$X,bQ*\#!;c`s)85mj!M9SL!!+V-q!8$W"82]q
-gUWq!SS4\!!*27qWn7@(\@^i!!+Ltptu1B"82]q-/\RW!RDDP!!*2-qVVD)(>/Zh.G*VUirP_Rp&G+>
iqh[9dM)<S!<]b+irRaIf`2%!_>)4TNWSnS!@#_`bQ5Bhp&G*pUAE(7_A(Z'!<JG[liH)ip&G*t`qo$&
l;.'Q!/UI;!($J^hZ*ZXNVME4efj_e!<p.4huV\-o`+uCq;;69h#RBR!<J5UirRgVp&G*s^\ZskiCrnE
!/(+-!']'9!<I`GbQ5U&p&G*sX8:$@b!bn&!-\1^!'&U2!AEa5li;2$!!%]JliEISp&G(jq<S*"fDkq(
hY?"/DtO)1Iehn&O9,%T!)E@J!,:Koo`,"EiV;F5E:j22J,/+*Oob7V!)NFN!,L3e!@c1dbQ)5O!;c`r
Er!o[K)tZG!(Zk/!+=FZ!<KJ#liG-3p&G+\l2'`Ie.)*O!?^V'li<[1!!*,!ptu1d#PJ,u5Mc1o!QbcD
!!++sqVV@?lN$>Q!<K4qirQn"p&G+Yi;2I7bRF1F!?L.qirGM"!!*+gpric?#5/#t3m.<C!OiI1!!+"\
qTJqsf)PhFl1sZHkX>+E!>*`Uli8s@!;lft#g)r0!R(`"!!,XHq;;;/5kY0Y&'4S)!&O<K!=6I:huUXs
o)RnQ!D25FirS%'p&G+(bPC/u2"gnM#f6At!Q5,n!!5L0bkfNaaZB+q!=lR6bQ'9h!!*>-qTJuE"P<\T
$cVo-!LX#_!!&Vdli:hp!!*+rqWn7>+4pPo$bQ2l!KdHW!!&>\huIB_!!*+iqVVD'*r5lo!!*JApu;C=
!qlToR/,bBBD)<+!M9/J!S/=I!;ulu$EEmF!JCOJ!!%lObQ(rB!!*+\qTJuU)qP&iG51D)g(3lW!E8@]
li<mT!!%3=liHB>f)Peiptu2!%e]l&:\ioKSFlj^E;JJnhE]Zm!-7kp!R_JO!!#jkirG\D!!%$8irS+)
irJ`P!+u#M!PJs9!!#RcbQ*[r!!$X-bQ5jIf)Ph"l1jTF7/Hu^!!*tuqWn7/$MFH#9^DQA!,C*c!@HXt
huH%9!!*qhqVVCn$MFH$8DiA&huI?f!87DR-K+[Z!($;Y!>sSfirR1-p&G+biqh[8B&E[a!!+:dpri_!
p&G+/`VRdZZO-=*!CG!+bQ(o2!!!/m!!*;5q!8!?p](Br!!g77liH3$p&G+?iqi!AP32fF"S)Nn"g7XY
!/C1I!=-".huVL_p&G+=f)=P+huJ\u!!!/m!!*8-pu;@0p&G*u[ef"bgb&4"!@6@pirG)%!!!,l!!*7p
pri_ap&G*tV#&:9`[UT]!?oAWbQ*+U!!,?@nGiQ(q!8('$39f#!0R*D!+#9u!=.0OliFQukl:`IJai^?
Abb0a^'aQ6!/gU1!*T$r!WWJJqVVCW"R,me4bN8)!+u#d!Pf'9!!%uRirE9V!!*>LqVqU\"Rc?f!!,$%
nGiPopric@$2+?!Ieh1f;>'tj#.XNR!M0DY!!>UFjsfj$!@$J#m/?8Oju2o5!+#Ee!1!3W!4;Uh!SRnG
!!>I7g*cFk!?p"hhuVRgp&G(qq;;74rW)]n!3>tS!RD,<!!>L;h'_an!?p(jirS!np&G(rq;VI9o`+up
qVqV)$MFJm!!>9t`Zt$S!?T,RbQ5a:p&G(iq9/hio`+u^qTJuR$0qQp7bm@sQNQj[!WW82q!8!)p&G+G
k5+EFaTV;;!0?sB!$LS-"[g\qi/\!3!!*,(ptu-lp&G+EgATt/huURqp&G)Kq;;5plMq)VeDoSO"7lKn
!O;F[!-@i6!A3.(irQt!p&G)Mq;VGsr;c9d"[0TDb^oof!!*+mpri_Np&G+A`qmm[Xon@t!.=Ud!$(>*
!D)&GliH)rqZ-Bk!."A+!4):u!=.9RliHDcp&G)-q<S)Jli7&Tdf//*egU(h!-@qn!3,\m!WWJMqVVD3
'(u;*AGP-`53r7M7FhCt!SJpm!!%0:irH.R!!*>NqVqV9'D;D+Ac(Khj5WAj!!,9urlbD\-1V$9C&#mP
Re?^^#.jZT!Qu)K!!$7!bQ'Zj!!,gRr9OEHnc/\MlhTlJj9G;X!3,e\!'9fR!(-MJ!+P<q!D1l?huJ]+
!!+t7q;;A-"onYu!!&_ghuG_0!!#4YhuI'M!!,^Fr8Rd:nc/\Jiq_U8gBR?O!2KAM!''ZP!'g;>!+,$m
!CF^%bQ*+_!!+dsq9/lY#5/#sP53<%1A1\J3Vgl!<UKhe/HFW(liGfVo)Je'deN//1%kSIG5:J)@.jR$
,3esj!.jP<!@uUqhuV.>o)Je&a8FlohuGG(!!%!6huI!T!!+8!qVV@"mJm8=ebeA-dMDES!>*EKirCb+
!!%'8irEB`!;ZZr+lN4W!.=27!@PYZbQ5Bko)Je$[eS&H.eWiBB)0XN;t^1l*m4?'!,qK0qZ$X1chcu.
C@_E+!M9)Q!,;-,!)*.S!/:+H!>F,^li<aI!!*_OqVV?bo)JdlQMBA<A+fm&8,;'CIeEaB'$^:2!1E6T
!>ENMirE]_!!*+fpu;?cp&G(`qr7b<j+-h'!>EfUirGS:!!*\<qTJqEo)JdlM>59p>4qpr62A_)F7oS7
&\@h_!/p^So)Jc;qWn6t#kJ#rB_^ooSFup`.I$]q!3>en!=QmCliOp&!Ug!gFo("s[0ZX0q#CD(ptu.:
p&G+@h>6%0U\4Zg$bQ8n!jr%0mf3?2qVqUc#kJ#rAGG0bQM(:Z-fFj]!2]Ah!=QX<irZ[j!Ug!gCAQ-T
V$HSl!*]0A!/L7J!@,b`bQ*n$!!*G,qTK#;!<MWh!?L%oliHE.o)JeOkkXQG`sh\B!>X2^liG38pAb3r
Z23egcOLHR!!+%fqqqJ3!&4!E!B/a/huUM!pAb4.bPL,t^C']8!<]:shu^k,%IX8t*7k#I!TGj*!!,%9
q;VLj%/p8'!!*eZqVqUm$MON$"024X!lk`Zmf3A+_#)=Vb:N5b!A_dmbQ4dPpAb4,\baMNXpOh&!<S\c
bQ>*Z%.=/s!griN!/'kC!>"/bliH)hpAb4"_#!BugE-%g!1*KJ!nnV6mf3@iOS[l:I/j9?!!*S[q;;;)
+SPj:#e'Tf!RMh[!!&&Uhu_4C)XdY,!g<E?!.OM>!=mcXirRgUqZ-Qp!=643irRUKp&G)SqVqY*)]S5G
!<RoMbQ)\T!!*PGq9/lW*VTO7#H%@A!PTKG!!%WMbl,`e]bhUS!!,OPqs4@*$1e,s_"d6r48&XSUAF3W
lSeG:!.F_1!otdZmJm>Ugu.,hhuUS!o)Jd!ptu-3p&G)]qVVD31\LeKGP^5!fI&'7!!,IEqr7^n$1e,s
\G5(a3VEFQSGM7Hi\^?/!-nA#!o#(MmJm8Mans9_XpFV!!2fP8!&O<K!0$cu!R!+k!<)ruD#2?W`?QVq
!!*>Lqs4@H47`FPO8/&A@.jR#IJN40>P8$sAGPTl3q34L!!*>BqqqM13:d+MM"om.>P8$sGPU.s<qZLn
?hrX[2spYH#KHZ$!T,p/!!8&<j8.d9?1n6uGkpA"=7uUo@/8j_3:6bI#."-M!Q[(g!!%EAbQ(T8!!$j2
bQ1H=pAb1oq98jom/R-EqWn3+o)Jc"q!8!4p&G(pq<S*&p&G(iq<\,Wp]1!f!/14,!-.T1!+#BX!.=J?
!)r^O!,_E0!)34Hs%D_Z!/C@1!-@l7r;Zh(pu;@'p&G(mq;VHmp&G(eq;_KKm/R-2qTJqPo)Jbjpri_X
p&G(drlk;a!+Y^&!(Qe.s$Z5S!C5uJliFHqoDekSq!8!\p&G+QlMBiIM=poM4mDh0s(;92mf3AOhtu=4
WWVkn!'9o5!2B/e!B&a1huJB&!!,.:qV_B^m/R/Miqqa<XTJP'p&G(Spu;@Mp&G+NiVMR7K_>BH45ftq
s'k?q!B84!bQ417oDekKpri`%q#LBo!AM[mbQ)h[!!+t"qTStAm/R/#deiA3jUh%a!@6h'li>9'!!+>/
qWn3Rp&G+CkPacHm/M@u!!*_QqqqM.&+fi&,22kN!5\@/!?p:qhuK):!!+M'qV_Bpm/R/#b5UH#irRpG
oDen:h>-(2`:a03,2i=X!1<H[!@Zk%j8X8h!!*\?qof)\%eK`%+3+-#!O)Ru!!+.`qTJqrp&G+=aSO-\
C$bm$!M]GW!(?GZ!>NuXliH,VpAb4)kkaWG[J'Y&!#Obnm/Mt1!!*+hqVV?>oDen*a8+Wof+%HS!=mo]
huKkP!!*kgqV_C+mf3Fi!!/VdirDF<!!*eVq;VM0%JKi'%c@-C!3Z"q!>aJej8Xi#!!*+ZqTJq$oDen)
[f4MKbQ5WjpAb4'anj3]Sb<$a'ZU!ns*+5<!!2cn!,DAs!-[u7!=$@8liH5npAb3piVMm@bPhM;!!*Dd
qX"6Mp](9pp&G)'qVV?moDemq[e\h^g*-1j!<LaIhuLRd!!*DXqV_C9p](<q!;?HnAbtEeEqB>4"h=Bg
!Snso!!*,QqVqRnp&G+"gA9k0PP>+X!VQKn>PcPDB(c3,!!!2"q9/lZ*qoX8!Q+]W!3c(r!=6X?bl<@n
!!EKWArd2k!!+k>qs4<\o)Jcdq<S.F2"gnLc2I#.liH)Hp&G*JqX"6]qZ$a&.Ue,<pAb4Ih>?+1T(;p^
S,(tCgbJL&!5nZk!S.;F!!(FCi;]ML!!WE'"Y4&>#PS3!0];ig!2/o`!1s#H!T,[+!!(%8irRg6p&G*B
qW%UNqZ$a&-<PX"pAb4Eb59B_OSo1R!!&&TbQ5d:p&G)uqTJuX!VQKn^A?%^P*,eF"s-[+cK4EY>k\4!
#N>RH!QkfB!!&#SliHEAp](?q!4Vgk!Tt'g!!(=@ljUA4!!!3C:5m-Ei87W1!!*>TqqqLi$hOE!LABa.
ha@);!3Z1V!Se7[!!'t7i!nVIXoJG+*)DU8guIBrpAb4!f_a\0_@,u9!/LC1!THN@!!'8"irS$Kp&G*5
qVr!gYQ+Y-)Fo:_`luV%pAb3u_Yq[\bfm3soDel;q9/l_4n\jUT)-Y3a:@nD!4)IF"eM;D2S%iEliFs3
pAb3*qs4@@,4kj8I/*%0=TAHs!!&biliH;rp&G*.qWnC+a"oNUf)+A+\-r$2!3uFZ!Rr:b!!%3;huHaM
!!&JahuVUXp&G*$qV_Ce"#Mj?g&'e1]+"E6!4;X`!S8Le!!%6<irE*Q!!&PcirS$_p&G*&qVqao^Fh.3
_u%XYW!`8!!2BA7!5SXVoDel,pri_4p&G)OqTJu^+SGd8VY\L>XK2sE_tr^#lWEl]!0@!C!''TN!,D;q
!,_W6qZ$VWqWn7J2YI+N[/0+ld*N:6\bb4bhc'7L!/UL0!&aBK!+bl_!,2'+!/UL0!T#X+!!91Yi;DL9
`l8N"]_^Xhi`5^Q!/gX5!&aBK!+krc!,;-,!/gX5!T>m/!!'.tirmHE%M#K7bQ5m\pAb2@qTJpnoDekq
pri_Ep&G)?qTJu_0(o8FS,1>3['Tf5;#0GXY4hnrB):io<qH@l=S_:am"4p2!/gX>!U;T:!!'8"libkh
!!#^ghuKVJ!!$I(huH[I!!#smhuJ,t!!%ZJhuV[jq>gHo!2o\O"Nnje!)<:L!2oPk!+Pfb!)rLi!*/gS
!.FP@!/::0!T>m/!!'"pirmWO!!#I`bQ*t-!;c`r=Sg5A9(W)`9_cg3E:s83GP]MaatEAf!1<W,"h;&B
!!KM%liH#fp](:^qWn3*oDen\m.ouJPP+tVJGSU5l9Y+D!3#b\"l\D?!!K1qhuV@Np](:[qVV?moDekX
ptu.2p&G)<qVVD24n\jUT_dRMe^XX""K;1W!S8Ih!!#@^irF)k!!#C]irG,5!!%BBirS+&p&G)eqVqb3
fDkmRQi,&0bfmpEp](:UqTJqOoDekRpri_fp&G)1qTJu_3;*=PP5<E&_YsN9;X4/G!UF@m!!+\9qs4<H
q#L<m!'9oA!1!6X!.aq4!U<&G!!&nmm/Q2H!!,jOqqqM4@JBg'/)C*\!0$OM!&s]2!0-[P!dW_^r87V4
5P>'WSbh:Eg&:sP:Z;32!TIS`!!+Y/qr7[:oDekNpu;@8p&G)>qVqV85kY0XTDIUJh#@?U!(Y3/bQ5mh
p](=Bb59B_J+N^@1AK&nJbB'DDYhQXau]4r!0@!#s2P$<!=d<MliEpaq#CF:g\^=<VuZJj!'9oA!1WZ^
!-\5*!UEDP!!&Pam/?tc%)_r"!Ls5e!!+(dqqqIHoDekMptu.:q>gHo!-%em!T-E@!!&8Yi;N]W%*&/(
!M0Ag!!+(gqr7[MoDekNpu;@?p&G)5qVqV98G3#`QMokAj8K#Z$aTWQ!KI6W!!+"Pqof&&oDekHpri_m
p&G))qTJu`61t9YL\T*l!!%lPliG<:q#CI0dHpet!4qe&!&OE:!29)d!-S/)!UEJR!!&Pam/6naK)4C+
_$To;!><HMhuL%S!!"_JhuK2=!!$s6huV_,p&G)Wpu))N!/14/!Q5<?!!*_Sqr7[_oDekGpu;@Dp&G)3
qVqV99)&Af!!&>[j8ArXG5BD`YR(%)!>)[9bQ+@/!!"SFbQ*Rp!!$U,bQ5mRp&G)Jprr[:!)`UZ!U1O$
!;ulu$d&;4!6k'8!&+-6!2fGi!,VJt!*8dn!1`iNr;ZglqVVD1)>O75$buSs!5\:-!%n3.qqqIFp&G)*
q;;6Np&G)Wpu))N!)ECN!T4jk!!*JDqr7[poDekCpu;@Hp&G)+q;VNT!!)co!1*E?r;ZgeqTJu_(ARq2
$Ej9M!3l(q!%I]e!0?gR!+,KF!(uqb!/L?nr;Zj@kPXZJm-I%6!!*5=qs4=?oDekAq!8!^p&G),q<S)b
p&G)_q!@qZ!?^+nhuGq9!!*54qqqJ(pAk0m!%@X#!2K5f!+Yi_!*/^m!0m9:r;Zj?htl@555>0Z"M4Kj
!8$iC!%I^'!2fGi!+l,hrSmlYp&G)YpuD;Q!?B2WbQ'Wu!!*2"qof&VoDek;pri`'p&G(rq9/h6p&G)J
prr[:!>!TSli:&\!!'e2li?5@!!"8=li=-\!!$a/li:Jf!!&Pam/6nb%`eG(!)`Lk!4D^^!8RPRpAb1:
ptu.Ip&G)&q;;6Xp&G)Wpu))N!=m6JirE!P!!'M*irJ!/!!"5<irGtO!!3-#Abk?d?1n6uQMBM=!!*P:
qTJq3p](;jqof&]oDek4pri`'p&G(rq9/h<p&G)Jqoo&`r;Zj*`;8g#BD;H,^&.-rkO\`S0)4c5WqHDm
D#*Dt=nVgqSG;IL!!*G<qVV?_p](<#ro!e6!8R2H!%dp'!2B/e!,),c!*&Xl!0m9:r;Zj*^&$ahA,$$(
[eo(bht-mK/bn?-U]:Di!!$^.irE*Q!!&>[j8ArY$**jG!*T's!2KG8!6Fd4!%@Wd!0d*V!+,KF!)<.e
!/L?nr;Zj&\,,FkG5)%;[/91ikO\`S3;Dh?U%SHdG5CP+lVI3S!1`iNr;Zj%Y57&VE;0D5Wr(]Sh"1RH
2Yc21RJ$U\E;JJnhb3YC!0m9:r;Zj%YkmA[EVKM6Xo%,Yht-mK2Yc;4S,<9`!!%$8irS.5p&G)YpuD;Q
!<o(kbQ)8M!!&McbQ,`V!!"bKbQ*Rp!!$X-bQ5mTp&G/Lbfoq-r;Zj'^&%'qEVKM6Zhs(hkO\`S6MTmI
PkG(WJbn^6lUCLI!298Us5s7[!=,t-huIQf!!'%rhuMR)!!#4XhuJc1!!%?AhuV_%p&G)\qV_D.r;Zj'
[ef"aD>4)2XS_#Xht-mK5Pa=?j,Wg5!.=Y'!THK?!!&Mbj8\!7!!*;!qTJqKp](;_qof&]oDekOpri_g
p&G)2qTJu`4Sf'V!!%rRbl>`^!!*SSqWn2fp](<-qs4=FoDekcq!8!=p&G)MqWn7J4n\jUWVYu]i;EWV
%Dqu"!a,L'q>^N%qqqJ.oDek_ptu.*p&G)FqVVD23q`ORU&*^IeboIK%E82(!*]-t!4Mdb!8[8I!D;DJ
irFi-!!%`LirS+#p&G)fqW%V-r;Zj,Z22ZE;>:+kU\i78`q0626MSb)GkM+;GP]Maau/km!0[3&s2+^7
!>XMgli9WQ!!*5>qs4=9oDekmq!8!3p&G)WqWn7J1\LeKZhj%geboIK'\*-?rSRZEq#CEu\GP1acL_):
;u#8NHM.==NV_Q6hD"X'!35nRs2t9?!>O/^irDRE!!*57qr7\'q#L<m!*&aR!.=J?!06p9!T>d,!!'+s
j8[C&!!*_KqTJq(q#CEtW;Fd=]CZ('9DH^2DtX/4JBZ78bQ5j;p&G)]qTSuLr;Zg[q<S)6q#CF%aSY<(
ch%2;AGGKkG4kn9Sbh[RkpuH-!4hsms3:QD!WW3\q;;6(q#CF%^AHgg`Uj-1?hiOZE:s83Q29D>h'hss
!3l=Xs24d8!'9r9!%n!H!=?R=irR1#o`+u"pu;?pp&G)ZqVqV7.J<`AZMNV]`r,l;2#5>q./<iD#d+!J
!42:t!*8m=!+u'-r;ZhRqTJu_-2%<=T_cn4ZMab'G5CP+g(!iX!>*NQli=op!!%??li:bn!!&toliH;m
p&G*-rTsOMs2P!;!-%em!RD2M!!*VJqqqIaoDel5ptu-^p&G)bqVVD0+8,[7[JJh]]_qg1Er+esdL>pO
!Y<<2r8RdhoDel7pu;?cp&G)dqVqV6+8,[7\,,.b^\n-4B)9^P]aOW9!=lF4bQ+U6!!$d/bQ(i?!!&/X
bQ5g*p&G)hqTSu?rVus%\GGOmZ39t'!?9_hli=9^!!&2XliHEJp&G*"qWn7G(&.b1!!(.;m/O]s!!*5+
qVVCR"Si#u):&-;!2oGh!/p[2!T-QD!!'%qhuVUIp&G*-qV_CYrVus%Z23J]Ws&A$r;Zj:dJMr(WUp/j
NVVT8i_9%G!3Q+X!T+Ub!!'k3j8ZLc!!*1oqTJu/"8Mot(VKXh!1<BY!.Opkr6,2b7.pT\S,1>0a:e1H
!3Z1Bs.]Jm!B'!8li;S2!!+G-qs4<KoDelkq<S.G3;*=Pank?+k6M%fp](<IqX"6`rVusSg%sV,H2%@?
,hW"P!06[O!2B;I!SfR+!!'e1huVU=p&G*<qV_CKrVusTh#$+4j*UP$!@6FsirG25!!&hjirS$pp&G*/
qVqV6#ke5udJDo'VZ$Pr0#mb3!,hQ3!?oGZbQ*7h!<)ruPPNE'aY<Dg!3Z1B!QYN>!!'\.bQX8s!!!%_
qWn7F3;<IR4SnCEIJ!R@"i'm"!TkO!!!*/]rTsOM!7UWA!=7`^liilJ!!!%XqVVD/2>@.O3VqY6GP(q:
"L\'`!SSXi!!*/QqVV@pp&G+!fD=D/PEPtH!KHs9!T#^/!!#(VirF>s!!*53q;VM3+85a9!o!M2!6b'9
!=7EUirt^5!!!%KqTJu\0_bVJ2#>DrD#OG0!!*5!q9/lZ*;9F6!lXrZ!4MS$!=-R>bQW`U!!";'qWn7$
"o&&t?Ma!gAb?$(&C(%;!TFI]!!3-7kkaWG](Q+)(ZbGZ"cA0;!$]tihuUClp](:tqVV?]o`,"'_ti3k
edD-O!>F8bhuL%U!!*kfqqq\:K7a.(,M;kQ!PJX2!!$7"irEN\!!*VMq;VM/$MON$']8cI!42A!!>aGd
irt-j!!"+XqTJu?"S_rs;Z4i=bQ(`;!!*S8q9/lW$24E#'$:!o!29)d!>NNLbQN-6"pV"$li;&"!!%ZJ
li9BF!!+5%q<S+.rW)`o!A!F2li<^P!!+G/qWn?2H3FJDq;;6gpAb2AqVV?;o`,"7f(n5(`qBB5.GajY
!1<H[!$hR!qV_Bq!X/b#q;VHlpAb2BqVqQ?o`,"7g%jY.aS#T7.cC0`!1NT]!@6OuirjOK"U1"`bQ),H
!!%'9bQ'Zr!!+(Wq9/iGp&G+?b50<^MY7#N+ijH'"DV[K;<RfB!S\^j!!'"qliH)lo`+tTq!8!gqZ-No
!CQ2Lli;b5!!,(CqWn?"C.q=VqVVD$*qoX7U&3aKeg'hf!'9o5!3Gko!C,K<huJ6"!!>+6i8FOk"Cu%;
:#Gg-!Ri+a!!&ekirRgYo`+tRpu;@Wp&G+Yiqh[8JG&sD2;e8j"D).67`bGM!PTNI!!&2ZbQ5U(o`+tL
pri`/p&G+SbPKE_F7oS70Zj18#$Y:g1k`X,r9OH9!VcWq!ndD:!RDAN!!$[,li<.@!!$7!li:eo!!,dZ
qWnDd<A?4W[G:]<!IFkB!!*/GqqqLo&G6#'@eej]M=poL<r(YRAbc?*!!,XJqVVQT;)0nV\)7,D!IY"D
!!*/Iqr7^t&G6#'A,,'aMtR,N=8CkVB(c3*8`KU,##\>N/TR]/r6,1\!W<#r!!*/4qof)I%eTf%=np2@
IJ*X@:AN*6>kS-u6Hf5Ls%<7j#6u>XU!i/Y(A@e0,j>-l!Oi.'!!85Jm/$&KAbH*(G5:J);>'tiA,>Nn
lT73-!!``M>+*FdcP?0S!@$=rhuTt^o`+uJptu-[p&G)3q;;9I!;?Hn?M`R]h`*Up!!``M>armndM;KV
!@-M!irQ@co`+uLpu;?_p&G)4q;VHLp&G)"qVqY:3B@'="U5oDMmg_.]bC,?!?]G\bQ4::o`+u>pri_>
p&G))q9/h.p&G(nqTK#a1Gek-!Y7Fap&G+mlhg#KMYI2M!!'G%li9-@!!&Mali9$=!!%ECliQ9!/,B5I
%Q[#O!!,pRqqqI,oDelmptu-3p&G)Vro!_4!&aHM!-\4s!netMq>^R,4%8iC!E%kRirFf*!!'1sirD+5
!!&;[irCt1!!%6>irn-d.0'AG!!3Te55"sW8^%"T!-e&8!1io/!&O<K!/C<n!&4*H!,MGT!lcN4li7$I
qWn8]!!)`n!=I]ZliGo_pAb3u^&%'ri["3t!0m?H!neP5li7$BqVV?Ko`,""e+qo&dMqu^!rr<*ZhiS\
efsef!0-j5!mV]&li7$DqVqQOo`,""f(n>,eK";`!=$"/irRgXp&G)Qr8Rq?j3\ebli7$6qTJq0o`,"!
_"l1T^DZbG!=#=qbQ5U'p&G)CqTK#R(`;W?!=QjFm/?8N)ta132sC)(!QGK@!!*eaqWn7/&bc8+!j;Cd
!mV8cm/R.p])(=b)>*t11u.ob!k\j?p](=.b51#s`=VbD!<T+ohu^h+%IF,r$bcDs!#kM1!B&d1irQn%
pAb4.c2-H$`t7tF!<T1qir[71%IF,r$EEsH!#P;.!ADRjbQ4aNpAb4,\GFDMZOZ^0!<SS`bQ>'Y%.=/u
!!"P4qs4@,"n_iqCA@,qV=jli/*cut!OMn%!!*JHqWn:"!Wq`h!@Zb#huUUro`+u&r8@P3!1``_!@cn%
huThYpAb4%]DCFe[fQWu!!+P+qr7^p"SD`pAbb9cT(W-b.cL6a!NcD%!;ZZr$blJt!kA@6m/R/5aSX0^
Y6=Lu!*f6B!06aQ!@GtcbQ416pAb4$Wqsp@V?-hm!;HNoDu/f$OTG.U!<Jeeli;5&!!#jkli<"<!!*hg
qWn3VlMpp!qVVC3!VQKo!LEN=!-%W3!)34H!/:+H!>NlVhuK53!!$g2irP)>p&G*oR/#\AEqTJ5:&ErP
j5Ymf!!*e^qVqRGlMpomqTJth!VQKo!K$Tq!+tp)!(H_-!."8<!><*BbQ*V!!:g*j!l+X!!U<;M!!*PO
q!7u?p&G)<q<S)hp&G+>lh]rJK'WI<!k%p`!T$<D!;ZZr%);Sq!&aHM!-@to!*f-s!@-LuhuJ/k!!*/1
qr7_98+ci_%)Vf"!&aHM!-S+t!+#9u!@6\$irFPp!!*.tqof)`5kP*X$a09K!&4*H!,;8Q!)rRk!?fS^
bQ)YL!!+Y4qs4@9(A.Y./Euus!TF=W!!&eili9!<!!#F_li:J\!!+S&qqqM"(%hP-.c'pY!S.JK!!&Ma
huGV-!!#:[huI$K!!+V*qr7_'(%hP-/)^6`!SI\U!;ZZqSb_:G2>."M62BO@?0hOl-H>r,!P/s;!!+Fh
q9/lW#5/#sNVUcu0D5AH3m@HE!`T."mJm65qWn3[oDel2q!8!_p&G*qc2-c-kn!If!,;8q!(#rO!-J(q
!hKAlp&G).ptu.Jp&G*q_tr9lh%',Y!+Yi_!'TZK!-\5!!2/ra!,_Mk!2fPlrVus$`qn]ri"#G\!+kud
!']`L!,DAS!0HgQ!+P`I!1*<Y!<TS'bQ5iqp&G(rrQP5a!''?G!>!HOli:#X!!*,1q!8!!p&G+@jSJ3D
aTV;;!0I$C!$LY/!=m$Hi;MR6;"Xeh!O):V!,;-,!@?CphuURqp&G)Lq;;5pm/R.s`qn]q;=sni!O;F[
!G_]0!!+D#qVqUm"SMfqMtuB5+70%/%C5iS!(lh`!<JhfbQ)&E!!+:_qTJuC"8Dit!!%HCbQ&XM!!#so
liGZMo`,"8htcU>kVr28!*B!_!MTVg!!'J(liGrNmf3Ch!)NIL!Qu)J!!+1kq;;;/2"gnL;u,>PRK<*^
!3Q+U!RhGD!!#jlirRF;o`,"7fDXb.irS$pp&G(lq;VLG!VQKnYPR8[edLjF!(ct1!P&a6!!+(Uq9/l]
0D5AG9DQd6Mu`nYp](;cqTJuU$LRlp#.OHq!K$pN!!-Elq<S.-&G?)(O88,BDY=&2#hSq>!P&@,!;QTq
"g7^[!J:FG!!-9\q;;:l&,#u'M##s/C%_N-#gE/'!O)^p!!*8-qVqU1!VQKp!*eIYirR12p&G)Mq;VHi
p&G+!chcZ&Z39Rq!<o(kbQ2ngo`,"jbPB?_Z4?R.!.=^grlb@Lp&G*u])'VOTEFT^!Cu>MliH6.o`,!p
V"j9VPP+tW#f6B(!U)Q;!!+A(qWn3JquH9f!CY`?huVOho`,!pS+tnAN:m5P#e0Zg!SfU,!!+:oqVV@6
m/R/UhtuF7h)5*1q>^NuT(q=GNqNGR#eBfl!T,j0!!+=sqVqR;m/R/NaSX0^`\@&c!<S;VbQ*.d!!*>%
qTJu^1A1\K+2[lu!.sV=!<fn.liFBmo`,"6jnS0B6hUK\*p<Cd!Rq_T!!,ORqs4@MC[M0'"KqUZ!N?+m
!!+(mptu-:p&G+5h"oq0aUn.G!CGZ>huIBW!!*5,qVqUW!VHEn*8L>L!'p5X!?C"nirR@8p&G+\iVMR7
BC5a#".oA5!La&^!!+"Xpri_!r;cZo!?0&UbQ50_p&G+Ub50<^?1%[n%ESG5!UE;K!!%!5liGWGp&G(f
q<S*Yo`+u5qWn7K7IC-V%)2Vs!T-?<!!$d/huUt/p&G(bq;;7Do`+u/qVVD36LFgS%)Dc#!THQ?!!$j1
irRC5p&G(cq;VIIo`+u0qVqV96gapT$a'<M!R!\!!!$I'bQ?"u$haQ#6i"q+O7`JQA,=CMb<5.l!@Z7k
liF^)o`,"!_t`R!O9,%T!/p[>!,DB2qu?a!U&+*Vi$7Uh!@Gb_huU(ho`,"!\bP(`M#m;M!/11+!+kj(
!<S\chuV@Oo)SXf!@GkbirQLno`,"!]_LLfMZNMO!/C=0!+tp)!<SbeirRaUm/R/2ZM_oIU'UDl!XPdL
q9/kf!VQKnGkoP`>kS-u!fQp!!Q#oE!!+e)rp0[N<:g.k53Mb.!U3#G!!*GNqWn4J!&4*H!=?pFliG?8
li7&=bPpE#hGEhE!B]*4huVY"p&G+#_><'jh_+U&!=?O;huU_!q>g*e!A;[sirS+9oDenShtc:5i'R,;
!=HdAirS-lp&G+"_YW9n`Wb]/!@kYZbQ5jXp]16m!B/$pbQ5jJp&G+"YklQEb:<2c!=5k)bQ5!QlMq)M
hX'U@"n_ir!LrlN!RM;L!!51Cm/-,Me.)*O!?11uli<aE!!P@2i8CjCo`,!nPka/;`XMP@!B/^/huUq.
p&G+2h"oq0R/lOQ"Zb/oj0Ss^!!*+dpu;Cr%/'Z%2r=Dk!R(uG!!*tpqVqRFl2V&F^s(#s"98Gr!!*+T
pricG$haQ$1<978!OiI1!!*kWqTJqtkl:fUhr[5s!!+J3q!8!.q#L?n!.jt4!M9Ge!!#^gli:ne!!>X=
g-,'.!@?RshuIrn!!%?@huT/Gp&G(`ro!_4!,2<2m/R5WfA/X_!!+D(pu;?uo`+u>q;VLD!qlTo8bqBH
C$>U"5/G5uqZ-Hm!@#\]bQ)GO!!$s5bQ3S&p&G(Zq9/hFkl:ed<M9Wh!!&)TliH,lp&G*s`VJj#@J'U#
K)+a54QuhJ!E#6goDelHptu2),5)!;"M=Kf!*o0s!.4V$!oVuskl:ed;O[j^!!%lNirRjYp&G*r^A6dh
?1e0tIJMn'3p?VG!D87M"nVcpHhbec`#n[Q!<fFubQ(W8!!%!6bQ'K_!!!;s!!+>"q!8$P!rW,q!!"SG
liGuap&G*p]_^sqh\G;S!!r2s!?okchuT)Ep&G(Bq;;;')tj73!W]P&huV=Ak5YJfoDen9eG/&)QNHj\
!%[m*!S8=b!!*//qVqV.'^Ynt!!!8r!!+.Tpribp!qlTo-Mbjd_&;qH!<T"lbQ5Nmf`2#'q!8%G6hLEZ
G5:J)YOqkr*812T!P&Ef!!%??huVXuo`+u2q;;7MqZ-Kn!?08[huU%df`2#"pu;D55kP*WEr"_qW:^,k
)q"NB!O;q%!9O7]DtqNWau]1q!+u&N!13?Y!>rKGbQ4@@g&M3ti9]h,liFs+p&G*t^%q!p?1e0u7-aX8
!.rl(!?]kehuU=jp&G*tZh`MZ=S2Xp5i2@q!.<H"!?]qgirQapp&G*t[e\q`=nMaq6/h\#!.ObEhuEct
_YD=UVuu_n!=#=pbQ(K4!!,.'qTJqZg].EV!!JY`liHEXo`,"Ok5+EFhAu7h!.t(6!U<>3!!*4`ptu21
=nMar1tpmbhuV:Go`+u>qVVD28(mqD"HiK>!TI;U!!+t5qVqV-*;':3Ier(*iCMZ&!<[rKbQ5mao`,"G
`qmm[^_ueF!-.kZ!Qm^g!;HNp4QcG*!Q>QA!!&,VliF$ep&G*p_YWU"iY^AL!BJp0huUG!q#L?n!/^O0
!M9Jf!!*/2qVVD*(YSii3o9Yl!PT$9!!%rQirPhUp&G0r]AqrLirRgLg&M.1a8!jZWXSP#!.F[e!KdHW
!!*/"qTJuX($Yei!!*>6pZql]o`,")i;2d@lWWr]!?LJ%li=fS!!*>-pYZ*O!!)`n!>*fXhuV_8o`,"3
hYQ.1[FtT]#I*s_!*&Uk!>*lZirS.?p]19n!?C(pirHRB!!*:qpWNV1o`,"&_YVIWb>.^1!?'&VbQ+L/
!:'Uc1?J;t!Q>68!!$L(liH/^o`+trq<S*5g&M.,g&'_,huUFmo`+ttq;;;+'_MG+<r(YRI+eQ$0\lH`
!PS^0!!$@$ire$M!!)`n!*B!V!.NW%!@u1bbQ4^Ho`+tlq9/lY'(l5):AN*6EVBIo!!*+Tq<S.G;"Xeh
#eTp!!2/ub!<JhhliHE;g&M*R!.Xh&!SgBA!!*A1q;;7?o`,!nQhoV@h`]Zn!<IcIirS%3o`,!u[/At`
irGP@!!*+gqVqV94k]l:!He.]!Qde'!!*>!q9/hro`,!nMYbNtb;]D#g].?c[JK4j\-M[,!B93<liH?;
o`,",de`;2eJ7!Bq>^O+XSUiUY6X_#!ArU.huVXto`,"+a84]paqWM/!=l:/irQCio`,"Mhtl@6i'6l7
!>N]QirRC=f`2$^SbgP2T*Frg!ADOjbQ5jHo`,"*[f">ObfmR0qZ,IQ!?ftkliH6/oDelZq<S-n#k\/u
8*g$<!MfbP!;lft+3XT?!S]O)!!&/WhuU(go`,"\htl73RfV.A!?]VbirS!qoDerVj5^$s!OE()!!,OJ
qVqUJ!S@AQ*4c!k!QQtf!!%]JbQ4CBo`,"VbPKE_NW9+3!!,jVrTjQF!qcNo.,t'h!+5?u!0?sB!+Y$h
oDenag&9h0L'%#J!@HCnhuHsQ!!%iNhuI*7!!,aJrSmp7!r)cp!!+G"q;VH[oDelKq;VH^ec5_<`r4*^
H33a>!@#GWbQ(Q5!!7PlbkoTa<n76O!dak4!R2DQ!!*.aq<S.9%J9]%#1`S:!U:cl!:9ae!d+G"!Q,ZF
!!*.Zq;;;"%.sT$"j6]"!T"mK!!*.Ero4%!(&e4.!!*.\q;VM(%.sT$"jQo(!T>*N!!*.9rlbDK'D2>+
!e0sh!PJm9!<)s!"h=EQ!QlA3!!EM1m-.C>!!+M-q<S*5oDenWl2'`H^$l$`!!EM(i8%-"!!+Ftq;;7#
oDenTh>6%0Zd\sU#,q[ai(inE!@HLqirFQ#!!,7@qVqRae,TUUR*<]BoDen9_thLVEW,t4!!,%$qTJr7
df9IlcCkI7!!&5YliH#poDelPq<S*!pAj"L"!,=J"nVcpN;;B4eL:%i!/UI/!,:*dqZ$^=a.!8)!!&&T
irRa\oDelKq;VHidf9IgZASnY!!%NGbQH)5_BngS!.=Ud!+4.S!B;:q!!+V-q<S-W!VHEn'@QaD!TGU.
!7_&M2Bh\m!@ZInhuT;Jo`,"*a84]pegTGVo)JeL+nPa8.G+CU!M'8a!!*bUqVqV0.+/(r0core!$qW]
q9/l!!VHEn&[qP[!Q-2$!!*+]q<S.H2Y6tL9)IrWm-M7d_uKf=M##s0h)"['!(QeB!O)^i!8[\V!K-^5
!T5g,!!#ObirQFgaT25=!<ITDbQ5j=oDekVq9/l4"N19@.cgEl!MT_h!!&\fli:n?!!+M#q;;:B"S;Zo
R/,Y?B^GfO!!+M&q;VLG"S;ZoRebtDC!QeP!!+@aq9/ku"7uQnMYYHr?GlgE"f;%]!TZ'5!;c`s)Vb,T
!TkHA!!*4mq;;;+0_>>G):86<!S\Ud!7:cI"J5GL!S]@$!!*tdqVqV5*7b,Y!!*4_q9/lY/G&oC(;BXh
!QQ+s!!-!]q<S-O!;$6kCAI2sVuss<!D_GGhuK#5!!$U+huTGPqZ+b=!DhVKirGD:!!$X,irPhUh#QX=
!Ct9-bQ*Ch!!$:"bQ3h-`;foIc2I#-liH&poDems^A@0slW(k'!=Qg@huV@VoDems[//\]hbj+Jc2[kR
`qeWqfI6@l!=-(0irS.;f`:@=!=H..bQ5R+oDemrV#&:9b=]_R!<ITDliQO9!qZHn46ub0!Rqe%!!*+D
ptu11!qZHn38aSj!QbuR!6>-@!I+>!!K7*P!!,+>qVqV#'&WcP!!*+9pribf!qZHn1X#X=!OiWZ!!4\,
m/$&Li#hRk!<J\cli<$`!!+Osq;;;(*qTF5!L*E=!oW!k_uKffebS5+f,jPa!<JJ]irFks!8dbW-GTB#
!Q#fJ!!*+Tq9/hba8l/=!/((5!.aY@!@?V!liH9(_uKdcptu-to)Jb8!7Uf&!Sf?H!!%KCirFGt!!+@r
qVqV60C8bl!!%'7bQ)PP!!+4XqTJu].aJ+g!!+(\qWn7#'(c/)!J:.6!Nu^G!!+"PqVVCb&buG)!!*+J
q;;:N"iLBA)o2=1!PB$:!!*+Lq;VLS"nVfB!!*q=qTJu>&+fi&!HIqZ!LEu@!:Bgf1ZSE"!UE/F!!*Yb
qWn7J<Pe_:0\?6\"5c?D!;-<m&'t+1!T$\j!!+h.r8Rh;61Y'W&(:=7!T?rQ!6G3A/B%J1!R!Oq!!*SC
qTJu_9&'F/!!--_rTjQJ!V69kD#*Ducj@Mg!`Ib1rnmg8!V69kBDLHd`X0H]!E7hQirP,?o)Jc(q;VLs
$,HTB9#ghR!Ib(@!!$@$bQ5'VirIs:!<[lOliGKRo)Je)bPCK)G/OCZ!!*1Irnmgt)Y3q0'#=>$!-#^R
!<[]JirR7@o)Je(_uA]oirF,8!!*.=rlbDN)"R_.&?koR!+tHqf)PpXVsN_Lnc/Z(q<S.8*6S?T!!ELt
i87E&!!$O)huV+A^AnB@T]>$0oDepm!+kud!RVk$!!ELfbf`WL!!$3ubQ5?nn,Uc7!uJnQ#4hfq$dne:
!J^^(!:9ag(:p%?o)Je!a8+WoJ-!@a!uASB"oA;q!!*JLq;VL-!PSO9'WR2to)Jdu[JA#IFTM4:`rH,f
,Otg8B^>N]!TkNW!9F1],pDgZ!Fjs_huVOR]DqsY,4Y^7AE*IG!Snj1!!+8bnc/\obPKE``Z4pWpAhc)
!>EZPli<I'!8%8P'#=>$!0O\ip&G++_ti<mPH+Za&?koR!/1.JZN'uDq<S.A0\ZTT!!$a/huVC]]`@L$
!,MDj!SK*+!!$F&bQ>[3!3H5%)qk&R!LNrJ!6Y?C):&'9!K[B$!9jIa)U\B@!KmMc!!*nKrQP5a!J:HU
!!*+Rq<S.E-KkHK!!*+Lq;;;-,g$,I!!*+Mq;VM3,cgtH!HS"[!QH:a!!+V2q<S-A!Ug$&!!+P$q;;:.
!RUo&!!+S(q;VL2!ODe&!!+Fcq9/kc!Nc>&"fV7`!S\mm!4W"0"JGSK!RN%B!7h,N"JY_P!Ri:(!;$6l
"HrT)!PTYW!!-'_q<S*/qZ*l$!DqSIhuIrV!7(WG;;_30!-c0Xm/R/Yana-\CTIL:&^U:>!6kKWX8i84
`VJEm_\2#1aT)>Qa8+`r`Y6>lk5YMmZh_fGZ4X2=!<RrRm/62Nl!(4h!<R`GhuVY7l2\^%!<RcHirS(>
bQ-T%!<R<;bQ5j]XoJP(!(>oDliFHtX8i8df_OG+Ws/"n]Dqsug\Kk1Xp*8Sg&M.7`VI^YS-?;#q#CF)
anb9(jZ9IC!=Za=huVLipAjpf^]4BD_>3*lgc3U[h>dQaY5-9B`\Oe!r;Zj#N;2`?KEA7U!<\&NhuS9.
oDlH&!<\)OirOW2ec=>&!<RQAbQ2_c\,c4&!>O#YliGEEX8i87aSF`p`=VkGZN("?bPC0!`t7#+d/X1[
[e\,JZOX\LmJm8tlhg#Lk=hlU!FF[\hu_\)!36)#?fLtC!T-K.!6G3A<m1Ba!Q[UG!9X=_"ge*m!Lj7m
!!<A(i8FRl!L!Yd!!*5(qr7^B"R,p'!!*4kqof(q"Npf&!!+V)rTjR5(T[W8!!+LprSR^s(8q36.F\7U
!Ql2H!4i.2-,0?%!O`]i!8%8P!Gqc%!TcqZ!;6Bn!GDDi!SKr?!!*+6ro4%78+ckg!!*+,rlbD_5h?"_
!!NV;m-KQ1\H)$t"UD6hi.;$-!!NV4j5YdoquEbt"U:UCb]X'E!6>-B0\sJS^B!Br""r$0%\s(+0%IE2
%\s(,._hehj8csq!Gs[4!8[\VBJHCbqu?b3184aL?7kFB\GuYI1s>sO!!-afXoS+p!GO<`!!-CXnGr:`
J,~>

%%EndBinary
grestore
np
290.1 181.88 mo
290.1 172.59 297.63 165.06 306.92 165.06 cv
442.84 165.06 li
452.13 165.06 459.66 172.59 459.66 181.88 cv
459.66 249.16 li
459.66 258.45 452.13 265.98 442.84 265.98 cv
306.92 265.98 li
297.63 265.98 290.1 258.45 290.1 249.16 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
3 lw
[3 3 ] 0 dsh
290.1 181.88 mo
290.1 172.59 297.63 165.06 306.92 165.06 cv
442.84 165.06 li
452.13 165.06 459.66 172.59 459.66 181.88 cv
459.66 249.16 li
459.66 258.45 452.13 265.98 442.84 265.98 cv
306.92 265.98 li
297.63 265.98 290.1 258.45 290.1 249.16 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
336.82 191.9 mo
(\000P\000U\000X\000E\000\\)
[23.039 9.92178 14.8948 14.6067 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
310.78 223.61 mo
(\000$\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q)
[16.2719 14.664 14.592 6.14395 6.09595 12.1681 13.92 9.09595 6.09595 14.2559 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
336.34 255.29 mo
(\000\013\000\021)
[10.5599 0 ]xsh
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
355.3 255.29 mo
(\000P\000U\000E)
[23.016 9.95987 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
402.94 255.29 mo
(\000\014)sh
557.64 289.52 mo
557.64 282.32 563.48 276.48 570.68 276.48 cv
714.28 276.48 li
721.48 276.48 727.32 282.32 727.32 289.52 cv
727.32 341.68 li
727.32 348.88 721.48 354.72 714.28 354.72 cv
570.68 354.72 li
563.48 354.72 557.64 348.88 557.64 341.68 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
[] 0 dsh
557.64 289.52 mo
557.64 282.32 563.48 276.48 570.68 276.48 cv
714.28 276.48 li
721.48 276.48 727.32 282.32 727.32 289.52 cv
727.32 341.68 li
727.32 348.88 721.48 354.72 714.28 354.72 cv
570.68 354.72 li
563.48 354.72 557.64 348.88 557.64 341.68 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
601.58 336.77 mo
(\0005\000L\000W\000H\0009\0000)
[16.4084 6.10199 9.10504 13.8618 16.4084 0 ]xsh
584.04 288.04 mo
584.04 285.43 586.15 283.32 588.76 283.32 cv
696.2 283.32 li
698.81 283.32 700.92 285.43 700.92 288.04 cv
700.92 306.92 li
700.92 309.53 698.81 311.64 696.2 311.64 cv
588.76 311.64 li
586.15 311.64 584.04 309.53 584.04 306.92 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
ef
.96 lw
0 lj
584.04 288.04 mo
584.04 285.43 586.15 283.32 588.76 283.32 cv
696.2 283.32 li
698.81 283.32 700.92 285.43 700.92 288.04 cv
700.92 306.92 li
700.92 309.53 698.81 311.64 696.2 311.64 cv
588.76 311.64 li
586.15 311.64 584.04 309.53 584.04 306.92 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.2 0 0 -22.2 0 0 ]msf
605.59 303.12 mo
(\000/\000R\000D\000G\000H\000U)
[12.3655 13.1867 12.876 13.4976 12.8093 0 ]xsh
288 361.44 mo
288 357.4 291.28 354.12 295.32 354.12 cv
450.36 354.12 li
454.4 354.12 457.68 357.4 457.68 361.44 cv
457.68 390.72 li
457.68 394.76 454.4 398.04 450.36 398.04 cv
295.32 398.04 li
291.28 398.04 288 394.76 288 390.72 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
1 lj
288 361.44 mo
288 357.4 291.28 354.12 295.32 354.12 cv
450.36 354.12 li
454.4 354.12 457.68 357.4 457.68 361.44 cv
457.68 390.72 li
457.68 394.76 454.4 398.04 450.36 398.04 cv
295.32 398.04 li
291.28 398.04 288 394.76 288 390.72 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
347.02 381.41 mo
(\0007\000D\000V\000N)
[12.48 13.92 11.952 0 ]xsh
288 289.42 mo
288 282.27 293.79 276.48 300.94 276.48 cv
444.74 276.48 li
451.89 276.48 457.68 282.27 457.68 289.42 cv
457.68 341.18 li
457.68 348.33 451.89 354.12 444.74 354.12 cv
300.94 354.12 li
293.79 354.12 288 348.33 288 341.18 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
288 289.42 mo
288 282.27 293.79 276.48 300.94 276.48 cv
444.74 276.48 li
451.89 276.48 457.68 282.27 457.68 289.42 cv
457.68 341.18 li
457.68 348.33 451.89 354.12 444.74 354.12 cv
300.94 354.12 li
293.79 354.12 288 348.33 288 341.18 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
331.94 336.48 mo
(\0005\000L\000W\000H\0009\0000)
[16.392 6.09595 9.16794 13.8479 16.392 0 ]xsh
315.6 288.44 mo
315.6 285.68 317.84 283.44 320.6 283.44 cv
425.08 283.44 li
427.84 283.44 430.08 285.68 430.08 288.44 cv
430.08 308.44 li
430.08 311.2 427.84 313.44 425.08 313.44 cv
320.6 313.44 li
317.84 313.44 315.6 311.2 315.6 308.44 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
ef
.96 lw
0 lj
315.6 288.44 mo
315.6 285.68 317.84 283.44 320.6 283.44 cv
425.08 283.44 li
427.84 283.44 430.08 285.68 430.08 288.44 cv
430.08 308.44 li
430.08 311.2 427.84 313.44 425.08 313.44 cv
320.6 313.44 li
317.84 313.44 315.6 311.2 315.6 308.44 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.224 0 0 -22.224 0 0 ]msf
335.9 304.03 mo
(\000/\000R\000D\000G\000H\000U)
[12.3789 13.2009 12.8233 13.5122 12.8232 0 ]xsh
18.36 289.42 mo
18.36 282.27 24.154 276.48 31.3 276.48 cv
175.1 276.48 li
182.25 276.48 188.04 282.27 188.04 289.42 cv
188.04 341.18 li
188.04 348.33 182.25 354.12 175.1 354.12 cv
31.3 354.12 li
24.154 354.12 18.36 348.33 18.36 341.18 cv
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
1 lj
18.36 289.42 mo
18.36 282.27 24.154 276.48 31.3 276.48 cv
175.1 276.48 li
182.25 276.48 188.04 282.27 188.04 289.42 cv
188.04 341.18 li
188.04 348.33 182.25 354.12 175.1 354.12 cv
31.3 354.12 li
24.154 354.12 18.36 348.33 18.36 341.18 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
62.28 336.48 mo
(\0005\000L\000W\000H\0009\0000)
[16.392 6.09595 9.16795 13.8479 16.392 0 ]xsh
43.8 288.64 mo
43.8 286.03 45.913 283.92 48.52 283.92 cv
155.96 283.92 li
158.57 283.92 160.68 286.03 160.68 288.64 cv
160.68 307.52 li
160.68 310.13 158.57 312.24 155.96 312.24 cv
48.52 312.24 li
45.913 312.24 43.8 310.13 43.8 307.52 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
ef
.96 lw
0 lj
43.8 288.64 mo
43.8 286.03 45.913 283.92 48.52 283.92 cv
155.96 283.92 li
158.57 283.92 160.68 286.03 160.68 288.64 cv
160.68 307.52 li
160.68 310.13 158.57 312.24 155.96 312.24 cv
48.52 312.24 li
45.913 312.24 43.8 310.13 43.8 307.52 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.2 0 0 -22.2 0 0 ]msf
65.28 303.72 mo
(\000/\000R\000D\000G\000H\000U)
[12.3656 13.1867 12.876 13.4976 12.8093 0 ]xsh
16.44 405.44 mo
16.44 402.41 18.894 399.96 21.92 399.96 cv
723.88 399.96 li
726.91 399.96 729.36 402.41 729.36 405.44 cv
729.36 427.36 li
729.36 430.39 726.91 432.84 723.88 432.84 cv
21.92 432.84 li
18.894 432.84 16.44 430.39 16.44 427.36 cv
cp
1 /0 /CSD get_res sepcs
.502 sep
ef
1 lw
1 lj
16.44 405.44 mo
16.44 402.41 18.894 399.96 21.92 399.96 cv
723.88 399.96 li
726.91 399.96 729.36 402.41 729.36 405.44 cv
729.36 427.36 li
729.36 430.39 726.91 432.84 723.88 432.84 cv
21.92 432.84 li
18.894 432.84 16.44 430.39 16.44 427.36 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
93 <001C60D8A8C9B7A1575E77F973387E00CB2B16889836529EA30078B080CA
5A59A41801F44B7C8EEAA52367> |
!
end
end end
%ADOEndSubsetFont
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
210.6 421.8 mo
(\0006\000\\\000Q\000F\000K\000U\000R\000Q\000L\000]\000D\000W\000L\000R\000Q)
[14.8799 13.5839 14.8319 12.1681 14.8319 9.91187 14.3279 14.8319 6.14392 12.1439 13.92 9.09595 
6.09595 14.2559 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
404.66 421.8 mo
(\0000\000H\000F\000K\000D\000Q\000L\000V\000P)
[19.9438 13.7759 12.1681 14.8319 13.92 14.8319 6.14392 11.952 0 ]xsh
467.88 222.84 mo
518.88 222.84 li
518.88 9.84003 li
467.88 9.84003 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-9.768e-7 22.2 22.2 9.768e-7 0 0 ]msf
496.54 16.99 mo
(\000/\000R\000D\000G\000\003\000E\000\\\000\003)
[12.3655 13.1867 12.876 13.6086 7.43689 13.5642 12.5651 0 ]ysh
grestore
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-9.768e-7 22.2 22.2 9.768e-7 0 0 ]msf
496.54 109.9 mo
(\000%\000O\000X\000H\000W\000R\000R\000W\000K)
[14.9407 5.63873 13.6307 12.8093 8.41376 13.1866 13.1867 8.41376 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-6.1776e-7 14.04 14.04 6.1776e-7 0 0 ]msf
476.86 49.3 mo
(\000\013\000=\0000\0002\000'\000\(\0000\000\003\0003\000U\000R\000W\000R\000F\000R\000O\000\014)
[6.1214 9.14001 11.6251 10.6984 10.5159 8.67667 11.6671 4.52084 8.36774 5.79843 8.26947 5.32114 
8.24139 7.11835 8.24139 3.56613 0 ]ysh
739.32 221.4 mo
790.44 221.4 li
790.44 8.28003 li
739.32 8.28003 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-9.768e-7 22.2 22.2 9.768e-7 0 0 ]msf
768.05 15.53 mo
(\000/\000R\000D\000G\000\003\000E\000\\\000\003)
[12.3655 13.1867 12.876 13.4976 7.48132 13.4976 12.6317 0 ]ysh
grestore
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-9.768e-7 22.2 22.2 9.768e-7 0 0 ]msf
768.05 108.43 mo
(\000%\000O\000X\000H\000W\000R\000R\000W\000K)
[14.9407 5.63873 13.6307 12.8093 8.41376 13.1867 13.1866 8.41376 0 ]ysh
1 /0 /CSD get_res sepcs
1 sep
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-6.1776e-7 14.04 14.04 6.1776e-7 0 0 ]msf
748.37 47.81 mo
(\000\013\000=\0000\0002\000'\000\(\0000\000\003\0003\000U\000R\000W\000R\000F\000R\000O\000\014)
[6.1214 9.14001 11.6251 10.6984 10.5159 8.67667 11.6671 4.52084 8.36774 5.79843 8.26947 5.32114 
8.24139 7.11835 8.24139 3.56613 0 ]ysh
149.4 301.44 mo
213.36 301.44 li
213.36 266.16 li
149.4 266.16 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
.96 lw
0 lj
149.4 301.44 mo
213.36 301.44 li
213.36 266.16 li
149.4 266.16 li
cp
1 /0 /CSD get_res sepcs
.949 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold)
%%Title: (XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 2037 1068} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
22 <001C60D8A8C9B658EF05E90B30EE265535AABF6C0CEA01919E258A97A53A
4A56C5A12024948A33C743ED34BFCD2DF9672090EDCBA327450C0E06315349C6
95C05E44FCE7C30DDD3EA14F564F7EA20D470640124774EC558F7FE6DE5B0AFC
F4AA62BBE41F099DB71BD917D1B8F2D839A3A60AC0E0CA9E2EE6885D6235F7FF
5A7CC480C654ED10AA029A92CED1498ADEC6C16397ED942EDE4C1BBC449269F1
2DD1DAF953289AB5> |
17 <001C60D8A8C9B811DA5D039156669AF538BFFCA69E2509A19E> |
20 <001C60D8A8C9B658EF0ACF8BC91133E33A1999D5DF80B6C4D568101AF824
308136F1FD4D0FE89489EC0339A67AE4423E820C56DCE1FE> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H /Identity-H 0 [/XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H findfont [22.2 0 0 -22.2 0 0 ]msf
162.6 289.44 mo
(\000\026\000\021\000\024)
[15 7.674 0 ]xsh
14.76 527.04 mo
78.84 527.04 li
78.84 491.76 li
14.76 491.76 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
14.76 527.04 mo
78.84 527.04 li
78.84 491.76 li
14.76 491.76 li
cp
1 /0 /CSD get_res sepcs
.949 sep
@
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold 1 GetGlyphDirectory
21 <001C60D8A8C9B658EF0BF175D6A5466C1B31E5D2E13C98275CCDEDAD1718
42E508392440A26515019810804FBC3076D0BF6C02D6A8909DA70C1EDF945694
D808472EAAED807DD9CA80CC5BE55B3B81E8FBC174A6AA33415E192B65ADEA84
7942C481C7D42470> |
!
end
end end
%ADOEndSubsetFont
/XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H findfont [22.2 0 0 -22.2 0 0 ]msf
27.96 515.016 mo
(\000\026\000\021\000\025)
[15 7.674 0 ]xsh
grestore
9.36 419.4 mo
73.44 419.4 li
73.44 384.12 li
9.36 384.12 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
9.36 419.4 mo
73.44 419.4 li
73.44 384.12 li
9.36 384.12 li
cp
1 /0 /CSD get_res sepcs
.949 sep
@
gsave
0 595.2 mo
960 595.2 li
960 0 li
0 0 li
0 595.2 li
eclp
1 /0 /CSD get_res sepcs
1 sep
/XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H findfont [22.224 0 0 -22.224 0 0 ]msf
22.584 407.38 mo
(\000\026\000\021\000\026)
[15.0457 7.64506 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H uf
/XCRBIS+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold /CIDFont ur
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBIR+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 270 x(Figure)e(9:)33 b(Detailed)22 b(system)g(mo)r(del)g
(of)g(the)f(prop)r(osed)h(framew)n(ork)-152 2599 y(di\036cult)k(to)g
(use)f(mrub)n(y)g(exclusiv)n(ely)-6 b(.)-77 2686 y(Using)30
b(Rub)n(y)f(on)h(em)n(b)r(edded)f(devices)i(impro)n(v)n(es)f(pro)r
(ductivit)n(y)-152 2773 y(and)20 b(main)n(tainabilit)n(y)h(b)r(ecause)g
(it)f(is)h(easy)g(to)f(use)g(and)g(read.)33 b(Ho)n(w-)-152
2860 y(ev)n(er,)25 b(some)f(C)h(language)g(co)r(des)g(are)g(required)e
(to)h(manipulate)h(ac-)-152 2947 y(tuators)k(and)f(sensors)h(and)g
(ensure)f(that)g(critical)i(sections)f(of)g(the)-152
3035 y(co)r(de)d(run)f(quic)n(kly)-6 b(.)-77 3122 y(Figure)19
b(8)f(illustrates)h(an)f(mrub)n(y-TECS)f(bridge)h(used)g(to)g(con)n
(trol)-152 3209 y(a)23 b(motor.)34 b(The)22 b(left)g(side)h(of)g
(BridgeMotor)g(b)r(elongs)g(to)g(the)e(mrub)n(y)-152
3296 y(program.)48 b(The)30 b(righ)n(t)g(side)g(of)h(BridgeMotor)g(b)r
(elongs)g(to)f(TECS)-152 3383 y(comp)r(onen)n(t.)-77
3470 y(The)39 b(mrub)n(y-TECS)g(bridge)g(generates)h(a)g
Fi(celltype)p Fp(,)j(whic)n(h)c(is)-152 3558 y(called)h(from)g(the)e
(mrub)n(y)g(co)r(de,)k(and)d(an)g(mrub)n(y)e(class,)44
b(whic)n(h)-152 3645 y(corresp)r(onds)38 b(to)f(a)g(dev)n(elop)r(er-sp)
r(eci\034ed)g(TECS)h(comp)r(onen)n(t)f(to)-152 3732 y(in)n(v)n(ok)n(e)
25 b(a)h(C)g(function)g(from)g(the)g(mrub)n(y)e(program.)-77
3819 y(The)i(generated)g(mrub)n(y-TECS)f(bridge)h(supp)r(orts)g
(registration)-152 3906 y(of)35 b(classes)g(and)e(metho)r(ds)h(for)g
(mrub)n(y)-6 b(.)57 b(Metho)r(ds)34 b(in)g(an)f(mrub)n(y)-152
3993 y(class)h(are)g(de\034ned)d(b)n(y)h(generation)i(co)r(des)f(for)h
(an)f(mrub)n(y-TECS)-152 4081 y(bridge,)25 b(suc)n(h)f(as)h(setP)n(o)n
(w)n(er)h(and)d(stop.)35 b(Th)n(us,)24 b(when)h(a)f(metho)r(d)g(is)-152
4168 y(called)29 b(in)f(an)g(mrub)n(y)f(program,)j(the)d(mrub)n(y-TECS)
g(bridge)h(calls)-152 4255 y(the)c(function)g(de\034ned)f(in)h(the)f
(TECS)i(comp)r(onen)n(t)f(suc)n(h)g(as)g(a)g(Mo-)-152
4342 y(tor)i Fi(cell)p Fp(.)-152 4572 y Fq(3.)100 b(DESIGN)25
b(AND)f(IMPLEMENT)-9 b(A)g(TION)-77 4680 y Fp(Figure)22
b(9)g(sho)n(ws)h(the)e(detailed)i(system)e(mo)r(del)i(of)f(the)g(prop)r
(osed)-152 4767 y(framew)n(ork.)64 b(Eac)n(h)36 b(mrub)n(y)d
(application)k(b)n(yteco)r(de)d(transferred)-152 4855
y(from)20 b(the)f(host)g(to)h(the)e(target)i(device)f(is)h(receiv)n(ed)
f(b)n(y)f(the)h(loader)h(in)-152 4942 y(the)d(Rite)-6
b(VM.)17 b(The)g(Rite)-6 b(VM)17 b(reads)h(the)f(transferred)g(b)n
(yteco)r(de)g(and)-152 5029 y(executes)32 b(it)g(with)h(libraries.)55
b(The)32 b(mrub)n(y)f(applications)i(run)f(si-)-152 5116
y(m)n(ultaneously)27 b(due)e(to)i(sync)n(hronized)f(pro)r(cessing.)38
b(The)26 b(Rite)-6 b(VM)-152 5203 y(sc)n(heduler)22 b(switc)n(hes)i
(Rite)-6 b(VM)21 b(tasks)i(b)r(ecause)g(m)n(ultiple)f(tasks)h(can)-152
5290 y(run)33 b(concurren)n(tly)-6 b(.)57 b(The)33 b(follo)n(wing)j
(subsection)e(explains)g(these)-152 5378 y(functionalities.)2040
204 y @beginspecial 0 @llx 0 @lly 960 @urx 168 @ury 2437
@rwi @clip @setspecial
%%BeginDocument: figure/component_bluetooth.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: component_bluetooth.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:13:04
%%BoundingBox: 0 0 960 168
%%HiResBoundingBox: 0 0 960 167.2800
%%CropBox: 0 0 960 167.2800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-03-20T03:17:38+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-03-20T03:17:38+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -167.28 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 167.28 li
960 167.28 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 167.28 mo
960 167.28 li
960 -1.52588e-5 li
0 -1.52588e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
325.56 130.44 mo
634.92 130.44 li
634.92 17.28 li
325.56 17.28 li
cp
ef
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
325.56 130.44 mo
634.92 130.44 li
634.92 17.28 li
325.56 17.28 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 12 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
37 <001C60D8A8C9B654A4F8155C331190650E5C458B09F0ADB770BE1877FCB8
910F579D71D9DF3F0C0573230C61F43F4845DBF05498F3910AD33494AEBFA7C3
A18F78E3EEC2DE8F18C55CF37B718E4D70A33E560C66441849273B64230A55CA
C1E945C71BD5257BD7A0BE53CBD725F3A5E119E48DAD9C4DFBD0C2A0AEC05216
5D957E9D8F11E9FD44B22227449941F7CC5624A755FACF677CEF96F2E0E7B9ED
A64A4EABA3CAE4277CB2A168CE5B182DCE2112DBBC> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
75 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD73F
D89BDC334BB07BF4F917382A46FB6D56C6B324D7C5BF3C1737059B4BD3BA89BE
96A60CAFE7B49CB909CA56114770> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
329.74 55.97 mo
(\000W\0005\000L\000W\000H\0009\0000\000%\000O\000X\000H\000W\000R\000R\000W\000K)
[9.10504 16.4084 6.10205 9.15308 13.8618 16.4084 19.8917 16.1682 6.10205 14.8948 13.8617 9.10504 
14.2701 14.2701 9.10504 0 ]xsh
%ADOBeginSubsetFont: XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
20 <001C60D8A8C9B6605B97E3474607F65DA83467005204B5F48E11F4969E87
21827C7B7F47B5579624C0429CB1D21355B681041D4720> |
!
end
end end
%ADOEndSubsetFont
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
351.58 95.616 mo
(\0005\000L\000W\000H\0009\0000\000%\000O\000X\000H\000W\000R\000R\000W\000K\000\024)
[21.8997 8.1442 12.1522 18.4046 21.8997 26.645 21.5792 8.1442 19.8154 18.5008 12.056 19.0458 
19.0458 12.1522 19.8154 0 ]xsh
719.52 128.88 mo
951.72 128.88 li
951.72 18.84 li
719.52 18.84 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
719.52 128.88 mo
951.72 128.88 li
951.72 18.84 li
719.52 18.84 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
51 <001C60D8A8C9B7C7F3AB8C913496B09857977C9DC6242A9162060173AC59
9393DA1940FF4DBBBB7DC58141AB33AD646160390F69558CE684F038371A8CA4
BBDE854FF6E871389797481AE0511B0909CE7DDDBB9990A8EC8C41B5BDE134> |
!
end
end end
%ADOEndSubsetFont
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
723.67 57.53 mo
(\000W\0006\000H\000U\000L\000D\000O\0003\000R\000U\000W)
[9.09595 15.2399 13.8479 9.91187 6.09595 13.92 6.14398 13.6798 14.2559 10.3198 0 ]xsh
gsave
1.4305e-5 167.28 mo
960 167.28 li
960 0 li
1.4305e-5 0 li
cp
eclp
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
750.67 97.152 mo
(\0006\000H\000U\000L\000D\000O\0003\000R\000U\000W\000\024)
[20.3605 18.4046 13.2422 8.14417 18.5972 8.14423 18.3404 19.0458 13.6911 12.1522 0 ]xsh
grestore
.72 lw
1 lj
634.92 73.92 mo
719.49 73.924 li
@
19.68 128.88 mo
241.08 128.88 li
241.08 18.84 li
19.68 18.84 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
0 lj
8 ml
19.68 128.88 mo
241.08 128.88 li
241.08 18.84 li
19.68 18.84 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
gsave
1.4305e-5 167.28 mo
960 167.28 li
960 0 li
1.4305e-5 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
78 <001C60D8A8C9B794D33B340B990850C065E40D166F6B8A65A7F0F8858ECE
050176CE5B3D54865610F2C7BA0E6A48EB238D93222848> |
!
end
end end
%ADOEndSubsetFont
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
23.784 57.53 mo
(\000W\0007\000D\000V\000N)
[9.09595 12.504 13.92 11.952 0 ]xsh
grestore
gsave
1.4305e-5 167.28 mo
960 167.28 li
960 0 li
1.4305e-5 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
end end
%ADOEndSubsetFont
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
37.344 97.152 mo
(\0000\000U\000X\000E\000\\\0007\000D\000V\000N\000\024)
[26.645 13.2422 19.8154 19.2705 18.148 16.6413 18.5972 15.9679 17.6671 0 ]xsh
grestore
.72 lw
1 lj
241.08 73.924 mo
325.65 73.92 li
@
327.12 96.72 mo
350.76 77.64 li
327.12 58.56 li
cp
ef
1 lw
327.12 96.72 mo
350.76 77.64 li
327.12 58.56 li
cp
@
719.52 96.72 mo
746.76 77.34 li
719.52 57.96 li
cp
ef
719.52 96.72 mo
746.76 77.34 li
719.52 57.96 li
cp
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBJI+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 269 x(Figure)43 b(10:)70 b(Comp)r(onen)n(t)43
b(diagram)g(of)h(Blueto)r(oth)f(loader)h(for)2040 560
y(mrub)n(y)24 b(b)n(yteco)r(de)2040 830 y Fq(3.1)99 b(Bluetooth)26
b(Loader)g(f)n(or)f(mruby)h(Bytecode)2115 938 y Fp(This)c(section)h
(describ)r(es)f(the)g(prop)r(osed)g(additional)g(functional-)2040
1025 y(it)n(y)f(of)i(mrub)n(y)e(on)g(TECS,)i(i.e.,)h(the)e(Blueto)r
(oth)g(loader,)i(for)f(mrub)n(y)2040 1113 y(b)n(yteco)r(de.)2358
1081 y Ff(1)2453 1113 y Fp(In)34 b(the)g(curren)n(t)g(system,)j(the)d
(platform)i(including)2040 1200 y(mrub)n(y)22 b(b)n(yteco)r(des)g(is)h
(sa)n(v)n(ed)g(on)g(a)g(storage/R)n(OM)h(device.)33 b(Dev)n(el-)2040
1287 y(op)r(ers)27 b(m)n(ust)e(rewrite)i(the)e(storage/R)n(OM)i(device)
f(ev)n(ery)f(time)h(the)2040 1374 y(programs)c(are)f(mo)r(di\034ed.)32
b(In)20 b(addition,)i(the)e(R)-6 b(TOS)19 b(on)i(the)f(target)2040
1461 y(device)28 b(needs)f(to)h(b)r(e)g(restarted.)42
b(The)28 b(rep)r(etition)g(hinders)f(dev)n(el-)2040 1548
y(opmen)n(t)19 b(e\036ciency)-6 b(.)32 b(The)19 b(Blueto)r(oth)h
(loader)g(for)f(mrub)n(y)f(b)n(yteco)r(de)2040 1636 y(decreases)24
b(dev)n(elop)r(er)g(burden)e(b)r(ecause)h(dev)n(elop)r(ers)h(only)f(ha)
n(v)n(e)f(to)2040 1723 y(connect)i(the)g(storage/R)n(OM)i(device)e(and)
f(start)i(the)f(R)-6 b(TOS)23 b(once.)2115 1810 y(mrub)n(y)16
b(programs)i(consist)g(of)g(an)f(mrub)n(y)f(application)i(and)e(mrub)n
(y)2040 1897 y(libraries.)42 b(An)27 b(mrub)n(y)f(application)j(is)f
(the)f(main)h(program)h(co)r(de,)2040 1984 y(mrub)n(y)18
b(libraries)k(de\034ne)d(the)g(functions)h(for)g(the)g(application,)i
(suc)n(h)2040 2071 y(as)33 b(Rub)n(y)e(classes.)57 b(The)33
b(mrub)n(y)e(b)n(yteco)r(des)i(including)f(b)r(oth)h(an)2040
2159 y(mrub)n(y)f(application)i(and)f(mrub)n(y)f(libraries)j(can)f(b)r
(e)f(transferred)2040 2246 y(and)i(executed)g(on)h(the)f(target)h
(device.)64 b(Ho)n(w)n(ev)n(er,)38 b(this)e(is)g(also)2040
2333 y(w)n(asteful)28 b(in)f(terms)f(of)i(b)n(yteco)r(de)e(size)h(and)f
(the)h(time)f(required)g(to)2040 2420 y(transfer)k(the)g(b)n(yteco)r
(des,)g(b)r(ecause)g(the)f(libraries)i(are)f(not)g(mo)r(di-)2040
2507 y(\034ed)d(frequen)n(tly)-6 b(.)39 b(With)28 b(the)f(prop)r(osed)h
(framew)n(ork,)h(only)f(mrub)n(y)2040 2594 y(applications)20
b(are)f(transferred,)i(and)d(the)g(mrub)n(y)f(libraries)j(are)f(pre-)
2040 2682 y(serv)n(ed)k(on)h(the)f(storage/R)n(OM)i(device)e(b)r
(eforehand.)34 b(As)23 b(a)h(result,)2040 2769 y(Rite)-6
b(VMs)27 b(can)g(share)h(mrub)n(y)e(libraries.)40 b(In)27
b(addition,)h(a)f(Rite)-6 b(VM)2040 2856 y(can)20 b(use)f(its)h(o)n(wn)
g(library)-6 b(,)21 b(whic)n(h)e(other)h(Rite)-6 b(VMs)19
b(should)g(not)g(use.)2115 2943 y(In)d(the)h(prop)r(osed)g(framew)n
(ork,)k(a)c(platform)h(that)f(includes)g(Rite)-6 b(VMs)2040
3030 y(and)18 b(an)g(mrub)n(y)e(library)i(is)h(\034rst)f(compiled)g
(and)g(copied)g(to)g(the)f(stor-)2040 3118 y(age/R)n(OM)28
b(device.)38 b(On)26 b(the)h(host,)h(the)e(mrub)n(y)g(application)i
(pro-)2040 3205 y(grams)23 b(\(.rb)f(\034les\))g(are)g(edited)g(and)g
(compiled)g(to)g(b)n(yteco)r(des)g(\(.mrb)2040 3292 y(\034les\))31
b(b)n(y)e(an)i(mrub)n(y)e(compiler.)49 b(The)31 b(generated)g(b)n
(yteco)r(des)f(are)2040 3379 y(transferred)21 b(from)h(the)e(host)h(to)
g(the)f(target)h(device)g(via)g(Blueto)r(oth.)2040 3466
y(This)28 b(sa)n(v)n(es)f(time)g(since)g(Blueto)r(oth)g(pairing)h(can)f
(b)r(e)g(a)n(v)n(oided)f(b)r(e-)2040 3553 y(cause)g(the)g(loader)g(can)
g(load)g(the)f(b)n(yteco)r(de)h(con)n(tin)n(uously)-6
b(.)2063 3707 y Fj(3.1.1)90 b(RiteVM)22 b(Component)f(with)i(Bluetooth)
f(Loader)e(for)2337 3794 y(mruby)h(Bytecode)2115 3902
y Fp(The)i(prop)r(osed)h(framew)n(ork)h(pro)n(vides)e(a)h(Rite)-6
b(VM)22 b(with)i(a)g(Blue-)2040 3989 y(to)r(oth)38 b(loader)g(for)g
(mrub)n(y)f(b)n(yteco)r(de)f(as)i(a)g(TECS)g(comp)r(onen)n(t.)2040
4076 y(This)30 b(comp)r(onen)n(t)e(is)i(an)f(extension)f(of)i(the)f
(Rite)-6 b(VM)28 b(comp)r(onen)n(t)2040 4163 y(describ)r(ed)k(in)g
([11].)54 b(It)31 b(receiv)n(es)i(b)n(yteco)r(des)e(via)h(Blueto)r(oth)
h(and)2040 4251 y(manages)18 b(the)f(Rite)-6 b(VM)17
b(con\034guration,)i(suc)n(h)e(as)h(generating)g(mrub)n(y)2040
4338 y(library)23 b(b)n(yteco)r(des)f(automatically)-6
b(.)35 b(This)23 b(generated)g(b)n(yteco)r(de)f(is)2040
4425 y(prepared)e(b)r(eforehand)h(on)f(the)g(storage/R)n(OM)i(device)e
(and)g(di\033ers)2040 4512 y(from)27 b(the)e(b)n(yteco)r(de)g
(transferred)h(with)g(Blueto)r(oth.)2115 4599 y(Figure)19
b(10)f(sho)n(ws)h(a)g(comp)r(onen)n(t)f(diagram)h(of)g(Mrub)n(yT)-6
b(ask1)18 b(and)2040 4687 y(Rite)-6 b(VMBlueto)r(oth1)28
b Fi(cell)p Fp(s.)39 b(The)27 b(Mrub)n(yT)-6 b(ask1)27
b Fi(cell)g Fp(is)h(a)f(comp)r(o-)2040 4774 y(nen)n(tized)34
b(task)h(of)g(the)g(R)-6 b(TOS)33 b(\(TOPPERS/HRP2)i([28],)h([21]\).)
2040 4861 y(The)26 b(Rite)-6 b(VMBlueto)r(oth1)26 b Fi(cell)g
Fp(is)g(the)f(Rite)-6 b(VM)25 b(comp)r(onen)n(t)g(with)2040
4948 y(the)h(Blueto)r(oth)h(loader)h(for)f(mrub)n(y)e(b)n(yteco)r(de.)
37 b(Byteco)r(de)26 b(on)h(the)p 2040 4993 997 4 v 2044
5047 a Ff(1)2078 5079 y Fp(The)h(Blueto)r(oth)f(loader)h(is)g(in)n
(tended)e(to)h(impro)n(v)n(e)f(dev)n(elopmen)n(t)2040
5153 y(e\036ciency;)21 b(therefore,)g(soft)n(w)n(are)e(dev)n(elop)r
(ers)g(should)f(use)g(it)g(during)2040 5228 y(the)35
b(dev)n(elopmen)n(t)f(phase.)64 b(Note)35 b(that)g(the)g(complete)h
(soft)n(w)n(are)2040 5303 y(should)27 b(b)r(e)g(compiled)h(and)e(link)n
(ed)h(on)g(the)f(storage/R)n(OM)j(device)2040 5378 y(b)r(eforehand.)p
eop end
%%Page: 5 5
TeXDict begin 5 4 bop -152 750 a @beginspecial 0 @llx
0 @lly 960 @urx 426 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/control_flow.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: control_flow.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:12:46
%%BoundingBox: 0 0 960 426
%%HiResBoundingBox: 0 0 960 425.2800
%%CropBox: 0 0 960 425.2800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-03-20T04:49:55+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-03-20T04:49:55+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -425.28 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 425.28 li
960 425.28 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 425.28 mo
960 425.28 li
960 0 li
0 0 li
0 425.28 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
39.48 86.76 mo
174.36 86.76 li
174.36 29.16 li
39.48 29.16 li
cp
ef
.96 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
39.48 86.76 mo
174.36 86.76 li
174.36 29.16 li
39.48 29.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 9 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
44 <001C60D8A8C9B708F664964317C7D97D9359303C96D5BE1717FCD84DDCFA
AD459511E832EFD67DC824> |
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
93 <001C60D8A8C9B7A1575E77F973387E00CB2B16889836529EA30078B080CA
5A59A41801F44B7C8EEAA52367> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.064 0 0 -20.064 0 0 ]msf
46.632 62.93 mo
(\000,\000Q\000L\000W\000L\000D\000O\000L\000]\000D\000W\000L\000R\000Q)
[8.08579 12.3995 4.9959 7.60421 5.01595 11.6372 5.09621 5.01596 10.1523 11.6372 7.60422 4.9959 
11.9179 0 ]xsh
246.12 86.76 mo
454.8 86.76 li
454.8 29.16 li
246.12 29.16 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
246.12 86.76 mo
454.8 86.76 li
454.8 29.16 li
246.12 29.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 9 GetGlyphDirectory
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
3 <001C60D8A8C9B816D234> |
75 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD73F
D89BDC334BB07BF4F917382A46FB6D56C6B324D7C5BF3C1737059B4BD3BA89BE
96A60CAFE7B49CB909CA56114770> |
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
253.37 50.95 mo
(\0005\000H\000D\000G\000\003\000W\000K\000H\000\003\000E\000\\\000W\000H\000F\000R\000G\000H\000V\000\003)
[13.3266 11.563 11.6233 12.1843 6.51294 7.59512 12.3846 11.4628 6.81354 12.2445 11.3425 7.59512 
11.563 10.1603 11.9037 12.1242 11.563 9.9198 0 ]xsh
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
73 <001C60D8A8C9B81D896E44290F028784B8F68E5717C1D4EC0AE67D121D71
E2B258B0A7B37998658AF153323DD976A1112C09FFF2020962C01A8BE61673D8
E41B5D9B5DB0C889FEBDAC71F420D99ABF79F945E4CA511B> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
253.37 74.95 mo
(\000R\000I\000\003)
[11.9037 6.71353 0 ]xsh
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
278.69 74.95 mo
(\000P\000U\000X\000E\000\\)
[19.2184 8.2764 12.3846 12.1844 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
348.53 74.95 mo
(\000O\000L\000E\000U\000D\000U\000\\)
[5.09012 4.98993 12.1843 8.09607 11.6232 8.51691 0 ]xsh
808.56 86.76 mo
922.44 86.76 li
922.44 29.16 li
808.56 29.16 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
808.56 86.76 mo
922.44 86.76 li
922.44 29.16 li
808.56 29.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
78 <001C60D8A8C9B794D33B340B990850C065E40D166F6B8A65A7F0F8858ECE
050176CE5B3D54865610F2C7BA0E6A48EB238D93222848> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.064 0 0 -20.064 0 0 ]msf
815.86 62.93 mo
(\0005\000X\000Q\000\003\000W\000D\000V\000N\000V)
[13.5632 12.3995 12.3192 6.72137 7.60425 11.6371 9.91162 11.0552 0 ]xsh
509.76 332.88 mo
741.9 332.88 li
754.08 345.06 li
754.08 405.96 li
509.76 405.96 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
509.76 332.88 mo
741.9 332.88 li
754.08 345.06 li
754.08 405.96 li
509.76 405.96 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
523.92 362.04 mo
(\000P\000U\000X\000E\000\\)
[23.016 9.95984 14.8319 14.6641 0 ]xsh
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
83 <001C60D8A8C9B7DB133A6BF1DC72AFF4D9E1D88066B503430ED7CA204AEE
347A7EAE3CB3884EB4FFBB8F90017827BA9DCD885413704044F3F41AD14D2D6A
CED61CEA6A04B229BF5A6BC738FEA6377C17D19B447D1E3C5DDC24F2FD35A82E
DAE48699B344D31AB5EDBC945652C2C08D> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
608.06 362.04 mo
(\000D\000S\000S\000O\000L\000F\000D\000W\000L\000R\000Q)
[13.92 14.592 14.6641 6.09595 6.09595 12.1681 13.92 9.09595 6.09595 14.3038 0 ]xsh
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
559.44 393.6 mo
(\000\013\000E\000\\\000W\000H\000F\000R\000G\000H\000V\000\014)
[10.5359 14.64 13.5839 9.09595 13.8479 12.0721 14.2559 14.6401 13.8479 11.952 0 ]xsh
174.36 57.46 mo
241.07 57.46 li
241.07 58.46 li
174.36 58.46 li
cp
240.07 54.96 mo
246.07 57.96 li
240.07 60.96 li
cp
f
736.8 57.46 mo
803.51 57.46 li
803.51 58.46 li
736.8 58.46 li
cp
802.51 54.96 mo
808.51 57.96 li
802.51 60.96 li
cp
f
526.44 86.76 mo
736.8 86.76 li
736.8 29.16 li
526.44 29.16 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
526.44 86.76 mo
736.8 86.76 li
736.8 29.16 li
526.44 29.16 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
533.76 50.95 mo
(\0005\000H\000D\000G\000\003\000W\000K\000H\000\003\000E\000\\\000W\000H\000F\000R\000G\000H\000V\000\003)
[13.3266 11.563 11.6232 12.1843 6.51294 7.59509 12.3846 11.4628 6.81354 12.2444 11.3425 7.59515 
11.563 10.1603 11.9036 12.1243 11.563 9.9198 0 ]xsh
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
533.76 74.95 mo
(\000R\000I\000\003)
[11.9036 6.71356 0 ]xsh
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
559.08 74.95 mo
(\000P\000U\000X\000E\000\\)
[19.2183 8.27643 12.3846 12.1844 0 ]xsh
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [20.04 0 0 -20.04 0 0 ]msf
628.94 74.95 mo
(\000S\000U\000R\000J\000U\000D\000P)
[12.1843 8.27643 11.9036 12.1642 8.03595 11.6232 0 ]xsh
454.8 57.46 mo
521.51 57.46 li
521.51 58.46 li
454.8 58.46 li
cp
520.51 54.96 mo
526.51 57.96 li
520.51 60.96 li
cp
f
254.88 127.92 mo
434.76 127.92 li
446.04 139.2 li
446.04 195.6 li
254.88 195.6 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
254.88 127.92 mo
434.76 127.92 li
446.04 139.2 li
446.04 195.6 li
254.88 195.6 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
268.46 154.1 mo
(\000P\000U\000X\000E\000\\)
[23.016 9.95987 14.8319 14.664 0 ]xsh
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
352.61 154.1 mo
(\000O\000L\000E\000U\000D\000U\000\\)
[6.09595 6.09595 14.664 9.59988 13.92 10.2959 0 ]xsh
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
278.06 185.69 mo
(\000\013\000E\000\\\000W\000H\000F\000R\000G\000H\000V\000\014)
[10.5359 14.64 13.5839 9.09595 13.8479 12.0721 14.2559 14.64 13.8479 11.952 0 ]xsh
350.9 127.93 mo
350.9 91.76 li
349.9 91.76 li
349.9 127.93 li
cp
353.4 92.76 mo
350.4 86.76 li
347.4 92.76 li
cp
f
gsave
0 425.28 mo
960 425.28 li
960 0 li
0 0 li
0 425.28 li
eclp
3 lw
[3 3 ] 0 dsh
.18 247.06 mo
960.05 245.94 li
1 /0 /CSD get_res sepcs
.651 sep
@
grestore
679.08 330.96 mo
584.28 330.96 li
584.28 276.48 li
679.08 276.48 li
679.08 330.96 li
gsave
/1 
[/DeviceCMYK] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 425.28 ]ct
[-6.18434e-5 55.2016 -95.5209 -3.07501e-5 679.44 93.9592 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 153 
/H 265 
/M[153 0 0 -265 0 265 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 153 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 153 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 153 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 153 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
NW9,+7KN8aJcPBB![9u4P5s89![C)6XT6*9!ZsQ+`rMq9![L59i;ec9![9u4qZ)3Jn,NM76iiSRec5an
4TVbe]`8-IT>2er!2BMr&XTpOj8b#:!tgs2,lRdq!:Bgh%uR5-R/kb;"9W`2l]8@P])Vs9D;X6,blFF;
"9WQ$ieln!LB%GYA'<&CJcP-;##X(?m,UM7ScI1=##3D$i7L6p\,a#=##<S+j4cg"dK#j=#"H8Lbf)UD
li;_>!ZK;Lrp0Zj(5DnT!!*tRrSR^T'qkWS!!*tUrSmpY'tXIS!!*k>rQG;1'@d)R!!*_.r9OLNG6776
K)bl`!1WoE!oIu!i;f#@!>1q$ir\4]!rDtL!;?Ho&!$S3!m>3XQ2obA!X3c0qs4@433WD$!!3:Bg\]n0
a>V0@WW3)'Eo-]R!R!C^!0@0^"D5^ObQ5.,rW%NMp&G-p7GIY)!N63k!8IPU!CG0/huTJTZiIrC!Wb[;
q;VLM#0m4I!!30`^A5tROp:+MNW9)*c1pW*l2areKE1TD!@#GVhu_b6!M0;E!!+=apu;G7;usK/^An9V
ZM;WFb"Dc`!2]_s&tAU]!P0<<!/pmY&X<+Lrnmg^)i"F`!!*[tp>Z1[*2*Aa!!*Ubp<3Q2)7om^!!.H0
p?VhFGLZ\g!!.5tp>>u.EUNma!!.9#r8[\7!TA*W!:BgfC<6+m!Qo&N!7_&M38O5n!S/X5!4r432U_6U
!QueB!20An2V%H[!R<"_!/COT0u*_3pWNZK,3/`i!!+M*o]u_GM$F"\JcPZJ!@H=ghu_be#FYYO!!+Fu
o]$#3KEnja`rH,a_=YqQb'"!7!3?/$F6E2^!TlW1!0R<_D;=dA!87E8K)kWG!H-feirRt!SH.IG!Fs4C
bQ5^A[fF;G!Zef:o]uUX%ak?V!!4+Cht5h-Tag>gNrT5$Z/YN<ro4$S%>OrU!!4%1bOj!ZOpn#af`2%H
lLaEDi``qo^An:*hXo_,elC6#V#UNfiUl.2fiIPAMZ<cEb50?ZbQ5UVM?*,G!XYIao]uUt$)IXQ!!3Im
ht5h-]*Z4P]Dr!>R,[bu!PSln!29Gp#`6asbQ4^Lo)OOG!B8X0m.TcH;#u^Xli7&Cbk'`n9`_3ndJs;*
ch$/t:'&64\,ZO_](=,H7KM<FSH&Y;oBZLe(\[o^!!%36huTtrkQ$bG!-e%p!3cG=K)kWG!,M2M!M1!r
!8RVU-HYoH!Tn.+!5ed;,es!0!S_25!3#r!,f0-5!T%GS!07*\+g1O_"3f!0>_W7N!!34<lh'NE`YG0I
g&M0UBA`@>!PB,Y!5JR9!bgTcirQn/eGuHH!Wl]OoZR?:'(5gY!!*MSqX"+G!p=J(MZE5H!=Qm=hu_\J
"/Q"K!!*MKo]$#1CBM<O]Dqs>Zh2HCaC#)&!20AnA`iXO!QPrH!/COT@+tV<pYZ(c'TN1[!!-Nao]#te
'W;#[!!-0@oZR?;'#FXY!!*hEoBZHlg]3oG!>Ma/huI<]!/(=Q'X@8i!+h8mkl:_sTC^8,>H7bL!!,mX
p$;bG\JN6cZiC,"g\'J+hlmmS!1Elg9]#I&!ogL$q>c*I!rr<ha7[XXbFfR8!07*\&$koq"75C9<e^VH
!!*S/o\]c';P4$D!!*S1o]#u-;n;tE!!*OtoZR?U9%3jU!!*0+kl:`Wj7M[=\cqO&V#UMu#3c*g8([Uq
qqqL["Hrfd!s\T%n,NJ[g@XD+ZNR'(n,NIj#3c*g6,`E>!MKY1!7q2Q"BfLCl2Uhj[.N\ck!@W"]`8-;
<+Z9u!!*A+o\]c)4n8TJ!!<@(B*@K"!=5k,j7qX8hEI/(!s;8'"9&;f!!*=poZR?V32ZcE!!>C;d51"e
!DqkLliERa_>r'c"$4`J0^/Q<9\B!q!L*uI!4i.444))(kl:`Yg[sM,Q43HeTE#'O]<s3S!!,O-oZR>j
$C1Yp295(LVuR%e!!*b9o]uV726-`D!!P-ki8:.1l2UhtV=`[HdPAcAdJsG,^Z4=I"mQ'g&uYB^!S'!`
!4W"40!*:?OTk"M!>(RhbQ5I2q#I#e#8=]7m-Nn.!UKdg!!-Bko]uU<!LNig'!^<si8EB\!UB^e!Ee7O
huSQ5Y5mhf#84B&j5]#f!UB^e!EnFSirOo9aT0Zf#8!TPbfn-o!UB^e!Dpu3bQ3"jirHOg!YV6nrTjR$
*pN_+#fH<$!RN1l!1a)k&XqVUhuU>-mf<7c!=67.huUhCmJs<g!YLs^rSmpi*9mM)#e]unr8Rh!,aeW6
%ue^1bQ4U[q>g$c!=,UrbQ5'oUB(&h!XXYFr9OLMI0Aj9!Wc`kp$;bDCB;-Lh>dT`JDC(\!oA,(lMpte
>hSf.!o.AgfDrhi!XXJ9r8Rk;GQd=4!WcT^p#?,2B*%Q'WW3)+FiaL)!m5<]lMpte<6"m\q9/o^>lgGq
!X!,rqWn761]@CA!!+%Zo]uUn#c@[r!!373fD=D+b:r2]!?&TChuU4k_#W6j!WuueqVqV%1$S`>)Sbq)
!Oi?h!5\^;!a<P=bQ57*l2Ui$XRs^;V$HYnW;lu$;<I]@!pciml2Uj/m.K]GlU79D!Wl'Mq;;;2U&YMb
!!%$2huV_$WW;Yk!Wl*Qq;VP9U^?;d!-@em!THGa!87DS!_16+bQ>tO#jMBiBCsCKb<+P\^]4Btc1gQ+
kYVEI!!+S&o]uUE#Pe@s!!,*spYZ,.9EOP\!WXXoo\]b1#G(nr3lUpT"QSP"9`jV\!@Z=eirP5HXoRtl
!Aq(UbQ>mU!p]ge,eN]m!J1Ns!8%8P+j'ED!PorF!!*=do]uV.0B)uG!!+4Wp##k\+R9".#Dr*2!Qcqk
!2KSq+Mma2!P0EB!;ulu#E/67!R*-f!!++Cqonr]!N-t(!!*:PoZR?F.BrmB!!3k;lh0TGl%T6)!!,+?
p$;_FH-63=!!3h1ht>n/h1#Ik!!,"0p##l.F6*D7!!3k4iq;=5i.1pp!!,%4p#?/6FT;E9!!3e!bOs'\
b&d[U!;QTq1;rk0!R#3H!3lM))o_F8!S]9n!!*83r9X7G!QYVA!!*tLoABYr/cGb<!!*5)o\]ba$Dmh$
!!+"PoA]l#/aEB;"L%IX!Pf&X!9*tZ(TR)N!PU#K!!*4ooZR?<$/,C#!!31&k4J!Al^J:J!!-*]p$;_@
;=jjk!!31"g[sD*hinN7!!6$Ni:c(0fhJ.?!Wc9Wo]#u3Q2h<Y!!-!Qp#?).:8n6h!!30oa7RRWbD$Ai
!!,^3oumHV7`,5_!!*D5oBZM82sUGE*l7O9!pc-Xh>kIo!=>dthuV=alMpr*\+SY\hi8!;!3-#"$*EgZ
!S93p!!+(Mp#?,5O9hN[!=51fbQH)5_(Y*S!?.j.bQ>t>#H\!u!!,OCoBZLI"mc3i!J0n0!S8F6!87DR
6I>>^!L!ZQ!!*+Ho\]bo*T7"6!!,I9oA]k:"RH*h!IXP"!RDe`!2]_s4MLF2!JUaG!<)s!!H7VS!P02B
!!*=^q<\"F!SKd)!!+V3o]uQiYQ41n!=+8KhuV+dlMpr6g%=2&@EJT%!!*=YoA]ku53i1L.GXRU!+P!h
]`8';GOs#Z]/]*V!@>bXbQ(cE!29Go-J7tW!pc<Wo)SUe!=H%&liF9sTE#!<c2HSqhu_f#!pfmf$E!IR
!N$42!:9ae,gZ,C!ofLIli7%nW:]*NW!^fMdf9Cl](F2JbD$)b!!*CmoZR?&$0VB"!!37Bk4J!@kqMH(
!WcThp$;\3!'HnS!X!5mo\]c+0(o;>!!31'g@aA)c8kIrXoJM*D;OpF!T5Ts!!E=*h;dPiirROgTE##p
@`S,b!QlnY!!30t`q@OV]JQPep](=2^@U[lQO<'Z!?9;VliHF(_>rEm!>`'6huSlGli7&(_Y)gfhgF2Z
_uKfR[e&M[OUCFT!?/rMirS.gp&M)m!>M@$bQ3;%li7#%!3u4@!R#JS!!-*_p?VnJm+OGb!!&AXliGH9
X8qkm!E%YEhuV.^lMppGo\]bi"NCGq!!-!To]#u#2X:>COn@Z7a9:E$^]4C-aRm[W]eSgQ!.sje!OMt*
!2]_s&"`CZ!MT_c!<)s!7-=..!'?eQ!=kFki;;F5RKVsW!C5E3huGa?!:^$i%[ckJ!Ls;Z!!,CBo]#p3
aT0om!=anWbQ3Y)li7&Ia7RRU1ZJJJ!!,.Co]uV53U?_H*lIX:!J1CP!29Go2qmo^!RNaq!;c`s*4b_"
!IFm?!!,(8rT!\5!Rj!o!!+(Po]#t#!j_mo!!+jpoZR?M1@+uA)QEAQ!H8+b!7CiIW:]EXl^A+H!!*7Y
o]uUg)!:n/!!&Y`hu_f!#jhTm"G$.&!O!<2!!&_bir\5)#ke8n!!*4So]#tW(S1U-Oj*LB!m?9&m/R.i
FnElYT,"d7!WWH0li7&Vht679j#66(!Bf]@liH'+ciE2.!=&ep!!,L;o\]c%1[G)B3T'Mf!S'-o!6bED
#6jGo!CbW4irRjjli7&IiqDC6j4H?!!!*9-li7&M_=YqP`%LicoDenKbOs'[_D:ca_>jW?F?Agh!=uF+
liE4Mm/R.keb&2.G.%AP"E$3c!!*S-p##r1i/.U'!!*;Ho\]^g[K$@3D`RRmo`,"&WUo-NMurAH!=$g@
irF,<!:p0l"(X4S!!*Oro?75a!posg#.X<L!+t'fg&M6ZCur,1li7&Skk+3Bc7A5]!.je/!Pes9!5JR;
"D?Dj"mc3i6/;+j!Q6GT!!3-#HM$+r[Kj;B"9`DnYQa@n!CG]>j8@p<a"$EU!.=G!!OrBE!!EF2`h!A3
!:^$i43@-=!O='=!!$s0bQ4RFa8kc2"p.6Im-.^Vm/R/![Iiedl##be!CYc:liGftiW.U2"p.-;i8%E9
m/R.uXRtEOh.Z-T!C>0,huV.ZquFG2"p.0?j5<u@m/R.uY4U`Ti+_]]qu?aaeb.r'dPJE6"p-p#bfWZ^
m/R.sSc$_-bQ5jmli7&J^\,eO]e6hq!@u7jliP'H!:Bgg!F=gZliG-/m/R/#^\-ppk\^IG!:Kmg.DGf>
!P'9=!!31(g%=2']`[X%!>;g5hu_\J!p0L5!!+Rbro4$l*piq/!F":NirQmsm/R/#\+Sb`heE2m])VjY
Xo?NFW>k4)!Wc0<oZR?;!qcQh!!*\.oumKZ?NRh>!YiB7rp0^PLBHoD!Xuj1p$;_B7I:'U!JL+3!NQU?
!!3h@hu;O8hgbgr!!*J8o\]c*6L=aR!Ij\!!M^%K!:9af'Xm$#ir\4l"76'h%(Glh!T-93!!*+Mo]#tK
$g@Z?!!3e/bPo]ebB3mR!!*G'oZR?W4RE+L!HRhV!L*r(!!3[klhp)MfJr3t!G^omliQL;#l+Jn!!,LR
p$;_8)S?%O%Yim=huV([m/R1fAD[";!oJtCm/R/Pht>n.dM][t!tL.Hj8J!=cSb%h!G16_ir\5##jhTm
6/qRt!S&(9!:'Ud%=64qbQ5:/li7&jb4Ws[bCBib!!,.(oumHO(@2%L!!37IlMBiJWX.tl!?T&KliG]g
m/R/&b4t?%li9hp!!37ChYQ.2U'U,d!?AQ?huV%MquH9f!>WBAhuHFE!65'@"*EMuirPq]m/R/,\Fee^
cRJ5]!>WKDirDcd!!348b50<_P6^IT!?.j1bl,`d\g?_D!>DX.bQ(&F!!34(h"g:<kZ7f`!:g*j!bq;n
!UFgo!!*@ho]uU>!lk<:!!34#dJ;]%gf"7A!!*.2o\]c-D=%<(#`SE6!J^a8!8dbX!`dbGir\+;!U]pg
!bM#a!TJ"a!!*@co]#t/!rDu:!!33q^A5tSa\)[&!!*.)oZR?ZA+0Kt!!*=SoZR>_!l"^90\,pa!PBH?
!!*hlr9X7G!PK'3!!-9cp$;^l'u'_L0$<qH!jWaFmJm8%eF_Z"ZOcF'!EIkHhuU+taoM,8!A;XkirQP-
m/R/$fC\)([L_a*!ES%LirQP%j8ds8!@kVRbQ4FUm/R/"_=YqPUCQYk!D^Z-bQ4FNrW'h9!@P\VliHF#
m/R.gOn@u@i`#ILq>^O8f_+S3gcrRS!@>2JhuV_Zm/R4iMW!FdhuVD)m/R/)c1Tuqd6,2E!@>8LirS.a
m/R.gN:c-2fhh&9!?0;WirRXmblIA9!@"E7bQ5n'm/R.gIe:hb_as.p!>i??bQ5F9k5a6:!Xtmip$;_.
)=7D)9]5R0!LsA^!!*,&p$;_FDnuDT$_-#GhuUn9m/R/Xeb%c#PQgg^pAb3pV"NXHheBn,!Xt[Zp#?(r
)!q;(8_<Up!L<oW!!*+tp#?)4CV]uP$BE:)bl,`d[MJ61!CFZqbQ3J&mJm7gQM&H&b@&Zso)JgtK';jn
!pF_-mJm8$^@^amj<Esk!,M5n!3tehf`2'ZI,+AP!o.YpmJm8#[.N8WfHKV^!+tr_!oW"8_>jWCIc'eX
!oIntmJm8#[e/S\gEHFoo)Jc'o]#qO_>jWBEQRjs!m+sSnGrOg!>)(!bQ5[(m/R,loZR<'_>jU3k5+H?
liG!Dm/R--oBZHpm/R/HhY$49h\"?<n,NJ]g@F/&\Jji8!,_>c!,:g#!B/F"huV==mJtf<!DD8>irQe3
m/R-(oA]gcm/R/Ff)"G)irRaC_Z0^)`q%=SW>P"&!+YWE!+5^*n,NJD_"GnP_%-8@b5_Q+jRVX<lXK5]
!A34$liF$nn,NOj!$B&MliH67_Z0]uf^dr$hd,UL!@u[si;2@4TF:/f!?JZBhuVRq_Z0^!g[aA,ia)Tb
mf3A>fC\)(U($Gi!?J`DirS"#a8l,<!B%jebQ5mem/R/7_=YqPOp^UW!?.j.bQ5aDiW.s<!XFYKo'?Cr
)t!\,%&*=[!S&pm!!*.bp$;bGHNF'Fa8c8HK\l:X!P96;!!*Iqo\]bm0Co2A!!*.[p##o/FTKD\!XFJ=
o&Bbb)X[S+%%I7VpYu;!0CAf@!fls6!oeA(_uKiCGfoU$!NHt(!!*FboZR?G.dd9;!e9me!m><ZbQ.D<
!AE0tliQ<a!Ug!i!EeLWliHB_m/R,ko]uUT%H[ZI!!+[to&'T(AHD6"!Wc6Sp##l-@-mpo=7kDPS.#D9
!!+\"o&Bf.Ac_?#!Wc<Xp#?)3@J0]r!!$-nirP_[_Z0]d^%0AKa'8Z6!!**o!6=cV!QnL2!!#gebQ3_3
_>jRnp$DYD!R1u>!!*\`o]uRYm/R/-l1OBDa<&Y-oDelDn_aGc$LRlp&Bse)!2Jo]!?9kfhuUP3klBE;
!/9t'!QGK7!!*YWo]#qJm/R/,i:Z+2^`:2k!-dtW!O<%"!!*S@oZR<"q#L'f!?'&QbQ4ga_>jTdbOOp"
=97plrVuqVo]uV5+79+0#Jp*"!U)S]!!+L`q;D),!E0$e!!%]EhuV1FmJm7m\Fnb\gc*X]nGiS<_suaf
<<;Lf!/C.+!Ri(W!!*>9p#?)13:$Xs!!+@Kn]V#-!U]pfGkB2\^)HD>!=#Isbl5feaYL^5!<mf>liF:'
mJm8ThY$49k$%]`nc/[mN:cH:DScAS"Ea1l!N$M%!;c`s5L];`!S^WB!!*1Uo\]^`_>jT>G5UCoirQ(l
mJm8Qf(J&(hH'%E!<\)KirEiE!:Bgf"D[JN!LFDd!!,-roumHW:@8)_!dXF^!+50pdf9C^d.6N(j@&D9
!>`9=liER^mJm8jk5=TBliF*e_>jTL`q&$gfKnp*!>Vm3huT#JmJm8eg@aA)U&k,ka8c5SaR\?lgHt<.
!>Vs5irPDOnc8Ug!EItKirPqV_>jTK[.;EA`B3Jf!>D1*bkTB_L'[2I!DUT,bQ3n._>jW>ETcoZ!L!QQ
!!*.Xo]uV**ps"/1tM?d!Ql8%!;QTr")H]_huSc;mf3@iK(Rt%`Z4CH!AVdjhuUS/j8e';!X!;so&Bb2
!Ug!h!eg4+!QZ8K!!+k#p#?(i(]FER!!342aR[OUIf]!<!<RH:bQ5'ho`4gg!A1kTbQ4j]_#OK[d.6N(
di@cU!CuMKli9WF!!*\Np$;_335GRq+ia35rnmgu)X[S*7.]=:7IC-V&A.Vn!R3LH!;-<m+is67!QuGM
!!#IZirDR:!!*YFp#?)!2<Oto!!+.Jo#q-C)"%A(54ctu5OJLP%]]3G!P0u#!!%WAliQ<a!q-*i&D$L?
!Lj,c!;6BmS+Z+Kk$,V$!.4:p!o%5en,NLi&'OV'!L!QP!!&8VhuVS5^]4@_puD83!o@Jimf3A!cLg,t
Pl^:Q!1*<<!T$o)!:^$hE:V3Sa'/W6!!*S?oZR>j!U]pfL@raka%kn"f)Ph,g%+J1Yn-:'!=,1fliG'G
mJm6#p?VnJm",>U!!+auo&'PI%dsAu#F4r>!P9<K!:p0j@eARZHiq1b!AMplirQ.io)S^h!=+t`irQk6
mJm5to]#t$"2Os</%kf(pWNZ+%IX8t#)Moq!NI%*!!$3pbQ2\be,\n:!Xb@]oBZM?2!t>E@HR7L!T?Z=
!!,"Ap$;^`#4;K@!!3Liht,b,gG/*r!F4CPhuV@tmJm8Dh"ot,huT_[_#ONDPN)2o!T#U"!!-B^p#?/,
7fWPY!!+q6p#?(P#/L9@$&$LnbQ5a9p&Omg!E@,4bQ5RGmJm8?an<jYQj1>+!^>c5oBZL9!q-*i/(O:Y
!IY";!!++^p$;_4%G(UF!!,19o&'P%!q-*i.*D2?!I"S5!!+%Rp##kr%.O>E!!,4=o&Bb*!q-*i.F%MF
!I+Y6!!+(UrT!_6!RV=k!!,!uo#q,Z!q-*i-+NTk!Ghf*!!*t?oumHL$iC"D!!*8<o'?Cr+7B11"h4-j
!OMq#!;lft&#f-e!%>V_!<fh$huUG2mf3FmY2J73huThZmf3@uT_..B-GTT^"Ln$`"68FU*q'(0"L.OY
!NcFl!!*S(o]#oub5h59!<f7ibQ4^_mf3@kT(L5-Rf`$Y!=b4abQ&jK!8@JS>NYPD!U*kX!!%$2liH5U
mf3@iK_4U4=TAH<!!--SoABZ)>4)@jC\6NcgC!ZTq#CEsIe;Ou<5/D6=5EK.!T.,L!!$m.irS!Dmf3@i
J+Vb$<PJM7:<*(Qr6,2`;XOMb@e@kF`sM27!<R<6bQ(A_!:g*j,KKBA!2])`!B/m.li9$5!!-Bhp$;^6
!U0U:!!+7Vo&'M<mJm8Deb%c"2XUPG=kr].!Ik-c!!+:Yo&B_AmJm8EfC\)'2YmFH!!-9\p#?((!Pe[9
*j"qV!06RLrVusO_Xu%P1%##B;9ALT!H\@X!!*4hqs=+E!T+FV!!*qHo]uR!mJm8Fjn7s@W=%&Rmf3@k
O7M30e.1pI!>hs3huIW^!!+k.p##kE$L@cC!!*4bo&Bc&%dsAu(U<Vm!,h3)!AiO+j8S'>UC+d:!<[rE
bQ5Nhmf3A'TCg>-A,QDu!!+^loumH"$,6H@6gO@1!U3GR!;c`s!ep:5!MB_e!!*Pbp$;^q+27dX5MtDW
p##l,9^_r^!e0e"!LO/]!!*MVp##k[*Rt/U!!,@EoA]l0:%&&_!eBq'!La;_!!*MYp#?(`*Ua!U!!,.(
o?76X7IL3W!d""X!K%-N!!*JBqonr]!N$dM!!*eWo'?C8"n)El<pKAE!PoiF!!'b+liGQf^An9J_"-Ca
KEV)NpAb4lhY#e-[iFf9!4;FW!QZh,!!!]5_t)ggL'6rF!E7tMirQ\1mJm6qp#?(r/_C'e!!*_9o#q,Z
"Rc<k9$6hN!N$e'!!&hfbQ5.#nc7kR!".oi!X48CoBZLo*:Ek.*pN@a!TQ3.!!&,[m.foJkX=)(!".oi
!X*u0oABYZ)XdY,*8U>H!oVZgmJm6Dp##l+62^f>!!!Ai!!3:Qiq)12\f:)<!?C%jirRjmo`4gg!/pO1
!T-5s!!!>h!!3:DbO`pYV\nk&!?0,RbQ5X;mJm68oumHY45'Z94.?`D!!,IEp[%kF!TlN5!!*/Ko]uQf
mJm5so]uQmg&M16PR[<do)JeUeFVT!g,\U%!<U=6huI*O!!$?thuI?N!;-<n3L1-<!!,@:oA]l-3q!%L
!m1)p!+5-o!+5BY!G2>d!!4s2%-RZl3l1F3!QHtb!!*//oZR;9p]1$g!*8a9!*n7Y">7jY=TRae!=Hm<
li;G&!!3-#U\*mQRdL.V7-+%-!0Q"9">%=@;uu4`!=HO:i;):2G4#>1S+PV=P3r;N5hPbf!/fM2">.LG
<<;prn,NIr^[gCbGO>G2Sb1qBPjSMP6/2(m!0$.Bo)JnAY/X0:kl:_jXRaR8C[M0&NV(EpL$epA3lUg:
!R-#J!!Pd=m-MG#kPtU,o'?Cn$L[rqC$YHY!R1uL!;$6l0$s:X!5@4g"[U2ei3X0]!!%$0huU=poDndh
!Ft$[huU\%mf3A>`qA6i[+kWb6H\?K[M7p*!-A,!p>Z1b$L[rqA`ECC!Q>E7!!+[mp#?%\g].L>[`lsk
')_gs!!$[&bQ4UJmf3AlbOs'[YmKk!!@Y>JbQ+I*!:p0l!C4g,liH?QkPtWFiUcC:fer3u!CYi<liGcm
mf3A/_>3HrliGZGhZ*]Y4hq!S!Sp]<!!,(0oABYp1@G2D6.GSc"3rIu!:^$i)n5Lu!Qtl.!!30a_Z&Qr
i)St@!BJg(irRL_pAk!h!CGE2irROZmf3A.\b4t`c4&S1!Wb6_rlbDc9]uHW1W&b-!P9uQ!!,0toumHL
.IR6;)5d)N!P&Qp!!,+/r9OHo'^5Su*P_44!pOG#n,NJ7an>!$k$@EU!=5n%liGrpn,VqX!B/$shuU"p
kl:`'[I`;Xh.6WV!!+:Yp##l*=ml=k#c@OXqVVD'/)L=-2p;-Z!O3@'!!+(KoA]o1Ac_B$!@,GRirIp9
>42Fl#cRFV!S/gZ!!+j`r6,26''TAs)5ZrK!m4aKqZ-<i!?\K;bQ5a]mf3@nQhAQ'^aJ(@!Wc-Cqs4@F
@-R^n!!SSWliEOZn,NInYOq/^JctNB!0-[<!TQ`0!!30p`;JNpi7V?!!!*4]o&'P3#4MTn#,_%N!IP%=
!!%cHhuVFuo)S4Z!Wc$9qr7_4?0M=i"HN'5!L*fX!!*;&o]#t$"Rc<lLZ@FhirRk&i;`o[7C)g7!QJ(&
!!*4Po#q,g#4MTn#+,).rlbC_"7H3iHM,J_`'4/#jT#>`6IYbs!Q50+!!$0mliG6;mf3?@o]uUQ$MOPr
!!$d,liH9YiW'#]503QX!P/Eu!!$!hhuUS#mf3?:o\]b=$L[rpAG+j]gg/n>!WkU0q;VLh"R,md<VYVO
irR"*mf3?;o]#tB$L[rpAbG'ahd5:B!WkBjq9/l>"Si&f!!#aabQ4jRmf3?.oZR>p$1@io>P62@aAqC'
r;Zm":"f=.!U<2>!!*r#oBZMC+n#C2:%[cQ`"DG<!'p5D!UG17!TX4^!D1T3huV\&kl:`#h"0G)hB;7e
!(lh@!P/j=!;6Bm4n[_7hff+^!!30ndJ2`&iC2u2!>jYbirS*]nc8Xh!(unD!PK'5!!#1Tir\4c!TX4^
!CFHobQ5jMkl:`!ao'BXbQ5j,mf3>SoZR?9%dsAt2tbArbA@:@!!,:/pZqtIS.#8qmJm7i]^kCh<:9ef
+QN.]!TG$d!!+8.p$;^D#O;Bd!!,1"pYZ,1PRHaV!<]XuhuHUB!!+1np##l%)=IP++PukN"5r*s#NPjc
4NI3V!ofLRl2Uhe[IW>X;==Jc+56DJ!SJ@h!:p0k+Q<"R!KIEG!!,!`pWN]^LC3;H!<T"dbQ(6-!;c`s
*5qNo!Q,]A!!++_oumGe#35ab:Z;$6!SK$h!!<7Qm-OB2!/^.E!>EBCli8d/!!*_bp$;^^&**]k9@`ao
!mW7qlMpqdHLftoK'r[?'"RYm!&*d@!>3TLhuTYamJut]!DM/>irRLWl2UhcI.H:tK^SmA'>3tt!&*d@
!>3ZSj8@p<V[hbf!CXfubQ5=&l2UhcDt;*PG4,D3&ZPEH!@e*=!!*VAoumH&%HIKi&$Y`n!/'M9!Cu&=
liFC'q#L0i!=P^qli:8Y!!*PBp$;_!(ZYPs%]B!X!.F)3!CYH/huTefn,NIsS+PV=<pp"h%(#Wb!PB3/
!!*S/p>Z26Id$h57G%.k!NQb#!!*J!o]#pQmf3@s[e8Y]^D?>>oDen$R.\Z'Ep3Q)5/Hj7!LaMf!!*Fe
oZR;1mf3@rU]&F4bQ4aYirB*clLsQF`Y@\<!@,h[liG?\n,NImM"U*8m!\=&!=>^tliGrbirB*_hY,k.
]G'Q1!?o;NhuU\CquHBi!<duGhuIui!!*Cup##l"*TI,#>2f28!P]?9!<)s!,/j*5!Q?JV!!*4To]#pr
mf3@pU%RFHefEcN!E%#9bl,`dWtO[t!?SK:bQ4son,NIlG4`uYD!q?)#a+f(!PfWG!:Tsh'u9P0!TdJL
!!*;4oBZM>7IL3WB^#-U!N#tg!!3@cm.K]F0B3$5'Xm_n!SLH;!!*;+oABZ&6LOmT@bge;rSR^I"7Q9k
"c)a.!\FBPjT#;q\G"q`gf<V>!=#b!irRq&mf3B!ht?"1T*+igq#CF!M=fg./`Qg3&uPBH!QIk!!!*:q
o?76T4R`=P!*[M;bQ3b+n,NImHh>M^.H:C0")mDsliER\l2UgAqX"%E!-dl3!Cu,AliF[2n,NIiG4b,$
9B-!R")6QahuT&IquH0c!/'k#!-.H-!CYK2huU(qn,NIiE:i&g8*BsN!!37<htH(2Q3Z[T!/:"(!-@T/
!CbZ6irQJ"n,NIiEqJAl8E0[O!as.DbQ3G&l2Ug.o#q)Hmf3AP_Y)+RTb7/%p&G*oB(X:I6/hkF*SU5R
!SJ7R!!$<qli<pS!;ulu/_p$c!R*"]!!-Hip$;ZhiW&uuch?8tc5#UE!*K3Xp>>qAmf3A=dIlDu_'e[O
!F":OhuI-D!!+(fp>Z8%'`\7#!!$0mirG_?!!+Y#p#?(k-gq$9>i557!+>*mp](=4^%TYN]+aH0!)W71
!0?RK!@PVSbQ4pmmf3AdaS=!YbQ(]&!!&AYli:;U!!+V4oBZM+!Up'i%+Fn9!T$*@!:g*j8Ds1-!.Ef+
!0?g2!*AFc!@cdphuUk!pAk$i!=R!AhuV:imf3AWeb.i#GMrN%OnI`7=R#ke.c0dW!QkH4!!*MOp#?)(
4mr@O7G%4m!-mH&!.smf!)Mk[!@GkYbQ5-Qn,NIr[e7iF^c1]^!C"BnbQ)JI!;$6l9]Pj5!M9S^!!+"\
oBZM7(%2,&](PCjl<<WV!B8a0m/-,LP2QBA8D!Rn!LF#V!!*tPoABYu'^l#%Z1[#UhGs"E!Ar-qhuJ\o
!!,[Fp>Z1A#3u6i)8c"*!S.t]!;6BmZh<>ZiE#CI!B&<uirG(t!!,F)p<3Pp#4)<k!#Da/bQ5Klmf3?]
oumHZ:@A/`0>7&&!.Nl,!?/WHm/H>Pc7A2\!=bptliH-*mf3?To]uR.mf3A4eFi/.X762[!!*tCp>>ti
.I-s7%%["J!S90s!!&,QhuJ&k!!+7bro!S0!2JKQ!?&<=irR1MlMpqoTC_(Dg,8=!!0['9!or<fmf3A3
bk9urV;VCT(8CNH!O='<!!*Igo?76R0DtnB!!%ZDbQ)PL!!+.MoumE#i;`lZI.ln-l<NcXr;Zm$Ja;sp
!TmMQ!!$p/li<^I!!*bYp$;ak$4>en!<IBAi;;F5hH0"C!X!c+o\]c);ss\dC%U<`R-t"U'#aJ$!jN(>
p&OL\!<IE<irS+@lMptgI,aeY!T$iF!!$d+irGP:!!*_Qp#?+[$4>en!<I!0bQ5j^lMptfDp.ds!QRn&
!!$C%bl#ZbMXLNG&@1uQ!hfo,iW'!=lh9ZFRHabQ>NYSE!U=js!!#^bli=Qj!;HNp"NpE(!l5QbiW'!:
htGt.Om2oI<nm9)!T%ec!!3-#8G(g?YO;Gl"MaWf!k8mWiW'!:iqDC4PNi,K=5Nl8q;VM7Epiu.8bD$C
Z0qYn"N'il!kK'[iW'!5bP'-[K`(o=!!,j8oZR?YB(#^"6M/J%TC2a\"0V=@!iHYDl2^V[!=I!CliGT@
lMprDiq)L;P6ULV!AiO(li>;u!!'G"liPBX-K5"+$GZ;m!QbT4!!+n,oABY.#4MTn0[]RO!5n[6oDelm
p##nf,UD@L!=H^;irR@/lMprBg%45)NX#.Vqu?aPeFhi%`pNg,Y4^fV`$?Vf!!*D/p<3QH#3u6k0#PoW
oumGd#4MTn/ACf$!4)"m!1if,!jEgkiW'#_MsL-(!TPs$!!*tooBZL^&b#c$.*_GO!T=.L!!&eeliPWl
1[P29!!3:VhtQ%0f.ZFi!>s;WhuT_en,NJ9_tDpgeH>7?!1WcArnmk!0JMJd!X+8;pYu;.0^A]>(tS<=
!N?Y"!!+Fdp#?/,!rr>k!!&S_ir[CY1#`07"*i#`bQ5X4lMpr$_"5bNQk&lkq#CF>ZLuEB_?00+!0-Zq
!k'X2i;`mUiqMd?l"]Ma!!E;NoBZM!)Xm_-*l7O9!Tb*c!!%rMliPp,5iD\D9\0!s!oVmGlMpqgaRe<j
^)?D?!?ATAhuVLGmf3?@p##nu4[&97nc/\bg%XM-i+D9T!<gU;irQq5n,NJ/\b4t`g_K8X!/CC2qr7b,
4[%a(!Ck!$bQ5jklMpqf[e%]DXVUC+!?.j.bQ,W_'CPo$GkK8^^,J"0!!+(ap?VgO$L7Zl[.EVbj<sg)
p&G+-[.Wbdjt#m#!-n2'!ocdCi;`ls_tN!hQ4!$[rVuquoABZ%-1Cm8'<Cfa!SSsj!!%'4hu_Iu7H"4I
)ohd8r8RgF$L7ZlXn1QRgEl=h!>M^0irRsbmf3?0p#?,,7RltLmf3A*ZM)KCM$`JJ!1WT(!Q?8P!!*_&
oumHV-1:g6B`?6NbQ>[H5N)SC!iu%]!QH)E!!&2Qli99>!!*J+pZr"Km,p\'!!$F"liQ?K;rI]W!i,JI
!PB<9!!%rJhuGn=!:p0k$_[1N!Sfj,!!$6rhu_\0:Z29S!i>VN!P]QC!;c`rNUl*04n&FP$_m=S!T-*0
!!$<tir\+7:uMBT!gN].q9/l?([D&$Ie(\_2Xg\I$Bk)+!Q[7h!!#sjbQ>jV8G3&L!!%$4liH<)lMpp(
o'??Zn,NIjSFu4LkYppM!)`CTs'FU`!,M;d!Sf?o!!$d)huHaG!!*.cqV_;0!SgK>!!#^bi;[!=!!$m0
irS$jlMpp$o&B^Mn,NIjQM'8=hba+KpAb1fo],sUhuEadp<3QZ.dI'7@IhVB:%A8d!!!(UoumHY8FHNY
7eFq);Y'ng!Up'i3p65'!*eah!E&.\m.]iHDsmZ+M"U*8l=o\e!(->Es).E.rrMTh!B8g-huZpZ!:9ae
9]#C!!,:m%!.jh$!T%>T!!#4Ti;[N_!<3)r!;?Ho38aGi!*AId!DVPEirEl`!!%ZEirS+Mmf3>Pp#?,6
C23>?rrMTh!A_aibQ(E(!!,R3o?72Bmf3?2oumHZ>5SBm!!#%Obl;&C!!='7J0"+Z!?]JXli;k-!!,4?
oBZI+o`4jh!-\#$!.jS=!B069m/MM,!!=$2GoQ5Q!?T#LhuJ>o!!512i:Pq-GOGM3E:i&gHLCh71Z%f_
s*+,9!uF[Y*:Nq/*l@X2!/'S;!BSj(irFAn!!%$2irFJq!!+q8p#H'so`,(/7;a"A!;$6l)m8nY!-[Z.
!Aq[bbQ)MK!!$X'bQ)SM!!+^pq98f]s(qN3#QuDIJALF7m""R*!=bq"liFU"li7&:cL^B&RI:+U?1dIb
O95LQ!!+b2p$D^>q>^d(,"['hgu%%8n,NItSbCtBY6=1l!@btYhuJo7!;HNo=nLVQM$*5I!A2jpi;\T/
!!i]P8pe,+io>CT!!*M#p>Z1Y"RH*h.`_/@!0cjO!*]$T!K.'L!!+\'p#H(/q>^d'+$skBaNMeFn,NIs
O87$!bQ4==li7&5ZLc9?K^Sm@;=r'5I0/m<!@bnYbl<%h!!WZD0Q=#6j8A6Ebp)ZX!Wdo=pZqq'*UEb,
,ffNC!3>Pg!(unM!MBhi!!+V%r9X:Hs-ruf"pYkqC8&Dor87Un+n5O6!IN_uhuUS3li7&1^%:.^U[J0_
7eGU>Qj`B`!@Z1bi;]&@!!WZC/o7<"gAKt3`ZajP!Wd`/pYu:k*:*Y+,JWj1!2]Pmo`+t^o]#t@$h+,s
.F7\Is-EWa"pP_j@?Re3r6,2I*q943!H?6VbQ4jamf<=e!?\E7bQ*mr!!#:VbQ3S.n,NJ8](O8PL5$9P
?'`Rqq!8(HGm*X;!E\L`m/-,Mffe[%!?AlGliFa&n,NGHo]uU^'CYu&--c,L#HY!<&6Ot,h"fk1i8&GW
nGiSgh"T_-c8t:l!?/B;huU+dn,NGEo\]bI'(>l',K&HtpYZ:OUC[u>OMKcKir\.]"RuHm<8[H1!RX!q
!!+%JoA]kZ"RlBk2#$&0irQ(kn,NJ7`qA?sVPXh5:kGgkprif^B`ml*!DCQ/bQ5@6li7&'V=Vn5U'(Gr
nc/YBoZR?&&F]Z#+L:[a"I55^%]K$d!S&:^!!+Y5pZqqC=7Q@g!!*b?oBZLo&b#c#*q\e"^)?D?!?];R
lia`(%1T!&huUt@nGiV?gYhkb!S^Q>!!*_5oABYZ&F]Z"*;&.iZl&94!?SlGhup-_%1T'-j8@p<boQ<S
!A!%$irS"9li7&!Y4LZS\e+?2!$(Xk!O`j7!!"&?^@gLhY-&0AP4Zs!\/Ol;!@Gk]bQ5aWli7%tSFar*
V[i1r!#k^Xqof):(@V;))liSTs.'5l!(>l>liD50nc/\!i:cL<D?9,)!=Gt#liG3Ln,NFso]uV!*r5m2
!!+(Sp$;ju_#OI#fC[u%DZTD/!=RHOhuRNmm/R.oV"<LF^DuhFrVup+o\]b`*:Nq/)R]7r"h;&B!(#?2
irO*"nc/\!fCn5*C'!]%!=G_&j7hR7_&VqE!"AM[!P]WD!!+%Jp#?4e\c;^k`:V7SAHD?%!=H^;bQ2&O
m/R.nQLi<$Xr?d0!"/AB!N[4/!!*q5oumW<VZ6]&O6ZE)!PB6I!;-<l]_:[mNWSSJ!<JqdliGE_n,NFn
o]uV!*q0.1*5D46#OKLO!!!:[hY#e-Z52s1!4)=V!JU[C!!*+hoABYg..@3:#P?pT]c?tNoDen1[IrG^
]tFCG#`7O5irQP'nGiQsp>Z10!posg!M&cA!QQY_!;c`r#P@$W^Du_C!?8N@is*95!!!7Nb4WsZU(m+t
!2B22!I=h7!!31[bk0*[ZR,)@!!`)>!N[4/!!*q5p!!H;rVusKeb/80i'm/9!13HH!plrjli7$JoBZM1
3q*+M#Nk^G!QcGQ!!*nFp$D_%rVusIb4XZoeNs9,!!&)RhuTSUli7$CoABYo2t-eJ#MSk/!P]ZE!!*k<
q;D50s1nU6!@Z4cirRb!nGiQOp>Z1M"RH*gN:Z'1cT(Co!=.HRir[%;!:^$i(9mJls24g9!@52JbQ5RC
nGiQ@p<3Q%"7-!fIe1ba\ha']p](=!`q@OVXr?d0!>M-ubl=mF!!%<:li;h2!!%<<liG*1m/R.eK(J=0
hF-i5!=%9NliGQ[n,NJ'[.Wecg&1mNF7eAjJFNU>F8FhnhuUIoli7$4oABYu61=jT#1)u#!QZGR!!*b5
p#,kqr;Zh?p#?)5K(/g@FnXhr^BNs(!.FJ!!S0U,!!*;Pp#?(r,4GR5'Wq;nqW%V'r;Zh3oZR;XnGiQ'
p<3Q<"mc3hE:_9S^cV#c!=$71bQ5-nn,NJ%S+Y#*]_qg2.*M;M!R_AH!!$9tliH,Rli7$%oBZM88,NA[
!!*;Xp$;_.,Ob[6'X[Q"s4R>N!@GVThuUk+nc/Ykp>>u'$Le&o!!$['huV=qn,NInch62sa<C$Q!>DL+
i;_+$!!+Fap#?(q$h=8t=T.:VirRj@li7$!oA]l'7IU9X#1E2)!Qu\V!!*e9p#H)"r;ZjBYPHE@bQ5-Z
nc/Ycp<3QU$1%Wl?LuAA_*7>g!=$71bQ5-nn,NP'S'9+Nbl>?S!!*:hp$;_A7IgEZ8`oa5!$(>*!,M2m
!T-E:!!*;Wq!A"H!S8Xe!!*b:p$D_>r;Zj&NV231g-Y?1!Cb`9huF\^!!$X&huhIs!!)Qi!=$jBhuV%H
n,NJ%VY/mIf_kdN#*8H;!Sp-6!!,RFp>Z,lo)SUe!,(o`!S9d0!!*;Op#?)!,k(d7&ubK`s4dJP!=",J
bQ5^Gnc/\T`qIUV)!h5&?1Z8@_*7>g!=$40bQ59tn,NJ#QhAT&`V]]:2sUA.qWn:LJcbND!BAa*li8d,
!!$g+liH'<n,NInc1UE(i%"3r!"K"-oBcAT!Ar[,hu_e_!qQBm2U1sR!&*[=!+ti\!S'^0!!*;Aqr%A0
!S&Uf!!*P$oAKNH!B&j0ir\4g!qQBm2UD*W!&*[=!,(o`!SBs4!!*;Dp#?))./Er<!!*P&oAf`K!ADUh
bQ>t,!qQBm0tR)&!%R=8!+#3?!Q%.o!<)s!#.!pG!Q$,O!!*Ljo?@+4!=?C2liEplo)Je?bkCB'6L4[P
CAmMnliH6Hn,NInan>!$i%"3r!=l("m/-ha$*j0]!LsSi!!+I`p>>p7li7#roABZ':@J5a"i'`g!S&Uf
!!*P$oAKNH!=?.+irbk]!!)Zl!@PhZirD=1!!$U%irRt3n,NIm_=cghf-p+g!=barj8S*:!!*A"oumGs
$hF?!,I$mc!'0BG!*f'=!QIY!!!*8+oumHR,lI`8!!*Ljo?@+4!<RW@liG!Bo)Je6`V/Wu;sXJa?1[C`
k#:sRqZ$X$an>!$i[aKu!=l("m/-ha!d41o!P'*>!!+1Rp>>pHli7&gi:Pq.g/%2<!<p72huVCWn,NIu
TC_"=!!*.Ep#?(c)=mh/+27O1!or<;li7#goA]l-;"+Gc"i9ll!SJpk!!*P&oAf`K!<R$/bQ+UB(@qM,
*3/_V!(cGV!)W:2!QI\"!!*8+oumHS-1Cm8%$CA0qonp;!D_VIliH/to)Je,^%UdmC$Yg">4_(]k#CgM
!=$F5liAa>nGiS"W:TBQ!!,^Bp>>u(.J!N?'smVl!+Y?q!*/XK!S^HH!;HNp"h=3_!%m[?!=b[mi;3KT
9A&su!S]*q!!*hCp>Z-am/R.e<qG>PhGNbB!<p+-irC\#!!*P&oAf]J!CO`tbQ5[0o)Je)U\i:5bQ(i5
!!#dcbQ5aUn,NImW:\:6.I[<<%$C/*qZ$XHdeN2.li9fP!!*S<p?Vd&li7#hoBZMD?17gp"h=3k!&*gA
!=l(+m.frE!!+Lgp##gBo)Je#XnLZQE9mQ)<V,,LhcT@J!<fV!huVafn,NIuTC_"<!!+Ljp#?$Fo)Je#
YP-uVEpNc+<qG>Pi`Z0Zo`,!qZ1R&V/ar`@%AECRqZ$XB[e7iE6h:9Y%%d1:!+t^#r;Zgmo?76Y;"+Gc
"J>>1!%IC;!=Y+^bkhA@$,?0"!."/9!=#e-m.ouJN9gNE;Y'/S?LRpq"h=3k!&X0F!=l("m/$b`$+9Zg
qqqHqo)JdqVtT$KL$Sd>:@d<C>4;Lm"L%IU!&<sC!tCm\i:Z%*!!*D8p#?$po)JdqWV5?PL?nm?:\*NG
>OVUn"L7a^rSml5n,NIuU%@=A!!*A%oumDMo)JdqR.e`(H0bM28+Ok*;?-^f!!*4poZR:en,NItOn6fn
!!&2Tli<+;!!'(nli<IF!;ZZq8+Q!H?LRpq"h=3k!($)S!=l("m.p\^MtQ!.L[kEFU\<UGOmE&J7.T79
>4;Lm"L%IU!'TfO!=b[mi;*ERNW.u5irFr,!!&khirG;0!!#IYirE<Q!!*5-o]#p8n,NFt!29#Eq>^ME
oumD_nc/ZSp<3Mili7#Lo#q)3n,NIlTDQk/bQ'Wl!!*Ljo?@%2!.ab/!2&f^!3>h[!1N6S!(c\I!+,-p
!<p"*li9BK!;?Ho%]K!cq>^M@p##h:nc/Zbp>>q6li7#So&'LOo)Sai!<fUuhuGt1!!*P$oAKHF!.4D!
!1EBX!2]DL!0lgM!(HkHp>Z-Wn,NIlZ1R&V5O\XR%AECRq>^M5oumDnnc/ZSp<3Mjli7#Lo#q)3n,NIl
TCg>-3Ud"L%$C/*q>^M3p$;ab!!)Wk!3>h[!1N6S!*AaX!+,-p!<p(,li8p4!!*S.p?_eFq>^M.p##hK
nc/Zbp>>q6li7#ao&'LOn,NIlZ1QrS1Aq4F!!*P$oAKHF!,2&c!35Si!2]DL!0lgM!*&OL!*f-sqZ$X"
Zh38X1[kAF%AECRq>^M%oumE(nc/ZSp<3Mjli7&Zbk'$Y;XaYe"JPJ3!&!a@!=Y+^bk_;>>kRFa^'!s,
!2'&Q!po9Bli7#koBZMA=7?1j#0-?&!U;<,!!*S.oBc;R!*AjO!OMt#!!&AZhuJr,!!$0nhuVV3n,NIm
]_11`hCS-r!=b[si;;I/!!$-oirQRjo)JcYp>Z.;li7#hoA]l/<:Bkg"i'`j!oY^2nGiS!U%@=@!!#gf
bQ4L@o)JcJp<3Mjli7#_o?76W9DJS_!!*8(oumHZ..@3;%$C/*q>^Ldp$;^s%J'Q"RJ,tIRdC(U!,M2m
!Tm>M!!*;Jp$;_<.e!E=%]K!cq>^Lap##k]%.aH!Oo+)7huJr,!!$X&huVP-n,NIm_=c^eeL9ne!=b[m
i;*ER7JPpBirQe$o)JcSp>Z.;li7#uoA]l-;"+Gc"iU)o!SAgi!!*P&r8[S4q>^LZoumH9$hF>uK_EUi
L$Sd>?1Z8@`^oS!!<o_#bQ5R+n,NItOn6fn!!#mhliFp/o)JcYp?VdJli7$+oBZM88GiJ\!!*;Wp$;_8
..@3;&#o6gs6'4Y!)<.E!OrI-!!&/ThuJr0!;ultD"HQce4&j,!=$jBhuV7Qn,NJ!U%R@Dh"h!N:A*WJ
\d@s.!0dEBq;VI>li7$&oA]l'7IU9X#1<,(!S&Od!!*S)p#H)0q>^Lbqonr]!N-4p!!%]GbQ*@`!!$L"
bQ5ODn,NIn]_0JL^EW.I!tCF;bkK?]aSGl:AG,9i\H2:%!1W]K!1N6S!.OP+!Sp05!!*>^q!A"H!RrCa
!!*b=p$D_4q>^M&p##kT!V69kPP3o7P3`/KGOs_pdQmj5nc/[qeFh`#aWg3S!>;C)i;_."!!$F"irQFd
o)JcUp>Z.;o)SUe!."1r!S'O+!!*>Vp#?(s,Ob[6'<Cfds3g`D!*8d:!MBJb!!%cIbQ*@`!!$m-bQ5I?
n,NIn_=c"Q[ib)>!>1dnbl>BQ!!%HHm.foIV=FTdX7kl[R-XeQM=^'7ffS['!!i/_!R;kX!!!]5[.Wec
g%k[KGP0koSFQX[U\<UGOR)rIK(In$c8b:n!!iAYqqqLn+Rf@3'<:``s3CH@!-n1s!1r`]!2]DL!0Z[K
!/0t(!RNjr!!!8rirR1Cq>g6i!>M[/j8[O'!!$j.bQ*[o!!&8WbQ*:^!!%36bQ5=3o)Sai!!`)>!O<a8
!!*_%p!!HKq>^MZp$;[Ao)JdnXnM)]M<k3BP5XbAliGWon,NG!o]uV!*q0.1)S>\/s2t0<!0$U/!/pFK
!<].khuJAq!!%rKhuUtUn,NFuo\]b`*:Nq/)6rkms1eC1!06a4!f[0[o`,!pVY9$MK^8[=NUu02bqnhh
!"SY]!P]WD!!*tEp>Z57_SZ-L!.X[c!.OM>!<SS\bQ)hQ!!%K>bQ54+n,NFtoZR?;)Z9[.!!*k0p!!H=
qZ$WuZ1[G`Hh.4<$FKNn!.X>8!2&lL!R`Xp!;c`r)YE@s^`)\B!?AlIm/P-'!!*/"p##gmo)JduWqP?N
GjGD2Qf.Mo!QQe]!!!o/huU8(n,NJ-[IrJX^&%d1!ikqR!-[r6!=Gt(ir\9$HL(V3RIfG>at<)_!#bFh
!Os$:!!+%Jp#H(eqZ$WuRJ"c(C@_E+$(LY4!,h-'!/gBl!OaHH!!!f,bQ4RVn,NJ+V>8@6bl=dA!!+=j
p$;Zeo)Je&\G#7hG3o81"K1kX!R3%^!!";:liOd9!:^$i+2dd<s1A..!?oGThuI$R!!*V6p>>pim/R.i
T(Ck@_^>0Zp](:<o\]bT([qD**P(k$s0;G$!@#SWirEBV!!*V8p>Z-mm/R.iT_%1E`[:0T!$h-r!ON[4
!!++Qp#H(ZqZ$X<Zh;NB<:^(j%\NXBr6,.Qm/R.hORpZsZ6Jc<!$CjW!MU=u!!+";p!!H1qZ$Xhi:uX@
m-Nmno)Je+^%UdmB^Gd#&@1oo!Qu_W!!"VCliFC*n,NJ5b5CW&m/OKj!!,R>p>>u,1\1SI'XRMk!+P<q
!=u1$huUV:n,NG=o\]bL'(>l%+i!^.s/c(t!Ctc8irS$oo)Je*[eA_]AF0?t&$,<^!Q-,Z!;-<l/G.s'
WtXt&!?o>Qj8Z:Z!!,@%p<3QY0(T&D&u50E!*\jlrVus/Re+`(Y9*05!%7E_!LaVi!!+.Dp!!H,qu?d"
GO+th!QuPU!!+.Yrp9II!+,$m!?8`DliG!<n,NGJo]uU^'(>l%,0KTFs/Z%t!WmB!qr%D1!Pf]H!!+(M
p>>pSm/R/)Zh*)U\J+H4!&jK-!N$Iu!!=CZi8F@fs.fJl!WmH&p>Z1k*:j.2*5)"*!*egj!?/E<irQe,
n,NGHpZ)85!N6V"!!+7[p#H(Kqu?d"B?U"m!O!F5!!+";p<3M7m/R/'U[u\3W=f12nc/YEoZR?&&+BQ"
*j51[s-3E]!=#q(liF$qo)JeAc1^K(9(N&[!!+FgoBZLg"n2Kl6hK^GUCH\m!@Q7em/NgX!!*;)p##kC
%eBZ$.)Yc:!(Q>U!@5GOhuU%bn,NGQo\]b>%.F5t--#W9s-iic!=#_*j8%^9TapYo!@c%^irDU:!!+@]
oA]kW"RlBk5kO(;SIFuf!$qWdp#H(Bqu?a%SFt),OU^m^!@>&FbQ'oq!!+7Go?76."RlBk3r7(tbQ3\2
n,NJ5[.VZCN;NYV/EZZm!pbI?o)JeNf_4Y31@5&B1=l'`!2Ju_!*8aY!M9_q!;?Ho/DKjas-<K^!@ljt
hu_ea!qQBm2U1sR!&*^>!ADXfhuK8;!<)ru;Y8lJQO<3^!@lIhi;\f7!!+V,p>Z56IKK*@!B/9tirCe#
!!+e!rT!Y4!1iQY!)rOM!LX;a!!+V!p#H(5qu?aEa7d^YbAm[U!!+gcp<3Lem/R/;\b"#FNUHiI9(^=.
M@&bP!@GPRbl<7m!!*7^p$;_A:&Y.c!!,OKp?Vbnm/R/Oiq)L:L[P3CD=m/qO9=tP!Aim3liQO,K`(lO
"GQO,!S^3:!!,F<p>>oam/R/Lf(7f"JF<I<B_:3`M$*\VoDenGg@aD(If06I"GZU0!T$H>!!,I@p>Z,e
m/R/Mg%45(K(T-@!!$a*irP&?n,NJDh=]h.J,K?J"F9[a!QROt!!,4#p<3LLm/R2G_p%bs!-R`1!+,<A
!IY%=!!+Xjp!!GVr;ZjGb4Y*%fb<oV!Ee[_liQP5#jhTm:@%N<!,q<+!/L76!UG%"!!#1Sm/M/*!!+C\
p##kr'(Q#';r@?-!S.PD!!,^LoABU_mf3?<p##l.F70)/3r%Y3i;[Zm!!+C_p#?)#'(Q#'<T<c5!SIbG
!!,aPoA]gdmf3?>p#?/6FT;F3!!#+Qj8X#q!!+:HoumHL&Fof%9[!1S!Q,00!!,I1o?72Bp]1'h!-RtY
!R#3G!!"nKbl;2O!!-g!p$;[FnGiQ5p?Vh'#42BjB(G9g;XaYe".o2P!U4%]!!#gem/LMm!!-Tdp##h2
nGiQ/qV_>1!Pem+!!$HuhuHOA!!*1fp##l,>jhXm9D%0B>l=X'A`<@C!TT=4!!%*6irR%$m/R,qo&B^G
n,NIkR.]J?i*GdO!)3:MqW%T]r;Zk%b4WsYK(/g@BD0OMY6F:n!*Jg9!(ZMY!<S,NbQ,cc<:9ee7.e_'
<;lju)UA$B!T6E:!!&ValiFHsm/R-;o'??9qZ-<i!=u:)liH<@mf3>qp$;bD<)ihs!?&iKhuV@pnGiQT
p>>tO"RlEj!!%?9huG\)!!*S)p##l+7IL3V>P6nUge^iH!!*tXp#?))6h(-VR/Q(AirQ7bm/R-6o&B^.
n,NJ!VY/sMhaQu6!+#9X!oHjPrVus7ZM;ZCbQ5RCnGiQGp<3Q,"RQ0hDt;*P1%5/D%@-V1!QdOo!!#ss
bkTBea[o&(!!\&>p$;^l)Y!e-_=m3rPlpCR!2K/P!Tk`u!!*tKpZr"Km,g%k!!$s1lj)NB8cShqI,4JR
!O<U5!!'M%huSf>m/R-UoABZ',lRf8!!*qAp##l*0CJl@C%^Bhej`+/!![o1p#?(\)=[\,\b>%aNs"tR
qZ$VeoA]l-,k(d7(pinq!T#Ku!!$g-is47-7fWMnEQ[su!MUA"!!/t@pWNYh!posfNUt?p`ZagO!>_C%
bQ5a6mf3>qoumWX5X5;L45]o$qs4<0nGiRohtHC;E<5G,!6Xp"!RVtX!!+@dp$;_A)".G)K(\I7gd+4+
!'&L#huIoi!!*;Rp>>se!UTje^[p@a`uORK!@#8Si;DL6g)'2X!.=It!ms.o!rr<]fC\)'G4>P5#1rS/
!Gql)!!'n-irR7An,NJ6_"H^gh&#kepAb2Bp#?8+5!ArH1Vr_-!,D$(!=$C6bQ2/Rm/R-ho?76C)Y*k1
!!"+CoumHV(%2,&EV7NZ^,S(c'<Lim!Sf!k!!+G/pZqqA;=+>a(>\oTq!8$r(@V;)0%]d_!T+"J!!&;W
liks!2\Hauo\]bt,Oka7,hi"N!n^3ImJm8&dduAt[2&02!A)IfhuV=0mf3?Ip#$"s1c,gXVY&mLe0Oql
p&G+=h=oq1gJ7,9!>X/VirQV(n,NJ@ch6<!f)tIA!0?g5"jSt_&.k-!bQ5F#nGiS5`qR[X`CB4p!>E6>
bQ4ORn,NJ;](O8J_#jN7oDelBoumWN0/$7&ip6=)!pbmOnGiSckkFEEfK&=!!BB-2liF$qo`4mi!BK66
li>,p!!'.olitce/5K'mhtGt0hhMC*!!,aJpYZ(s2XLJH2:pdEp##kD%e'H!2V@]\!5@k$!2T;G#/r&A
:f,j)p>Z56M$<DL!DMDFirRIbm/R/Eg@O>*U(6Ym!B8d+irHm_!!&nhis*OS.nE4KbP'-_bBjBm!:p0k
7*52I!P1&R!!+dlo?75u%Ia>u1<&q1!3PYh!1*E(rlb\T-7/]m-"ijhl1sZHcmeJb!Wdo=pZqq'*:3_,
@-@.J!JU^G!!#^bli=$a!:g*j!lO]t$,ml(!!"6QQb2)LhuUhFnGiUkHf+SU!P]Q?!!-<ZoABY!"8Dll
!!#R^huKJ>!!*/3p#$.g)B&SU,\*7Vi;)C6a=$KX!Wd`/pYu:k)smV*>l`dRirO]5n,NG[o]#qHmf3@i
]_1:k^)J!k!$GF%Wlk.]!OO*A!!31?bPKH^bQ4j`m/R/caRdUVF9:q3!(->%!0ZdN!<T7nbQ=d])#XF=
$6MWf^Y%]JliQL%!q?6k%]8sd!P8R(!!34Rlh'NEk[j2_!+b`g!0Q^M!=mBOm/-,N]F55I!!WcO5CKra
g]$+4hff.l!!*P"p>>tV"mu?l!dihshuVV@mf3>po\]_,mf3@t_tDphZ3q'=!!WcO5^p2ghYuO:ictUq
!!*P$p>Z1\"mu?l!e')#irS%Gq>g3h!+>HZ!0$@H!=d'AirZUs%/g/1#obpGV7O_HbQ>t)!q?6k%$1,+
!MTbd!!<3&E6Imt!QeF3!!$'lbQ*+\!!*M6oumK3$4?S/#6Z\dR*G!B-L_!9*le-Eqs4<Nm/R.oT(D:L
j$)o3!.sk0!-mr4!?otcliO9i!Vl^!">*f=_r(R5,k(d7*5)"'!0QXK!=G.ahuVFkmf3?8o\]^imf3A2
ao:5nhu]\T!Vl^#">*i@`oG&an,NJ/^\6[fPO/>N$CLGF!ST[)!!%KAir\9$FRK21+O'N=!i>u!q#CX%
.8kf(bd&D]!!+"=p<3Mim/R.nM=\pl`&@Poo)Jc1oZR;Kmf3A/\+RrHQ2q$[!!EK<1IMB8!!+t>p?Vcg
nGrLf!>W<>liGoYmf3?jo]uQ`mf3AIg%F\3QLk.["qWIS"RlBn1>:[Eptu-Xm/R/$Zh*)UdMD9O!2]>G
!*J[i!Ar*phuJf0!!EK;0gZ$4!!+n3p>Z-Zm/R/$[e&M[eJ@TR!2oJL!*Saj!B&9tirG25!!EK9/3<t'
!!+^lp<3M:m/R/"U[u\1^D-,:!1*H)r6,.;mf3AA]_0JMJcGf/!!$X)liH<*m/R/2h=Kt6aoUu3!=$jB
liH6@p]1'h!Cku>li;Un!!$I$huVUdm/R/1dduAt^B*j)!WWGCp##l)7dg<X6e(ee!.*K%!+PZ^!T,Tu
!!+7nqr@M4!Q"m,!!*;Ep#?)/8+-EY7+_+l!.<W'!*Js="3E%n!:Kmg*l%<j!NlIm!!*;0oumHV5jn[R
4i-g8!,q'$p](<rW:oQY`uFCG!)2tM!1`KX!@6@kliG]tmf3Alk4S'@A)@7e!hf8F!PKB<!!#R\huK#1
!!+:hp##kp2>[CH!!-*Rp##gVhZ*ZYUA!UJ^DcJ>!(lbA!1*3Vr;ZjCdIlN#cSb.k!ES%LirEHD!!*.a
p<3Q=([V2&6N,.%bQ*Fe!!+1SoumHJ0^euB:<)tN!*7tW!?KGYli<RV$LIfnK(A7.Fmf;27,dh*!Q?5O
!!31?lh0TE9BuTN!!+%Up>>t:$LIfnI.H1qDsmZ,5h5Pc!P9KD!!319htZ./huH:)!!+(Yp>Z1?$LIfn
Ie)M!E:3c-6.kkj!PT]U!:p0l!GpcgirDX-!!*tBp<3Pn$1.]mEUq<RAbH-#!!,-toumH:*Uj%1!Fa1E
bQ'rd!!,[KpZqqGG3o82"1.@dliH?Emf3B"kOn0BZjQ:&!<nAQli8j!!!,O<ptu53hJhi^!<]@nhuVY)
mf3Arh"BS+WXA4q!<e&IhuGJ!!:g*j7b@Cp!TA(d!!*2'oA]l08acW[@Ggb<!Nc^u!!*4VqW%J5!&<@2
!C+EpbQ5jum/R.gRe+`(b!POs!E[A8bQ41>n,NIlGP')Z/DpL/"+^+3!TcT6!!+CjoBZM.1ALqF!!*7[
o]uR<mf3@pVtKBWiud1Z!<[W@huVLom/R/3_Xl[datN5a!<e#HhuJN#!!*Ctp##l&*oI#!"+0n)rSmq6
4m`4M,fTB8!R3=f!!*4Uo]#q-mf3@pT_7=Gg)fban,NIjDYD9T`]*8b!?eZ=bQ54(n,NIlG4`uYHLCh7
#a##/q9/lX)rL\s$GQ6#!SJ(P!!,RHoBZLo*q0.1%&ijc!UORi!!*SGp$;_&(uPAp$FKNb!R;8D!!,I:
oABYY*;fg0!!*J"o\]^[mf3@t\Fnb\^_bo/!=H:/irRL<n,WFf!CYQ2irQ\1n,NItU%I@FAa]U"%D)5m
!Q,`3!!*D%rQP,^!P8j/!!,7!o?764)Xm_-$Bau)!*eml!=Yn!bQ4m^oDn7Y!AWm5li<aG!!.**oBZLJ
"n2Km'Z]k4!'K]M!YaAUp?Vgb&E!Nh0AcE\!1E0R!GgTahuT&Fn,NJ&^%gOahuGe+!!*_[p##qN%fcUh
!!+b3p>Z.Bli7''iq)12Q3?[W!>N<@irD.7!;QTq'%HU7!NH[g!!+Rlp<3Mpli7&qbO`pYLBR)H!>;L+
bQ'Kg!!*YFoumH)%cIBg!eC"2!U3hU!!*2#q<[tE!+,*o!?gIrliH,bmf3A8lh0TFR0_aO!<RQ?huVY7
r;c?f!<\tbhuHsL!!+1op##l&)=IP+,iA:Q!KdZO!;ZZr!djY$!T7&H!!*1qo&B^Smf3A1g\'S-g)9>Z
!@6[tirG8C#iPaa!cI_U!Qn1)!!*.`o#q)3mf3A.`V%FU`"r1Lp&G+:bOs'[KEpH9!>`3=liGKdm/R.l
g%+J0-h79:!!#@XliG!9mf3>Ro]uU0!oX+['sI>h!QQbY!!*>Mr8@>-!%%(6!'^&5!P&d1!!#1ShuS-*
i;`lnZ1d2ZaXmM\!!*>Oo&B]rmf3>Po]#tb&FTT!54mk9HiiU6pAb4-TD$J0[4(DB!=$1,bQ&jU!!#%O
bQ4[Qmf3>Ip<3W_b\mRA!!,LIp?VgZ$LIfn7.T[F`s_>9!,_Ap!M0Vr!:p0jBD(Tlk@3?L!C560huTMY
m/R,Po&'P^$hXMs!!$^)huT,Mmf3>sp##l+?/P\`6.ttl!M^"h!!#@bj7VF5^C0K1!,;)c!LO2^!!$O%
irS%DhuEd=_tM:TOpULU!'Bbq!NZXs!!$?tbQ3P+mf3>joumHX<UBeZ!!*+Zp$;Ztm/R.gK_"I1Pm6^X
!<Sb_liDJ9mf3?Fq<\(H!TQ]/!!*+Sp##gbm/R.gIe)CtN<SeO!<SJWhu\'(!:TsgKD".'f0nQt!<IrJ
irEo_!!*.No&Bb3"o&)n!!*.do]#sr"7H3iL%XI,g-ss#!<IK=bQ))=!!*.Ao#q,c"n2Km!f$?k!G_c*
!!%69bQ5XGi;`lpebJJ5m-Nj_m/R/'\F]%fk[X&]!>`KDliH6Qmf3@mX7bf[hCe9tnc/\+b4a`og*Z1e
!>_m1huVV>mf3A'[e8PZg/dYB!=#=si;2@4dk'GX!>`rRirRs_m/R/&Z1HuVhd>gP!>W-;irIm8=76+i
#,V"Q!S/j]!!*eDp<3QW,4,@2'VG!@!QeC=!;6Bn';kHH!QIn'!!*:goumHP.,k4.!c.#nliF$kmJm:g
3oT\s!S9*q!!,.6p$;_73:?hJ)o2.5!SJ(E!!346h#$%-huTJWm/R/Geaq]"bV/Db!B8<shuV4`mf3A+
[e8PZc4KRIn,NLkBA`FC!MTnf!!,(3oA]kt0^euB37.?Y!Rs$r!!=.Lj5]mo!RMD;!!34-anEpZOpLFT
!A_O`bQ5:*mf3AD]D'MObfmdUmf3A)VY/.6]+4f?jT#;pZhE_ek$\;X!!%$0liG!3mf3Asl1OBDdhqcY
q>^OLdIli,`<"ru!>;F+hu_V;!UTjeC\$Ba\I7j+!*fN[p##kl([h>)/][PB!P8Bl!!*_6p>Z51>lj<m
!,_Jjr8Rgj$h"&r?/YD9!Qu;J!!+[np#?(e!TF([&=W=:!le1?quH9f!+PNC!N?Fp!!-'AoumHF(%2,'
.CJim!NH1`!;lft8*]g7!R;YO!!*55o'?@<mJm6No]uRimJm8UjRqj?RfMFJ!CYf<huUb6m/R.iYk$]P
M=(?DN:c$.Z1n=n!!,C<p##h6i;`mIiV):4`u==F!<f_!irG#,!!3-#NqD?3[-dnp6JM1n!0uLC!C"["
bQ5!cm/R.hT_cn.bQ*(Z!!%N@bQ+C*!!,1#oumDjiW&udV=j0UNrf4[n,NJ?g%4P2ku-sM!<UL;li;\+
!!$R%li;%i!;ZZr$CpeI!J^^C!!+RpoABZ*:@A/`!l=Ne!.F88!+5EW!T7bQ!!*Fup#?(0!UTjf/(!nJ
!T6cB!!*/>o]#q#qZ-6g!+>HZ!,^]q!==eZbQ3%km/R/6]CX5Ib")%'r;Zj"Yk6->Ep`o-<qOT9@c@@g
7,7M&!TcT6!!311k5FZ@liG?Tmf3A0l1OBDl:gUG!/^C8!U<A<!!,C5p>?#*4TOmM!WcT]oABYd+n#C3
*8U;G!T$B8!!%WDhuV\*li?b[!CG<0irRpum/R1g?Jb;6!Q?5N!!+(tp#?)38aZQYK_XU,irS+1iW'!@
^@obO`]*8b!Wc<Ao?76?*q'(0)Tq`s!Qmb.!:^$hG4j&[b!P+g!<]V"liF'tm/R.rXn(fZPm@!_q>^P#
lLjKEcRA2]!4;Fc!SB0f!!*2#p##kE&FBH"%&Dh>o\]b0#O_Wn<o3N-!Q?DR!!'(mhuV(UirB)^WqGBQ
UCcem!=YjrirP2Gmf3AiiUu43a!U3S!3Z"T!REIg!;-<m!h&`*!Kmr[!!*Ino#q,c#4DNm:<N7R!OF!<
!!&PdbkoTb\gue@!BKB;liQHT!UTjf/EHEh!U3MN!!*4_o]uU]'(5f$#2/\9!Q#r=!!,"5p>?#/;uu@d
!@lanhuVY/p]1'h!<e/LhuTYdmf3@mcLp)r\/sZ1!B8p0ir\1>!UTje.fe>qirS(6mf3@kM"K^.V\/@t
!=$pDirQb5irB*8anX'_bfn4(!UTjf-H5T#!Qmq$!!*1JoZR?%&+9K!#.sQP!N6t.!:p0k#*nlJ!QYN4
!!%T@liGrSmf3A&Zh3SbI0&d:!A!40m.foJX:=4j!="PVhuUOsli7$3o&'Pt&+9K!'<:``!oS8'mf3A;
fCe&&UC@)$kPtVfO7hN6^^'3+!.=@t!S.eM!!*e8o]#ss!VHHi!!+S'p#?(M%-.Bh#(cHk!NcRm!!$s.
bQ5Khmf3D%R`tHK!Ghf*!!+FboumH%$fh9h!\`$sliH6_li7&,_=d0oli<RD!!+S$o]uQBmJm8gkOn0B
Nre;A!WjsppYZ),A,$&s!!+%Ko&'M4mJm89bk0fn4RN1M;V^s'!J^^<!!E9%!\MUiirS"Jli7&+](4k]
QL4_R.*qPG!'T`M!E7nKirY&<!9F1^!\(SPbQ5afli7&(Vt/%3L[G-C,eEWl!&jQOp](=eaS!aXHNE++
!DCu<liG*Kli7&`jR_^=k#^sN!D_tRliH5Xmf3CiJ*Zdo!+t0i!Ct<-huUJ4li7&\f_FD&huVP1mJm8[
ht>n.g'mEM!WdQ'p##gYi;`mLc1p<"^E<=Qnc/\cg[jG+h,NeB!DDGFirRsEmf3CiHK+VX!+P-lq>^O^
\G48KWuUI+!Ck'"bQ5^VmJm8TbOs'[`XD58!Wd2^oumD<huEdLfD4b5FR&o,W:K9U`?4LJ!1`]J!O2_&
!;6Bn%Ai^`!&<C3!Cb6.huIZ\!!&\_huUG1nGrOg!0m-6!N6(g!!*Luo\]^&huEdIchZT$DsIB'UAEpG
irQk7mJm6Qo]#tP!q-*i%%d+O!&*71!C+0kbQ)2P!:KmfP4HftWZ(:*!/L3j!LX#X!!*IfoZR:blN$VY
!X)]^qs4@(+7&t.+Q;nX!LEoW!!+"^p$;bGH3*I7!?B/SliZV@i"+`G!X)NNqqqLg*p`k-+4]r?!KR?O
!!*tRp##o/F92=?o)Je0^%L:aeILL;!X)QRqr7^l*p`k-+5$/E!KdKV!;lft)8u4.!oeA(mf3A-^\-Uf
f+-^=!Wu33qof)B)sdP**5_Zup<3Ph!q-*i(9mJU!m><Zmf3A*XS'd<_@>?%!GgZmliZEc!s%`h!X!Q1
o'??KmJm8_iq;X=iC`M<!A3F+liFHtmJubW!G9m\hu_\F"76'i")d#ehuH77!!,^Cp##l$7d^6W/(sdW
r87UV#2T=\BA!1C!oISlm/R1iDrU?J!(ZGW!DD,=irdq(!!)Kg!A*%!irQ:eh>dR^_Yq[[aBSf6!!344
bOWjW5kY3R!!,I)oumHR5jeUQ-cYi'!LsAN!!3@>jo4TI^('E/"!l%Um.BWF`>%b@!="VWliG9RmJm5i
o]uU4"5X"Z"_?<chuL+a%.!rp,/<^,!P9$6!!*7Zo\]bc+mo=1<:o)LIKT*?mJm:lA_d:F!O`F'!!+=]
o&Bbb'^l#&"cDs4!Q-)K!!$$sj8%^9J-4X.!X2fJrlbD=$g[io+0P1Y!NHe$!!*7NoZR<=!$:P.!)<+0
!HS>?!9*t^#DVC-j]:[I!G^rlliQEu"Rc<k&Bse5!NQCq!;lfsNV2W=k$?aB"UBP2i7V#o!!-ZgoAB]+
FTh.5!>!$Gi:l.1UBKub!/C1)!S^`3!!NUYh;d9hlMprtiq)13i-#7l!!*VKo]#tK"RZ6iL\9[.hHAV6
"U9(gbf39J!;?Ho>g)`_!m56[mf3@uYk6-?PQ^CS!.+=^!QS$t!;HNs#DVK=&aTJu(W>n2!S8[d!!#:U
li:nj!!*A<p$;_32uWg6!!EOVh4"uB!!*kHo&'Pm,jkX44nIS3B_;B%!!*A2p##kq1tr!5#D(g)&F9At
(;9;!!RE%Z!!,7Co]#pcmJm7n[IrP\cSaGW"9rtjNXkCU!>MR,bl5fe\fpJA!&sMn!+,'n!=,@lbQ5:.
g&M0fN]?b5p&G-qB'/[N!Lj/Z!!*.Uo]uV</FEK=/CO4X!QYu<!;$6m&r&=2!!341g@F/&PQL:R!<RcC
huVCYmJm8;a7\?k^(]3#!YU;Ili7(g@bpV8!L<fU!!*.Po]#u*/,0,=!!+Ump#?(g'\WNg&:-(t!!34(
`q%=SL'$fD!<RB8bQ5U.mJm87[e7iFXV0:e!=](r!!*G>p[%hE!TQT9!!*nJo]uUb'(,`#;s!]=!NQ7S
!!*K/q>g*e!=H.'huVFqmJm8'Z1QrTWY+Y!!DhDAhuTSRl2^;R!=T"q!!*G7o&Bc)6LFgS(:<_o!NZn$
!!,pOp>Z57V#f6L!=Jqp!!*D#o#q-Q473(L'Vb6D!LaPr!;$6l8B1>H!L*W%!!-*co'?CX'(Gu$!!,IF
p$;bEDuoD-!<\/Mli;.D!!,sSqV_2-!M^7p!!,=7p##o-C'!c'!<[oFhuIZC!:Tsh;W@9-!MpCr!!,@:
p#?,3C]Wu)!<[uHirF#a!7h,N9$?eL!L+,_!!,-toumK[@0,fs!<RH>bl,`cAAS<I'!:]j!F>fp!!%N@
liGusr;cBg!=#t)liHB8_>jTKV"*@D=on6qqZ$V@o\]c"/a`T>"g%CT!T#oT!!*\/r8[M2!F#Tm!!%?;
irRa`mJm7kY4^fUiB5WjmJm7uQLW0";??1c!,hGQ!Pp5Q!!*7ooumHZ2X^Xq!!-Beo'?D.%dj;t"NL*#
!P&:"!!*_mqs=4H!R2_'!!-3To&'Pl%IO2s"MFBb!jD_+mf3A#fCe&&_B/ORaT)?Eh"'J+c401A!<g10
irQFenGrOg!>4&YirR+?_>jU5`q%=S\I@m+!<]D#bk]H`TE=N]!>!-AbQ4sf_Z0]Nb4=m#l$id&!!,@G
p$;_FC[D*%8G)6LUC>6EqZ$X0^[g:ah09"h!!,78p##l.B'fQu7J,L=Rg\6Vi;`ll_Xc^gi-GIm!!,7;
p#?)4BC,[!7J,U@SIGGs`rH,PY4Bd<b&.:K!!,$toumH[?1S'n!!#4TbQ3\1_uKiAEp3)\!R`Ug!!EL_
lg4!4liG`smJm7hL\:!8lZ`HK!!3:>h"'A(a"6WY!X=86p##kq1[Y5D!eBt%!oJ#!bQ.G=!X*Ato&Bbn
/a`T?#))"/irRI_mJm7hK(\.*icG4`!8dbX"(KCCbQ5.#mJm:mG0BR&!P0oO!!*.DoumN]BE8+P!!+b*
na$7,m/R/2e+Du-W=AP$q#CF3\Fo1hk!-``!A2RdhuJ)j!!+7ao\]bD%.4)r(9dDh!S]`S!!+[to],r2
!.=/6!?oYYirPn`mJm8'Z1[,XhEB-ap&G+B](*uEDs[N**k(^b!KmiY!!*e+oumHW2Wt.s!!*:gna$;*
.I@*9B']*U!,([!!B/[)li>lB&&\GK#*&02!QZYU!!-Nco\]^Yp]1!f!Ai'phuV::_uKfBNq)-1b9u]X
!WZ]ho]#p]m/R/Dde2W$edfUu!=")Jbl#Zc[Nk/>!EdP;bQ(f5!!+^coumHP%FG1J!!,[Ho'?GAH3Wd;
!=cO1liH5jm/R,uo]uR`l2]N<!CbE,hu_\U"mu?k%'K6\!SSR]!!$I$hu_ipWP\]:7b%"h!oJ/)mJm7r
Yk6rVh&Z@mo)Jc"o]#qP_Z0^%^@KJLa_D"L!<)s!$_I"7!QH&F!!$-nbQ+*M!!*;8q!@kD!RMSK!!,^L
o]uU[#OMKkW:]EVFjg?]!!*8.n_aGf'^Yl$7b%(g!M]ne!!&\ahuI]_!8%8P"gdaZ!QYuB!!,UAo]#tL
#OMKkUA<jIirF&:!!*7sn]V$@'(#Z"5f**:!L3lg!:TsgP4ZruAbZ8M!!3A/lLX?Cl?M[r!<\MWliQBc
!Ug!i!#*oUliH!2_uKiBVr%%'!T%ka!!*1[q;D2/!o.;emJm8#b4XZne3CkO!X5R^oA]l1FSu40!!*1]
o]$#1AHD3!!><ZMirRas`rQ)=!X4t6o?76XB^Gd#!e0dc!m+XImJm8!\Fn&H_)gNTirB*,`:N<r_'&+F
!?'qiliGN_m/R/[j7Va>_&`CQaT)>e](=h\[iau;!>sG\huUkFnGrLf!Ctc7huU>,_Z0]_^%:7b\KC2=
!>sPgj8%^9asQKU!D(r;irQ_2_Z0]\Wq4F9VAoU(!!*kRoZR?E,4,@26,`H?!N-gX!;ZZs!D;/?liQK\
!q$$h!GqAo!KmQQ!!3=Xlh0TFQNQ:KhuEfZ7a^ne!oI2`mJm7gBCk$^MZ`AI!X*u0p##k3"9&;?!!30k
eFhi'i`uWR!!*+6oA]k2"7uTj!!3:Riq;=4OTWK$!WbR#oumK\;Zc@e!<HO+bkB6]IKJp;!X*SfoumGg
!l=p=#'T5(li>--'C>c#'=.8s!TQB2!!*bIo]uQ^bQ.>:!X<W!p>>td'(#Z"&ukN]!S9F#!!*_>o\]^M
joF0:!X<Z%p>Z1i'(#Z"'<Ccc!ST['!!*bAo]#sR!5\^;#%l!NbQ4jXm/R/!Re4f)`&@;hp](=,V"Dk2
:;?i2"eY,UliQ-D!UTjf8`fU2!N-Iq!!,%Cp$;_<*5DOU"IJ$Ahuhof:''_^!Cb]6huTDZm/R/Dh=]\,
eJca6nc/^oRH"#%!n^9Lm/R/Vh"9V-TFU>h!B&g.irRdOklB?9!X+D(prifV7fhuW!C+TrbQ3e7m/R/?
b4WsZ_AL#f![bPFq<S-T$1.]n"fM"Z!pN_dq#L'f!."5'!OE6M!!4FNhtc12QjN-[!<f"dhu__4!UTje
F7eAkWXQWB![P/4rT!k:!La>^!!*4qo]$#2;ZZ7c!-Rqo!NZ^X!:Bgg+em0UbQ3S,m/R.iOS$`ub";^%
!!$a*bQ4.?li>K7!BAp3liGHali7&Ri:Q@:bmNh<!=l[7lic\Al?<<D!!,"+qVVCo.dR-95LoDa!Q,9A
!:p0k%C#N`!o@nupAi87!B/L)irR4Oli7&OfC\)(`X;)5!"Aq6p#?,4Ers&U!AV@cbQ5'tli7&I_Y;:R
bQ5!Um/R.qT_6M1b%Cdi!!378ir&-El=:"n!;$6m%&E4^liHBqli7&Hf_+S3ha59^q#CHu@b1J8!o@8d
m/R1qS)<ns!T%h_!!,"&p##l#52Q@t!!374g&0k3iEucT!!3S#iq;=4iH+>c!B8?tirRarq#JA6!WlNB
r6,5b<W_Xg!Xat2oumHZBC5a%!!"dcoumHQ3P5=n$'soUliFX'li7&IjSA0?liGKfli7'(lLjKEbRhDe
!XXnErSR^\$2aen!!,%2o\]bj0'iQ=C#8O@!Po;f!;-<n$'=0FirQFlli7&Gg[sM,aY)o[!G^TdirR(/
iW.^5!XOD$rQG;8#j_Nl1<&n0!OXED!!-HLoumH@%f?=B!!*qDrp0[:3:$VG$`EU_!KdNT!;ulu!l=Nq
!/A&b!>hg9huV"Zli7%oT)7IAhuS]<m/R.g\+JSYJ%>U\(U!bt!R<V&!:Kmg$_[+O!K70K!!*/3o]#q&
aoLr3!>V.(bQ57/li7%nORpZsIKSs;!<T.jbQ)bG!7q2T!AE'kl?rm'!!,REo]uV@46uqJ/*HTl!TlcK
!5/@:!A2ORhKK.i!!,I7o\]c)3:d.H!!+M'p##l)5Iph!!A2XXiHPOm!!,L;ro<b5!T#j'!!+P+p#?)/
5e6q"!@bV(b%q7J!!,6soZR?V1[G)B--5c'!QI1F!:0[f@c>'=lMppboBZL]%IF,r!I=>(!PTQ:!7CiL
?.H>!lMppZoABYH%.+#q!H[nk!ONcT!!?Q[[hn?1!2T5H!N6G#!;HNp!Hn%p!O`rW!!?6<V%r:r!L(b"
bQ4%<m/R.fC%TUMU_pTA!=*cK8-/&W!C,c>liQ9P!UTjf)7oJ,!JCR%!9jIc#B3*4li7&Kh"9M+fi8(?
!!*qAo\]b!"6om4!!<IG702`T!Bo?4ir\":!UTjf(pinq!onb4\,ZU8Aj-7^!!,"!oZRBV:'(.jo`,".
U%HP0EWYn6_Z0]C#4)<j%A!+W!Q5W;!!5=Dm.K]F5.1Fl#R0Pp!=Y7bhuUD$li7&IfC[u$415+i#R0o%
pAb4&Qh05<]b0T2!B]$-irD3Z!;$6l#6jGo!=O_TbQ4^Sli7&D`:V7R2VeAN!!,IIo]uVB?L%RkMtH?:
dffCFW;lr`fC[u%gfj"D!/1"&!QYD9!!,@=p>Z88j54),!!%cGirR=+X8qkm!BS0kbQ5g`lMpp0oZR?E
"3(>q!!*D%oBZLe)XIG)'[$(7!/fY6_#OKBS+GP=Xr6R+!>E6?huJE*!2fet$(gbK!O*I0!!<3$'Z0M&
!/7$F!=4_\bl#ZcSegYm!>;R-bQ)ji!:p0l!Dq_GliC;kli7&]iq;X=hab`ff`2'S9\&am!EK6f!!,^C
p##l#7,e3]!!30qfCS#'<rqXf!DD,=irRb#quEPn!Wba,o?751!V$0f!!,I)oumHQ5+hlV(<?:<qWn6m
"7-!g#FkAP!OiWF!:Tsh'ts4s!NuUl!!*=ho\]bQ&'Ft(!!*hLoA]kV"7-!g#F>#B!O**r!5&:4'<LfL
!M9G[!!*:YoZRE/%KHL(!!*4FoBZM:<q67e!!+1to]uR"TE"uqDuAPghuVA+lMpr,de)GtDR0?2!!*4A
oA]l(;sODa*nBoC!,p*^e,TLOAb4+H_Fj+o!?8fGbQ)2:!4i.21t)!^!O<7%!!%!1liGrkTE#!Ia7J3i
W=JS$pAb2.o\]c!-Lq/?!!+jtoA]kP%dO)pD#NDhirR^XTE#!E[e%]ERLK8`!!$I"bQ5L'VZ?So!X>Le
o]uV=6L+UP(V',(!MBh:!9!nZ#+XTChuVFnlMpr$YOp`RQj_XK`rH/FT&TD&!STd(!!*k?o]#t@$hXM%
!!3@bbOj!Z`&[,`!Yh9NoumGo$D@G#9]ks5!2TZ*lMprYiq;X=k$=qdp](=cg@O5'S.4ca!Ct`6huVS7
_Z8Nn!D2,=irP_\lMprVg%FA+hHAY7_uKg)`q.CTNXY4R!C=WrbQ5a\pAh5o!?ArIliH-1l2Ug\o]uV,
';5C,)S#Ft!oVZll2UgSo\]bj'!)*,!!+%MoA]l*4R)nHT(M%DaqD\og].?lVt8+5`&?l\!06]q!O`Qt
!5ed<"*Wu%liQLE"mZ-h,i/+Z!0?pUW;lu%E8L6F!oK:Hm/R4g!$]k`huJP+!!37CiV2C3ir\5-"R?$g
,LuGH!/[iYoDepoB$0bi!m?E'lMpr-^\#_MHcQ3@!!+h(oBZM246lkJ"FKG,liH!.iW-ao!ADRdhuV+_
lMpthFl)fL!Rs70!2]_s0?j%J!RNjq!;um!"ErbsirRapT`>*C\,"8FbQ5=3lMptgC<H4n!Pp\!!:g*k
!I!\uliD\BlMpr.an4p#V[prNfDksRE8:'C!IG%:!!+1Vo\]bA%cm])!!31@ht,k/I0T!;!?]/Mirbqa
!!&ep!WcoTo?75S#4_cj!!+(BoZR>t%IaA'!!+4Qo]uV&)sRD(A*a$YqWn2bTE#!7Yk6iS_&<.Nmf3Ap
ht5h,<29Nm!!+1Io]#tj)X7;'?fL_<!*-`5irB*"T_-G/YSZR)!ERD9bQ(Ai!6>-@0[9=X!o[,[lMpr!
^\$jnc4'7DXoJJT_tN!iePQA5!!*_?rS[J/!Q5A<!!+^lp>Z;.;?6atm/R/#\+J\]`sejGq#CFFZM)KD
_Fajp!!*\.oZR?A$Gc`"!!36rh"^4;l^.qC!!31&iq;X>k^3Ke!6"p>"%^i7hu_et#O;?k!E7SBhu_\W
"8)Yp!!36oeG/&*ifXQ4!!<7$g#Med!oJ2(T)\oo6GE6=!m?3#lMpte9>gGH!m,3ZWW;\l!WmT.q<S..
/a<<:"g@Rb!S0!C!8@JT!ccujhuUeIl2UhfVY&dIb:hZO_#ON<F5H`Q!QQbV!!*5$o]#tt0D>IE!!347
a8*p[ZR>#<!!E:goZR?H.\$J>$]+ZG!9jMf!pTad5O7t.!Lj+k!:^$i$\A04!o6iXl2UiIht5h-PQAc(
f)PgZKDOU0i)TpE!!,7Bo]#t<!T3sk!!*FMqTK#`:'0\\!B/-nbQ3G!q>d5i!Z/6/rTjUOXpOCo!WW\&
o]uV?7%+)W(9?<khuhopV$ZDe!=Y@fhuVLsXoRhh!Z%rtrSmt=V[;Vg!=YFhirRq%a8jZh!Yh0IrQG>d
Q3caU!=OeWbQ5^FiW-Ig!@c4kliQM&39^DD7Gme)!pcitquE;g!@P\^hu_fX2=1DB!!,F9p##o/U(?Vk
XT/AL_uAZtilj:E!!,I=puDA6!og!dR/d74YPu`IbI92#!:g*j4Mg^7!m?c;U&arg#6@6Em-O"U"6oje
#-7C_!pEJ^]E$dg#6@-7i8EI+"6oje#,ChK!o-KNec<Vg#6@0;j5]*6"6oje#,UtP!oH`Rn,THg#6?ot
bfn4;!pTad#*eu.qof,`7KJkV"U8Q%la[`+!:Tsh6/_D%!Q,5>!;$6p"^p-CYS67$!Bo!*huU@p^&Zje
"U/>lij'9_!!,:8o]#tb$.o6n!!NO-aig=ikl:`D_Xu%QW<i%pU]:ISfKJI!!=Yn(m.ouKk@KkX!eefZ
quH-b!=PLkhuVV@V?$&b!f##_kl:_mT_.7FhdO;#eGoYq\i&^P!=Fq\bQ5ddg&S_b!Z"`<kl:`Ljn.m?
^E)qHT`>-/:^$"_"$P>qi:c(0[2Y>1";Oc:!!)<b!Bo61irQV/W;u8b!Y\--kl:`C`q7IUV&@/N\,ZO9
U\!gPFkctg!!*CqoABUep&KaG!=>=girF%\!9jIa#`\H"!+i22cN!u@hXp.8cPa\%[/^5"e+DQ!`>IJ4
RfEI^f(@u'`u+UPJcGiP6br?<!OER,!0I6^"Ln$i!pOq4K`LfH!<fRthu__T"J5\L!!*5,o]$#2F9K,S
_>jT=T(L5.b%Ln+!3#r"!ESOYliG?Oli<(H!Wc3VpYc&/!Q,k3!;$6m!E8"MirR.>T`EdH!Wbp:oZR?A
)7oma!!++Oo]uYEFog+nV>pW9Z1QrUhJ`Ma!/pmY*4,J$r8Rk;EWM$tnGiS-U%HP1b%:[M!7q2OC?Y<V
!QH@t!5/@5A_cq9!PBT-!2BMpB&E7@!P]iK!/U[V>flofq9/l?*fL*f!!+:joBZH`V#]$G!?oJShuHrq
!4r43+is98!*e+VT`>*7[.DKA;Y'mE!!3=Vl2L&DliGB@NWAGH!X*r-o\]bg%&a0T!!3:Pi:Q%1`sffb
\Gu[6Em"$u!O<*g!1s5l1Z7ol!Tdqd!/1CS0\,+ShuVM>joCVG!AW3uir\"F!.k4H!!+XfoZR?U=IT<K
!!*b6oBZLb'"%_Z!!*_-oABYL&^LHY!!*_/oA]kR&a9:Y!!*Xqo?76)%tjrW!!-Bdo]uVA9q;:?!!-6T
o\]c*8[e];!!-9Xo]#u09$mX<!!,s9oZR?W6L+W5!!++hp$;eIl^SB<!;-<m)p%[0!oK4MTE*^H!?B;T
ir\5+%(ZGT!!*tGoZRB[LC2N2VuQl)M<aa"!ST<r!0.$\#_Lq.i;MR7cS((So)JgtK]2R`!R`Zr!8.>R
#Bn8^bQ5C-]E#\H!C5N6liHF-eGuEG!Bnp(huV_cmf87G!Bo$1j87j;ie!$fn,NJJ_">hObB9T\f)Pgl
]^tIj^EL;k]`8'PZLcuT[34*%UAt<7[I`DZ[ik5AM#[PoUAW71bQ4O\irGJI!X+5@o]uYE?NU0+JcPcM
!X*u-o\]f-=ot&kj8]5aJD^"Z!o[AcZ2i#I!X!McoZRBZ;?G&BYQ+\ikO\$@ZjPmpQ2gqKh"0G+WsSh,
JcPZJ!C#E4irQ:iRK2:H!BA0lbQ44?ZiJ/I!@,5JliPd)!R:\J!!+7JoAB\o4TXaHPQ1_.[.E;YcTV=0
K)k]I!?S!,bQ>@8!M'5J!!.rBo]uYFL'4pb`;fpjht5h.hgYdU!36)#K];Xa!oeb6l2ZqH!HuZYbQ>t0
",-aL!!,UKoBZLh(nL``!!,L<oABYS(UsI_!!,O@oA]kX(X`;_!!,:#o?76/($kp]!!,%2p?VqKm,^nA
LB-rH!Ar'nhu_S&!MKMI!!+t'o]$#.8HHF'^]4Bg](F2J`^0^V!2TYrGNnhf!pc6UmJr.F!HHrli;MR8
hiRut!1ElgF5ZcP!ofCFq#H!H!rr=6b4a$\bCfq]!9F1](97)p!Q-=f!6Y?C'r(E[!P'Pt!3lM)'r:Q`
!PBc<!1*Zd'9i.6!N@:?!.k4J!!,(Aq!8(I?3->li;`m9gA'S-hHBra!65'?2;S&f!o[>aaoJOD!AMOg
bQ>pb!TX6E!!34Gk5+EGlBVbT!.k4G!!34Ag\Th0hMqo0!8[\W!d!5pir\2$$*jQL!!347a84!]b(9oC
!3#r!(q0;-!Q?;F!07*\(TmPl"1o]V!.k4C!!*n>qVqUj,+8Mc!!*h+qTJu?*jbp^!!,FDr9OIA;9]*;
!!,:5r87V*9]lD6!!,=9r8Rh09nEB7!!,*rr6,2X7[sJ0!!3@Ll2BrLHj7"Z]Dr!:Eo$]P!Hn[o!29Gp
"a&]$irO?.l2ZV?!X38[rlbGfCBiMnQ2h+'_sHaU]b9r;JcPZJ"r"Q*i8:jQNr\,="r+`1j5RKZW;ss=
"qmoZbfcal_Z6b<"@q24eiMRdOoPVQceuu*p&K[EpAb=bdc8V4OT=2;"?sNC\MC2c_Z0fEJECPK`;lk;
":'5,@g(ZhNrT:fHer<:q#H!HoDf!uDT>o_PQ9A:!Z?FuXT6*9!Z6+l`rMq9!Z61ni;ec9!Z#V_qZ)3J
n,NM-ILqeFec5agG7UnX]Dr!MGn8$tU&Y61D%>V,o`0L~>

%%EndBinary
grestore
np
631.45 332.839 mo
631.19 91.76 li
632.19 91.76 li
632.45 332.838 li
cp
628.69 92.76 mo
631.68 86.76 li
634.69 92.76 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
838.2 294.72 mo
922.44 294.72 li
922.44 258.36 li
838.2 258.36 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
43 <001C60D8A8C9B61AE94F5D0456ECBCBA90CCFBAD8FDFDE1C76A25DC4FB2C
0A2F1A737ABA942A0D167DB52780D6> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
845.47 282.46 mo
(\000+\000R\000V\000W)
[17.8319 14.3038 11.952 0 ]xsh
753.84 241.8 mo
934.08 241.8 li
934.08 205.44 li
753.84 205.44 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
0 425.28 mo
960 425.28 li
960 0 li
0 0 li
0 425.28 li
eclp
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
39 <001C60D8A8C9B6E081B04FC435829385C5BEDC68DDC35DE8CE7C5EDA488D
6B3D34241C637D17663805636ABD3B433EB8517B7BE139E4B8BA2B0A5F589491
BFB4E8873019EA26DF68E10022DBC58622EA817B140FFE44A9DFABA30D8E7300
B0B48771> |
89 <001C60D8A8C9B7E52216419985ABDC2A2C8279C7A2E84BC8C8D658828106
065B1850310ED427E848> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24.024 0 0 -24.024 0 0 ]msf
761.14 229.46 mo
(\0007\000D\000U\000J\000H\000W\000\003\000'\000H\000Y\000L\000F\000H)
[12.4685 13.934 9.92175 14.5825 13.7656 9.10504 8.16809 17.9938 13.8618 13.5014 6.10199 12.1803 
0 ]xsh
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
36 <001C60D8A8C9B65B43E736E97338B3171E4D5FC9AD2E09D53507110EAE30
BBE0AD4E51A448FF6ED2C8399AE02E57D1E794E82EDCABB32C42C690> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [39.984 0 0 -39.984 0 0 ]msf
484.49 323.81 mo
(\000$)sh
gsave
0 425.28 mo
960 425.28 li
960 0 li
0 0 li
0 425.28 li
eclp
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
37 <001C60D8A8C9B654A4F8155C331190650E5C458B09F0ADB770BE1877FCB8
910F579D71D9DF3F0C0573230C61F43F4845DBF05498F3910AD33494AEBFA7C3
A18F78E3EEC2DE8F18C55CF37B718E4D70A33E560C66441849273B64230A55CA
C1E945C71BD5257BD7A0BE53CBD725F3A5E119E48DAD9C4DFBD0C2A0AEC05216
5D957E9D8F11E9FD44B22227449941F7CC5624A755FACF677CEF96F2E0E7B9ED
A64A4EABA3CAE4277CB2A168CE5B182DCE2112DBBC> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [39.984 0 0 -39.984 0 0 ]msf
22.008 128.45 mo
(\000%)sh
grestore
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [39.96 0 0 -39.96 0 0 ]msf
210.86 128.33 mo
(\000&)sh
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [39.96 0 0 -39.96 0 0 ]msf
502.75 128.33 mo
(\000')sh
%ADOBeginSubsetFont: XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
!
end
end end
%ADOEndSubsetFont
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [39.96 0 0 -39.96 0 0 ]msf
791.21 128.33 mo
(\000\()sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBJG+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 269 x Fp(Figure)23 b(11:)34 b(Pro)r(cess)24
b(\035o)n(w)e(of)i(Blueto)r(oth)f(loader)g(for)g(mrub)n(y)e(b)n(yte-)
-152 1106 y(co)r(de)p 40 1238 1801 4 v -49 1315 a Fh(1)56
b Fl(/)p Fe(\003)24 b Fl(tRite)-6 b(VMBlueto)r(oth)r(.cdl)23
b Fe(\003)p Fl(/)-49 1390 y Fh(2)56 b Fl(cellt)n(yp)r(e)25
b(tRite)-6 b(VMBlueto)r(oth1)25 b({)-49 1464 y Fh(3)183
b Fl(en)n(try)25 b(sT)-6 b(askBo)r(dy)25 b(eMrub)n(yBo)r(dy)q(;)-49
1539 y Fh(4)183 b Fl([optional])24 b(call)f(sEv)n(en)n(t\035ag)i(cEv)n
(en)n(t\035ag)s([];)-49 1614 y Fh(5)183 b Fl([optional])24
b(call)f(sSemaphore)i(cSemaphore)s(;)-49 1689 y Fh(6)183
b Fl(attr)25 b({)-49 1763 y Fh(7)247 b Fl([)o(omit]c)n(har_t)25
b Fe(\003)p Fl(mrub)n(yLib)q(;)-49 1838 y Fh(8)247 b
Fl(c)n(har_t)25 b Fe(\003)p Fl(irepLib)f(=)-49 1913 y
Fh(9)691 b Fl(C_EXP\("&$cell_global$_irep)q(")q(\);)-82
1987 y Fh(10)247 b Fl(uin)n(t32_t)24 b(irepAppSize)h(=)-82
2062 y Fh(11)691 b Fl(C_EXP\()24 b(BUFFER_SIZE)f(\);)-82
2137 y Fh(12)247 b Fl(FLGPTN)23 b(setptn)r(;)-82 2212
y Fh(13)183 b Fl(};)-82 2286 y Fh(14)g Fl(v)l(ar)25 b({)-82
2361 y Fh(15)310 b Fl(mrb_state)25 b Fe(\003)q Fl(mrb;)-82
2436 y Fh(16)310 b Fl(mrb)r(c_con)n(text)27 b Fe(\003)p
Fl(con)n(text)r(;)-82 2510 y Fh(17)310 b Fl([size_is)o(\(irepAppSize)r
(\)])23 b(uin)n(t8_t)i Fe(\003)p Fl(irepApp)q(;)-82 2585
y Fh(18)183 b Fl(};)-82 2660 y Fh(19)56 b Fl(};)p 40
2711 V -152 2926 a Fp(Figure)27 b(12:)37 b(Cellt)n(yp)r(e)26
b(description)h(for)g(Rite)-6 b(VM)26 b(with)g(Blueto)r(oth)-152
3013 y(loader)h(for)f(mrub)n(y)f(b)n(yteco)r(de)-152
3285 y(host)30 b(is)f(transferred)h(and)f(receiv)n(ed.)45
b(In)28 b(this)i(framew)n(ork,)h(ZMO-)-152 3373 y(DEM)26
b([18])h(is)f(used)g(as)g(the)f(binary)g(transfer)i(proto)r(col.)-77
3460 y(Figure)g(11)g(sho)n(ws)h(the)e(pro)r(cess)h(\035o)n(w)g(for)g
(executing)g(an)f(mrub)n(y)-152 3547 y(program)18 b(on)f(the)g(Rite)-6
b(VM)17 b(comp)r(onen)n(t)f(with)i(the)e(Blueto)r(oth)i(loader)-152
3634 y(for)27 b(mrub)n(y)e(b)n(yteco)r(de,)i(suc)n(h)e(as)i(Rite)-6
b(VMBlueto)r(oth1.)37 b(The)26 b(main)-152 3721 y(tRite)-6
b(VMBlueto)r(oth)26 b(co)r(de)g(is)g(sho)n(wn)g(in)g(Figure)g(13.)-77
3808 y(First,)38 b(the)c(Blueto)r(oth)h(loader)h(receiv)n(es)f(the)f
(mrub)n(y)f(applica-)-152 3896 y(tion)25 b(b)n(yteco)r(de)f(from)i(the)
e(host)h(\(Figure)g(11\(A\);)g(lines)h(6-7)f(in)f(Fig-)-152
3983 y(ure)33 b(13\).)57 b(The)33 b(b)n(yteco)r(de)f(is)i(stored)f(in)g
(a)g(comp)r(onen)n(t)g(v)l(ariable,)-152 4070 y(suc)n(h)24
b(as)g Fi(V)l(AR_ir)m(epApp)p Fp(,)h(as)f(sho)n(wn)h(in)e(Figure)i(12.)
35 b(This)24 b(pro)r(cess)h(is)-152 4157 y(exclusiv)n(ely)h(carried)g
(out)f(b)n(y)g(the)g(semaphore.)-77 4244 y(Second,)30
b Fi(mrb_state)g Fp(and)f Fi(mrbc_conte)o(xt)h Fp(p)r(oin)n(ters,)h
(and)e(mrub)n(y-)-152 4332 y(TECS)20 b(bridges)f(are)g(initialized)h
(\(Figure)f(11\(B\);)h(lines)f(9-14)h(in)e(Fig-)-152
4419 y(ure)24 b(13\).)35 b Fi(V)l(AR_mrb)23 b Fp(and)h
Fi(V)l(AR_conte)o(xt)g Fp(sho)n(w)g(the)g(v)l(ariables)h(of)g(the)-152
4506 y Fi(cell)p Fp(.)36 b Fi(mrb_state)27 b Fp(is)f(a)g(set)h(of)g
(states)f(and)g(global)h(v)l(ariables)g(used)f(in)-152
4593 y(mrub)n(y)-6 b(.)38 b(The)28 b(sync)n(hronization)f(of)h(m)n
(ultiple)g(tasks)f(is)h(p)r(erformed)-152 4680 y(in)i(this)h(pro)r
(cessing)g(phase.)49 b(The)30 b(Rite)-6 b(VM)30 b(that)f(\034nishes)i
(execu-)-152 4767 y(tion)36 b(at)g(this)f(p)r(oin)n(t)g(w)n(aits)i(for)
f(the)f(another)h(Rite)-6 b(VM)35 b(to)g(\034nish)-152
4855 y(loading)27 b(and)e(initialization.)-77 4942 y(Third,)h(the)g
(Rite)-6 b(VM)25 b(reads)h(the)g(b)n(yteco)r(de)f(of)i(mrub)n(y)d
(libraries)-152 5029 y(\(Figure)39 b(11\(C\);)g(lines)g(17-19)h(in)e
(Figure)h(13\).)72 b(The)39 b(mrub)n(y)e(li-)-152 5116
y(braries)g(are)g(a)g(set)f(of)h(Rub)n(y)e(classes,)41
b(suc)n(h)36 b(as)g(the)g(motor)h(and)-152 5203 y(sensor)31
b(classes.)48 b(F)-6 b(or)29 b(example,)i(the)e(motor)i(class)g
(de\034nes)e(meth-)-152 5290 y(o)r(ds)38 b(to)f(rotate)g(and)g(stop)g
(a)g(motor.)69 b(The)37 b(tRite)-6 b(VMBlueto)r(oth)-152
5378 y Fi(cell)30 b Fp(has)g(the)g(attributes)f(sho)n(wn)i(in)e(Figure)
i(12.)48 b Fi(A)m(TTR)28 b Fp(indicates)p 2232 -137 V
2143 -60 a Fh(1)56 b Fl(/)p Fe(\003)24 b Fl(tRite)-6
b(VMBlueto)r(oth)r(.)o(c)24 b Fe(\003)p Fl(/)2143 15
y Fh(2)56 b Fl(v)n(oid)2143 90 y Fh(3)g Fl(eMrub)n(yBo)r(dy_main)q(\()
24 b(CELLID)n(X)g(idx)g(\))2143 165 y Fh(4)56 b Fl({)2143
239 y Fh(5)119 b Fl(/)p Fe(\003)24 b Fl(Omit:)f(start)i(of)f(exclusiv)n
(e)g(pro)r(cess)h(b)n(y)f(semaphore)h Fe(\003)p Fl(/)2143
314 y Fh(6)119 b Fl(/)p Fe(\003)24 b Fl(Receiv)n(e)h(the)g(b)n(yteco)r
(de)h(via)d(Blueto)r(oth)i Fe(\003)p Fl(/)2143 389 y
Fh(7)119 b Fl(blueto)r(oth_loader)s(\()24 b(V)-8 b(AR_irepApp)24
b(\);)2143 464 y Fh(8)119 b Fl(/)p Fe(\003)24 b Fl(Omit:)f(end)h(of)g
(exclusiv)n(e)g(pro)r(cess)h(b)n(y)f(semaphore)h Fe(\003)p
Fl(/)2143 538 y Fh(9)119 b Fl(/)p Fe(\003)24 b Fl(New)g(in)n(terpreter)
j(instance)e Fe(\003)p Fl(/)2110 613 y Fh(10)119 b Fl(V)-8
b(AR_mrb)24 b(=)f(mrb_op)r(en)r(\(\);)2110 688 y Fh(11)119
b Fl(/)p Fe(\003)24 b Fl(Omit:)f(error)j(c)n(hec)n(k)f(for)f(mrb_state)
h Fe(\003)p Fl(/)2110 762 y Fh(12)119 b Fl(/)p Fe(\003)24
b Fl(New)g(mrub)n(y)h(con)n(text)g Fe(\003)p Fl(/)2110
837 y Fh(13)119 b Fl(V)-8 b(AR_con)n(text)26 b(=)d(mrb)r(c_con)n
(text_new)t(\()h(V)-8 b(AR_mrb)23 b(\);)2110 912 y Fh(14)119
b Fl(/)p Fe(\003)24 b Fl(Omit:)f(initialization)h(of)f(mrub)n(y)q
Fe(\000)p Fl(TECS)h(bridge)g Fe(\003)p Fl(/)2110 987
y Fh(15)119 b Fl(/)p Fe(\003)24 b Fl(Omit:)f(sync)n(hronization)j(of)
2110 1061 y Fh(16)564 b Fl(initializing)23 b(mrub)n(y)h(application)h
Fe(\003)p Fl(/)2110 1136 y Fh(17)119 b Fl(/)p Fe(\003)24
b Fl(Load)h(mrub)n(y)f(library)h(b)n(yteco)r(de)h Fe(\003)p
Fl(/)2110 1211 y Fh(18)119 b Fl(mrb_load_irep_cxt)r(\()24
b(V)-8 b(AR_mrb,)2110 1285 y Fh(19)818 b Fl(A)-6 b(TTR_irepLib,)23
b(V)-8 b(AR_con)n(text)26 b(\);)2110 1360 y Fh(20)119
b Fl(/)p Fe(\003)24 b Fl(Load)h(mrub)n(y)f(application)h(b)n(yteco)r
(de)h(and)e(run)g Fe(\003)p Fl(/)2110 1435 y Fh(21)119
b Fl(mrb_load_irep_cxt)r(\()24 b(V)-8 b(AR_mrb,)2110
1510 y Fh(22)818 b Fl(V)-8 b(AR_irepApp,)23 b(V)-8 b(AR_con)n(text)26
b(\);)2110 1584 y Fh(23)119 b Fl(if)23 b(\()h(mrb)p Fe(\000)p
Fl(>exc)h(\))f({)2110 1659 y Fh(24)183 b Fl(/)p Fe(\003)24
b Fl(F)-6 b(ailure)24 b(to)g(execute)i Fe(\003)p Fl(/)2110
1734 y Fh(25)183 b Fl(mrb_p\()24 b(V)-8 b(AR_mrb,)2110
1808 y Fh(26)564 b Fl(mrb_ob)t(j_v)l(alue)q(\()24 b(V)-8
b(AR_mrb)p Fe(\000)p Fl(>exc)24 b(\))g(\);)2110 1883
y Fh(27)183 b Fl(exit\()24 b(0)g(\);)2110 1958 y Fh(28)119
b Fl(})2110 2033 y Fh(29)g Fl(/)p Fe(\003)24 b Fl(Omit:)f(sync)n
(hronization)j(of)2110 2107 y Fh(30)564 b Fl(terminating)25
b(mrub)n(y)f(application)h Fe(\003)p Fl(/)2110 2182 y
Fh(31)119 b Fl(/)p Fe(\003)24 b Fl(F)-6 b(ree)25 b(mrub)n(y)g(con)n
(text)h Fe(\003)p Fl(/)2110 2257 y Fh(32)119 b Fl(mrb)r(c_con)n
(text_free)t(\()24 b(V)-8 b(AR_mrb,)23 b(V)-8 b(AR_con)n(text)26
b(\);)2110 2332 y Fh(33)119 b Fl(/)p Fe(\003)24 b Fl(F)-6
b(ree)25 b(in)n(terpreter)i(instance)e Fe(\003)p Fl(/)2110
2406 y Fh(34)119 b Fl(mrb_close)q(\()24 b(V)-8 b(AR_mrb)24
b(\);)2110 2481 y Fh(35)56 b Fl(})p 2232 2532 V 2040
2747 a Fp(Figure)24 b(13:)34 b(Main)24 b(co)r(de)g(for)g(Rite)-6
b(VM)22 b(with)i(Blueto)r(oth)g(loader)g(for)2040 2834
y(mrub)n(y)g(b)n(yteco)r(de)2040 3111 y(an)33 b(attribute)f(whic)n(h)g
(is)h(a)g(\034xed)e(v)l(alue)h(that)g(cannot)h(b)r(e)f(rewrit-)2040
3198 y(ten,)k(unlik)n(e)e Fi(V)l(AR)p Fp(.)f(The)i Fi(mrubyLib)f
Fp(indicates)h(the)f(program)h(\034les)2040 3285 y(of)d(the)f(mrub)n(y)
g(libraries,)j(and)d(is)h(an)g(attribute)f(b)r(ecause)h(mrub)n(y)2040
3373 y(libraries)26 b(are)e(not)g(mo)r(di\034ed)g(in)g(the)g(prop)r
(osed)h(dev)n(elopmen)n(t)e(pro-)2040 3460 y(cess.)34
b(Here,)22 b Fi([omit])f Fp(is)g(only)g(used)g(for)h(the)e(TECS)i
(generator;)i(th)n(us,)2040 3547 y(the)f(attribute)g
Fi(mrubyLib)h Fp(do)r(es)g(not)f(consume)h(memory)-6
b(.)33 b Fi(ir)m(epLib)24 b Fp(is)2040 3634 y(the)36
b(p)r(oin)n(ter)g(of)h(the)f(arra)n(y)h(in)f(whic)n(h)g(the)g(b)n
(yteco)r(de)g(of)h(mrub)n(y)2040 3721 y(libraries)e(is)f(stored.)59
b(T)-6 b(o)34 b(summarize,)i(the)e(b)n(yteco)r(de)f(of)h(mrub)n(y)2040
3808 y(libraries)d(is)f(stored)g(as)g(an)f(attribute)g(of)i(the)e(comp)
r(onen)n(t)g(during)2040 3896 y(the)c(\034rst)h(compilation.)2115
3983 y(F)-6 b(ourth,)25 b(the)g(Rite)-6 b(VM)24 b(reads)i(the)f(b)n
(yteco)r(de)g(of)h(the)f(mrub)n(y)f(ap-)2040 4070 y(plication)k
(transferred)f(via)h(Blueto)r(oth)f(\(Figure)g(11\(D\);)h(lines)f(20-)
2040 4157 y(22)f(in)f(Figure)g(13\).)35 b(The)25 b(mrub)n(y)f
(application)h(b)n(yteco)r(de)g(is)g(stored)2040 4244
y(in)18 b(an)g(arra)n(y)g(of)h Fi(ir)m(epApp)p Fp(,)i(whic)n(h)d
(di\033ers)h(from)g(the)e(arra)n(y)i(that)e(holds)2040
4332 y(the)32 b(mrub)n(y)e(library)j(b)n(yteco)r(de.)52
b(Note)32 b(that)g(t)n(w)n(o)g(b)n(yteco)r(des)g(are)2040
4419 y(read)26 b(separately)g(in)g(the)f(Rite)-6 b(VM.)2115
4506 y(Finally)g(,)24 b(the)f(mrub)n(y)f(task)h(runs)g(\(Figure)g
(11\(E\);)h(lines)g(20-22)h(in)2040 4593 y(Figure)32
b(13\).)54 b(When)31 b(an)h(mrub)n(y)e(application)j(is)f(mo)r
(di\034ed,)i(only)2040 4680 y(the)f(b)n(yteco)r(de)g(of)i(the)e(mo)r
(di\034ed)g(application)i(should)e(b)r(e)h(trans-)2040
4767 y(ferred;)i(the)c(mrub)n(y)e(libraries)k(do)e(not)g(need)g(to)g(b)
r(e)g(touc)n(hed)f(b)r(e-)2040 4855 y(cause)26 b(they)f(t)n(ypically)h
(do)f(not)h(c)n(hange.)2115 4942 y(The)20 b(pro)r(cess)h(sho)n(wn)f(in)
f(Figure)i(13)f(\(lines)g(23-28\))h(is)f(carried)h(out)2040
5029 y(when)h(an)f(exception)h(o)r(ccurs.)34 b(When)21
b(all)i(mrub)n(y)d(applications)j(are)2040 5116 y(completed,)h
(mrb_state)e(and)h(mrb)r(c_con)n(text)e(are)j(freed)f(\(lines)g(of)2040
5203 y(31-34)h(in)e(Figure)h(13\).)34 b(The)22 b(prop)r(osed)h(framew)n
(ork)h(supp)r(orts)e(con-)2040 5290 y(tin)n(uous)f(loading;)j(th)n(us,)
e(this)f(pro)r(cess)h(lo)r(ops.)34 b(After)21 b(the)g(v)l(ariables)2040
5378 y(are)26 b(freed,)g(the)f(Rite)-6 b(VM)24 b(w)n(aits)j(for)f(the)e
(next)h(mrub)n(y)f(application)p eop end
%%Page: 6 6
TeXDict begin 6 5 bop -152 687 a @beginspecial 0 @llx
0 @lly 756 @urx 312 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/rotateReadyQueue.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: rotateReadyQueue.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:11:20
%%BoundingBox: 0 0 756 312
%%HiResBoundingBox: 0 0 756 311.8801
%%CropBox: 0 0 756 311.8801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T19:38:13+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T19:38:13+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -311.88 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 311.88 li
756 311.88 li
756 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 311.88 mo
756 311.88 li
756 -6.10352e-5 li
0 -6.10352e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
100.8 134.16 mo
173.16 134.16 li
173.16 111.12 li
100.8 111.12 li
cp
ef
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
100.8 134.16 mo
173.16 134.16 li
173.16 111.12 li
100.8 111.12 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
78 <001C60D8A8C9B794D33B340B990850C065E40D166F6B8A65A7F0F8858ECE
050176CE5B3D54865610F2C7BA0E6A48EB238D93222848> |
3 <001C60D8A8C9B816D234> |
20 <001C60D8A8C9B6605B97E3474607F65DA83467005204B5F48E11F4969E87
21827C7B7F47B5579624C0429CB1D21355B681041D4720> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
112.58 125.9 mo
(\0007\000D\000V\000N\000\003\000\024)
[8.15871 9.11763 7.82857 8.61449 5.39191 0 ]xsh
63.78 302.4 mo
650.88 302.4 li
650.88 304.44 li
63.78 304.44 li
cp
649.86 300.36 mo
655.98 303.42 li
649.86 306.48 li
cp
f
125.52 303 mo
186.48 303 li
186.48 243 li
125.52 243 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
125.52 303 mo
186.48 303 li
186.48 243 li
125.52 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
149.11 277.848 mo
(\000\024)sh
112.08 223.32 mo
115.44 223.32 li
115.44 199.44 li
122.16 199.44 li
122.16 223.32 li
125.52 223.32 li
118.8 230.04 li
cp
ef
112.08 223.32 mo
115.44 223.32 li
115.44 199.44 li
122.16 199.44 li
122.16 223.32 li
125.52 223.32 li
118.8 230.04 li
cp
@
199.56 134.28 mo
272.64 134.28 li
272.64 111.24 li
199.56 111.24 li
cp
/1 
[/DeviceCMYK] /CSA add_res
level3{
gsave
[1 0 0 -1 0 311.88 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [236.1 223.68 236.1 177.6 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnruK5>-"K5>-"K5>0#KPb?%KPb?%KPbB&Kl1Q(Kl1Q(Kl1T)L2Uc+L2Uc+L2Uf,LN$u.LN$u.
LN$u.LiI21LiI21LiI21M/mD4M/mD4MK<S6MK<V7Mf`e9Mf`e9Mf`h:N-0"<N-0"<NHT4?NHT4?Nd#CA
Nd#FBNd#FBO*GUDO*GXEO*GXEOEkgGOEkjHOa;$JOa;'KOa;'KP'_6MP'_9NPC.HPPC.HPPC7QRP^RZS
P^R]TP^[cUQ%!oWQ%*uXQ%*uXQ@F,ZQ@O2[Q@O2[Q[sD^Q[sD^R"9P`R"BVaR"BVaR=fhdR=fhdR=fke
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~FC&)MFC&)MFC&)MF^A2NF^A2NF^J;PF^J;PG$eDQG$eDQG$eDQG@4VTG@4VTG@4VTG@4VTG@4VTG[XhW
G[XhWG[XhWG[XhWG[XhWH"(%ZH"(%ZH"(%ZH"(%ZH"(%ZH=L7]H=L7]H=L7]H=L7]H=L7]HXpI`HXpI`
HXpI`HXpI`Ht?[cHt?[cHt?[cHt?[cI:cjeI:cmfI:cmfI:cmfI:cmfIV3'hIV3*iIV3*iIV3*iIqW9k
IqW9kIqW<lIqW<lIqW<lJ8&KnJ8&NoJ8&NoJ8&NoJSJ]qJSJ]qJSJ]qJSJ`rJSJ`rJnnotJnnotJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnotJnnotJSJ`rJSJ`rJSJ]qJSJ]qJSJ]qJ8&NoJ8&NoJ8&NoJ8&KnIqW<lIqW<lIqW<lIqW9k
IqW9kIV3*iIV3*iIV3*iIV3'hI:cmfI:cmfI:cmfI:cmfI:cjeHt?[cHt?[cHt?[cHt?[cHXpI`HXpI`
HXpI`HXpI`H=L7]H=L7]H=L7]H=L7]H=L7]H"(%ZH"(%ZH"(%ZH"(%ZH"(%ZG[XhWG[XhWG[XhWG[XhW
G[XhWG@4VTG@4VTG@4VTG@4VTG@4VTG$eDQG$eDQG$eDQF^J;PF^J;PF^A2NF^A2NFC&)MFC&)MFC&)M
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~R=fkeR=fhdR=fhdR"BVaR"BVaR"9P`Q[sD^Q[sD^Q@O2[Q@O2[Q@F,ZQ%*uXQ%*uXQ%!oWP^[cUP^R]T
P^RZSPC7QRPC.HPPC.HPP'_9NP'_6MOa;'KOa;'KOa;$JOEkjHOEkgGO*GXEO*GXEO*GUDNd#FBNd#FB
Nd#CANHT4?NHT4?N-0"<N-0"<Mf`h:Mf`e9Mf`e9MK<V7MK<S6M/mD4M/mD4LiI21LiI21LiI21LN$u.
LN$u.LN$u.L2Uf,L2Uc+L2Uc+Kl1T)Kl1Q(Kl1Q(KPbB&KPb?%KPb?%K5>0#K5>-"K5>-"JnnruJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 311.88 ]ct
/0 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~R$a8.Q^=&)QBd`#Pa%DrPEV/mP*(lgOH>NaNfK-ZNK&mUMi3IMMM[1GLkgb@L5(G:KnY25KS+o0JqAT*
JUrB'J:N0#J:E&uIsuiqIXZ]nI=6KjI!g<gH[C*cH?sm_H$O[\G^+IXG^"@UGB\4RG'8%OF`heJFEDSF
F)uDEFEDVIF`hkNG'8%QGB\7TG^+IXG^4R[H$O^^H?spbH[C-fI!g<iI=6NmIXZ`pIt)rtJ:N0#J:W9&
JUrE)JqJ].KS5#4KnY89L51P>LkpnEMMd:LMi<USNK&sYNfT6_OH>TeP*1ulPEV5qPa.N!QBml(Q^F/-
~>
<~JqAT+JUr?%J:E&tIXZ]nI!g<gH[:!`H$OXZGB\7SG'8"NFEDSFF)l;@EH#l9Df9Q3DJj<.D/=$)CMR^#
C2.KuBk_9qBkV0nBP1sjB4kggAnGUcAS#F`A7T4\@q0"X@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rE?!U`A
?!U`A?!^iD?=$uG?XI/J?smAM@:<SQ@:E\T@U`hW@q0%[A7T7_AS#FbAnGXfB4kjiBP;'mBk_9qBkhBt
C2.O"CM[g'D/F--DJjB2DfBZ7EH-#>F)uDEFEM_LG'8(RGBe@XH$O^^H[C-fI!pElIXZcrJ:N0$JV&K*
~>
<~H[C'bH$O[[G^"@UG'8%OF`__HF)uABEcH)<E,]`6Df0H1D/F-+Ci!m&CMIU!Bk_9qBP;'lB4kggAn>Ob
A7T4]A7T1[@q0"Y@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rD?!U`A>[1N=>[(E:>?b97>$>*4=]nm1=BJ[-
=BJ[-=BSd0=]np3>$>*6>?b<9>[1N=>[:W@?!UcC?=$uG?XI/J?smAM@:<SQ@:E\T@UinX@q0"ZA7T4]
A7]=`AnGXfB4kmkBPD0pBkhBtCMR^%Ci!s*D/O6/Df9Q5E,]f:EcQ2AF)uGFF`hkNG'A.SG^+LZH$Xd`
~>
0 ]
>>
236.1 223.68 236.1 177.6 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
199.56 134.28 mo
272.64 134.28 li
272.64 111.24 li
199.56 111.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
21 <001C60D8A8C9B6605B97B971C90101384E5F55BFDC60B70BA13CBEBD8079
87DEE773C6D32C924661DB9596D2057D023C05B990EDB59F8EE8FE5A9465DF9F
5C71FFEFFDBBC50880551E2ACA565AFE9EE26169EFE24A7FA44292793C21F963
028EE33626F245AD451978534A938D5D74D06B6686AFB07603> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.744 0 0 -15.744 0 0 ]msf
211.7 126.02 mo
(\0007\000D\000V\000N\000\003\000\025)
[8.15541 9.13156 7.79329 8.67487 5.35291 0 ]xsh
173.16 122.14 mo
186.37 122.14 li
186.65 122.14 186.87 122.36 186.87 122.64 cv
186.87 122.77 li
186.37 122.27 li
194.58 122.27 li
194.58 123.27 li
186.37 123.27 li
186.09 123.27 185.87 123.05 185.87 122.77 cv
185.87 122.64 li
186.37 123.14 li
173.16 123.14 li
cp
193.58 119.77 mo
199.58 122.77 li
193.58 125.77 li
cp
f
gsave
1.1265e-5 311.88 mo
756 311.88 li
756 0 li
1.1265e-5 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 7 GetGlyphDirectory
83 <001C60D8A8C9B7DB133A6BF1DC72AFF4D9E1D88066B503430ED7CA204AEE
347A7EAE3CB3884EB4FFBB8F90017827BA9DCD885413704044F3F41AD14D2D6A
CED61CEA6A04B229BF5A6BC738FEA6377C17D19B447D1E3C5DDC24F2FD35A82E
DAE48699B344D31AB5EDBC945652C2C08D> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
29 <001C60D8A8C9B76D61AE9E96E6A51E6B1AB2BC7F7D2CB956D27F5DF6E619
2305213574119DC9> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.744 0 0 -15.744 0 0 ]msf
12.12 147.02 mo
(\000S\000U\000L\000R\000U\000L\000W\000\\\000\003\000\035\000\003)
[9.57238 6.50218 3.99894 9.35184 6.45495 3.99894 5.96694 8.91101 5.46311 6.72257 0 ]xsh
grestore
gsave
1.1265e-5 311.88 mo
756 311.88 li
756 0 li
1.1265e-5 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 13 GetGlyphDirectory
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
44 <001C60D8A8C9B708F664964317C7D97D9359303C96D5BE1717FCD84DDCFA
AD459511E832EFD67DC824> |
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
66 <001C60D8A8C9B6605B96B30BD496F90EC713FA1D140454> |
51 <001C60D8A8C9B7C7F3AB8C913496B09857977C9DC6242A9162060173AC59
9393DA1940FF4DBBBB7DC58141AB33AD646160390F69558CE684F038371A8CA4
BBDE854FF6E871389797481AE0511B0909CE7DDDBB9990A8EC8C41B5BDE134> |
50 <001C60D8A8C9B6EFA83FE463A0987A11EEA716904A67C72122A66ADBC001
395B8B74FF7EE0E45B38298DD5B35482E6FF0A1AECD115B8456F10761475E357
F2C318AC306FA5311069C953AA74DF31651BEED7D0408C44AD051720F0645E90
327451737F3C8880F85CF3A99F798D6AE3C377DF10BD504640D2F66734E88678
A38CAC542CE6E159CF35> |
60 <001C60D8A8C9B66A6BA5660BD63E873A225ECC809D8AB86B2D08C205216E
32807A4307DC820A61ED74C39032BA5B> |
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
47 <001C60D8A8C9B7EE7C16355902DB0AD05E58E1D387F79781FB3D99981E> |
58 <001C60D8A8C9B5EF074E964BE8309C442F296FC63EB4F6954A2BA53C7EC8
C5A6F5AE9F5AD9082DDE5CCAF281C3198667437BE0108668121ADE86EA320A07
52D7> |
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [12.6 0 0 -12.6 0 0 ]msf
12.12 163.37 mo
(\0005\000,\0007\000\(\0009\0000\000B\0003\0005\000,\0002\0005\000,\0007\000<\000\003\000\013\000/\0002\000:\000\014\000\003)
[8.60578 5.0778 8.01362 7.78675 8.66879 10.4705 7.77423 7.54731 8.60578 5.0778 9.60111 8.60579 
5.0778 8.01362 7.95055 4.40996 5.53134 6.82928 9.6011 12.6127 5.53134 0 ]xsh
grestore
gsave
1.1265e-5 311.88 mo
756 311.88 li
756 0 li
1.1265e-5 0 li
cp
eclp
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
10.8 25.39 mo
(\000S\000U\000L\000R\000U\000L\000W\000\\\000\003\000\035\000\003)
[9.55779 6.49227 3.99284 9.33759 6.49227 3.99284 5.95785 8.89743 5.50194 6.75949 0 ]xsh
grestore
gsave
1.1265e-5 311.88 mo
756 311.88 li
756 0 li
1.1265e-5 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
43 <001C60D8A8C9B61AE94F5D0456ECBCBA90CCFBAD8FDFDE1C76A25DC4FB2C
0A2F1A737ABA942A0D167DB52780D6> |
42 <001C60D8A8C9B60D65963EF784DA82081E8141D855FF2CF9FCC770A94CC0
17E2DDCD6F1B3FACC2A00FD9E30C2C7862E1D7BA9B0C5E4FBE1D68D38018EF2A
63DF57362FEF843BAB8265662ED32D016467FE939224FD0C42806DFD53F38F6D
EA5DE895005A2DDBD92D4BA191D84A0FC617F54E5262AD4F7E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [12.6 0 0 -12.6 0 0 ]msf
10.8 44.35 mo
(\0006\000<\0006\0007\000\(\0000\000B\0003\0005\000,\0002\0005\000,\0007\000<\000\003\000\013\000+\000,\000*\000+)
[8.02613 7.95056 8.00093 8.01362 7.82455 10.4705 7.77423 7.54731 8.60578 5.0778 9.60111 8.60579 
5.0778 8.01362 7.95056 4.40994 5.53136 9.36176 5.02739 9.12238 0 ]xsh
grestore
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
172.22 44.35 mo
(\000\014)sh
100.86 91.62 mo
223.26 91.62 li
223.26 68.58 li
100.86 68.58 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
2.04 lw
100.86 91.62 mo
223.26 91.62 li
223.26 68.58 li
100.86 68.58 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
116.78 83.35 mo
(\0006\000\\\000V\000W\000H\000P\0007\000D\000V\000N)
[9.74632 8.89742 7.82858 6.005 9.13326 15.1226 8.19016 9.11761 7.82858 0 ]xsh
80.26 52.44 mo
80.26 80.02 li
80.26 80.29 80.484 80.52 80.76 80.52 cv
95.867 80.52 li
95.867 79.52 li
80.76 79.52 li
81.26 80.02 li
81.26 52.44 li
cp
94.867 83.02 mo
100.87 80.02 li
94.867 77.02 li
cp
f
223.16 80.54 mo
241.16 80.54 li
240.66 80.04 li
240.66 101.31 li
241.16 100.81 li
82.8 100.81 li
82.523 100.81 82.3 101.04 82.3 101.31 cv
82.3 122.58 li
82.3 122.86 82.523 123.08 82.8 123.08 cv
95.8 123.08 li
95.8 122.08 li
82.8 122.08 li
83.3 122.58 li
83.3 101.31 li
82.8 101.81 li
241.16 101.81 li
241.44 101.81 241.66 101.59 241.66 101.31 cv
241.66 80.04 li
241.66 79.76 241.44 79.54 241.16 79.54 cv
223.16 79.54 li
cp
94.8 125.58 mo
100.8 122.58 li
94.8 119.58 li
cp
f
309.6 88.77 mo
343.74 88.77 li
343.74 76.44 li
368.4 101.1 li
343.74 125.76 li
343.74 113.43 li
309.6 113.43 li
cp
ef
1 lw
309.6 88.77 mo
343.74 88.77 li
343.74 76.44 li
368.4 101.1 li
343.74 125.76 li
343.74 113.43 li
309.6 113.43 li
cp
@
%ADOBeginSubsetFont: XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold)
%%Title: (XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 2037 1068} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 22 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
85 <001C60D8A8C9B745265EC8CAD9F82A31B319F6B4C33E8770F879104566FE
981B857E600C8D166D0F392984CBE7F2367280B0F63C58E8863F40D4708C0E6F
3FA965E7B8> |
82 <001C60D8A8C9B67CE7CE430288ACE655FC18A1D8370CE1DDA2E576D42D95
2935890B3612622581158EF50D603003AA972C41A121E64BB6F37621B04965F4
3EA69CB46F90D238F5DAE0124B98691CB90FD5451D28D05F53213F42F1BC0356
874853C9B7BD> |
87 <001C60D8A8C9B71131DFD48E5B38171D18A534FA02B6A9E2763569CFA3B7
ECEE6F74BA1CCCFF97CB3645227BC368F60E189BC2815F0D76598ECBC86220F3
B59495FE2F219D3499E83C042F3DE53C9BD5DB824B59B9A48B8A> |
68 <001C60D8A8C9B66B395FB12F5A3ED397212B4E934EE7CEBB33FC6D17765E
C6AF590852ACA1D95C264AFE5F1DF4A05582D1D4BE94405B769F1E5F1F51A3BA
C7DDC8124D7A18D9BA6AD14539A3D2A595244C3375F26DC7CD56D4BB99F90CEE
67FE105A5C8537E33E55933C183B6DC8F7A56F0F340CFFC601558E2B91B243D8
20A3FB90B5A85667344F9B868EDE56F1FA7F7A5641ACE489CA47EA80FFC6> |
72 <001C60D8A8C9B6612940B43A18E0B1770AF5BDCC7392AD759565082DD8CF
112D9CD0C6B3257D7D22519ADB92136D7E5D1D05E7477F42DA2B96DAD9046D86
40464B1A0AB77262177E91CF9635E292FDFB04FE2C5EEA7A914E233900C57954
9CDDC6CBE9AE53> |
53 <001C60D8A8C9B6E3FA50A585A8CD486DEC6BF380040A9F8EA0D7E0AFA7C1
90C0475DBA63CA1B4888044597A2F89E99127C82C0CB02AF55503BD8A12412C1
44FCA8C66C927FDD874D2AF9BAB3E854FE29F384A05A934205E46C1306590EBE
82165E51> |
71 <001C60D8A8C9B64FADB5FC35FDDB0E6BFB2621E7676DB9FAD261F4A008C2
E33C9DCF5E868D64478093EBB31AA9A4949D1CE18A21FFF01E6616036036361D
655A3CD3A52E3BCE1D7E0A7735F7E70C92951ECDBD11D12D247C7D4929AED91A
53F617BD021461BC5E487F7E52C281A289CD6E6AFD2A1019DF2D9456ACD5F2> |
92 <001C60D8A8C9B7DA5D265A40CAE56BAAAC24F23FE013275937448B08EC3F
CA627346997A559B8080CD88114ABE14> |
52 <001C60D8A8C9B6D4D2A229BF5BE9050FDEBC19549E974EEECB6FB62C8014
056425E010A6E405B34DDA8B9B41EB5F6B4DD2C8F8F125C3172482328EABC332
FDEAC1A2F85AB976A557DD26E20DDBE24392DA234E7FCE63FA4BB823E332F7D6
9BA246FD759F0F8ECE4BFCE40DF29231585CE16101207F851D8E27851928AE8A
1649A4A66E91DEB464DEAF8BE1E5E21B4989EA2BEBBCF844C7838DB1B34CD1E8
3635B2B384F8737EDC0D7DF0DFC449EC81CCDE2DA41F0532A8> |
88 <001C60D8A8C9B65DE77B4A059A215932D91B9BF7FD6D8D4E5C45FB1132EC
266F1C28670D896B59AA9BA6848B621BB563CAB4549C28304B98E0817EADDB0A
C21EA212D829F46E1A1952871879AB0C> |
11 <001C60D8A8C9B7AFA9CFADB85520E26ACE9BF614A6FD4ACAF7195975D96B
B071B98956BBB9A62998F221258109DDA1740C4A41E00B67448C5B07861FF177
8E3275C0B68B96AB5DFB02CD7F9577> |
44 <001C60D8A8C9B7BEB14E11F6065E8700A5041E30082B1C17C6930C32AF2F
18E78B7A83C43D1CAEFF859825636AF3B12C3A> |
55 <001C60D8A8C9B648F608DDB37FB8C742B661BE7C459C9DD2A083C5624841
CD5D8FDF1B0045> |
40 <001C60D8A8C9B6408507F35E3F760D06FBE261801F60F9F2E85B55A0BDD8
055C0EB320FF47023B8F2DBDFB21C6AF3362D9> |
57 <001C60D8A8C9B60C97DEC2B074F639AF62B5BD2CA584823C2860ADCC1918
E5950C6B492F770B38CE84C1> |
48 <001C60D8A8C9B5B2D75DBF20B5E91EC8DEAEC6425EF2D4F8227E88CC31DE
55F3870ADCBBAE577E9BB781E61FB10C5E14EFF7B0D92C12C061A8B5C5> |
66 <001C60D8A8C9B658EF0BC6969FF11162E6719036242B0E> |
51 <001C60D8A8C9B6225ACC11DE7132EE9E5C2CC4E8D62EA05EDBB9F4AFC81A
7A8D22ABFE76B101E5BCEF4D36432AEFDB0E300F6CBD668B252564C34C7E2EC2
C9A18B8B430F309AFF63F223B616298513926B7BB147652970A2D265DDB35CBB> |
50 <001C60D8A8C9B6D4D2A28BE0121463C7987A93335808FDB30041D1CADBEF
E618FACAB463FB87922904E28497D2405308F9433C7690650A37E85055852C8E
8CBA64DCFBE6DB35661B6DAA9439B576F3018F818A01D328179C94AD037E4337
A3F991042436B3ADB85CC131543AA293146D17C3E273EAE980BE4C2F31617E4F
409A209609349CD1D026BCAEC0900A> |
60 <001C60D8A8C9B633001146CA6AB1667F53693CAD6E3B4FC89EB51832E3CD
A1EE6CB21A383C9350690AEE34356A2D6A92> |
12 <001C60D8A8C9B7AFA9CFEBE80E35341E2BB59350084FB2653A5F4869808E
4B4AF1F83AAEAB43B6248EE8FEA3CAC503DFCDD58F7247ECFB1DCE3F172526DA
2561A46899EEFD0E35575AAEB2A2B0D3> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H /Identity-H 0 [/XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H findfont [20.064 0 0 -20.064 0 0 ]msf
185.42 32.71 mo
(\000U\000R\000W\000D\000W\000H\0005\000H\000D\000G\000\\\0004\000X\000H\000X\000H)
[9.36992 12.9614 8.54716 12.5802 8.40672 12.4396 14.6869 12.4396 12.6404 13.3626 12.2188 16.0712 
13.6434 12.4396 13.6434 0 ]xsh
383.21 32.71 mo
(\000\013\0005\000,\0007\000\(\0009\0000\000B\0003\0005\000,\0002\0005\0007\000<\000\014)
[9.87158 14.9677 10.2126 13.182 13.1018 14.6267 18.2182 13.463 13.7839 15.048 9.81134 15.9508 
14.5264 13.202 14.0849 0 ]xsh
424.08 134.16 mo
495.12 134.16 li
495.12 111.12 li
424.08 111.12 li
cp
level3{
gsave
[1 0 0 -1 0 311.88 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [459.6 223.8 459.6 177.72 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnruK5>-"K5>-"K5>0#KPb?%KPb?%KPbB&Kl1Q(Kl1Q(Kl1T)L2Uc+L2Uc+L2Uf,LN$u.LN$u.
LN$u.LiI21LiI21LiI21M/mD4M/mD4MK<S6MK<V7Mf`e9Mf`e9Mf`h:N-0"<N-0"<NHT4?NHT4?Nd#CA
Nd#FBNd#FBO*GUDO*GXEO*GXEOEkgGOEkjHOa;$JOa;'KOa;'KP'_6MP'_9NPC.HPPC.HPPC7QRP^RZS
P^R]TP^[cUQ%!oWQ%*uXQ%*uXQ@F,ZQ@O2[Q@O2[Q[sD^Q[sD^R"9P`R"BVaR"BVaR=fhdR=fhdR=fke
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~FC&)MFC&)MFC&)MF^A2NF^A2NF^J;PF^J;PG$eDQG$eDQG$eDQG@4VTG@4VTG@4VTG@4VTG@4VTG[XhW
G[XhWG[XhWG[XhWG[XhWH"(%ZH"(%ZH"(%ZH"(%ZH"(%ZH=L7]H=L7]H=L7]H=L7]H=L7]HXpI`HXpI`
HXpI`HXpI`Ht?[cHt?[cHt?[cHt?[cI:cjeI:cmfI:cmfI:cmfI:cmfIV3'hIV3*iIV3*iIV3*iIqW9k
IqW9kIqW<lIqW<lIqW<lJ8&KnJ8&NoJ8&NoJ8&NoJSJ]qJSJ]qJSJ]qJSJ`rJSJ`rJnnotJnnotJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnotJnnotJSJ`rJSJ`rJSJ]qJSJ]qJSJ]qJ8&NoJ8&NoJ8&NoJ8&KnIqW<lIqW<lIqW<lIqW9k
IqW9kIV3*iIV3*iIV3*iIV3'hI:cmfI:cmfI:cmfI:cmfI:cjeHt?[cHt?[cHt?[cHt?[cHXpI`HXpI`
HXpI`HXpI`H=L7]H=L7]H=L7]H=L7]H=L7]H"(%ZH"(%ZH"(%ZH"(%ZH"(%ZG[XhWG[XhWG[XhWG[XhW
G[XhWG@4VTG@4VTG@4VTG@4VTG@4VTG$eDQG$eDQG$eDQF^J;PF^J;PF^A2NF^A2NFC&)MFC&)MFC&)M
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~R=fkeR=fhdR=fhdR"BVaR"BVaR"9P`Q[sD^Q[sD^Q@O2[Q@O2[Q@F,ZQ%*uXQ%*uXQ%!oWP^[cUP^R]T
P^RZSPC7QRPC.HPPC.HPP'_9NP'_6MOa;'KOa;'KOa;$JOEkjHOEkgGO*GXEO*GXEO*GUDNd#FBNd#FB
Nd#CANHT4?NHT4?N-0"<N-0"<Mf`h:Mf`e9Mf`e9MK<V7MK<S6M/mD4M/mD4LiI21LiI21LiI21LN$u.
LN$u.LN$u.L2Uf,L2Uc+L2Uc+Kl1T)Kl1Q(Kl1Q(KPbB&KPb?%KPb?%K5>0#K5>-"K5>-"JnnruJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 311.88 ]ct
/1 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~R$a8.Q^=&)QBd`#Pa%DrPEV/mP*(lgOH>NaNfK-ZNK&mUMi3IMMM[1GLkgb@L5(G:KnY25KS+o0JqAT*
JUrB'J:N0#J:E&uIsuiqIXZ]nI=6KjI!g<gH[C*cH?sm_H$O[\G^+IXG^"@UGB\4RG'8%OF`heJFEDSF
F)uDEFEDVIF`hkNG'8%QGB\7TG^+IXG^4R[H$O^^H?spbH[C-fI!g<iI=6NmIXZ`pIt)rtJ:N0#J:W9&
JUrE)JqJ].KS5#4KnY89L51P>LkpnEMMd:LMi<USNK&sYNfT6_OH>TeP*1ulPEV5qPa.N!QBml(Q^F/-
~>
<~JqAT+JUr?%J:E&tIXZ]nI!g<gH[:!`H$OXZGB\7SG'8"NFEDSFF)l;@EH#l9Df9Q3DJj<.D/=$)CMR^#
C2.KuBk_9qBkV0nBP1sjB4kggAnGUcAS#F`A7T4\@q0"X@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rE?!U`A
?!U`A?!^iD?=$uG?XI/J?smAM@:<SQ@:E\T@U`hW@q0%[A7T7_AS#FbAnGXfB4kjiBP;'mBk_9qBkhBt
C2.O"CM[g'D/F--DJjB2DfBZ7EH-#>F)uDEFEM_LG'8(RGBe@XH$O^^H[C-fI!pElIXZcrJ:N0$JV&K*
~>
<~H[C'bH$O[[G^"@UG'8%OF`__HF)uABEcH)<E,]`6Df0H1D/F-+Ci!m&CMIU!Bk_9qBP;'lB4kggAn>Ob
A7T4]A7T1[@q0"Y@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rD?!U`A>[1N=>[(E:>?b97>$>*4=]nm1=BJ[-
=BJ[-=BSd0=]np3>$>*6>?b<9>[1N=>[:W@?!UcC?=$uG?XI/J?smAM@:<SQ@:E\T@UinX@q0"ZA7T4]
A7]=`AnGXfB4kmkBPD0pBkhBtCMR^%Ci!s*D/O6/Df9Q5E,]f:EcQ2AF)uGFF`hkNG'A.SG^+LZH$Xd`
~>
0 ]
>>
459.6 223.8 459.6 177.72 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
424.08 134.16 mo
495.12 134.16 li
495.12 111.12 li
424.08 111.12 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
435.19 125.93 mo
(\0007\000D\000V\000N\000\003\000\025)
[8.15869 9.11765 7.82858 8.61447 5.39191 0 ]xsh
523.08 134.16 mo
593.4 134.16 li
593.4 111.12 li
523.08 111.12 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
523.08 134.16 mo
593.4 134.16 li
593.4 111.12 li
523.08 111.12 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
533.86 125.9 mo
(\0007\000D\000V\000N\000\003\000\024)
[8.15869 9.11761 7.82861 8.6145 5.39185 0 ]xsh
495.12 123.16 mo
509.14 123.16 li
509.42 123.16 509.64 122.93 509.64 122.66 cv
509.64 122.64 li
509.14 123.14 li
518.17 123.14 li
518.17 122.14 li
509.14 122.14 li
508.87 122.14 508.64 122.36 508.64 122.64 cv
508.64 122.66 li
509.14 122.16 li
495.12 122.16 li
cp
517.17 125.64 mo
523.17 122.64 li
517.17 119.64 li
cp
f
425.58 91.74 mo
550.98 91.74 li
550.98 68.7 li
425.58 68.7 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
2.04 lw
425.58 91.74 mo
550.98 91.74 li
550.98 68.7 li
425.58 68.7 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.744 0 0 -15.744 0 0 ]msf
443.06 83.47 mo
(\0006\000\\\000V\000W\000H\000P\0007\000D\000V\000N)
[9.71396 8.91101 7.76181 5.96695 9.13144 15.0985 8.18689 9.13153 7.79333 0 ]xsh
404.86 53.16 mo
404.86 80.15 li
404.86 80.43 405.08 80.65 405.36 80.65 cv
420.47 80.65 li
420.47 79.65 li
405.36 79.65 li
405.86 80.15 li
405.86 53.16 li
cp
419.47 83.15 mo
425.47 80.15 li
419.47 77.15 li
cp
f
550.95 80.66 mo
568.95 80.66 li
568.45 80.16 li
568.45 101.37 li
568.95 100.87 li
406.08 100.87 li
405.8 100.87 405.58 101.1 405.58 101.37 cv
405.58 122.58 li
405.58 122.86 405.8 123.08 406.08 123.08 cv
419.08 123.08 li
419.08 122.08 li
406.08 122.08 li
406.58 122.58 li
406.58 101.37 li
406.08 101.87 li
568.95 101.87 li
569.22 101.87 569.45 101.65 569.45 101.37 cv
569.45 80.16 li
569.45 79.88 569.22 79.66 568.95 79.66 cv
550.95 79.66 li
cp
418.08 125.58 mo
424.08 122.58 li
418.08 119.58 li
cp
f
186.48 303 mo
247.44 303 li
247.44 243 li
186.48 243 li
cp
level3{
gsave
[1 0 0 -1 0 311.88 ]ct
<<
/PatternType 2
/Shading
/2 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [216.96 128.88 216.96 8.88 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnruK5>-"K5>-"K5>0#KPb?%KPb?%KPbB&Kl1Q(Kl1Q(Kl1T)L2Uc+L2Uc+L2Uf,LN$u.LN$u.
LN$u.LiI21LiI21LiI21M/mD4M/mD4MK<S6MK<V7Mf`e9Mf`e9Mf`h:N-0"<N-0"<NHT4?NHT4?Nd#CA
Nd#FBNd#FBO*GUDO*GXEO*GXEOEkgGOEkjHOa;$JOa;'KOa;'KP'_6MP'_9NPC.HPPC.HPPC7QRP^RZS
P^R]TP^[cUQ%!oWQ%*uXQ%*uXQ@F,ZQ@O2[Q@O2[Q[sD^Q[sD^R"9P`R"BVaR"BVaR=fhdR=fhdR=fke
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~FC&)MFC&)MFC&)MF^A2NF^A2NF^J;PF^J;PG$eDQG$eDQG$eDQG@4VTG@4VTG@4VTG@4VTG@4VTG[XhW
G[XhWG[XhWG[XhWG[XhWH"(%ZH"(%ZH"(%ZH"(%ZH"(%ZH=L7]H=L7]H=L7]H=L7]H=L7]HXpI`HXpI`
HXpI`HXpI`Ht?[cHt?[cHt?[cHt?[cI:cjeI:cmfI:cmfI:cmfI:cmfIV3'hIV3*iIV3*iIV3*iIqW9k
IqW9kIqW<lIqW<lIqW<lJ8&KnJ8&NoJ8&NoJ8&NoJSJ]qJSJ]qJSJ]qJSJ`rJSJ`rJnnotJnnotJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnotJnnotJSJ`rJSJ`rJSJ]qJSJ]qJSJ]qJ8&NoJ8&NoJ8&NoJ8&KnIqW<lIqW<lIqW<lIqW9k
IqW9kIV3*iIV3*iIV3*iIV3'hI:cmfI:cmfI:cmfI:cmfI:cjeHt?[cHt?[cHt?[cHt?[cHXpI`HXpI`
HXpI`HXpI`H=L7]H=L7]H=L7]H=L7]H=L7]H"(%ZH"(%ZH"(%ZH"(%ZH"(%ZG[XhWG[XhWG[XhWG[XhW
G[XhWG@4VTG@4VTG@4VTG@4VTG@4VTG$eDQG$eDQG$eDQF^J;PF^J;PF^A2NF^A2NFC&)MFC&)MFC&)M
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~R=fkeR=fhdR=fhdR"BVaR"BVaR"9P`Q[sD^Q[sD^Q@O2[Q@O2[Q@F,ZQ%*uXQ%*uXQ%!oWP^[cUP^R]T
P^RZSPC7QRPC.HPPC.HPP'_9NP'_6MOa;'KOa;'KOa;$JOEkjHOEkgGO*GXEO*GXEO*GUDNd#FBNd#FB
Nd#CANHT4?NHT4?N-0"<N-0"<Mf`h:Mf`e9Mf`e9MK<V7MK<S6M/mD4M/mD4LiI21LiI21LiI21LN$u.
LN$u.LN$u.L2Uf,L2Uc+L2Uc+Kl1T)Kl1Q(Kl1Q(KPbB&KPb?%KPb?%K5>0#K5>-"K5>-"JnnruJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 311.88 ]ct
/2 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~R$a8.Q^=&)QBd`#Pa%DrPEV/mP*(lgOH>NaNfK-ZNK&mUMi3IMMM[1GLkgb@L5(G:KnY25KS+o0JqAT*
JUrB'J:N0#J:E&uIsuiqIXZ]nI=6KjI!g<gH[C*cH?sm_H$O[\G^+IXG^"@UGB\4RG'8%OF`heJFEDSF
F)uDEFEDVIF`hkNG'8%QGB\7TG^+IXG^4R[H$O^^H?spbH[C-fI!g<iI=6NmIXZ`pIt)rtJ:N0#J:W9&
JUrE)JqJ].KS5#4KnY89L51P>LkpnEMMd:LMi<USNK&sYNfT6_OH>TeP*1ulPEV5qPa.N!QBml(Q^F/-
~>
<~JqAT+JUr?%J:E&tIXZ]nI!g<gH[:!`H$OXZGB\7SG'8"NFEDSFF)l;@EH#l9Df9Q3DJj<.D/=$)CMR^#
C2.KuBk_9qBkV0nBP1sjB4kggAnGUcAS#F`A7T4\@q0"X@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rE?!U`A
?!U`A?!^iD?=$uG?XI/J?smAM@:<SQ@:E\T@U`hW@q0%[A7T7_AS#FbAnGXfB4kjiBP;'mBk_9qBkhBt
C2.O"CM[g'D/F--DJjB2DfBZ7EH-#>F)uDEFEM_LG'8(RGBe@XH$O^^H[C-fI!pElIXZcrJ:N0$JV&K*
~>
<~H[C'bH$O[[G^"@UG'8%OF`__HF)uABEcH)<E,]`6Df0H1D/F-+Ci!m&CMIU!Bk_9qBP;'lB4kggAn>Ob
A7T4]A7T1[@q0"Y@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rD?!U`A>[1N=>[(E:>?b97>$>*4=]nm1=BJ[-
=BJ[-=BSd0=]np3>$>*6>?b<9>[1N=>[:W@?!UcC?=$uG?XI/J?smAM@:<SQ@:E\T@UinX@q0"ZA7T4]
A7]=`AnGXfB4kmkBPD0pBkhBtCMR^%Ci!s*D/O6/Df9Q5E,]f:EcQ2AF)uGFF`hkNG'A.SG^+LZH$Xd`
~>
0 ]
>>
216.96 128.88 216.96 8.88 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
1 lw
186.48 303 mo
247.44 303 li
247.44 243 li
186.48 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
210.1 277.848 mo
(\000\025)sh
247.44 302.28 mo
308.4 302.28 li
308.4 243 li
247.44 243 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
247.44 302.28 mo
308.4 302.28 li
308.4 243 li
247.44 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
271.08 277.512 mo
(\000\024)sh
308.4 302.28 mo
369.36 302.28 li
369.36 243 li
308.4 243 li
cp
level3{
gsave
[1 0 0 -1 0 311.88 ]ct
<<
/PatternType 2
/Shading
/3 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [338.88 128.16 338.88 9.6 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnruK5>-"K5>-"K5>0#KPb?%KPb?%KPbB&Kl1Q(Kl1Q(Kl1T)L2Uc+L2Uc+L2Uf,LN$u.LN$u.
LN$u.LiI21LiI21LiI21M/mD4M/mD4MK<S6MK<V7Mf`e9Mf`e9Mf`h:N-0"<N-0"<NHT4?NHT4?Nd#CA
Nd#FBNd#FBO*GUDO*GXEO*GXEOEkgGOEkjHOa;$JOa;'KOa;'KP'_6MP'_9NPC.HPPC.HPPC7QRP^RZS
P^R]TP^[cUQ%!oWQ%*uXQ%*uXQ@F,ZQ@O2[Q@O2[Q[sD^Q[sD^R"9P`R"BVaR"BVaR=fhdR=fhdR=fke
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~FC&)MFC&)MFC&)MF^A2NF^A2NF^J;PF^J;PG$eDQG$eDQG$eDQG@4VTG@4VTG@4VTG@4VTG@4VTG[XhW
G[XhWG[XhWG[XhWG[XhWH"(%ZH"(%ZH"(%ZH"(%ZH"(%ZH=L7]H=L7]H=L7]H=L7]H=L7]HXpI`HXpI`
HXpI`HXpI`Ht?[cHt?[cHt?[cHt?[cI:cjeI:cmfI:cmfI:cmfI:cmfIV3'hIV3*iIV3*iIV3*iIqW9k
IqW9kIqW<lIqW<lIqW<lJ8&KnJ8&NoJ8&NoJ8&NoJSJ]qJSJ]qJSJ]qJSJ`rJSJ`rJnnotJnnotJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnotJnnotJSJ`rJSJ`rJSJ]qJSJ]qJSJ]qJ8&NoJ8&NoJ8&NoJ8&KnIqW<lIqW<lIqW<lIqW9k
IqW9kIV3*iIV3*iIV3*iIV3'hI:cmfI:cmfI:cmfI:cmfI:cjeHt?[cHt?[cHt?[cHt?[cHXpI`HXpI`
HXpI`HXpI`H=L7]H=L7]H=L7]H=L7]H=L7]H"(%ZH"(%ZH"(%ZH"(%ZH"(%ZG[XhWG[XhWG[XhWG[XhW
G[XhWG@4VTG@4VTG@4VTG@4VTG@4VTG$eDQG$eDQG$eDQF^J;PF^J;PF^A2NF^A2NFC&)MFC&)MFC&)M
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~R=fkeR=fhdR=fhdR"BVaR"BVaR"9P`Q[sD^Q[sD^Q@O2[Q@O2[Q@F,ZQ%*uXQ%*uXQ%!oWP^[cUP^R]T
P^RZSPC7QRPC.HPPC.HPP'_9NP'_6MOa;'KOa;'KOa;$JOEkjHOEkgGO*GXEO*GXEO*GUDNd#FBNd#FB
Nd#CANHT4?NHT4?N-0"<N-0"<Mf`h:Mf`e9Mf`e9MK<V7MK<S6M/mD4M/mD4LiI21LiI21LiI21LN$u.
LN$u.LN$u.L2Uf,L2Uc+L2Uc+Kl1T)Kl1Q(Kl1Q(KPbB&KPb?%KPb?%K5>0#K5>-"K5>-"JnnruJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /3 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 311.88 ]ct
/3 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~R$a8.Q^=&)QBd`#Pa%DrPEV/mP*(lgOH>NaNfK-ZNK&mUMi3IMMM[1GLkgb@L5(G:KnY25KS+o0JqAT*
JUrB'J:N0#J:E&uIsuiqIXZ]nI=6KjI!g<gH[C*cH?sm_H$O[\G^+IXG^"@UGB\4RG'8%OF`heJFEDSF
F)uDEFEDVIF`hkNG'8%QGB\7TG^+IXG^4R[H$O^^H?spbH[C-fI!g<iI=6NmIXZ`pIt)rtJ:N0#J:W9&
JUrE)JqJ].KS5#4KnY89L51P>LkpnEMMd:LMi<USNK&sYNfT6_OH>TeP*1ulPEV5qPa.N!QBml(Q^F/-
~>
<~JqAT+JUr?%J:E&tIXZ]nI!g<gH[:!`H$OXZGB\7SG'8"NFEDSFF)l;@EH#l9Df9Q3DJj<.D/=$)CMR^#
C2.KuBk_9qBkV0nBP1sjB4kggAnGUcAS#F`A7T4\@q0"X@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rE?!U`A
?!U`A?!^iD?=$uG?XI/J?smAM@:<SQ@:E\T@U`hW@q0%[A7T7_AS#FbAnGXfB4kjiBP;'mBk_9qBkhBt
C2.O"CM[g'D/F--DJjB2DfBZ7EH-#>F)uDEFEM_LG'8(RGBe@XH$O^^H[C-fI!pElIXZcrJ:N0$JV&K*
~>
<~H[C'bH$O[[G^"@UG'8%OF`__HF)uABEcH)<E,]`6Df0H1D/F-+Ci!m&CMIU!Bk_9qBP;'lB4kggAn>Ob
A7T4]A7T1[@q0"Y@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rD?!U`A>[1N=>[(E:>?b97>$>*4=]nm1=BJ[-
=BJ[-=BSd0=]np3>$>*6>?b<9>[1N=>[:W@?!UcC?=$uG?XI/J?smAM@:<SQ@:E\T@UinX@q0"ZA7T4]
A7]=`AnGXfB4kmkBPD0pBkhBtCMR^%Ci!s*D/O6/Df9Q5E,]f:EcQ2AF)uGFF`hkNG'A.SG^+LZH$Xd`
~>
0 ]
>>
338.88 128.16 338.88 9.6 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/3 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
308.4 302.28 mo
369.36 302.28 li
369.36 243 li
308.4 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
332.06 277.512 mo
(\000\025)sh
369.36 302.28 mo
430.32 302.28 li
430.32 243 li
369.36 243 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
369.36 302.28 mo
430.32 302.28 li
430.32 243 li
369.36 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
393.05 277.512 mo
(\000\024)sh
430.32 303 mo
491.28 303 li
491.28 243 li
430.32 243 li
cp
level3{
gsave
[1 0 0 -1 0 311.88 ]ct
<<
/PatternType 2
/Shading
/4 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [460.8 128.88 460.8 8.88 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnruK5>-"K5>-"K5>0#KPb?%KPb?%KPbB&Kl1Q(Kl1Q(Kl1T)L2Uc+L2Uc+L2Uf,LN$u.LN$u.
LN$u.LiI21LiI21LiI21M/mD4M/mD4MK<S6MK<V7Mf`e9Mf`e9Mf`h:N-0"<N-0"<NHT4?NHT4?Nd#CA
Nd#FBNd#FBO*GUDO*GXEO*GXEOEkgGOEkjHOa;$JOa;'KOa;'KP'_6MP'_9NPC.HPPC.HPPC7QRP^RZS
P^R]TP^[cUQ%!oWQ%*uXQ%*uXQ@F,ZQ@O2[Q@O2[Q[sD^Q[sD^R"9P`R"BVaR"BVaR=fhdR=fhdR=fke
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~FC&)MFC&)MFC&)MF^A2NF^A2NF^J;PF^J;PG$eDQG$eDQG$eDQG@4VTG@4VTG@4VTG@4VTG@4VTG[XhW
G[XhWG[XhWG[XhWG[XhWH"(%ZH"(%ZH"(%ZH"(%ZH"(%ZH=L7]H=L7]H=L7]H=L7]H=L7]HXpI`HXpI`
HXpI`HXpI`Ht?[cHt?[cHt?[cHt?[cI:cjeI:cmfI:cmfI:cmfI:cmfIV3'hIV3*iIV3*iIV3*iIqW9k
IqW9kIqW<lIqW<lIqW<lJ8&KnJ8&NoJ8&NoJ8&NoJSJ]qJSJ]qJSJ]qJSJ`rJSJ`rJnnotJnnotJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnotJnnotJSJ`rJSJ`rJSJ]qJSJ]qJSJ]qJ8&NoJ8&NoJ8&NoJ8&KnIqW<lIqW<lIqW<lIqW9k
IqW9kIV3*iIV3*iIV3*iIV3'hI:cmfI:cmfI:cmfI:cmfI:cjeHt?[cHt?[cHt?[cHt?[cHXpI`HXpI`
HXpI`HXpI`H=L7]H=L7]H=L7]H=L7]H=L7]H"(%ZH"(%ZH"(%ZH"(%ZH"(%ZG[XhWG[XhWG[XhWG[XhW
G[XhWG@4VTG@4VTG@4VTG@4VTG@4VTG$eDQG$eDQG$eDQF^J;PF^J;PF^A2NF^A2NFC&)MFC&)MFC&)M
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~R=fkeR=fhdR=fhdR"BVaR"BVaR"9P`Q[sD^Q[sD^Q@O2[Q@O2[Q@F,ZQ%*uXQ%*uXQ%!oWP^[cUP^R]T
P^RZSPC7QRPC.HPPC.HPP'_9NP'_6MOa;'KOa;'KOa;$JOEkjHOEkgGO*GXEO*GXEO*GUDNd#FBNd#FB
Nd#CANHT4?NHT4?N-0"<N-0"<Mf`h:Mf`e9Mf`e9MK<V7MK<S6M/mD4M/mD4LiI21LiI21LiI21LN$u.
LN$u.LN$u.L2Uf,L2Uc+L2Uc+Kl1T)Kl1Q(Kl1Q(KPbB&KPb?%KPb?%K5>0#K5>-"K5>-"JnnruJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /4 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 311.88 ]ct
/4 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~R$a8.Q^=&)QBd`#Pa%DrPEV/mP*(lgOH>NaNfK-ZNK&mUMi3IMMM[1GLkgb@L5(G:KnY25KS+o0JqAT*
JUrB'J:N0#J:E&uIsuiqIXZ]nI=6KjI!g<gH[C*cH?sm_H$O[\G^+IXG^"@UGB\4RG'8%OF`heJFEDSF
F)uDEFEDVIF`hkNG'8%QGB\7TG^+IXG^4R[H$O^^H?spbH[C-fI!g<iI=6NmIXZ`pIt)rtJ:N0#J:W9&
JUrE)JqJ].KS5#4KnY89L51P>LkpnEMMd:LMi<USNK&sYNfT6_OH>TeP*1ulPEV5qPa.N!QBml(Q^F/-
~>
<~JqAT+JUr?%J:E&tIXZ]nI!g<gH[:!`H$OXZGB\7SG'8"NFEDSFF)l;@EH#l9Df9Q3DJj<.D/=$)CMR^#
C2.KuBk_9qBkV0nBP1sjB4kggAnGUcAS#F`A7T4\@q0"X@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rE?!U`A
?!U`A?!^iD?=$uG?XI/J?smAM@:<SQ@:E\T@U`hW@q0%[A7T7_AS#FbAnGXfB4kjiBP;'mBk_9qBkhBt
C2.O"CM[g'D/F--DJjB2DfBZ7EH-#>F)uDEFEM_LG'8(RGBe@XH$O^^H[C-fI!pElIXZcrJ:N0$JV&K*
~>
<~H[C'bH$O[[G^"@UG'8%OF`__HF)uABEcH)<E,]`6Df0H1D/F-+Ci!m&CMIU!Bk_9qBP;'lB4kggAn>Ob
A7T4]A7T1[@q0"Y@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rD?!U`A>[1N=>[(E:>?b97>$>*4=]nm1=BJ[-
=BJ[-=BSd0=]np3>$>*6>?b<9>[1N=>[:W@?!UcC?=$uG?XI/J?smAM@:<SQ@:E\T@UinX@q0"ZA7T4]
A7]=`AnGXfB4kmkBPD0pBkhBtCMR^%Ci!s*D/O6/Df9Q5E,]f:EcQ2AF)uGFF`hkNG'A.SG^+LZH$Xd`
~>
0 ]
>>
460.8 128.88 460.8 8.88 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/4 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
430.32 303 mo
491.28 303 li
491.28 243 li
430.32 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
454.03 277.848 mo
(\000\025)sh
491.28 302.28 mo
552.36 302.28 li
552.36 243 li
491.28 243 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
491.28 302.28 mo
552.36 302.28 li
552.36 243 li
491.28 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
515.04 277.512 mo
(\000\024)sh
552.36 302.28 mo
613.32 302.28 li
613.32 243 li
552.36 243 li
cp
level3{
gsave
[1 0 0 -1 0 311.88 ]ct
<<
/PatternType 2
/Shading
/5 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [582.84 128.16 582.84 9.6 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnruK5>-"K5>-"K5>0#KPb?%KPb?%KPbB&Kl1Q(Kl1Q(Kl1T)L2Uc+L2Uc+L2Uf,LN$u.LN$u.
LN$u.LiI21LiI21LiI21M/mD4M/mD4MK<S6MK<V7Mf`e9Mf`e9Mf`h:N-0"<N-0"<NHT4?NHT4?Nd#CA
Nd#FBNd#FBO*GUDO*GXEO*GXEOEkgGOEkjHOa;$JOa;'KOa;'KP'_6MP'_9NPC.HPPC.HPPC7QRP^RZS
P^R]TP^[cUQ%!oWQ%*uXQ%*uXQ@F,ZQ@O2[Q@O2[Q[sD^Q[sD^R"9P`R"BVaR"BVaR=fhdR=fhdR=fke
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~FC&)MFC&)MFC&)MF^A2NF^A2NF^J;PF^J;PG$eDQG$eDQG$eDQG@4VTG@4VTG@4VTG@4VTG@4VTG[XhW
G[XhWG[XhWG[XhWG[XhWH"(%ZH"(%ZH"(%ZH"(%ZH"(%ZH=L7]H=L7]H=L7]H=L7]H=L7]HXpI`HXpI`
HXpI`HXpI`Ht?[cHt?[cHt?[cHt?[cI:cjeI:cmfI:cmfI:cmfI:cmfIV3'hIV3*iIV3*iIV3*iIqW9k
IqW9kIqW<lIqW<lIqW<lJ8&KnJ8&NoJ8&NoJ8&NoJSJ]qJSJ]qJSJ]qJSJ`rJSJ`rJnnotJnnotJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~JnnotJnnotJnnotJSJ`rJSJ`rJSJ]qJSJ]qJSJ]qJ8&NoJ8&NoJ8&NoJ8&KnIqW<lIqW<lIqW<lIqW9k
IqW9kIV3*iIV3*iIV3*iIV3'hI:cmfI:cmfI:cmfI:cmfI:cjeHt?[cHt?[cHt?[cHt?[cHXpI`HXpI`
HXpI`HXpI`H=L7]H=L7]H=L7]H=L7]H=L7]H"(%ZH"(%ZH"(%ZH"(%ZH"(%ZG[XhWG[XhWG[XhWG[XhW
G[XhWG@4VTG@4VTG@4VTG@4VTG@4VTG$eDQG$eDQG$eDQF^J;PF^J;PF^A2NF^A2NFC&)MFC&)MFC&)M
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~R=fkeR=fhdR=fhdR"BVaR"BVaR"9P`Q[sD^Q[sD^Q@O2[Q@O2[Q@F,ZQ%*uXQ%*uXQ%!oWP^[cUP^R]T
P^RZSPC7QRPC.HPPC.HPP'_9NP'_6MOa;'KOa;'KOa;$JOEkjHOEkgGO*GXEO*GXEO*GUDNd#FBNd#FB
Nd#CANHT4?NHT4?N-0"<N-0"<Mf`h:Mf`e9Mf`e9MK<V7MK<S6M/mD4M/mD4LiI21LiI21LiI21LN$u.
LN$u.LN$u.L2Uf,L2Uc+L2Uc+Kl1T)Kl1Q(Kl1Q(KPbB&KPb?%KPb?%K5>0#K5>-"K5>-"JnnruJnnot
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.25 .5 .75 ]
/Encode [1 0 1 0 1 0 1 0 ]
>>
>> /Gradient add_res /5 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 0 311.88 ]ct
/5 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~R$a8.Q^=&)QBd`#Pa%DrPEV/mP*(lgOH>NaNfK-ZNK&mUMi3IMMM[1GLkgb@L5(G:KnY25KS+o0JqAT*
JUrB'J:N0#J:E&uIsuiqIXZ]nI=6KjI!g<gH[C*cH?sm_H$O[\G^+IXG^"@UGB\4RG'8%OF`heJFEDSF
F)uDEFEDVIF`hkNG'8%QGB\7TG^+IXG^4R[H$O^^H?spbH[C-fI!g<iI=6NmIXZ`pIt)rtJ:N0#J:W9&
JUrE)JqJ].KS5#4KnY89L51P>LkpnEMMd:LMi<USNK&sYNfT6_OH>TeP*1ulPEV5qPa.N!QBml(Q^F/-
~>
<~JqAT+JUr?%J:E&tIXZ]nI!g<gH[:!`H$OXZGB\7SG'8"NFEDSFF)l;@EH#l9Df9Q3DJj<.D/=$)CMR^#
C2.KuBk_9qBkV0nBP1sjB4kggAnGUcAS#F`A7T4\@q0"X@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rE?!U`A
?!U`A?!^iD?=$uG?XI/J?smAM@:<SQ@:E\T@U`hW@q0%[A7T7_AS#FbAnGXfB4kjiBP;'mBk_9qBkhBt
C2.O"CM[g'D/F--DJjB2DfBZ7EH-#>F)uDEFEM_LG'8(RGBe@XH$O^^H[C-fI!pElIXZcrJ:N0$JV&K*
~>
<~H[C'bH$O[[G^"@UG'8%OF`__HF)uABEcH)<E,]`6Df0H1D/F-+Ci!m&CMIU!Bk_9qBP;'lB4kggAn>Ob
A7T4]A7T1[@q0"Y@U`eU@:<SQ@:3JN?sm>K?XI/H?=$rD?!U`A>[1N=>[(E:>?b97>$>*4=]nm1=BJ[-
=BJ[-=BSd0=]np3>$>*6>?b<9>[1N=>[:W@?!UcC?=$uG?XI/J?smAM@:<SQ@:E\T@UinX@q0"ZA7T4]
A7]=`AnGXfB4kmkBPD0pBkhBtCMR^%Ci!s*D/O6/Df9Q5E,]f:EcQ2AF)uGFF`hkNG'A.SG^+LZH$Xd`
~>
0 ]
>>
582.84 128.16 582.84 9.6 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/5 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
552.36 302.28 mo
613.32 302.28 li
613.32 243 li
552.36 243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [22.08 0 0 -22.08 0 0 ]msf
576.02 277.512 mo
(\000\025)sh
393.72 165 mo
452.58 165 li
540.87 165 li
746.88 165 li
746.88 202.94 li
746.88 219.2 li
746.88 230.04 li
540.87 230.04 li
444.21 236.002 li
452.58 230.04 li
393.72 230.04 li
393.72 219.2 li
393.72 202.94 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
393.72 165 mo
452.58 165 li
540.87 165 li
746.88 165 li
746.88 202.94 li
746.88 219.2 li
746.88 230.04 li
540.87 230.04 li
444.21 236.002 li
452.58 230.04 li
393.72 230.04 li
393.72 219.2 li
393.72 202.94 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
399.31 179.86 mo
(\000&\000\\\000F\000O\000L\000F\000\003)
[10.5638 8.75595 7.92294 3.99286 3.92996 7.92294 0 ]xsh
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
448.06 179.86 mo
(\000+\000D\000Q\000G\000O\000H\000U)
[11.6799 9.11761 9.7149 9.5578 3.99283 9.07037 0 ]xsh
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
94 <001C60D8A8C9B7C3C9EDB6DA65990F517FCF12D224E87966FD984F4DC61C
1C75BE58310018C669DD35C7777E7F753AD6C3BAA260E9F14A655CABA40F2DE3
4594863E2579B7B3DFA08E874478EC60E3D730ADFB3C2054597973DD9841B81C
A354FF50F91A5B865C72D3FEB225> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
513.34 179.86 mo
(\000^)sh
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
52 <001C60D8A8C9B6EFA83F8CA763D154870E72A7DC4513120DC2B3331E10C6
AA61CAF843FEE5A6DB3F240EAFDECEDFFA539F0A9D47BB772EB90CABF66E7BC1
38A173CB84F14B1753E8D30FAE93D88CF91C3EC5E2E1F366C9DF4E68BA9B195B
384C14557A3EF2B810C635DB42C67783851A99C5B98A3FF3BDC93C52D5F6B41A
D4A60FDB1F449ED22E47F9205FDCC5CD89218065ED3AEC3552B3B6BE751C9303
CBC7031178C0FE9EAEFACA9BD701C1BAB6CC34C05DFCC4625E5B17A954> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
420.79 200.74 mo
(\000U\000R\000W\000D\000W\000H\0005\000H\000D\000G\000\\\0004\000X\000H\000X\000H)
[6.49228 9.33759 5.98929 9.11761 5.95786 9.14899 10.438 9.10181 9.11761 9.5578 8.8974 12.01 
9.7149 9.10181 9.7149 0 ]xsh
gsave
1.1265e-5 311.88 mo
756 311.88 li
756 0 li
1.1265e-5 0 li
cp
eclp
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
30 <001C60D8A8C9B76D61AE9E96E6A51E6B1AB2BC7F7D2CB956109B58FDEA71
6EE6A760DC6A18BAB0923E> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
563.74 200.74 mo
(\000\013\0005\000,\0007\000\(\0009\0000\000B\0003\0005\000,\0002\0005\000,\0007\000<\000\014\000\036)
[6.94818 10.6738 6.33514 9.99799 9.7149 10.6738 13.0632 9.76215 9.36902 10.6739 6.33514 11.9785 
10.7368 6.33514 9.99792 9.91925 6.96393 0 ]xsh
grestore
%ADOBeginSubsetFont: XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
96 <001C60D8A8C9B7C3C9ED8193932A1B4143787C592E3BA82C1A812B58BC74
5CA7E7C50593380547AB5D34FE7490712D37869FCDCF1148D92B819F45792FF9
FEB82CD0A1E7F591E657C1A5AC3D65EE1B912F3B4B771B43D26CC661ABF09605
97333ACC5564EFFEAF5BB90A> |
!
end
end end
%ADOEndSubsetFont
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [15.72 0 0 -15.72 0 0 ]msf
399.31 221.496 mo
(\000`)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 ]]
] del_res
/XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold-Identity-H uf
/XCRBIU+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa,Bold /CIDFont ur
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBIT+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 240 956 a Fp(Figure)27 b(14:)35 b(Rite)-6
b(VM)25 b(sc)n(heduler)g(design)-152 1759 y @beginspecial
0 @llx 0 @lly 960 @urx 312 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/cyclic_handler.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: cyclic_handler.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:12:37
%%BoundingBox: 0 0 960 312
%%HiResBoundingBox: 0 0 960 311.7601
%%CropBox: 0 0 960 311.7601
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-03-20T02:56:01+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-03-20T02:56:01+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -311.76 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 311.76 li
960 311.76 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 311.76 mo
960 311.76 li
960 -3.05176e-5 li
0 -3.05176e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
37.8 255 mo
387.6 255 li
387.6 144.24 li
37.8 144.24 li
cp
ef
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
37.8 255 mo
387.6 255 li
387.6 144.24 li
37.8 144.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 13 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
43 <001C60D8A8C9B61AE94F5D0456ECBCBA90CCFBAD8FDFDE1C76A25DC4FB2C
0A2F1A737ABA942A0D167DB52780D6> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.984 0 0 -27.984 0 0 ]msf
44.928 169.18 mo
(\000W\000&\000\\\000F\000O\000L\000F\000+\000D\000Q\000G\000O\000H\000U)
[10.6059 18.8052 15.5869 14.188 7.10787 7.10788 14.076 20.792 16.2308 17.294 17.0143 7.10788 
16.0067 0 ]xsh
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [36.024 0 0 -36.024 0 0 ]msf
94.848 214.08 mo
(\000&\000\\\000F\000O\000L\000F\000+\000D\000Q\000G\000O\000H\000U)
[24.208 20.2093 18.2643 9.15002 9.15002 18.1562 26.7657 20.894 22.2627 21.9026 9.15002 20.7857 
0 ]xsh
487.68 255 mo
923.16 255 li
923.16 144.24 li
487.68 144.24 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
487.68 255 mo
923.16 255 li
923.16 144.24 li
487.68 144.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 6 GetGlyphDirectory
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
75 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD73F
D89BDC334BB07BF4F917382A46FB6D56C6B324D7C5BF3C1737059B4BD3BA89BE
96A60CAFE7B49CB909CA56114770> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
!
end
end end
%ADOEndSubsetFont
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [27.984 0 0 -27.984 0 0 ]msf
494.83 169.18 mo
(\000W\0005\000L\000W\000H\0009\0000\0006\000F\000K\000H\000G\000X\000O\000H\000U\0000\000D\000L\000Q)
[10.6059 19.113 6.99597 10.6058 16.0347 19.113 23.2545 17.7697 14.188 17.294 16.0067 17.0143 
17.2941 7.10785 16.1467 11.4453 23.2545 16.2307 7.10791 0 ]xsh
gsave
1.4305e-5 311.76 mo
960 311.76 li
960 0 li
1.4305e-5 0 li
cp
eclp
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [36.024 0 0 -36.024 0 0 ]msf
538.39 214.08 mo
(\0005\000L\000W\000H\0009\0000\0006\000F\000K\000H\000G\000X\000O\000H\000U\0000\000D\000L\000Q)
[24.6044 9.14996 13.653 20.7857 24.6044 29.9357 22.6949 18.2643 22.2627 20.6776 21.9026 22.2627 
9.15002 20.7858 14.8777 29.8276 20.8939 9.15002 0 ]xsh
grestore
487.68 222.24 mo
516.6 199.62 li
487.68 177 li
cp
ef
1 lj
487.68 222.24 mo
516.6 199.62 li
487.68 177 li
cp
@
.72 lw
387.6 199.56 mo
487.66 199.56 li
@
1 lw
0 lj
8 ml
12.36 306.48 mo
941.76 306.48 li
941.76 13.68 li
12.36 13.68 li
cp
@
gsave
1.4305e-5 311.76 mo
960 311.76 li
960 0 li
1.4305e-5 0 li
cp
eclp
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [32.064 0 0 -32.064 0 0 ]msf
19.488 41.64 mo
(\000W\0005\000L\000W\000H\0009\0000\0006\000F\000K\000H\000G\000X\000O\000H\000U)
[12.1522 21.8997 8.14418 12.056 18.5008 21.8997 26.645 20.2001 16.2566 19.8154 18.5008 19.3346 
19.8154 8.14417 18.5008 0 ]xsh
grestore
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [39.96 0 0 -39.96 0 0 ]msf
91.488 91.94 mo
(\0005\000L\000W\000H\0009\0000\0006\000F\000K\000H\000G\000X\000O\000H\000U)
[27.2926 10.1497 15.1448 23.0567 27.2926 33.2065 25.3744 20.2599 24.6951 23.0568 24.2957 24.6951 
10.1497 23.0568 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBJF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial -42 1929 a(Figure)h(15:)35 b(Comp)r(onen)n(t)26
b(diagram)h(of)f(Rite)-6 b(VM)25 b(sc)n(heduler)-152
2213 y(b)n(yteco)r(de.)-152 2380 y Fq(3.2)99 b(RiteVM)25
b(Scheduler)-77 2488 y Fp(This)h(section)f(describ)r(es)h(the)f
(implemen)n(tation)g(of)h(the)e(Rite)-6 b(VM)-152 2575
y(sc)n(heduler)23 b(in)f(the)h(prop)r(osed)g(framew)n(ork.)34
b(mrub)n(y)22 b(on)g(TECS)i(sup-)-152 2662 y(p)r(orts)h(m)n
(ultitasking;)h(ho)n(w)n(ev)n(er,)f(m)n(ultitask)f(pro)r(cessing)i(in)e
(mrub)n(y)-152 2749 y(on)29 b(TECS)g(requires)g(the)f(dev)n(elop)r(ers)
h(to)g(ha)n(v)n(e)f(kno)n(wledge)h(ab)r(out)-152 2836
y(the)d(R)-6 b(TOS)24 b(\(TOPPERS/HRP2\).)-77 2923 y(One)h(approac)n(h)
i(for)f(m)n(ultitasking)h(is)f(a)g(co-routine,)h(whic)n(h)f(is)g(a)-152
3011 y(co)r(op)r(erativ)n(e)32 b(thread)f(sc)n(heduled)f(b)n(y)f(dev)n
(elop)r(ers)i(with)g(functions)-152 3098 y(suc)n(h)d(as)i
Fi(r)m(esume)f Fp(and)g Fi(yield)f Fp(\(the)h(Rub)n(y)d(co-routine)j
(is)g(de\034ned)f(in)-152 3185 y(the)h(Fib)r(er)h(class)g([2]\).)47
b(A)28 b(co-routine)i(is)f(non-preemptiv)n(e)f(m)n(ulti-)-152
3272 y(tasking,)j(whic)n(h)f(do)r(es)f(not)h(receiv)n(e)f(OS)g(supp)r
(ort)g(b)r(ecause)h(dev)n(el-)-152 3359 y(op)r(ers)23
b(m)n(ust)e(switc)n(h)i(tasks)f(man)n(ually)-6 b(.)33
b(A)21 b(co-routine)h(cannot)g(tak)n(e)-152 3447 y(adv)l(an)n(tage)k
(of)g(m)n(ulticore)h(pro)r(cessing.)-77 3534 y(As)41
b(another)h(metho)r(d,)j Fi(delay\(\))p Fp(,)h(whic)n(h)c(is)g(a)g
(service)f(call)i(of)-152 3621 y Fg(\026)p Fp(ITR)n(ON,)35
b(can)f(b)r(e)h(used)g(for)g(m)n(ultitasking.)63 b(This)35
b(service)h(call)-152 3708 y(dela)n(ys)22 b(the)f(execution)g(of)h(its)
f(o)n(wn)h(task)f(for)h(the)f(time)h(of)g(the)f(argu-)-152
3795 y(men)n(t.)33 b Fi(delay\(\))21 b Fp(is)h(needed)e(when)h(sc)n
(heduling)g(\034xed-priorit)n(y)e(tasks.)-152 3882 y(Ho)n(w)n(ev)n(er,)
30 b(the)f(programming)i(applied)e(to)g Fi(delay\(\))h
Fp(is)g(di\036cult)f(to)-152 3970 y(use)d(with)g(fair)h(sc)n(heduling.)
-77 4057 y(F)-6 b(or)38 b(m)n(ultitask)f(pro)r(cessing,)42
b(the)37 b(prop)r(osed)h(framew)n(ork)g(pro-)-152 4144
y(vides)31 b(the)f(Rite)-6 b(VM)29 b(sc)n(heduler,)j(whic)n(h)f(is)g(a)
f(fair)i(sc)n(heduler)e(that)-152 4231 y(runs)19 b(m)n(ultiple)h(tasks)
g(equally)-6 b(.)32 b(Note)19 b(that)g(the)g(Rite)-6
b(VM)19 b(sc)n(heduler)-152 4318 y(is)31 b(utilized)f(only)g(when)g
(application)h(tasks)f(ha)n(v)n(e)g(equal)g(priorit)n(y)-6
b(.)-152 4405 y(mrub)n(y)23 b(applications)i(can)f(run)f(concurren)n
(tly)g(without)h(calling)h(an)-152 4493 y(OS)i(function.)39
b(The)28 b(application)g(programs)h(can)e(also)i(utilize)f(ex-)-152
4580 y(isting)f(programs)f(b)r(ecause)h(their)e(structures)h(do)f(not)h
(c)n(hange.)-77 4667 y(The)33 b(Rite)-6 b(VM)33 b(sc)n(heduler)g(is)h
(a)f(fair)h(sc)n(heduler)f(that)g(is)h(imple-)-152 4754
y(men)n(ted)27 b(as)i(a)f(TECS)g(comp)r(onen)n(t)g(in)g(the)f(prop)r
(osed)h(framew)n(ork.)-152 4841 y(Therefore,)41 b(when)c(dev)n(elop)r
(ers)g(create)g(soft)n(w)n(are)h(with)f(priorit)n(y-)-152
4928 y(based)j(sc)n(heduling,)k(the)39 b(Rite)-6 b(VM)39
b(sc)n(heduler)h(can)g(b)r(e)f(remo)n(v)n(ed)-152 5016
y(easily)-6 b(.)-129 5182 y Fj(3.2.1)90 b(RiteVM)23 b(Sc)o(heduler)d
(Design)-77 5290 y Fp(A)d(Rite)-6 b(VM)16 b(sc)n(heduler)h(is)h(a)f(p)r
(erio)r(dic)h(handler,)h(and)e Fi(r)m(otateReadyQueue)p
Fp(,)-152 5378 y(whic)n(h)k(is)h(a)f(service)h(call)g(of)g
Fg(\026)p Fp(ITR)n(ON)e(to)h(switc)n(h)g(tasks)h(with)f(equal)p
2232 -137 1801 4 v 2143 -60 a Fh(1)56 b Fl(/)p Fe(\003)24
b Fl(tRite)-6 b(VMSc)n(heduler)r(.cdl)23 b Fe(\003)p
Fl(/)2143 15 y Fh(2)56 b Fl(cellt)n(yp)r(e)24 b(tCyclicHandler)h({)2143
90 y Fh(3)183 b Fl([)o(inline])23 b(en)n(try)i(sCyclic)f(eCyclic;)2143
165 y Fh(4)183 b Fl(call)23 b(siHandlerBo)r(dy)i(ciBo)r(dy;)2143
239 y Fh(5)183 b Fl(attr)25 b({)2143 314 y Fh(6)310 b
Fl([)o(omit)q(])23 b(A)-6 b(TR)23 b(attribute)j(=)d(C_EXP\(")q(T)-6
b(A_NULL)o(")q(\);)2143 389 y Fh(7)310 b Fl([)o(omit)q(])23
b(REL)-6 b(TIM)23 b(cyclicTime;)2143 464 y Fh(8)310 b
Fl([)o(omit)q(])23 b(REL)-6 b(TIM)23 b(cyclicPhase)q(;)2143
538 y Fh(9)183 b Fl(};)2110 613 y Fh(10)56 b Fl(};)2110
688 y Fh(11)g Fl(cellt)n(yp)r(e)24 b(tRite)-6 b(VMSc)n(hedulerMain)26
b({)2110 762 y Fh(12)183 b Fl(require)25 b(tKernel)q(.eiKernel)q(;)2110
837 y Fh(13)183 b Fl(en)n(try)25 b(siHandlerBo)r(dy)g(eiBo)r(dy;)2110
912 y Fh(14)183 b Fl(attr)25 b({)2110 987 y Fh(15)310
b Fl(PRI)24 b(priorit)n(y)q(;)2110 1061 y Fh(16)183 b
Fl(};)2110 1136 y Fh(17)56 b Fl(};)2110 1211 y Fh(18)2110
1285 y(19)g Fl(comp)r(osite)24 b(tRite)-6 b(VMSc)n(heduler)26
b({)2110 1360 y Fh(20)183 b Fl(attr)25 b({)2110 1435
y Fh(21)310 b Fl(A)-6 b(TR)23 b(attribute)j(=)d(C_EXP\()q("T)-6
b(A_NULL)o(")q(\);)2110 1510 y Fh(22)310 b Fl(REL)-6
b(TIM)23 b(cyclicTime)h(=)f(1;)2110 1584 y Fh(23)310
b Fl(REL)-6 b(TIM)23 b(cyclicPhase)i(=)e(1;)2110 1659
y Fh(24)310 b Fl(PRI)24 b(priorit)n(y)q(;)2110 1734 y
Fh(25)183 b Fl(};)2110 1808 y Fh(26)g Fl(cell)23 b(tRite)-6
b(VMSc)n(hedulerMain)26 b(Rite)-6 b(VMSc)n(hedulerMain)25
b({)2110 1883 y Fh(27)310 b Fl(priorit)n(y)25 b(=)e(comp)r(osite)q
(.priorit)n(y)q(;)2110 1958 y Fh(28)183 b Fl(};)2110
2033 y Fh(29)g Fl(cell)23 b(tCyclicHandler)i(CyclicHandler)g({)2110
2107 y Fh(30)310 b Fl(ciBo)r(dy)24 b(=)f(Rite)-6 b(VMSc)n(hedulerMain)r
(.)o(eiBo)r(dy)q(;)2110 2182 y Fh(31)310 b Fl(attribute)26
b(=)d(comp)r(osite)q(.attribute)r(;)2110 2257 y Fh(32)310
b Fl(cyclicTime)24 b(=)f(comp)r(osite)q(.cyclicTime;)2110
2332 y Fh(33)310 b Fl(cyclicPhase)24 b(=)g(comp)r(osite)q(.cyclicPhase)
q(;)2110 2406 y Fh(34)183 b Fl(};)2110 2481 y Fh(35)56
b Fl(};)p 2232 2532 V 2157 2747 a Fp(Figure)26 b(16:)35
b(Cellt)n(yp)r(e)26 b(description)g(of)h(Rite)-6 b(VM)25
b(sc)n(heduler)2040 3021 y(priorit)n(y)-6 b(,)25 b(is)g(implemen)n(ted)
f(as)h(the)f(main)h(pro)r(cess)g(of)g(the)f(handler.)2040
3108 y(In)d(other)g(w)n(ords,)i(the)e(Rite)-6 b(VM)20
b(sc)n(heduler)h(calls)i Fi(r)m(otateReadyQueue)2040
3195 y Fp(cyclically)-6 b(.)42 b(The)28 b(design)h(of)f(the)g(Rite)-6
b(VM)27 b(sc)n(heduler)h(is)g(sho)n(wn)h(in)2040 3282
y(Figure)d(14.)36 b Fi(r)m(otateReadyQueue)27 b Fp(is)f(describ)r(ed)g
(as)g(follo)n(ws.)2115 3369 y(Here,)33 b(assumed)f(that)f(t)n(w)n(o)h
(tasks)f(with)h(equal)f(priorit)n(y)h(are)g(in)2040 3457
y(an)i(in\034nite)f(lo)r(op.)60 b(In)33 b(the)g(curren)n(t)g(system,)j
(when)d(one)h(task)g(is)2040 3544 y(executed)20 b(\034rst,)i(the)e
(other)h(task)f(w)n(ould)h(not)g(b)r(e)f(executed)g(b)r(ecause)2040
3631 y(the)25 b(\034rst)h(task)f(runs)h(in)f(the)g(lo)r(op.)2115
3718 y(When)20 b Fi(r)m(otateReadyQueue)k Fp(is)e(called,)h(tasks)f
(with)f(equal)h(priorit)n(y)2040 3805 y(are)g(switc)n(hed)f(as)h(sho)n
(wn)f(in)g(Figure)h(14.)33 b(Note)21 b(that)g(the)g(argumen)n(t)2040
3892 y(of)27 b Fi(r)m(otateReadyQueue)g Fp(is)f(the)f(priorit)n(y)-6
b(.)2115 3980 y(In)16 b(addition,)k Fi(r)m(otateReadyQueue)f
Fp(can)e(b)r(e)g(p)r(erformed)g(if)h(the)f(n)n(um-)2040
4067 y(b)r(er)26 b(of)g(tasks)g(is)g(more)g(than)f(t)n(w)n(o.)34
b(F)-6 b(or)26 b(example,)g(three)f(tasks)h(are)2040
4154 y(in)g(the)f(order)h(task1,)h(task2,)f(and)g(task3.)35
b(In)25 b(this)h(case,)h(the)e(order)2040 4241 y(is)h(rotated)f(to)g
(task2,)g(task3,)h(and)f(task1)g(when)g Fi(r)m(otateReadyQueue)2040
4328 y Fp(is)h(called.)2063 4485 y Fj(3.2.2)90 b(Component)21
b(of)i(RiteVM)g(Sc)o(heduler)2115 4593 y Fp(Figure)40
b(15)h(sho)n(ws)g(a)f(comp)r(onen)n(t)g(diagram)h(of)g(the)e(Rite)-6
b(VM)2040 4680 y(sc)n(heduler.)35 b(The)26 b(Rite)-6
b(VM)25 b(sc)n(heduler)h(consists)g(of)h(CyclicHandler)2040
4767 y(and)h(Rite)-6 b(VMSc)n(hedulerMain.)41 b(The)28
b(CyclicHandler)h Fi(cell)f Fp(con\034g-)2040 4855 y(ures)35
b(the)g(p)r(erio)r(dic)h(handler)f(based)g(on)g Fg(\026)p
Fp(ITR)n(ON.)f(Cyclic)i(han-)2040 4942 y(dlers)25 b(based)g(on)g
Fg(\026)p Fp(ITR)n(ON)f(are)i(describ)r(ed)f(in)g(the)f(literature)i
([25].)2040 5029 y(The)32 b(CyclicHandler)g Fi(cell)f
Fp(has)g(the)g(attributes)h(of)g(the)f Fi(cell)p Fp(.)51
b(The)2040 5116 y(Rite)-6 b(VMSc)n(hedulerMain)25 b Fi(cell)g
Fp(pro)r(cesses)h(the)f(b)r(o)r(dy)f(of)i(a)g(p)r(erio)r(dic)2040
5203 y(handler.)41 b(Note)27 b(that)h Fi(r)m(otateReadyQueue)h
Fp(is)f(implemen)n(ted)g(as)g(the)2040 5290 y(b)r(o)r(dy)-6
b(.)68 b(Figure)38 b(16)g(sho)n(ws)g(tRite)-6 b(VMSc)n(heduler)36
b Fi(celltype)p Fp(,)41 b(whic)n(h)2040 5378 y(is)33
b(a)g Fi(composite)26 b(cell)32 b Fp(consisting)i(of)f(t)n(w)n(o)g
Fi(cell)p Fp(s.)56 b(The)33 b Fi(call)f Fp(p)r(ort)h(of)p
eop end
%%Page: 7 7
TeXDict begin 7 6 bop 40 -137 1801 4 v -49 -60 a Fh(1)56
b Fl(cell)23 b(tRite)-6 b(VMSc)n(heduler)26 b(Rite)-6
b(VMSc)n(heduler)26 b({)-49 15 y Fh(2)183 b Fl(attribute)26
b(=)d(C_EXP\(")q(T)-6 b(A_ST)g(A"\);)-49 90 y Fh(3)183
b Fl(cyclicTime)24 b(=)f(1;)-49 165 y Fh(4)183 b Fl(cyclicPhase)25
b(=)e(1;)-49 239 y Fh(5)183 b Fl(priorit)n(y)25 b(=)-49
314 y Fh(6)310 b Fl(C_EXP\("RITEVM_PRIORITY"\);)-49 389
y Fh(7)56 b Fl(};)p 40 439 V 14 655 a Fp(Figure)26 b(17:)35
b(Build)26 b(description)g(of)h(Rite)-6 b(VM)25 b(sc)n(heduler)-152
2253 y @beginspecial 0 @llx 0 @lly 1059 @urx 752 @ury
2437 @rwi @clip @setspecial
%%BeginDocument: figure/Eventflag.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Eventflag.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:12:13
%%BoundingBox: 0 0 1059 752
%%HiResBoundingBox: 0 0 1058.2801 751.0801
%%CropBox: 0 0 1058.2801 751.0801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T19:56:17+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T19:56:17+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -751.08 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 751.08 li
1058.28 751.08 li
1058.28 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 751.08 mo
1058.28 751.08 li
1058.28 -6.10352e-5 li
0 -6.10352e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
22.44 702.48 mo
471.12 702.48 li
471.12 620.76 li
22.44 620.76 li
cp
ef
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
22.44 702.48 mo
471.12 702.48 li
471.12 620.76 li
22.44 620.76 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
18 <001C60D8A8C9B77AEA5E94F4C4913454F61865807FFA2320A92BA3C5> |
13 <001C60D8A8C9B6605B97FAEC04AB2D4428878379E40EE161EE2440A92FFF
7DCC4FA17D4322DFD835A1B1D42A60F9B2596640837ABAC1510325416B4A65F7
2A67D8260967AC5356B35D256698AF> |
3 <001C60D8A8C9B816D234> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
32.256 640.44 mo
(\000\022\000\015\000\003)
[8.51314 11.7742 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 8 GetGlyphDirectory
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
53 <001C60D8A8C9B65EB406FCAE790BDCEA12A03C0B9408E56B70CF16B5D6EF
21FFCAE257C8CFF3C8002516587DC94064BE8ABC9A3C82445332E937D71FA174
17DA5611A11DFBF21AC0E4AE336954E7FAB9A862D9465597A6E644B6> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
17 <001C60D8A8C9B80F37F28BBD69438B6F09441D6BA20ED3CF1C> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
59.016 640.44 mo
(\000W\0005\000L\000W\000H\0009\0000\000\021\000F)
[7.1858 12.9497 4.8158 7.1858 10.9398 12.9497 15.7556 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
153.94 640.44 mo
(\000\015\000\022)
[11.784 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 9 GetGlyphDirectory
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
89 <001C60D8A8C9B7E52216419985ABDC2A2C8279C7A2E84BC8C8D658828106
065B1850310ED427E848> |
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
73 <001C60D8A8C9B81D896E44290F028784B8F68E5717C1D4EC0AE67D121D71
E2B258B0A7B37998658AF153323DD976A1112C09FFF2020962C01A8BE61673D8
E41B5D9B5DB0C889FEBDAC71F420D99ABF79F945E4CA511B> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
66 <001C60D8A8C9B6605B96B30BD496F90EC713FA1D140454> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
32.256 665.52 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18579 6.61717 4.8158 10.9968 11.5086 11.7742 9.48003 
10.9398 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
167.4 665.52 mo
(\000\013\000\003)
[8.27995 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 4 GetGlyphDirectory
36 <001C60D8A8C9B65B43E736E97338B3171E4D5FC9AD2E09D53507110EAE30
BBE0AD4E51A448FF6ED2C8399AE02E57D1E794E82EDCABB32C42C690> |
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
51 <001C60D8A8C9B7C7F3AB8C913496B09857977C9DC6242A9162060173AC59
9393DA1940FF4DBBBB7DC58141AB33AD646160390F69558CE684F038371A8CA4
BBDE854FF6E871389797481AE0511B0909CE7DDDBB9990A8EC8C41B5BDE134> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
182.64 665.52 mo
(\000$\0007\0007\0005\000B\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[11.7551 12.343 12.0017 12.9497 11.7742 9.44209 10.9398 7.18579 10.826 10.9969 7.22369 7.29956 
10.9398 7.83035 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
30 <001C60D8A8C9B76D61AE9E96E6A51E6B1AB2BC7F7D2CB956109B58FDEA71
6EE6A760DC6A18BAB0923E> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
345.12 665.52 mo
(\000\014\000\036)
[8.27994 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
90 <001C60D8A8C9B6B41CB5F8AAE2E772244E76F61D77AF2FDBAC902FEC5AAD
CBE7BFC65CE7EDC25DB0A3C3A806ED836B9EC03B6E395F78113BB954DFD1987C
9A3E> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
32.256 690.6 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.62496 11.732 10.555 10.9537 11.732 7.19489 6.58759 4.82188 11.0108 11.5232 11.7891 15.6996 
11.0107 4.8219 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
178.56 690.6 mo
(\000\013\000\003)
[8.27989 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
193.68 690.6 mo
(\000Z\000D\000L\000W\0003\000D\000W\000W\000H\000U\000Q)
[15.7186 11.0108 4.82188 7.1949 10.8207 11.0108 7.1949 7.19489 10.9537 7.84027 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
15 <001C60D8A8C9B80F37F2DC6DD04DE87F1E35A73691EFF8827E7597> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
299.16 690.6 mo
(\000\017\000\003)
[6.60001 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
49 <001C60D8A8C9B6184AB5445E2049CE7834CACA1B144F394B59C0765899E8
457350BF2483D2D78DD2E6F35B65> |
39 <001C60D8A8C9B6E081B04FC435829385C5BEDC68DDC35DE8CE7C5EDA488D
6B3D34241C637D17663805636ABD3B433EB8517B7BE139E4B8BA2B0A5F589491
BFB4E8873019EA26DF68E10022DBC58622EA817B140FFE44A9DFABA30D8E7300
B0B48771> |
9 <001C60D8A8C9B60AF04D9E1E80F9C1BA11849AE5E9A2834A1FF3AF60E0C5C
DE33315FEA6E08A7CE9125374711E480E14D91F8C899D40EB9FEC978228D969E
901966DDE558726C8A092D8B65A197874DEA0140A68F0A4620EA6E03ADC3E3DB
82C42CF0018ED21423AD22818D6815FC9B6B218FC8776B421B2907D35CE03D39
2B641DB3E9A18B48AC5B522FD149DF04B85A0F12CF4091E08095C066F3607877
03AED0D9279630EBC2A4C7A03BBD9FABFA2292A78171CABC75BF66FBC869CCB8
63179D0423F8712E98A0C00C8C32BC0AF97F5ACCA0074553C4392BF2C56BE721
AEA80BE5F59D44933> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
312.72 690.6 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.871 14.0101 13.6873 6.6254 6.7962 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
83 <001C60D8A8C9B7DB133A6BF1DC72AFF4D9E1D88066B503430ED7CA204AEE
347A7EAE3CB3884EB4FFBB8F90017827BA9DCD885413704044F3F41AD14D2D6A
CED61CEA6A04B229BF5A6BC738FEA6377C17D19B447D1E3C5DDC24F2FD35A82E
DAE48699B344D31AB5EDBC945652C2C08D> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
380.54 690.6 mo
(\000I\000O\000J\000S\000W\000Q)
[6.58759 4.82187 11.5232 11.5423 7.19492 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
440.42 690.6 mo
(\000\014\000\036)
[8.27988 0 ]xsh
23.88 273.6 mo
429.72 273.6 li
429.72 14.64 li
23.88 14.64 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
23.88 273.6 mo
429.72 273.6 li
429.72 14.64 li
23.88 14.64 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
21 <001C60D8A8C9B6605B97B971C90101384E5F55BFDC60B70BA13CBEBD8079
87DEE773C6D32C924661DB9596D2057D023C05B990EDB59F8EE8FE5A9465DF9F
5C71FFEFFDBBC50880551E2ACA565AFE9EE26169EFE24A7FA44292793C21F963
028EE33626F245AD451978534A938D5D74D06B6686AFB07603> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
33.768 34.15 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\025\000\021\000F\000\003\000\015\000\022)
[8.51314 11.7742 6.44633 7.1858 12.9497 4.8158 7.1858 10.9398 12.9497 15.7556 11.7742 11.7742 
6.61702 9.61279 6.76865 11.7742 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
32 <001C60D8A8C9B6D9EA400EBFFB18B2CE79DA90F3D67D9C9E26F49A111754
CE1CEE471B1B> |
20 <001C60D8A8C9B6605B97E3474607F65DA83467005204B5F48E11F4969E87
21827C7B7F47B5579624C0429CB1D21355B681041D4720> |
94 <001C60D8A8C9B7C3C9EDB6DA65990F517FCF12D224E87966FD984F4DC61C
1C75BE58310018C669DD35C7777E7F753AD6C3BAA260E9F14A655CABA40F2DE3
4594863E2579B7B3DFA08E874478EC60E3D730ADFB3C2054597973DD9841B81C
A354FF50F91A5B865C72D3FEB225> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
33.768 59.23 mo
(\000L\000I\000\003\000\013\000\003\0009\0000\000\003\000 \000 \000\003\000\024\000\003\000\014\000\003\000^)
[4.8158 6.35173 6.57905 8.32335 6.54113 12.9497 15.7556 6.56009 15.2439 15.2439 6.44633 11.7742 
6.44632 8.32336 6.57904 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
72.768 84.31 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18579 6.61717 4.8158 10.9968 11.5086 11.7742 9.48003 
10.9398 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
19 <001C60D8A8C9B6605B97F773CB37EF105D6285754EBC81D65F6F04CC691C
7F5EE348066567CE3373FF864DFD63A083663665D3895BAA42E3A193D458B51D
F88FA0C902C3C8220A529A43AA1C484F6CF1F6572D25AD1CC6600451E844C2AD
F985B4EB8ED1481A42735624F1F4E8E1442A7ACD473BC46ABD8C9489DDB55FE3
ECEFD3636CDABD24A793C37AB191> |
91 <001C60D8A8C9B7EF322BCE77320BDDEB6C822497B72CA300CCF93D9341A7
1BF29803D36EA01124904658E1C9AD3CC24155EE375EACDCAE8E68F5C2> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
207.91 84.31 mo
(\000\013\000\003\000\023\000[\000\023\000\024\000\003\000\014)
[8.32335 6.90137 11.7742 10.5418 11.7742 11.7742 6.44632 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
66.288 109.39 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61716 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
212.59 109.39 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32335 6.76865 11.7742 10.5418 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
279.91 109.39 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.80658 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
347.71 109.39 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.18579 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
407.59 109.39 mo
(\000\014)sh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
96 <001C60D8A8C9B7C3C9ED8193932A1B4143787C592E3BA82C1A812B58BC74
5CA7E7C50593380547AB5D34FE7490712D37869FCDCF1148D92B819F45792FF9
FEB82CD0A1E7F591E657C1A5AC3D65EE1B912F3B4B771B43D26CC661ABF09605
97333ACC5564EFFEAF5BB90A> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
33.768 134.47 mo
(\000`)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
33.768 159.55 mo
(\000H\000O\000V\000H\000\003\000L\000I\000\003\000\013\000\003\0009\0000\000\003\000 \000 \000\003\000\025\000\003\000\014\000^)
[10.9537 4.8219 9.45405 10.8967 6.70128 4.82189 6.35976 6.5684 8.33389 6.53043 12.966 15.7186 
6.58739 15.2632 15.2632 6.45448 11.7891 6.4545 8.25795 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
66.288 184.66 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61716 4.8158 10.9968 11.5086 11.7742 9.48001 
10.9398 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
201.43 184.66 mo
(\000\013\000\003\000\023\000[\000\023\000\025)
[8.32335 6.90137 11.7742 10.5418 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
268.87 184.66 mo
(\000\014)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
66.288 209.74 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61716 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
212.59 209.74 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32335 6.76865 11.7742 10.5418 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
279.91 209.74 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.80658 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
347.71 209.74 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.18579 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
407.59 209.74 mo
(\000\014)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
33.768 234.82 mo
(\000`)sh
54.6 377.64 mo
467.04 377.64 li
467.04 42.72 li
54.6 42.72 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
54.6 377.64 mo
467.04 377.64 li
467.04 42.72 li
54.6 42.72 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
22 <001C60D8A8C9B6605B98FACCBBA7A41C9903FD40C3E16D2A898429F24F9C
A57C4CC310A044D87F6AC87496A40150D342AC53D462CDCFD3AB53C69B171BF6
7E9C075978A02491CDA1EFE0732B776B4E0C85ED7D38AA8FB41D1DE87C4E57B9
505DD05BEB22DF4DCBA88C015FC9E527DB5A92F7B2A4FB6C778DAA4D8C1871B0
CB2DC1AA61BBF6BE683F456ACF25D2694817C2A28C0154DF6CBC3428D8DF1088
F28484EE9B3F> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
64.512 62.26 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\026\000\021\000F\000\003\000\015\000\022)
[8.51314 11.7742 6.44633 7.18581 12.9496 4.8158 7.18581 10.9398 12.9497 15.7556 11.7742 11.7742 
6.617 9.61279 6.76865 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
64.512 87.34 mo
(\000L\000I\000\003\000\013\000\003\0009\0000\000\003\000 \000 \000\003\000\024\000\003\000\014\000\003\000^)
[4.8158 6.35173 6.57905 8.32335 6.54114 12.9496 15.7556 6.56009 15.2439 15.2439 6.44632 11.7742 
6.44633 8.32335 6.57904 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
97.032 112.42 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18579 6.61716 4.8158 10.9968 11.5086 11.7742 9.48001 
10.9398 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
232.18 112.42 mo
(\000\013\000\003\000\023\000[\000\023\000\024\000\003\000\014)
[8.32335 6.90137 11.7742 10.5417 11.7742 11.7742 6.33255 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
103.51 137.5 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18579 6.61717 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
249.82 137.5 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32336 6.76865 11.7742 10.5417 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
317.26 137.5 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.69281 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
384.94 137.5 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.24268 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
444.96 137.5 mo
(\000\014)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
64.512 162.6 mo
(\000`)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
64.512 187.68 mo
(\000H\000O\000V\000H\000\003\000L\000I\000\003\000\013\000\003\0009\0000\000\003\000 \000 \000\003\000\025\000\003\000\014\000^)
[10.9398 4.8158 9.4421 10.9398 6.67385 4.8158 6.35172 6.57905 8.32335 6.54114 12.9497 15.7556 
6.56009 15.2439 15.2439 6.44632 11.7742 6.44632 8.32333 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
109.99 212.76 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61716 4.8158 10.9968 11.5086 11.7742 9.48001 
10.9398 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
245.14 212.76 mo
(\000\013\000\003\000\023\000[\000\023\000\025)
[8.32335 6.90137 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
312.7 212.76 mo
(\000\014)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
103.51 237.84 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18579 6.61717 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
249.82 237.84 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32336 6.76865 11.7742 10.5417 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
317.26 237.84 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.69281 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
384.94 237.84 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.24268 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
444.96 237.84 mo
(\000\014)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
64.512 262.92 mo
(\000`)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
64.512 288 mo
(\000H\000O\000V\000H\000\003\000L\000I\000\003\000\013\000\003\0009\0000\000\003\000 \000 \000\003\000\026\000\003\000\014\000^)
[10.9398 4.8158 9.4421 10.9398 6.67385 4.8158 6.35172 6.57905 8.32335 6.54114 12.9497 15.7556 
6.56009 15.2439 15.2439 6.44632 11.7742 6.44632 8.32333 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
103.51 313.1 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18579 6.61717 4.8158 10.9968 11.5086 11.7742 9.48003 
10.9398 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
23 <001C60D8A8C9B6605B97A6AE26C2840C4859DD2A09849B51F566F11010AC
805F1394C7046187E470EAAB37E75A830745E66CED4DCDB5F72E2F64> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
238.66 313.1 mo
(\000\013\000\003\000\023\000[\000\023\000\027)
[8.32335 6.90137 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
306.22 313.1 mo
(\000\014)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
103.51 338.18 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18579 6.61717 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
249.82 338.18 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32336 6.76865 11.7742 10.5417 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
317.26 338.18 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.69281 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
384.94 338.18 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.24268 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
444.96 338.18 mo
(\000\014)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
64.512 363.26 mo
(\000`)sh
85.68 505.68 mo
506.28 505.68 li
506.28 69.36 li
85.68 69.36 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
85.68 505.68 mo
506.28 505.68 li
506.28 69.36 li
85.68 69.36 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 88.94 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\027\000\021\000F\000\003\000\015\000\022)
[8.51314 11.7742 6.44633 7.18581 12.9496 4.8158 7.18581 10.9398 12.9497 15.7556 11.7742 11.7742 
6.617 9.61279 6.76865 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 114.02 mo
(\000L\000I\000\003\000\013\000\003)
[4.8158 6.35173 6.57905 8.32335 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
44 <001C60D8A8C9B708F664964317C7D97D9359303C96D5BE1717FCD84DDCFA
AD459511E832EFD67DC824> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
128.21 114.02 mo
(\000$\0007\0007\0005\000B\000,\000'\000\003)
[11.7551 12.343 12.0017 12.9497 11.7742 7.64088 14.2009 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
217.75 114.02 mo
(\000 \000 \000\003\000\024\000\003\000\014\000\003\000^)
[15.2439 15.2439 6.44632 11.7742 6.44632 8.32336 6.57904 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
128.09 139.1 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.62495 11.732 10.555 10.9537 11.732 7.1949 6.58757 4.8219 11.0107 11.5232 11.7891 9.45406 
10.9537 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
263.23 139.1 mo
(\000\013\000\003\000\023\000[\000\023\000\024\000\003\000\014\000\036)
[8.33389 6.89111 11.7891 10.5551 11.7891 11.7132 6.35956 8.33389 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
128.09 164.21 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61717 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9969 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
274.39 164.21 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32336 6.76865 11.7742 10.5417 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
341.71 164.21 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.80658 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
409.51 164.21 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.18582 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
469.42 164.21 mo
(\000\014\000\036)
[8.27994 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 189.29 mo
(\000`)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 214.37 mo
(\000H\000O\000V\000H\000\003\000L\000I\000\003\000\013\000\003)
[10.9398 4.8158 9.4421 10.9398 6.67384 4.81581 6.35173 6.57904 8.32335 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
171.05 214.37 mo
(\000$\0007\0007\0005\000B\000,\000'\000\003)
[11.7551 12.343 12.0017 12.9497 11.7742 7.64088 14.2009 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
260.59 214.37 mo
(\000 \000 \000\003\000\025\000\003)
[15.2439 15.2438 6.44635 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
315.79 214.37 mo
(\000\014\000\003\000^)
[8.32336 6.54111 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
134.57 239.45 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61717 4.8158 10.9968 11.5086 11.7742 9.48003 
10.9398 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
269.71 239.45 mo
(\000\013\000\003\000\023\000[\000\023\000\025)
[8.32336 6.90137 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
337.27 239.45 mo
(\000\014\000\036)
[8.27994 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
134.57 264.53 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61717 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
280.87 264.53 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32336 6.76865 11.7742 10.5417 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
348.31 264.53 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.69281 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
415.99 264.53 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.18582 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
476.02 264.53 mo
(\000\014\000\036)
[8.27994 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
95.568 289.61 mo
(\000`)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 314.71 mo
(\000H\000O\000V\000H\000\003\000L\000I\000\003)
[10.9398 4.8158 9.4421 10.9398 6.67384 4.81581 6.35173 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
156.17 314.71 mo
(\000\013\000\003\000$\0007\0007\0005\000B\000,\000'\000\003)
[8.32335 6.54114 11.7551 12.343 12.0017 12.9496 11.7742 7.64087 14.2009 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
260.59 314.71 mo
(\000 \000 \000\003\000\026\000\003)
[15.2439 15.2438 6.44635 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
315.79 314.71 mo
(\000\014\000\003\000^)
[8.32336 6.54111 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
134.57 339.79 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61717 4.8158 10.9968 11.5086 11.7742 9.48003 
10.9398 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
269.71 339.79 mo
(\000\013\000\003\000\023\000[\000\023\000\027)
[8.32336 6.90137 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
337.27 339.79 mo
(\000\014\000\036)
[8.27994 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
134.57 364.87 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61717 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
280.87 364.87 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32336 6.76865 11.7742 10.5417 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
348.31 364.87 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.69281 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
415.99 364.87 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.18582 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
476.02 364.87 mo
(\000\014\000\036)
[8.27994 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 389.95 mo
(\000`)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 415.03 mo
(\000H\000O\000V\000H\000\003\000L\000I\000\003\000\013\000\003)
[10.9398 4.8158 9.4421 10.9398 6.67384 4.81581 6.35173 6.57904 8.32335 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
171.05 415.03 mo
(\000$\0007\0007\0005\000B\000,\000'\000\003)
[11.7551 12.343 12.0017 12.9497 11.7742 7.64088 14.2009 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
260.59 415.03 mo
(\000 \000 \000\003\000\027\000\003)
[15.2439 15.2438 6.44635 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
315.79 415.03 mo
(\000\014\000\003\000^)
[8.32336 6.54111 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
134.57 440.11 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000V\000H\000W)
[9.62495 11.732 10.555 10.9537 11.732 7.1949 6.58757 4.8219 11.0107 11.5232 11.7891 9.45406 
10.9537 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
27 <001C60D8A8C9B6605BD083DC03D08172F779A0956662141E8D83546AF940
A3D7ABC56E06B59AD0EDA681C14040DE4412E3F56E70F81989BC1CBC8FBE0F4A
5AE8133732576F4BD1A6AD9589C2F69F2FB5BDB9AC7FB60ECA5DAFDF2CDE4BC3
5E0D9B0C7D7FBD8A1E82AD7109B717CB7C1D0E16F2A92AA673F1CD39ABD8B561
BB96E99D5F927E271BD898D5DCF4B2583A85D72F47F3F985BA69BC11F27EF2CB
AE2B468514E5B13AEB941B7C4DA275871682BCB35C39EC4FC2A6A6D8EF1C9EDA
67C00FC041C0A7771CCFFA851E86D52F69EF0C6368275297C62CA88637F7EF3D
4CF564> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
269.71 440.11 mo
(\000\013\000\003\000\023\000[\000\023\000\033)
[8.33389 6.89111 11.7891 10.5551 11.7891 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
337.27 440.11 mo
(\000\014\000\036)
[8.27988 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
134.57 465.22 mo
(\000F\000\(\000Y\000H\000Q\000W\000I\000O\000D\000J\000B\000Z\000D\000L\000W)
[9.61279 11.7172 10.5985 10.9398 11.7172 7.18581 6.61717 4.8158 10.9968 11.5086 11.7742 15.7935 
10.9968 4.8158 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
280.87 465.22 mo
(\000\013\000\003\000\023\000[\000\023\000I\000\017\000\003)
[8.32336 6.76865 11.7742 10.5417 11.7742 5.02454 6.617 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
348.31 465.22 mo
(\000$\0001\000'\000\017\000\003\000\011)
[12.8548 14.0493 13.6511 6.617 6.69281 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
415.99 465.22 mo
(\000I\000O\000J\000S\000W\000Q)
[6.57925 4.8158 11.5086 11.5277 7.18582 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
476.02 465.22 mo
(\000\014\000\036)
[8.27994 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
95.568 490.3 mo
(\000`)sh
gsave
0 751.08 mo
1058.28 751.08 li
1058.28 0 li
0 0 li
cp
eclp
2.04 lw
[6.12 2.04 ] 0 dsh
.06 562.24 mo
551.85 562.24 li
551.85 312.18 li
1058.31 312.18 li
1 /0 /CSD get_res sepcs
.502 sep
@
grestore
563.22 407.88 mo
563.22 488.52 li
576.48 488.52 li
549.96 515.04 li
523.44 488.52 li
536.7 488.52 li
536.7 407.88 li
cp
ef
.96 lw
563.22 407.88 mo
563.22 488.52 li
576.48 488.52 li
549.96 515.04 li
523.44 488.52 li
536.7 488.52 li
536.7 407.88 li
cp
@
gsave
0 751.08 mo
1058.28 751.08 li
1058.28 -6.10352e-5 li
0 -6.10352e-5 li
cp
eclp
2.04 lw
[6.12 2.04 ] 0 dsh
.06 561.76 mo
1.1814 561.76 li
1.1814 4.38 li
1058.31 4.38 li
1 /0 /CSD get_res sepcs
.502 sep
@
grestore
gsave
.00012207 751.08 mo
1058.28 751.08 li
1058.28 -.000427246 li
.00012207 -.000427246 li
cp
eclp
2.04 lw
[6.12 2.04 ] 0 dsh
1058.34 4.38 mo
1056.59 4.38 li
1056.59 745.863 li
-1.14 745.863 li
1 /0 /CSD get_res sepcs
.502 sep
@
grestore
gsave
-4e-9 0 mo
1058.28 0 li
1058.28 751.08 li
-4e-9 751.08 li
eclp
2.04 lw
[6.12 2.04 ] 0 dsh
.060039 745.822 mo
.060039 654.041 li
.56004 654.041 li
.56004 562.26 li
1 /0 /CSD get_res sepcs
.502 sep
@
grestore
gsave
1.577e-5 751.08 mo
1058.28 751.08 li
1058.28 0 li
1.577e-5 0 li
cp
eclp
%ADOBeginSubsetFont: ONKBAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /ONKBAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9ddb6d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c79660e5cc27400008f5c000014be68656164f31caa1e00000f640000
0036686865610dad0c0300000f9c00000024686d747867ef0f1a00000fc0
00002fd66c6f63612b05308700003f9800001e546d617870213824cd0000
5dec000000206e616d651fad718400005e0c00000d3e707265706baf02fe
00006b4c00002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e00002ff4000acff00000001000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d0000000100000005e1473b08b6095f0f3cf500190800
00000000bbeb7ccc00000000d219014cfbfafd8b09ec0836000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000008c2040e000000000000000000000000000004a1
002300000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000045a00ac000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000003f40010
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000040400a10000000000000000
00000000000000000000000000000000046500a100000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000060600a10000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000003ed00a100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
043400600000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000002e50048000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000001f6
006c00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000026000ed0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000026d0085026d007a00000000
000000000000000000000000024000840240007a0000000000000000026d
0085026d007a000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001bc006001bc0058000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001bc006001bc0058000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000002f5001c02e7008e000000000000
000000000000000000000000000000000000000000000000000000000000
00000000046d008e00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002f5001c0000000002e7008e0000000000000000
000000000000000000000000000000000000000000000000000000000000
0000046d008e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000a100a100a100a1
012f012f012f012f012f012f012f012f012f012f012f012f012f01e501e5
01e501e501e501e501e501e501e501e501e501e501e501e501e501e501e5
01e501e501e501e501e501e501e501e501e501e501e501e501e501e501e5
01e501e501e501e501e501e501e501e501e501e501e501e501e501e501e5
01e501e501e501e502920292029202920292029202920292029202920292
029202920292029202920292029202920292029202920292029202920292
029202920292029202920292029202920292029202920292029202920292
029202920292029202920292029202920292029202920292029202920292
029202920292029202920292029202f802f802f802f802f802f802f802f8
02f802f802f802f802f8036803680368036803680368036803aa03aa03aa
03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa
03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa
03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa03aa0420042004200420
042004200420042004200420042004200420042004200420042004200420
042004200420049a049a049a049a049a049a049a049a049a049a049a049a
049a049a049a049a049a049a049a049a049a049a049a049a049a049a049a
049a049a049a049a049a049a049a049a049a049a049a049a049a049a049a
049a049a049a049a049a049a049a049a049a049a049a049a049a049a049a
049a049a049a049a049a049a049a049a0531053105310531053105310531
053105310531053105310531053105310531053105310531053105310531
053105310531053105310531053105310531053105310531053105310531
053105310531053105310531053105310531053105310531053105310531
053105310531053105310531053105310531053105310531053105310531
053105310531053105310531053105310531053105310531053105310531
053105310531053105310531053105310531053105310531053105310531
053105310531053105310531053105310531053105310531053105310531
0531053105aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa
05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa
05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa
05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa
05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa05aa
05aa06100610061006100610061006100610061006100610061006100610
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306630663
066306630663066306630663066306630663066306630663066306a806a8
06a806a806a806a806a806f606f606f606f606f606f606f606f606f606f6
06f606f606f606f606f606f606f606f606f606f606f606f606f606f606f6
06f606f606f606f606f606f606f606f606f606f606f606f606f606f606f6
06f606f606f606f606f6073f078f078f078f078f078f07d7082108210821
082908310831083108310831083108310831083108310831083108310831
087708770877087708770877087708770877087708770877087708770877
087708770877087708770877087708770877087708770877087708770877
087708770877087708770877087708770877087708770877087708770877
087708770877087708770877087708770877087708770877087708770877
087708770877087708770877087708770877087708770877087708770877
087708770877087708770877087708770877087708770877087708770877
087708770877087708770877087708770877087708770877087708770877
087708770877088008890889088908890889088908890889088908890889
08890889088908d009180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918091809180918
091809180918091809180918091809180918091809180918092009280928
092809280928092809280928092809280928093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930093009300930093009300930093009300930093009300930
093009300930097c097c09ee09ee09ee09ee09ee09ee09ee09ee09ee09ee
09ee0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f0a5f
0a5f0a5f0a5f0a5f0a5f0a5f0a5f000100000f29004f0005003c00030002
0010002f0065000011902410000100010000002d02220000000300000000
006400000000000300000001000e00640000000300000002000e03040000
000300000003002403120000000300000004000e00640000000300000005
001803360000000300000006000e006400000003000000070076034e0000
000300000008002a000e0000000300000009002003c4000000030000000a
02a00064000000030000000b005603e4000000030000000c002a043a0000
00030000000d02980464000000030000000e006c06fc0001000000000000
0032076800010000000000010007079a0001000000000002000708ea0001
000000000003001208f100010000000000040007079a0001000000000005
000c090300010000000000060007079a0001000000000007003b090f0001
0000000000080015076f00010000000000090010094a000100000000000a
0150079a000100000000000b002b095a000100000000000c001509850001
00000000000d014c099a000100000000000e00360ae60003000104090000
006400000003000104090001000e00640003000104090002000e03040003
000104090003002403120003000104090004000e00640003000104090005
001803360003000104090006000e006400030001040900070076034e0003
000104090008002a000e0003000104090009002003c4000300010409000a
02a00064000300010409000b005603e4000300010409000c002a043a0003
00010409000d02980464000300010409000e006c06fc00a9002000320030
003100340020004d006900630072006f0073006f0066007400200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e00430061006c0069006200720069002000690073002000610020006d
006f006400650072006e002000730061006e007300200073006500720069
0066002000660061006d0069006c00790020007700690074006800200073
007500620074006c006500200072006f0075006e00640069006e00670073
0020006f006e0020007300740065006d007300200061006e006400200063
006f0072006e006500720073002e00200049007400200066006500610074
00750072006500730020007200650061006c0020006900740061006c0069
00630073002c00200073006d0061006c006c00200063006100700073002c
00200061006e00640020006d0075006c007400690070006c00650020006e
0075006d006500720061006c00200073006500740073002e002000490074
0073002000700072006f0070006f007200740069006f006e007300200061
006c006c006f00770020006800690067006800200069006d007000610063
007400200069006e002000740069006700680074006c0079002000730065
00740020006c0069006e006500730020006f006600200062006900670020
0061006e006400200073006d0061006c006c002000740065007800740020
0061006c0069006b0065002e002000430061006c00690062007200690027
00730020006d0061006e0079002000630075007200760065007300200061
006e006400200074006800650020006e0065007700200072006100730074
0065007200690073006500720020007400650061006d0020007500700020
0069006e0020006200690067006700650072002000730069007a00650073
00200074006f002000720065007600650061006c00200061002000770061
0072006d00200061006e006400200073006f006600740020006300680061
007200610063007400650072002e0052006500670075006c00610072004d
006900630072006f0073006f00660074003a002000430061006c00690062
0072006900560065007200730069006f006e00200035002e003800380043
0061006c0069006200720069002000690073002000610020007400720061
00640065006d00610072006b0020006f006600200074006800650020004d
006900630072006f0073006f00660074002000670072006f007500700020
006f006600200063006f006d00700061006e006900650073002e004c0075
00630028006100730029002000640065002000470072006f006f00740068
007400740070003a002f002f007700770077002e006d006900630072006f
0073006f00660074002e0063006f006d002f007400790070006f00670072
0061007000680079002f006300740066006f006e00740073006800740074
0070003a002f002f0066006f006e007400660061006200720069006b002e
0063006f006d0059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
00450055004c004100200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c007500640065006400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e0074002e00200059006f00750020006d006100790020
006f006e006c0079002000280069002900200065006d0062006500640020
007400680069007300200066006f006e007400200069006e00200063006f
006e00740065006e00740020006100730020007000650072006d00690074
007400650064002000620079002000740068006500200065006d00620065
006400640069006e00670020007200650073007400720069006300740069
006f006e007300200069006e0063006c007500640065006400200069006e
0020007400680069007300200066006f006e0074003b00200061006e0064
00200028006900690029002000740065006d0070006f0072006100720069
006c007900200064006f0077006e006c006f006100640020007400680069
007300200066006f006e007400200074006f002000610020007000720069
006e0074006500720020006f00720020006f00740068006500720020006f
00750074007000750074002000640065007600690063006500200074006f
002000680065006c00700020007000720069006e007400200063006f006e
00740065006e0074002e0068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079002f0066006f006e0074
0073002f00640065006600610075006c0074002e0061007300700078a920
32303134204d6963726f736f667420436f72706f726174696f6e2e20416c
6c205269676874732052657365727665642e43616c696272692069732061
206d6f6465726e2073616e732073657269662066616d696c792077697468
20737562746c6520726f756e64696e6773206f6e207374656d7320616e64
20636f726e6572732e204974206665617475726573207265616c20697461
6c6963732c20736d616c6c20636170732c20616e64206d756c7469706c65
206e756d6572616c20736574732e204974732070726f706f7274696f6e73
20616c6c6f77206869676820696d7061637420696e2074696768746c7920
736574206c696e6573206f662062696720616e6420736d616c6c20746578
7420616c696b652e2043616c696272692773206d616e7920637572766573
20616e6420746865206e65772072617374657269736572207465616d2075
7020696e206269676765722073697a657320746f2072657665616c206120
7761726d20616e6420736f6674206368617261637465722e526567756c61
724d6963726f736f66743a2043616c6962726956657273696f6e20352e38
3843616c6962726920697320612074726164656d61726b206f6620746865
204d6963726f736f66742067726f7570206f6620636f6d70616e6965732e
4c7563286173292064652047726f6f74687474703a2f2f7777772e6d6963
726f736f66742e636f6d2f7479706f6772617068792f6374666f6e747368
7474703a2f2f666f6e7466616272696b2e636f6d596f75206d6179207573
65207468697320666f6e74206173207065726d6974746564206279207468
652045554c4120666f72207468652070726f6475637420696e2077686963
68207468697320666f6e7420697320696e636c7564656420746f20646973
706c617920616e64207072696e7420636f6e74656e742e20596f75206d61
79206f6e6c792028692920656d626564207468697320666f6e7420696e20
636f6e74656e74206173207065726d69747465642062792074686520656d
62656464696e67207265737472696374696f6e7320696e636c7564656420
696e207468697320666f6e743b20616e6420286969292074656d706f7261
72696c7920646f776e6c6f6164207468697320666f6e7420746f20612070
72696e746572206f72206f74686572206f75747075742064657669636520
746f2068656c70207072696e7420636f6e74656e742e687474703a2f2f77
77772e6d6963726f736f66742e636f6d2f7479706f6772617068792f666f
6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[5311 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3564 894 <00010085fea701f3058b00230022401503100b014d03100f014d03100c0d
014c03151f0b85003f2f012f332b2b2b3130010602151412171616060623
222e02272e0335343e02373e0333321e0201ef5f5d5f5b05010e1d19121a
130c033652381c1f3952330109101c16171c10020562c9fe59d6d7fe5acb
0c110b050206080566d1d8dd7171dcd9d26704060603060a1000>ONKBAA+Calibri AddT42Char 
2 3710 895 <0001007afea701e7058b00210033b90012fff0b30b014d12b8fff0b30f01
4d12b8fff0b50c0d014c1200b8ffc0b60b014d001a0a85003f2f012f2b32
2b2b2b313001140e02070e03232226263637361235340227263e0233321e
0217161201e71c385136030c131a121a1d0d01055c5e5e5e0402101c1715
1c1108026775021971ddd8d16605080602050b110cca01a7d7d601a7c909
100a0603060604cdfe4f>ONKBAA+Calibri AddT42Char 
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>ONKBAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>ONKBAA+Calibri AddT42Char 
ONKBAA+Calibri /CharStrings get begin
/parenleft 894 def
/parenright 895 def
/A 4 def
end
ONKBAA+Calibri /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 65 /A put
pop
end
%ADOEndSubsetFont
/XCRBJC+Calibri /ONKBAA+Calibri findfont ct_VMDictPut
/XCRBJC+Calibri*1 
[40{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A 190{/.notdef}rp]
XCRBJC+Calibri nf
XCRBJC+Calibri*1 [32.04 0 0 -32.04 0 0 ]msf
1001.06 42.86 mo
(\(A\))
[9.70795 18.551 0 ]xsh
grestore
gsave
1.577e-5 751.08 mo
1058.28 751.08 li
1058.28 0 li
1.577e-5 0 li
cp
eclp
%ADOBeginSubsetFont: ONKBAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ONKBAA+Calibri gcheck setglobal} if
2 606 17 <000300ac00000401050e001e002b003800c8401a1f1810014d1f100f014d
1f100d014d1f180c014d1f200b014d1fb8022e40281a154010014d15400f
014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c200b014d
2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0b30f014d
33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b80210400d
a00bc00b020b1a27f431310724b80109b2105134b8010bb10754003fed3f
ed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b12392f2b2b39
e12b2b2b2b2b313001140e0423212226351134363321321e0215140e0207
1e0301342e0223231133323e0213342e0223231133323e0204011f384f63
7149feae17292917012674946332162b412a355c4528fefd1a385a4ab2c4
435236194e25476b51cefa3b58432601733d67523e2a151f270482271f2c
547a4d2e544738120a35526e02012f4c351cfe5d233b4ffddd3a583c1ffe
381c3752>ONKBAA+Calibri AddT42Char 
ONKBAA+Calibri /CharStrings get begin
/B 17 def
end
ONKBAA+Calibri /Encoding get
dup 66 /B put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XCRBJC+Calibri*1 
[40{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /B 189{/.notdef}rp]
XCRBJC+Calibri nf
XCRBJC+Calibri*1 [32.04 0 0 -32.04 0 0 ]msf
1001.06 355.56 mo
(\(B\))
[9.70795 17.4299 0 ]xsh
grestore
531.6 211.32 mo
742.2 211.32 li
742.2 28.32 li
531.6 28.32 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lw
531.6 211.32 mo
742.2 211.32 li
742.2 28.32 li
531.6 28.32 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
541.56 47.78 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\025\000\021\000F\000G\000O\000\003\000\015\000\022)
[8.52393 11.7891 6.45447 7.19489 12.9661 4.8219 7.19489 10.8967 12.9661 15.7186 11.7891 11.7322 
6.62537 9.625 11.4663 4.8219 6.91016 11.7891 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
541.56 72.89 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
69 <001C60D8A8C9B7DB133A6B0DE58E9FE0DB163F197AEA5FD88663C3365162
045C63D489C51B98A7E20337CD01194D2B7AA1915D1DD8DB970538F76BDDE2ED
411C977AD2054D2D14E5B930850BC308FA2B44F197DE87D4845B5645A043C492
40C9CB95D337A73D42075160E54842761052> |
92 <001C60D8A8C9B7E52216419985ABDC2C915FAD042E76889719D717D88DBE
9F15274BBFF0D636301B01B0FD58> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
578.4 72.89 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7556 7.83038 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
678.48 72.89 mo
(\0009\0000\000\024)
[12.9496 15.7557 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
718.94 72.89 mo
(\000^)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
574.08 97.97 mo
(\000,\000'\000\003\000 \000\003\000\024\000\036)
[7.64087 14.2009 6.44629 15.2439 6.61694 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
541.56 123.05 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
541.56 148.13 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
578.4 148.13 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7556 7.83038 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
678.48 148.13 mo
(\0009\0000\000\025)
[12.9496 15.7557 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
718.94 148.13 mo
(\000^)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
580.56 173.21 mo
(\000,\000'\000\003\000 \000\003\000\025\000\036)
[7.64087 14.2009 6.44629 15.2439 6.61694 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
541.56 198.29 mo
(\000`\000\036)
[11.4001 0 ]xsh
578.28 238.2 mo
1012.44 238.2 li
1012.44 55.2 li
578.28 55.2 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
578.28 238.2 mo
1012.44 238.2 li
1012.44 55.2 li
578.28 55.2 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
588.24 74.74 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\026\000\021\000F\000G\000O\000\003\000\015\000\022)
[8.51312 11.7742 6.44629 7.18585 12.9496 4.8158 7.18579 10.9398 12.9496 15.7557 11.7742 11.7742 
6.617 9.61279 11.4708 4.8158 6.92029 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
588.24 99.82 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
625.08 99.82 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7557 7.83032 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
725.16 99.82 mo
(\0009\0000\000\024\000^\000\003\000\003\000\003\000\003\000\003\000F\000H\000O\000O\000\003)
[12.9496 15.7557 11.7742 11.3761 6.56012 6.44629 6.50323 6.44635 6.61694 9.61279 10.9398 4.8158 
4.75897 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
846.5 99.82 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7556 7.83038 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
946.58 99.82 mo
(\0009\0000\000\026\000^)
[12.9496 15.7557 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
620.76 124.9 mo
(\000,\000'\000\003\000 \000\003\000\024\000\036)
[7.65057 14.2189 6.45447 15.2632 6.54938 11.7891 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
843.5 124.9 mo
(\000,\000'\000\003\000 \000\026\000\036)
[7.65057 14.2189 6.45447 15.2632 11.7891 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
588.24 150 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
810.98 150 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
588.24 175.08 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
625.08 175.08 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7557 7.83032 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
725.16 175.08 mo
(\0009\0000\000\025)
[12.9496 15.7557 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
765.62 175.08 mo
(\000^)sh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
620.76 200.16 mo
(\000,\000'\000\003\000 \000\003\000\025\000\036)
[7.64087 14.2009 6.44629 15.2439 6.61694 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
588.24 225.24 mo
(\000`\000\036)
[11.4001 0 ]xsh
632.04 261.72 mo
1048.92 261.72 li
1048.92 78.72 li
632.04 78.72 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
632.04 261.72 mo
1048.92 261.72 li
1048.92 78.72 li
632.04 78.72 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
641.9 98.23 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\027\000\021\000F\000G\000O\000\003\000\015\000\022)
[8.51312 11.7742 6.44629 7.18585 12.9496 4.8158 7.18579 10.9398 12.9496 15.7557 11.7742 11.7742 
6.617 9.61279 11.4708 4.8158 6.92029 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
641.9 123.31 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
678.74 123.31 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
757.37 123.31 mo
(\0009\0000\000\024\000\003\000^\000\003\000\003\000\003\000\003\000\003\000\003\000\003)
[12.9496 15.7557 11.7742 6.54114 11.3761 6.48425 6.44635 6.50323 6.57904 6.44629 6.50323 0 
]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
861.29 123.31 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
898.13 123.31 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
gsave
1.577e-5 751.08 mo
1058.28 751.08 li
1058.28 0 li
1.577e-5 0 li
cp
eclp
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
976.87 123.31 mo
(\0009\0000\000\026\000\003\000^)
[12.9496 15.7557 11.7742 6.44635 0 ]xsh
grestore
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
680.9 148.39 mo
(\000,\000'\000\003\000 \000\003\000\024\000\036)
[7.64087 14.2009 6.44629 15.2439 6.61694 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
903.65 148.39 mo
(\000,\000'\000\003\000 \000\003\000\026\000\036)
[7.64087 14.2009 6.57904 15.2438 6.44635 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
641.9 173.47 mo
(\000`\000\036\000\003)
[11.3761 8.15265 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
858.17 173.47 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
641.9 198.58 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
678.74 198.58 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
757.37 198.58 mo
(\0009\0000\000\025\000\003\000^)
[12.9496 15.7557 11.7742 6.54114 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
858.17 198.58 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
895.01 198.58 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
gsave
1.577e-5 751.08 mo
1058.28 751.08 li
1058.28 0 li
1.577e-5 0 li
cp
eclp
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
973.75 198.58 mo
(\0009\0000\000\027\000\003\000^)
[12.9496 15.7557 11.7742 6.44635 0 ]xsh
grestore
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
680.9 223.66 mo
(\000,\000'\000\003\000 \000\003\000\025\000\036)
[7.64087 14.2009 6.44629 15.2439 6.61694 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
903.65 223.66 mo
(\000,\000'\000\003\000 \000\003\000\027\000\036)
[7.64087 14.2009 6.57904 15.2438 6.44635 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
641.9 248.74 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
858.17 248.74 mo
(\000`\000\036)
[11.4001 0 ]xsh
594.48 539.16 mo
927.12 539.16 li
927.12 330.84 li
594.48 330.84 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
594.48 539.16 mo
927.12 539.16 li
927.12 330.84 li
594.48 330.84 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
604.39 350.4 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\025\000\021\000F\000G\000O\000\003\000\015\000\022)
[8.51312 11.7742 6.44629 7.18585 12.9496 4.8158 7.18579 10.9398 12.9496 15.7557 11.7742 11.7742 
6.617 9.61279 11.4708 4.8158 6.92029 11.7742 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
604.39 375.48 mo
(\000F\000R\000Q\000V\000W)
[9.61279 11.2621 11.7172 9.51794 0 ]xsh
%ADOBeginSubsetFont: XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
41 <001C60D8A8C9B7E02AA5ACADA8FE7995E150DE81112B203AC844BE0BCD5A
C5CB5DED59D44BB9B606B3> |
47 <001C60D8A8C9B7EE7C16355902DB0AD05E58E1D387F79781FB3D99981E> |
42 <001C60D8A8C9B60D65963EF784DA82081E8141D855FF2CF9FCC770A94CC0
17E2DDCD6F1B3FACC2A00FD9E30C2C7862E1D7BA9B0C5E4FBE1D68D38018EF2A
63DF57362FEF843BAB8265662ED32D016467FE939224FD0C42806DFD53F38F6D
EA5DE895005A2DDBD92D4BA191D84A0FC617F54E5262AD4F7E> |
!
end
end end
%ADOEndSubsetFont
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
660.31 375.48 mo
(\000\)\000/\000*\0003\0007\0001\000\003)
[10.8262 10.4091 13.8029 11.3 11.9828 14.0493 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
739.63 375.48 mo
(\000Z\000D\000L\000W\0003\000D\000W\000W\000H\000U\000Q)
[15.7177 10.9968 4.8158 7.18579 10.845 10.9969 7.22369 7.18579 10.9398 7.83038 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
851.98 375.48 mo
(\000 \000\003\000\023\000[\000\023\000I)
[15.2438 6.57904 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
604.39 400.56 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
641.23 400.56 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7556 7.83038 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
741.31 400.56 mo
(\0009\0000\000\024\000^)
[12.9496 15.7557 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
643.39 425.64 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
744.67 425.64 mo
(\000 \000\003\000\023\000[\000\023\000\024)
[15.2438 6.44635 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
604.39 450.72 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
604.39 475.8 mo
(\000F\000H\000O\000O\000\003)
[9.60004 10.9288 4.797 4.797 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
641.23 475.8 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.19489 15.7756 7.74536 11.7321 11.5423 10.6879 12.9661 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
741.31 475.8 mo
(\0009\0000\000\025\000^)
[12.9661 15.7186 11.7891 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
643.39 500.9 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
744.67 500.9 mo
(\000 \000\003\000\023\000[\000\023\000\025)
[15.2438 6.44635 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
604.39 525.98 mo
(\000`\000\036)
[11.4001 0 ]xsh
641.04 638.52 mo
973.68 638.52 li
973.68 354.24 li
641.04 354.24 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
641.04 638.52 mo
973.68 638.52 li
973.68 354.24 li
641.04 354.24 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 373.78 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\026\000\021\000F\000G\000O\000\003\000\015\000\022)
[8.51312 11.7742 6.44629 7.18585 12.9496 4.8158 7.18579 10.9398 12.9496 15.7557 11.7742 11.7742 
6.617 9.61279 11.4708 4.8158 6.92029 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 398.86 mo
(\000F\000R\000Q\000V\000W)
[9.61279 11.2621 11.7172 9.51794 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
706.94 398.86 mo
(\000\)\000/\000*\0003\0007\0001\000\003)
[10.8262 10.4091 13.8029 11.3 11.9828 14.0493 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
786.26 398.86 mo
(\000Z\000D\000L\000W\0003\000D\000W\000W\000H\000U\000Q)
[15.7177 10.9968 4.8158 7.18579 10.845 10.9969 7.22369 7.18579 10.9398 7.83038 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
898.61 398.86 mo
(\000 \000\003\000\023\000[\000\023\000I)
[15.2438 6.57904 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 423.96 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
687.86 423.96 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7556 7.83038 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
787.94 423.96 mo
(\0009\0000\000\024\000^)
[12.9496 15.7557 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
690.02 449.04 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
791.3 449.04 mo
(\000 \000\003\000\023\000[\000\023\000\024)
[15.2438 6.44635 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 474.12 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 499.2 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
687.86 499.2 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7556 7.83038 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
787.94 499.2 mo
(\0009\0000\000\025\000^)
[12.9496 15.7557 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
690.02 524.28 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
791.3 524.28 mo
(\000 \000\003\000\023\000[\000\023\000\025)
[15.2438 6.44635 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 549.36 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 574.46 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
687.86 574.46 mo
(\000W\0000\000U\000X\000E\000\\\0009\0000)
[7.18579 15.7556 7.83038 11.7172 11.5277 10.6554 12.9497 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
787.94 574.46 mo
(\0009\0000\000\026\000^)
[12.9496 15.7557 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
690.02 599.54 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
791.3 599.54 mo
(\000 \000\003\000\023\000[\000\023\000\027)
[15.2438 6.44635 11.7742 10.5417 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
651.02 624.62 mo
(\000`\000\036)
[11.4001 0 ]xsh
690.12 738 mo
1030.92 738 li
1030.92 377.64 li
690.12 377.64 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
690.12 738 mo
1030.92 738 li
1030.92 377.64 li
690.12 377.64 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
700.03 397.27 mo
(\000\022\000\015\000\003\000W\0005\000L\000W\000H\0009\0000\000B\000\027\000\021\000F\000G\000O\000\003\000\015\000\022)
[8.51312 11.7742 6.44629 7.18585 12.9496 4.8158 7.18579 10.9398 12.9496 15.7557 11.7742 11.7742 
6.617 9.61279 11.4708 4.8158 6.92029 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
700.03 422.35 mo
(\000F\000R\000Q\000V\000W)
[9.62494 11.2764 11.732 9.4541 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
755.95 422.35 mo
(\000\)\000/\000*\0003\0007\0001\000\003)
[10.8398 10.4034 13.8203 11.3143 11.941 14.0671 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
835.3 422.35 mo
(\000Z\000D\000L\000W\0003\000D\000W\000W\000H\000U\000Q)
[15.7186 11.0107 4.8219 7.19489 10.8207 11.0107 7.19489 7.19495 10.9537 7.84027 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
947.62 422.35 mo
(\000 \000\003\000\023\000[\000\023\000I\000\036)
[15.2631 6.54944 11.7891 10.5551 11.7891 6.3598 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
700.03 447.46 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
736.87 447.46 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
815.47 447.46 mo
(\0009\0000\000\024\000\003\000^)
[12.9496 15.7557 11.7742 6.61694 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
745.51 472.54 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
846.82 472.54 mo
(\000 \000\003\000\023\000[\000\023\000\024\000\036)
[15.2438 6.57904 11.7742 10.5417 11.7742 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
700.03 497.62 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
700.03 522.7 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
736.87 522.7 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
815.47 522.7 mo
(\0009\0000\000\025\000\003\000^)
[12.9496 15.7557 11.7742 6.61694 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
745.51 547.78 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
846.82 547.78 mo
(\000 \000\003\000\023\000[\000\023\000\025\000\036)
[15.2438 6.57904 11.7742 10.5417 11.7742 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
700.03 572.86 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
700.03 597.96 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
736.87 597.96 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
815.47 597.96 mo
(\0009\0000\000\026\000\003\000^)
[12.9496 15.7557 11.7742 6.61694 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
745.51 623.04 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
846.82 623.04 mo
(\000 \000\003\000\023\000[\000\023\000\027\000\036)
[15.2438 6.57904 11.7742 10.5417 11.7742 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
700.03 648.12 mo
(\000`\000\036)
[11.4001 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
700.03 673.2 mo
(\000F\000H\000O\000O\000\003)
[9.6001 10.9271 4.8031 4.8031 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
736.87 673.2 mo
(\000W\0005\000L\000W\000H\0009\0000)
[7.18579 12.9496 4.8158 7.18579 10.9399 12.9496 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
815.47 673.2 mo
(\0009\0000\000\027\000\003\000^)
[12.9496 15.7557 11.7742 6.61694 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
745.51 698.28 mo
(\000V\000H\000W\0003\000D\000W\000W\000H\000U\000Q)
[9.44208 10.9399 7.18579 10.826 10.9969 7.22369 7.18579 10.9399 7.83032 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.96 0 0 -18.96 0 0 ]msf
846.82 698.28 mo
(\000 \000\003\000\023\000[\000\023\000\033\000\036)
[15.2438 6.57904 11.7742 10.5417 11.7742 11.7742 0 ]xsh
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.984 0 0 -18.984 0 0 ]msf
700.03 723.36 mo
(\000`\000\036)
[11.4001 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/XCRBJC+Calibri*1 uf
/XCRBJC+Calibri uf
/ONKBAA+Calibri uf
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBJB+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 269 x(Figure)c(18:)33 b(Design)21 b(of)g(Ev)n(en)n
(t\035ag)f(using)g(TECS)h(\(only)g(di\033erences)-152
2609 y(are)26 b(sho)n(wn\))-152 2910 y(Rite)-6 b(VMSc)n(hedulerMain)26
b(is)h(connected)f(to)g(the)g Fi(entry)h Fp(p)r(ort)f(of)h(the)-152
2998 y(Kernel)35 b Fi(cell)f Fp(\()p Fi(tK)m(ernel.eiK)m(ernel)p
Fp(\))g(to)h(call)g(k)n(ernel)f(functions.)61 b(The)-152
3085 y(attribute)26 b(is)g(used)f(as)h(the)g Fi(r)m(otateReadyQueue)h
Fp(argumen)n(ts.)-77 3172 y(Figure)18 b(17)g(sho)n(ws)g(the)e(build)h
(description)h(of)f(the)g(Rite)-6 b(VM)17 b(sc)n(hed-)-152
3259 y(uler.)41 b(The)28 b(Rite)-6 b(VMSc)n(heduler)26
b Fi(cell)h Fp(has)h(attributes)g(to)g(con\034gure)-152
3346 y(the)18 b(sc)n(heduler)g(suc)n(h)f(as)h(attribute,)i(cyclicTime,)
h(cyclicPhase,)g(and)-152 3434 y(priorit)n(y)-6 b(.)32
b(In)17 b(this)g(case,)k(the)c(Rite)-6 b(VM)17 b(sc)n(heduler)h(is)g
(executed)f(when)-152 3521 y(it)25 b(is)f(generated,)i(b)r(ecause)e
(the)g(attribute)g(is)h Fi(T)l(A_ST)l(A)p Fp(,)f(whic)n(h)g(indi-)-152
3608 y(cates)g(that)g(the)f(p)r(erio)r(dic)h(handler)f(is)h(in)f(an)h
(op)r(erational)h(state)e(af-)-152 3695 y(ter)g(creation.)34
b(Note)22 b(that)g(the)g(sc)n(heduler)h(executes)f(ev)n(ery)f(1)i
(msec.)-152 3782 y(RITEVM_PRIORITY)j(de\034nes)h(the)g(priorit)n(y)g
(of)h(mrub)n(y)e(tasks.)-152 3869 y(In)i(the)g(function)g(of)h(Rite)-6
b(VMSc)n(hedulerMain,)29 b Fi(r)m(otateReadyQueue)-152
3957 y Fp(is)e(implemen)n(ted)e(and)g(the)g(priorit)n(y)h(is)g(passed)g
(as)g(the)g(argumen)n(t.)-152 4136 y Fq(3.3)99 b(Synchr)n(onization)21
b(of)e(Multiple)g(RiteVM)g(T)-9 b(asks)-77 4244 y Fp(In)33
b(the)h(prop)r(osed)g(framew)n(ork,)j(Rite)-6 b(VMs)34
b(read)g(mrub)n(y)e(b)n(yte-)-152 4332 y(co)r(des)23
b(and)f(then)f(execute)h(applications.)35 b(Ev)n(en)n(t\035ag)22
b(is)g(applied)h(to)-152 4419 y(sync)n(hronize)36 b(the)f(initiation)h
(of)g(m)n(ultiple)g(mrub)n(y)e(applications.)-152 4506
y(Eac)n(h)e(task)g(sets)g(a)g(\035ag)g(pattern,)h(suc)n(h)e(as)h(0x01)h
(\(01\))f(and)f(0x02)-152 4593 y(\(10\),)23 b(and)d(then)f(w)n(aits)j
(for)f(the)f(\035ag)h(pattern)f(0x3)g(\(11\))h(with)g(AND.)-152
4680 y(This)f(pro)r(cess)g(can)f(also)h(b)r(e)f(applied)g(to)g(more)g
(tasks.)32 b(F)-6 b(or)19 b(example,)-152 4767 y(for)25
b(four)f(Rite)-6 b(VM)22 b(tasks,)j(eac)n(h)e(task)h(sets)g(a)g(\035ag)
f(pattern,)h(suc)n(h)f(as)-152 4855 y(0x01)e(\(0001\),)i(0x02)d
(\(0010\),)j(0x04)e(\(0100\),)h(and)e(0x08)g(\(1000\),)j(and)-152
4942 y(then)d(w)n(aits)h(0x0f)f(\(1111\))i(with)e(AND,)f(as)i(sho)n(wn)
f(in)g(Figure)g(18\(A\).)-77 5029 y(In)i(addition,)h(the)f(termination)
h(of)g(mrub)n(y)d(applications)k(is)f(syn-)-152 5116
y(c)n(hronized)34 b(to)g(accept)g(con)n(tin)n(uous)g(loading.)60
b(This)34 b(termination)-152 5203 y(sync)n(hronization)g(prev)n(en)n
(ts)f(a)h(Rite)-6 b(VM)33 b(whose)i(application)g(\034n-)-152
5290 y(ishes)27 b(immediately)g(from)h(w)n(aiting)f(for)g(the)f(next)g
(loading.)38 b(Th)n(us,)-152 5378 y(all)18 b(mrub)n(y)e(applications)j
(\034nish)d(at)i(the)e(same)i(time,)i(and)c(all)i(Rite)-6
b(VMs)2040 6 y(T)g(able)26 b(1:)35 b(Comparison)27 b(of)f(size)g(and)f
(load)i(pro)r(cess)f(time)g(b)r(et)n(w)n(een)2040 94
y(an)g(mrub)n(y)e(application)j(with)f(and)f(without)h(mrub)n(y)e
(libraries)p 2569 227 5 88 v 2584 227 V 2672 201 a(App&Lib)p
3071 227 V 219 w(App)p 3481 227 V 156 w(App&Lib/App)p
2046 231 1981 5 v 2075 292 a(Byteco)r(de)i(Size)p 2569
319 5 88 v 2584 319 V 80 w(14,044)h(b)n(ytes)p 3071 319
V 83 w(199)g(b)n(ytes)p 3481 319 V 220 w Fd(\002)p Fp(70.6)2074
380 y(Loading)f(Time)p 2569 406 V 2584 406 V 67 w(305.081)i(msec)p
3071 406 V 48 w(7.774)f(msec)p 3481 406 V 198 w Fd(\002)p
Fp(39.2)2070 467 y(Compile)g(Time)p 2569 493 V 2584 493
V 140 w(8.7)f(msec)p 3071 493 V 163 w(0.3)h(msec)p 3481
493 V 236 w Fd(\002)p Fp(29.0)2040 736 y(w)n(ait)g(to)e(receiv)n(e)h
(the)g(next)e(mrub)n(y)h(application)h(b)n(yteco)r(des.)2040
892 y Fq(3.4)99 b(Utilization)25 b(of)h(Component-Based)i(De)o(v)o
(elop-)2264 979 y(ment)2115 1087 y Fp(In)c(the)g(prop)r(osed)h(framew)n
(ork,)i(Rite)-6 b(VMs,)25 b(the)f(Rite)-6 b(VM)24 b(sc)n(hed-)2040
1174 y(uler,)19 b(and)e(Ev)n(en)n(t\035ags)g(are)h(implemen)n(ted)f(as)
g(comp)r(onen)n(ts.)32 b(There-)2040 1262 y(fore,)23
b(dev)n(elop)r(ers)f(can)f(add,)h(remo)n(v)n(e,)g(or)f(reuse)g(these)g
(comp)r(onen)n(ts)2040 1349 y(easily)-6 b(.)50 b(F)-6
b(or)31 b(example,)h(if)f(the)g(Rite)-6 b(VM)30 b(sc)n(heduler)g(is)h
(not)g(neces-)2040 1436 y(sary)e(for)h(the)f(soft)n(w)n(are,)j(dev)n
(elop)r(ers)d(should)g(commen)n(t)g(out)g(only)2040 1523
y(the)36 b(CDL)f(\034le,)k(e.g.,)h Fi(//import\(<tRiteVMSc)o(heduler)-8
b(.cdl>\);)p Fp(.)66 b(CBD)2040 1610 y(eliminates)30
b(the)e(need)h(for)g(dev)n(elop)r(ers)g(to)g(rewrite)h(k)n(ernel)e
(con\034g-)2040 1697 y(uration)e(\034les.)2115 1785 y(In)g(addition,)i
(the)f(co)r(de)g(size)h(can)f(b)r(e)g(reduced)g(b)n(y)f(using)h(CBD.)
2040 1872 y(In)c(the)h(prop)r(osed)g(framew)n(ork,)h(this)f(adv)l(an)n
(tage)g(is)g(applied)g(in)g(the)2040 1959 y(Ev)n(en)n(t\035ag)f(comp)r
(onen)n(t.)34 b(The)24 b(set)g(pattern)f(and)g(w)n(ait)i(pattern)e(are)
2040 2046 y(de\034ned)28 b(as)i(attributes)g(of)g(the)f(comp)r(onen)n
(t)g(as)h(sho)n(wn)g(in)f(Figure)2040 2133 y(18)c(\(B\).)f(This)h
(design,)g(e.g.,)h Fi(cEvent\003a)o(g_set\(A)m(TTR_setP)-6
b(attern\))p Fp(,)25 b(en-)2040 2221 y(ables)39 b(the)e(program)h
(without)g(\020if)6 b(\021)44 b(statemen)n(ts)38 b(and)f(reuses)i(an)
2040 2308 y(iden)n(tical)24 b(C)f(\034le.)34 b(Dev)n(elop)r(ers)23
b(do)g(not)g(need)g(to)g(mo)r(dify)g(the)g(C)g(\034le)2040
2395 y(b)r(ecause)31 b(the)f(CDL)g(\034les)h(are)f(prepared)g
(according)i(to)e(the)g(n)n(um-)2040 2482 y(b)r(er)c(of)h(Rite)-6
b(VMs.)35 b(In)25 b(addition,)i(the)e(Ev)n(en)n(t\035ag)h(comp)r(onen)n
(ts)g(are)2040 2569 y(built)31 b(with)h Fi([optional])h
Fp(in)e(TECS.)h(Here,)h Fi([optional])g Fp(means)f(that)2040
2656 y(the)c(co)r(de)g(is)g(run)f(only)h(when)g(the)f(call)i(p)r(ort)f
(is)h(connected.)41 b(Note)2040 2744 y(that)35 b(the)g(C)h(\034le)f(do)
r(es)h(not)g(need)f(to)g(b)r(e)g(rewritten)h(ev)n(en)f(if)h(the)2040
2831 y(Ev)n(en)n(t\035ag)25 b(is)h(not)g(used.)2040 3035
y Fq(4.)99 b(EXPERIMENT)-9 b(AL)27 b(EV)-13 b(ALU)-6
b(A)d(TION)2115 3143 y Fp(This)35 b(section)g(discusses)g(exp)r(erimen)
n(tal)f(results.)61 b(T)-6 b(o)35 b(analyze)2040 3230
y(the)j(adv)l(an)n(tages)g(of)h(the)f(prop)r(osed)g(framew)n(ork,)43
b(w)n(e)c(ev)l(aluated)2040 3317 y(the)25 b(follo)n(wing.)2151
3467 y Fd(\017)38 b Fp(Size)30 b(and)g(time)g(of)h(transferred)g(mrub)n
(y)e(b)n(yteco)r(des)h(b)n(y)f(the)2227 3554 y(Blueto)r(oth)d(loader)
2151 3706 y Fd(\017)38 b Fp(Execution)17 b(time)g(with)h
(singletasking,)i(co-routine,)g(and)c(pro-)2227 3793
y(p)r(osed)26 b(m)n(ultitasking)2151 3945 y Fd(\017)38
b Fp(Ov)n(erhead)25 b(for)h(p)r(erio)r(dic)h(time)2151
4097 y Fd(\017)38 b Fp(Sync)n(hronization)25 b(of)i(m)n(ultiple)e(Rite)
-6 b(VM)25 b(tasks)2151 4248 y Fd(\017)38 b Fp(Co)r(de)26
b(size)h(with)f(CBD)2115 4398 y(These)39 b(ev)l(aluations)g(w)n(ere)g
(p)r(erformed)g(to)g(demonstrate)g(that)2040 4485 y(a)d(Blueto)r(oth)g
(loader)h(can)e(impro)n(v)n(e)h(the)f(e\036ciency)h(of)g(soft)n(w)n
(are)2040 4572 y(dev)n(elopmen)n(t,)43 b(that)c(the)h(prop)r(osed)g(m)n
(ultitask)f(pro)r(cessing)i(ex-)2040 4659 y(ecutes)35
b(e\033ectiv)n(ely)f(compared)g(to)h(singletasking)g(or)g(co-routine,)
2040 4746 y(and)c(that)g(the)f(initiation)j(of)f(mrub)n(y)d
(applications)k(are)f(sync)n(hro-)2040 4834 y(nized.)39
b(In)27 b(addition,)h(w)n(e)f(fo)r(cused)h(on)f(b)r(ene\034ts)g(of)h
(CBD.)g(W)-6 b(e)27 b(im-)2040 4921 y(plemen)n(ted)18
b(the)h(prop)r(osed)g(system)f(on)h(a)g(LEGO)g(MINDSTORMS)2040
5008 y(EV3)k([23])i(\(300MHz)f(ARM9-based)e(Sitara)i(AM1808)g
(system-on-)2040 5095 y(a-c)n(hip\))18 b(compiled)i(with)f(gcc)g(4.9.3)
h(-O2)f(and)f(mrub)n(y)g(v)n(ersion)g(1.2.0.)2040 5260
y Fq(4.1)99 b(Impr)n(o)o(ving)19 b(Softwar)n(e)h(De)o(v)o(elopment)g
(Ef\002ciency)2264 5357 y(by)25 b(Bluetooth)h(Loader)p
eop end
%%Page: 8 8
TeXDict begin 8 7 bop -152 991 a @beginspecial 0 @llx
0 @lly 960 @urx 540 @ury 2437 @rwi @clip @setspecial
%%BeginDocument: figure/comparison_s_c_m.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: comparison_s_c_m.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:13:13
%%BoundingBox: 0 0 960 540
%%HiResBoundingBox: 0 0 960 540
%%CropBox: 0 0 960 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T20:03:43+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T20:03:43+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
960 540 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 540 mo
960 540 li
960 -6.10352e-5 li
0 -6.10352e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
0 540 mo
960 540 li
960 -.000244141 li
0 -.000244141 li
cp
eclp
.48 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
88.68 412.44 mo
960 412.44 li
88.68 346.56 mo
960 346.56 li
88.68 280.68 mo
960 280.68 li
88.68 214.8 mo
960 214.8 li
88.68 148.92 mo
960 148.92 li
88.68 83.04 mo
960 83.04 li
88.68 17.16 mo
960 17.16 li
1 /0 /CSD get_res sepcs
.463 sep
@
grestore
175.8 359.64 mo
291.96 359.64 li
291.96 357.84 li
175.8 357.84 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.474983 .269963 0 0 cmyk
f
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
175.8 359.64 mo
291.96 359.64 li
291.96 357.84 li
175.8 357.84 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
466.2 121.68 mo
582.36 121.68 li
582.36 108.12 li
466.2 108.12 li
cp
.474983 .269963 0 0 cmyk
f
466.2 121.68 mo
582.36 121.68 li
582.36 108.12 li
466.2 108.12 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
756.72 254.52 mo
872.88 254.52 li
872.88 252.84 li
756.72 252.84 li
cp
.474983 .269963 0 0 cmyk
f
756.72 254.52 mo
872.88 254.52 li
872.88 252.84 li
756.72 252.84 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
175.8 357.84 mo
291.96 357.84 li
291.96 356.76 li
175.8 356.76 li
cp
.474983 .269963 0 0 cmyk
f
175.8 357.84 mo
291.96 357.84 li
291.96 356.76 li
175.8 356.76 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
466.2 108.12 mo
582.36 108.12 li
582.36 97.44 li
466.2 97.44 li
cp
.474983 .269963 0 0 cmyk
f
466.2 108.12 mo
582.36 108.12 li
582.36 97.44 li
466.2 97.44 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
756.72 252.84 mo
872.88 252.84 li
872.88 248.28 li
756.72 248.28 li
cp
.474983 .269963 0 0 cmyk
f
756.72 252.84 mo
872.88 252.84 li
872.88 248.28 li
756.72 248.28 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
233.88 359.64 mo
233.88 370.08 li
231.6 370.08 mo
236.16 370.08 li
f
.48 lw
233.88 359.64 mo
233.88 370.08 li
231.6 370.08 mo
236.16 370.08 li
@
524.28 121.68 mo
524.28 146.16 li
522.12 146.16 mo
526.56 146.16 li
f
524.28 121.68 mo
524.28 146.16 li
522.12 146.16 mo
526.56 146.16 li
@
814.8 254.52 mo
814.8 268.32 li
812.52 268.32 mo
817.08 268.32 li
f
814.8 254.52 mo
814.8 268.32 li
812.52 268.32 mo
817.08 268.32 li
@
233.88 356.76 mo
233.88 328.68 li
231.6 328.68 mo
236.16 328.68 li
f
233.88 356.76 mo
233.88 328.68 li
231.6 328.68 mo
236.16 328.68 li
@
524.28 97.44 mo
524.28 54.12 li
522.12 54.12 mo
526.56 54.12 li
f
524.28 97.44 mo
524.28 54.12 li
522.12 54.12 mo
526.56 54.12 li
@
814.8 248.28 mo
814.8 151.56 li
812.52 151.56 mo
817.08 151.56 li
f
814.8 248.28 mo
814.8 151.56 li
812.52 151.56 mo
817.08 151.56 li
@
88.68 478.32 mo
88.68 17.16 li
1 /0 /CSD get_res sepcs
.463 sep
@
82.2 478.32 mo
88.68 478.32 li
82.2 412.44 mo
88.68 412.44 li
82.2 346.56 mo
88.68 346.56 li
82.2 280.68 mo
88.68 280.68 li
82.2 214.8 mo
88.68 214.8 li
82.2 148.92 mo
88.68 148.92 li
82.2 83.04 mo
88.68 83.04 li
82.2 17.16 mo
88.68 17.16 li
@
gsave
0 540 mo
960 540 li
960 -.00012207 li
0 -.00012207 li
cp
eclp
88.68 478.32 mo
960 478.32 li
@
grestore
gsave
0 540 mo
960 540 li
960 -.00012207 li
0 -.00012207 li
cp
eclp
88.68 478.32 mo
88.68 486.12 li
379.08 478.32 mo
379.08 486.12 li
669.6 478.32 mo
669.6 486.12 li
960 478.32 mo
960 486.12 li
@
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBJJ+Arial#20Unicode#20MS-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJJ+Arial#20Unicode#20MS)
%%Title: (XCRBJJ+Arial#20Unicode#20MS Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJJ+Arial#20Unicode#20MS def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1011 -330 2260 1078} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 50377 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
24 <001C60D8A8C9B7EF322B4C54F62CDCA235E932220571F850FEE7BE86DF3A
50818690038AE831E1464299A576C7E99E7AB14D2F752B9635176DC4ACB1F446
2C9065A5429FA91B1F3BA31FA7D85891F30652EFA93A88486176310B67D09746
728FBF7E61B541DB4E9A4F711819BD06FDB73DA1CB6C14136A0BCA0C8F749235
FBDAD477D057> |
19 <001C60D8A8C9B7EF3228538BC6BE53702F0C053928FE107BAD4926ADBC63
1C4D3103C7AAEA995C11C594D136F55F4521543C825853B121815959920C779B
B5ECE682ACE33FB34F6000B715490178C9B22D6FBFD35A68468D02151CD19A5E
72032B21AF0780FF27D3B13BB07A69697FD16E529BCB7037EABC1B6632D88804
E8ADD85543891C88D31F> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJJ+Arial#20Unicode#20MS-Identity-H /Identity-H 0 [/XCRBJJ+Arial#20Unicode#20MS] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 484.08 mo
(\000\030\000\023\000\023)
[10.008 10.008 0 ]xsh
%ADOBeginSubsetFont: XCRBJJ+Arial#20Unicode#20MS-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJJ+Arial#20Unicode#20MS 1 GetGlyphDirectory
21 <001C60D8A8C9B7EF3224FDCDB713E1363D90A421BCF0888C3B4D30C904D7
7A555A7BF3A0C1EC42D411BCFFDC43A0189FCBE16E3FC6EBB49A9DAC53485073
2E658D99CC47347866724CC724C02EF45DCC35614677A3C864304B373D0F578A
F5C2267569D31A4C4F227D0B69D2DF5F89475069E9310691C0B6CB158DEAD928
217B03> |
!
end
end end
%ADOEndSubsetFont
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 418.18 mo
(\000\030\000\025\000\023)
[10.008 10.008 0 ]xsh
%ADOBeginSubsetFont: XCRBJJ+Arial#20Unicode#20MS-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJJ+Arial#20Unicode#20MS 1 GetGlyphDirectory
23 <001C60D8A8C9B7EF3224E29FD1ACF90CD3A4C769E6F26B5B3B5EC2D65370
E670218D0C18EB87F95658751E089E69D93A553E594F280C782965EF> |
!
end
end end
%ADOEndSubsetFont
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18.024 0 0 -18.024 0 0 ]msf
40.128 352.27 mo
(\000\030\000\027\000\023)
[9.96727 10.0574 0 ]xsh
%ADOBeginSubsetFont: XCRBJJ+Arial#20Unicode#20MS-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJJ+Arial#20Unicode#20MS 1 GetGlyphDirectory
25 <001C60D8A8C9B7EF322B009C2BE4F97345CAC98653C8CFE652BC3A2F47F3
BF93A06FC8983276FFF5DF9E9E13A02CC392B5F68BEBDB7D2371B61036747F7E
A3E7D23F28D1509A2A7CD7B22DA9D77AC7EF927CD6D37066D23675F65CAA5F61
28D93EEEA28DE7C17A64CB9C4332356C45B2C450C807E8551B61522866B9C836
5717B3A42AE0B27CA87BF65D602856C832D35E4F168A566B6041AF9764BE485B
AB59E636C10E916ADE91C0866A2977A7A536C57F88B0> |
!
end
end end
%ADOEndSubsetFont
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 286.39 mo
(\000\030\000\031\000\023)
[10.008 10.008 0 ]xsh
%ADOBeginSubsetFont: XCRBJJ+Arial#20Unicode#20MS-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJJ+Arial#20Unicode#20MS 1 GetGlyphDirectory
27 <001C60D8A8C9B7EF32247F6B858C671ACA38419CAC2CA3572806C32DFCEF
39A73BC736CF0645D3BD7B44BCAC96D7298DAA2DDF8FB99B7BA1A39CD9AF99DB
6C6E1CB268CF2C6C981A97D270F4F71EE2846EF89FA2D524658CB6812B8AA838
B8FBC2CCED00217A78DEFF4E5FC344AB937A624A04EB29B0EB10C658A607BCFB
2B26DD114E5845864DA5F787AE1D65D5C942B95FE3BD5B1728824F1E21322F0C
54E7074BACBBB36039FDE28F35BD9E73CF0B0540C9B0A426B07A05902986605B
6E40C89D9C3DCD8E65BF2C0BA8AB4D713B97CD6E5253C5E3167C5EF3A1F76CE9
36877151A5FEEA3547> |
!
end
end end
%ADOEndSubsetFont
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18.024 0 0 -18.024 0 0 ]msf
40.128 220.49 mo
(\000\030\000\033\000\023)
[9.96727 10.0574 0 ]xsh
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 154.61 mo
(\000\031\000\023\000\023)
[10.008 10.008 0 ]xsh
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 88.7 mo
(\000\031\000\025\000\023)
[10.008 10.008 0 ]xsh
gsave
1.4305e-5 540 mo
960 540 li
960 0 li
1.4305e-5 0 li
cp
eclp
/XCRBJJ+Arial#20Unicode#20MS-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 22.82 mo
(\000\031\000\027\000\023)
[10.008 10.008 0 ]xsh
grestore
%ADOBeginSubsetFont: XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
54 <001C60D8A8C9B66EAD07B5412AE565A8EDC46BB2E3DEB077C2712D467F5F
B073790FC3E8AEECEFB1B24BA53E4C882D33F673AE21444E9B5B60B7C48FF75D
826D17ED9F8FEF183E4BD1E90AB25664A3C403B4F5D7F3953F88B3FBEECD0F81
FACA7CA9C6AA8A317A3886822C918AE0BBEBB1BCEB2AD503777C9CC2353B270E
EEDD56AE657E189F979D9E4CABA663970E6BDD70562F487FBB706FE229431E87
8AACEC9B1721BE0EC1E4A1D431254FFDB24D5D571E78D77F> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
74 <001C60D8A8C9B7DCE04D522269288586B9247396E1227C2D539B6AC1E93A
06FCABECDB9B583C00CA209C2B579BAAA7A8EAA2DB7C6626BBE45595982C861D
FA3715C8817435E20487CC7C0D3D2B2BEAFD793BB7D6B7E0786AFE9E2D61322A
226BB922738657DE7C0B1B03A69AEBD4802D3F0435B509D9DCA2CFB749CB2C23
4A2D853ADC6CB9CA20B11CA22AB5079C65085355> |
79 <001C60D8A8C9B86C3576F3F2AA2C70A2177DAE15E08603> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
68 <001C60D8A8C9B7F7BF950ECD918CEA2E1FF78BB1311B34B83772A90E4EE3
2B496714BE6739D10D98537A9D68C52DD507E1182A4B3768CCED4FDD4127DB68
D8C6836D1DDF89C3706D059AECECF56C80EA2ABA8FA7B6C7C524A12AB522B898
CDE1AEE42F858E6848D5E50D59E8B1C42ED4E1D22E876574FAE652BB53119638
605413F772F826B107115C885BFDE35497FB78FC> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
78 <001C60D8A8C9B794D33B340B990850C065E40D166F6B8A65A7F0F8858ECE
050176CE5B3D54865610F2C7BA0E6A48EB238D93222848> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
176.57 517.296 mo
(\0006\000L\000Q\000J\000O\000H\0007\000D\000V\000N)
[13.9445 5.5778 13.5712 13.4394 5.57779 12.6708 13.9666 12.7368 10.9361 0 ]xsh
%ADOBeginSubsetFont: XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 6 GetGlyphDirectory
38 <001C60D8A8C9B6557A3371B99AE907584787F7ECD5F41066169D92896888
54034910E96AB5888D531D6B0DFB2CE04D0A406CC54B03CC6325310576D26573
ED6A1AD836353C4CD7FD8B59F2397408DEA2B66BB791B50916A62D8E9DF83356
A2432F68F892DBBCD0B773DF136C5C88779301777C12DBF5A772FB0D475BEE> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
16 <001C60D8A8C9B76427DFA955A144EE0C70067A7772E4832C> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
!
end
end end
%ADOEndSubsetFont
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
467.62 517.296 mo
(\000&\000R\000\020\000U\000R\000X\000W\000L\000Q\000H)
[14.757 13.11 9.72818 9.06934 13.0441 13.7029 8.32281 5.57782 13.5712 0 ]xsh
%ADOBeginSubsetFont: XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 7 GetGlyphDirectory
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
3 <001C60D8A8C9B816D234> |
11 <001C60D8A8C9B76427DFAA8BD86C99C5EBCE56B2092D813B55236D8491E2
BD1A05C775DD415F88ADDC8F3859D206950F4F7B572FA1415E7C446A20E15783
5A3E51734E8803AEC0852BF796> |
20 <001C60D8A8C9B6605B97E3474607F65DA83467005204B5F48E11F4969E87
21827C7B7F47B5579624C0429CB1D21355B681041D4720> |
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
12 <001C60D8A8C9B76427D047390A53CE1EB71412C72C89F2812823B521AF28
A2BEE161CE1F1EEDDEBB0A0AEA5FA90C114AEEDCBA05AC2B3A5CBA3E8CB6AB54
729CDBBE1DAF215886ED0C06DFCE> |
!
end
end end
%ADOEndSubsetFont
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
716.06 517.296 mo
(\0000\000X\000O\000W\000L\0007\000D\000V\000N\000\003\000\013\000\024\000P\000V\000H\000F\000\014)
[18.2486 13.6591 5.57782 8.32275 5.57782 13.9666 12.7369 10.9361 12.0999 7.55414 9.64032 13.6372 
21.0597 10.936 12.7368 11.1338 0 ]xsh
%ADOBeginSubsetFont: XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
91 <001C60D8A8C9B7EF322BCE77320BDDEB6C822497B72CA300CCF93D9341A7
1BF29803D36EA01124904658E1C9AD3CC24155EE375EACDCAE8E68F5C2> |
!
end
end end
%ADOEndSubsetFont
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.352 421.87 mo
(\000\(\000[\000H\000F\000X\000W\000L\000R\000Q\000\003\0007\000L\000P\000H\000\003)
[-14.8799 -13.104 -13.8479 -12.1681 -14.8319 -9.14395 -6.09595 -14.3279 -14.8799 -8.06393 -15.264 -6.09595 
-23.088 -13.8479 0 ]ysh
%ADOBeginSubsetFont: XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
62 <001C60D8A8C9B76427D0768D23E1116581428765F0104D17A7A91E111213
4419779D29FD> |
!
end
end end
%ADOEndSubsetFont
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.352 234.26 mo
(\000>)sh
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.352 223.68 mo
(\000P\000V\000H\000F)
[-23.016 -12 -13.8479 0 ]ysh
%ADOBeginSubsetFont: XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
64 <001C60D8A8C9B76427D0565110CF2FB8EA848FD9E6045C01D0CF8450E39D
32FCBD8AA2> |
!
end
end end
%ADOEndSubsetFont
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.352 162.72 mo
(\000@)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBJK+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
/XCRBJJ+Arial#20Unicode#20MS-Identity-H uf
/XCRBJJ+Arial#20Unicode#20MS /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 269 x Fp(Figure)31 b(19:)45 b(Comparison)33
b(of)e(application)g(execution)g(time)g(with)-152 1347
y(singletask,)c(co-routine,)g(and)e(m)n(ultitask)-152
2690 y @beginspecial 0 @llx 0 @lly 960 @urx 540 @ury
2437 @rwi @clip @setspecial
%%BeginDocument: figure/comparison_msec.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: comparison_msec.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/05, 20:13:22
%%BoundingBox: 0 0 960 540
%%HiResBoundingBox: 0 0 960 540
%%CropBox: 0 0 960 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-05T20:04:04+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-05T20:04:04+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
960 540 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 540 mo
960 540 li
960 -6.10352e-5 li
0 -6.10352e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
.48 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
92.16 381.72 mo
937.2 381.72 li
92.16 309.12 mo
937.2 309.12 li
92.16 236.52 mo
937.2 236.52 li
92.16 163.92 mo
937.2 163.92 li
92.16 91.32 mo
937.2 91.32 li
92.16 18.72 mo
937.2 18.72 li
1 /0 /CSD get_res sepcs
.463 sep
@
155.52 280.32 mo
240 280.32 li
240 278.64 li
155.52 278.64 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.474983 .269963 0 0 cmyk
f
.72 lw
155.52 280.32 mo
240 280.32 li
240 278.64 li
155.52 278.64 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
366.72 302.16 mo
451.32 302.16 li
451.32 300.12 li
366.72 300.12 li
cp
.474983 .269963 0 0 cmyk
f
366.72 302.16 mo
451.32 302.16 li
451.32 300.12 li
366.72 300.12 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
578.04 305.52 mo
662.52 305.52 li
662.52 303.72 li
578.04 303.72 li
cp
.474983 .269963 0 0 cmyk
f
578.04 305.52 mo
662.52 305.52 li
662.52 303.72 li
578.04 303.72 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
789.36 304.8 mo
873.84 304.8 li
873.84 301.08 li
789.36 301.08 li
cp
.474983 .269963 0 0 cmyk
f
789.36 304.8 mo
873.84 304.8 li
873.84 301.08 li
789.36 301.08 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
155.52 278.64 mo
240 278.64 li
240 273.48 li
155.52 273.48 li
cp
.474983 .269963 0 0 cmyk
f
155.52 278.64 mo
240 278.64 li
240 273.48 li
155.52 273.48 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
366.72 300.12 mo
451.32 300.12 li
451.32 297.12 li
366.72 297.12 li
cp
.474983 .269963 0 0 cmyk
f
366.72 300.12 mo
451.32 300.12 li
451.32 297.12 li
366.72 297.12 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
578.04 303.72 mo
662.52 303.72 li
662.52 301.32 li
578.04 301.32 li
cp
.474983 .269963 0 0 cmyk
f
578.04 303.72 mo
662.52 303.72 li
662.52 301.32 li
578.04 301.32 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
789.36 301.08 mo
873.84 301.08 li
873.84 298.32 li
789.36 298.32 li
cp
.474983 .269963 0 0 cmyk
f
789.36 301.08 mo
873.84 301.08 li
873.84 298.32 li
789.36 298.32 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
197.76 280.32 mo
197.76 295.44 li
195.48 295.44 mo
200.04 295.44 li
f
.48 lw
197.76 280.32 mo
197.76 295.44 li
195.48 295.44 mo
200.04 295.44 li
@
409.08 302.16 mo
409.08 316.2 li
406.8 316.2 mo
411.24 316.2 li
f
409.08 302.16 mo
409.08 316.2 li
406.8 316.2 mo
411.24 316.2 li
@
620.28 305.52 mo
620.28 319.44 li
618 319.44 mo
622.56 319.44 li
f
620.28 305.52 mo
620.28 319.44 li
618 319.44 mo
622.56 319.44 li
@
831.6 304.8 mo
831.6 363.96 li
829.32 363.96 mo
833.88 363.96 li
f
831.6 304.8 mo
831.6 363.96 li
829.32 363.96 mo
833.88 363.96 li
@
197.76 273.48 mo
197.76 166.8 li
195.48 166.8 mo
200.04 166.8 li
f
197.76 273.48 mo
197.76 166.8 li
195.48 166.8 mo
200.04 166.8 li
@
409.08 297.12 mo
409.08 193.92 li
406.8 193.92 mo
411.24 193.92 li
f
409.08 297.12 mo
409.08 193.92 li
406.8 193.92 mo
411.24 193.92 li
@
620.28 301.32 mo
620.28 194.4 li
618 194.4 mo
622.56 194.4 li
f
620.28 301.32 mo
620.28 194.4 li
618 194.4 mo
622.56 194.4 li
@
831.6 298.32 mo
831.6 207.6 li
829.32 207.6 mo
833.88 207.6 li
f
831.6 298.32 mo
831.6 207.6 li
829.32 207.6 mo
833.88 207.6 li
@
92.16 454.32 mo
92.16 18.72 li
1 /0 /CSD get_res sepcs
.463 sep
@
85.8 454.32 mo
92.16 454.32 li
85.8 381.72 mo
92.16 381.72 li
85.8 309.12 mo
92.16 309.12 li
85.8 236.52 mo
92.16 236.52 li
85.8 163.92 mo
92.16 163.92 li
85.8 91.32 mo
92.16 91.32 li
85.8 18.72 mo
92.16 18.72 li
@
92.16 454.32 mo
937.2 454.32 li
@
92.16 454.32 mo
92.16 462.12 li
303.36 454.32 mo
303.36 462.12 li
514.68 454.32 mo
514.68 462.12 li
725.88 454.32 mo
725.88 462.12 li
937.2 454.32 mo
937.2 462.12 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
24 <001C60D8A8C9B6605B98F4A588B7921F134D3EAF04976825544E780813E3
68563DF664FF0C21EECFC62F07E5777F98F69AE9850039681272737750D58250
F6D5750128ECB416C91E75435E76C871ECD8240079BB08971F8767F605B310D1
53BBD81AC61F6F3FA548C018E5D794> |
21 <001C60D8A8C9B6605B97B971C90101384E5F55BFDC60B70BA13CBEBD8079
87DEE773C6D32C924661DB9596D2057D023C05B990EDB59F8EE8FE5A9465DF9F
5C71FFEFFDBBC50880551E2ACA565AFE9EE26169EFE24A7FA44292793C21F963
028EE33626F245AD451978534A938D5D74D06B6686AFB07603> |
19 <001C60D8A8C9B6605B97F773CB37EF105D6285754EBC81D65F6F04CC691C
7F5EE348066567CE3373FF864DFD63A083663665D3895BAA42E3A193D458B51D
F88FA0C902C3C8220A529A43AA1C484F6CF1F6572D25AD1CC6600451E844C2AD
F985B4EB8ED1481A42735624F1F4E8E1442A7ACD473BC46ABD8C9489DDB55FE3
ECEFD3636CDABD24A793C37AB191> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
38.736 457.824 mo
(\000\030\000\025\000\023)
[11.16 11.16 0 ]xsh
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
23 <001C60D8A8C9B6605B97A6AE26C2840C4859DD2A09849B51F566F11010AC
805F1394C7046187E470EAAB37E75A830745E66CED4DCDB5F72E2F64> |
!
end
end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.024 0 0 -18.024 0 0 ]msf
38.736 385.18 mo
(\000\030\000\027\000\023)
[11.16 11.16 0 ]xsh
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
25 <001C60D8A8C9B6605B974B00E7E548074483935B8CE9D0687D08FA227A28
ECBF1F9AC10DE49951E80A0C6CBC4DBFF65707BDEB41F2EE02CC03B295E7E642
7ECDAC93931AB2B485D7F0B938F685D8C63F40B7E5F6ED28AC7122F94CDB08AA
9EC4FAFEC508FE31866632C26CCD6F5697B9ECA3CC32A267344DFEF3D8DF3E99
64D37ED5BB61686AC4CC9CD613D93C603ADECCB0F02B9B60585EC09EA3A004B8
6331C402871F299F7A95B030CCBE66F11F> |
!
end
end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
38.736 312.55 mo
(\000\030\000\031\000\023)
[11.16 11.16 0 ]xsh
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
27 <001C60D8A8C9B6605BD083DC03D08172F779A0956662141E8D83546AF940
A3D7ABC56E06B59AD0EDA681C14040DE4412E3F56E70F81989BC1CBC8FBE0F4A
5AE8133732576F4BD1A6AD9589C2F69F2FB5BDB9AC7FB60ECA5DAFDF2CDE4BC3
5E0D9B0C7D7FBD8A1E82AD7109B717CB7C1D0E16F2A92AA673F1CD39ABD8B561
BB96E99D5F927E271BD898D5DCF4B2583A85D72F47F3F985BA69BC11F27EF2CB
AE2B468514E5B13AEB941B7C4DA275871682BCB35C39EC4FC2A6A6D8EF1C9EDA
67C00FC041C0A7771CCFFA851E86D52F69EF0C6368275297C62CA88637F7EF3D
4CF564> |
!
end
end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
38.736 239.93 mo
(\000\030\000\033\000\023)
[11.16 11.16 0 ]xsh
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
38.736 167.3 mo
(\000\031\000\023\000\023)
[11.16 11.16 0 ]xsh
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
38.736 94.66 mo
(\000\031\000\025\000\023)
[11.16 11.16 0 ]xsh
gsave
1.4303e-5 540 mo
959.88 540 li
959.88 0 li
1.4303e-5 0 li
cp
eclp
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
38.736 22.03 mo
(\000\031\000\027\000\023)
[11.16 11.16 0 ]xsh
grestore
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 6 GetGlyphDirectory
20 <001C60D8A8C9B6605B97E3474607F65DA83467005204B5F48E11F4969E87
21827C7B7F47B5579624C0429CB1D21355B681041D4720> |
3 <001C60D8A8C9B816D234> |
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
!
end
end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
159.24 493.32 mo
(\000\024\000\003\000P\000V\000H\000F)
[13.6811 7.46632 21.1255 10.9361 12.7367 0 ]xsh
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
370.56 493.32 mo
(\000\025\000\003\000P\000V\000H\000F)
[13.6372 7.46631 21.1036 10.9361 12.6708 0 ]xsh
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
581.86 493.32 mo
(\000\027\000\003\000P\000V\000H\000F)
[13.6372 7.46631 21.1036 10.9361 12.6708 0 ]xsh
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
793.15 493.32 mo
(\000\033\000\003\000P\000V\000H\000F)
[13.6372 7.46631 21.1036 10.9361 12.6708 0 ]xsh
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 9 GetGlyphDirectory
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
91 <001C60D8A8C9B7EF322BCE77320BDDEB6C822497B72CA300CCF93D9341A7
1BF29803D36EA01124904658E1C9AD3CC24155EE375EACDCAE8E68F5C2> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
62 <001C60D8A8C9B76427D0768D23E1116581428765F0104D17A7A91E111213
4419779D29FD> |
!
end
end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.544 437.09 mo
(\000\(\000[\000H\000F\000X\000W\000L\000R\000Q\000\003\0007\000L\000P\000H\000\003\000>)
[-14.8799 -13.104 -13.8479 -12.1681 -14.8319 -9.14395 -6.09595 -14.3279 -14.8799 -8.0639 -15.264 -6.09595 
-23.088 -13.8479 -8.15991 0 ]ysh
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.544 238.9 mo
(\000P\000V\000H\000F)
[-23.016 -12 -13.8479 0 ]ysh
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
64 <001C60D8A8C9B76427D0565110CF2FB8EA848FD9E6045C01D0CF8450E39D
32FCBD8AA2> |
!
end
end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.544 177.94 mo
(\000@)sh
%ADOBeginSubsetFont: XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 3 GetGlyphDirectory
51 <001C60D8A8C9B7C7F3AB8C913496B09857977C9DC6242A9162060173AC59
9393DA1940FF4DBBBB7DC58141AB33AD646160390F69558CE684F038371A8CA4
BBDE854FF6E871389797481AE0511B0909CE7DDDBB9990A8EC8C41B5BDE134> |
85 <001C60D8A8C9B71EB59853723DAD375F3DA2EE64B8D640460C6E2F4E7057
CBA5C46CCF73BA5760335C3854353D3D594D09E8BE15EA95D13A> |
71 <001C60D8A8C9B7DB133A10DDD0788DA16A73B536D0D84D5AB01671E13E07
DCE8DE005A853EFBB5C59B18180F0EEF4E92B910FE8C89795ADF2F481D35EFCC
6A6A68E09B2C87DBE6F983910B34340BD39F30FB40E84BD11FD5C0686D2E45D9
3AAD34EBBE4E8693DC4E2034D7B98E> |
!
end
end end
%ADOEndSubsetFont
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [24 0 0 -24 0 0 ]msf
434.71 522.672 mo
(\0003\000H\000U\000L\000R\000G\000L\000F\000\003\0007\000L\000P\000H)
[13.6798 13.8479 9.91187 6.09595 14.2559 14.664 6.09592 12.1681 8.15997 15.264 6.09595 23.0159 
0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/XCRBJL+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 269 x(Figure)f(20:)34 b(Comparison)25 b(of)f(o)n(v)n
(erhead)e(for)i(eac)n(h)g(cyclic)f(p)r(erio)r(d)h(of)-152
3046 y(Rite)-6 b(VM)25 b(sc)n(heduler)-77 3373 y(The)g(Blueto)r(oth)h
(loader)g(for)g(mrub)n(y)e(b)n(yteco)r(de)h(can)g(reduce)g(the)-152
3460 y(dev)n(elopmen)n(t)h(time.)38 b(With)26 b(the)g(prop)r(osed)h
(framew)n(ork,)i(dev)n(elop-)-152 3547 y(ers)j(do)g(not)f(need)g(to)h
(rewrite)g(a)g(storage/R)n(OM)h(device)e(b)r(ecause)-152
3634 y(only)25 b(the)f(b)n(yteco)r(de)g(should)g(b)r(e)g(transferred.)
35 b(F)-6 b(or)24 b(example,)i(with)-152 3721 y(the)37
b(existing)g(system,)j(when)d(mrub)n(y)e(programs)j(are)g(mo)r
(di\034ed,)-152 3808 y(dev)n(elop)r(ers)25 b(m)n(ust)g(remo)n(v)n(e)g
(an)g(SD)f(card)h(from)h(the)e(target)i(device,)-152
3896 y(connect)31 b(the)f(host)h(PC,)h(compile/link)f(the)g(platform,)i
(and)d(rein-)-152 3983 y(sert)37 b(the)e(SD)g(card)h(in)g(the)g(target)
g(device)g(in)g(an)g(exp)r(erimen)n(tal)-152 4070 y(en)n(vironmen)n(t)
25 b(suc)n(h)g(as)i(LEGO)e(MINDSTORMS)g(EV3.)34 b(In)25
b(addi-)-152 4157 y(tion,)g(the)e(prop)r(osed)h(framew)n(ork)h
(eliminates)h(the)d(need)g(to)h(restart)-152 4244 y(the)i(target)g(R)-6
b(TOS.)-77 4332 y(In)31 b(the)g(prop)r(osed)h(framew)n(ork,)j(to)c
(further)h(impro)n(v)n(e)f(soft)n(w)n(are)-152 4419 y(dev)n(elopmen)n
(t)e(e\036ciency)-6 b(,)30 b(dev)n(elop)r(ers)g(transfer)h(only)e(the)g
(mrub)n(y)-152 4506 y(application)38 b(b)n(yteco)r(de;)k(mrub)n(y)35
b(libraries)j(are)f(incorp)r(orated)h(in)-152 4593 y(the)27
b(platform.)42 b(The)28 b(size,)h(load)f(pro)r(cess)h(time,)f(and)f
(compilation)-152 4680 y(time)j(for)g(an)f(mrub)n(y)f(application)i
(with)g(and)e(without)i(mrub)n(y)e(li-)-152 4767 y(brary)20
b(are)h(sho)n(wn)g(in)f(T)-6 b(able)21 b(1.)33 b(The)21
b(o)n(v)n(erhead)f(of)h(load)g(pro)r(cessing)-152 4855
y(to)j(load)f(a)h(zero)f(b)n(yte)f(b)n(yteco)r(de)h(is)g(50.933)i
(msec.)34 b(Similarly)-6 b(,)25 b(com-)-152 4942 y(pilation)37
b(o)n(v)n(erhead)f(to)h(compile)g(a)f(zero)h(b)n(yte)f(program)h(is)f
(46.9)-152 5029 y(msec.)e(The)23 b(mrub)n(y)e(application)j(b)n(yteco)r
(de)e(is)h(smaller)h(and)e(faster)-152 5116 y(than)i(including)g(the)f
(mrub)n(y)g(libraries)i(for)g(all)g(terms.)34 b(The)24
b(di\033er-)-152 5203 y(ence)j(increases)h(as)f(the)g(n)n(um)n(b)r(er)e
(of)j(Rite)-6 b(VMs)26 b(increases)i(b)r(ecause)-152
5290 y(50)h(msec)f(of)h(o)n(v)n(erhead)f(is)g(incurred)g(p)r(er)g(Rite)
-6 b(VM.)27 b(These)i(adv)l(an-)-152 5378 y(tages)e(impro)n(v)n(e)e
(the)h(e\036ciency)f(of)i(soft)n(w)n(are)g(dev)n(elopmen)n(t.)2040
991 y @beginspecial 0 @llx 0 @lly 960 @urx 540 @ury 2437
@rwi @clip @setspecial
%%BeginDocument: figure/eval_synchronization.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: eval_synchronization.pdf
%%Creator: Adobe Acrobat 9.5.5
%%For: owner
%%CreationDate: 2016/04/06, 23:56:35
%%BoundingBox: 0 0 960 540
%%HiResBoundingBox: 0 0 960 540
%%CropBox: 0 0 960 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 873 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-04-06T23:54:45+09:00"
   xmp:CreatorTool="Microsoft® PowerPoint® 2013"
   xmp:ModifyDate="2016-04-06T23:54:45+09:00"
   pdf:Producer="Microsoft® PowerPoint® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>takuro</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">PowerPoint プレゼンテーション</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
960 540 li
960 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 540 mo
960 540 li
960 -6.10352e-5 li
0 -6.10352e-5 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
0 540 mo
960 540 li
960 -.000244141 li
0 -.000244141 li
cp
eclp
.48 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
88.68 412.44 mo
960 412.44 li
88.68 346.56 mo
960 346.56 li
88.68 280.68 mo
960 280.68 li
88.68 214.8 mo
960 214.8 li
88.68 148.92 mo
960 148.92 li
88.68 83.04 mo
960 83.04 li
88.68 17.16 mo
960 17.16 li
1 /0 /CSD get_res sepcs
.463 sep
@
grestore
175.8 444 mo
291.96 444 li
291.96 404.64 li
175.8 404.64 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.474983 .269963 0 0 cmyk
f
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
175.8 444 mo
291.96 444 li
291.96 404.64 li
175.8 404.64 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
466.2 310.2 mo
582.36 310.2 li
582.36 282.48 li
466.2 282.48 li
cp
.474983 .269963 0 0 cmyk
f
466.2 310.2 mo
582.36 310.2 li
582.36 282.48 li
466.2 282.48 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
756.72 171.72 mo
872.88 171.72 li
872.88 154.92 li
756.72 154.92 li
cp
.474983 .269963 0 0 cmyk
f
756.72 171.72 mo
872.88 171.72 li
872.88 154.92 li
756.72 154.92 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
175.8 404.64 mo
291.96 404.64 li
291.96 376.44 li
175.8 376.44 li
cp
.474983 .269963 0 0 cmyk
f
175.8 404.64 mo
291.96 404.64 li
291.96 376.44 li
175.8 376.44 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
466.2 282.48 mo
582.36 282.48 li
582.36 258.48 li
466.2 258.48 li
cp
.474983 .269963 0 0 cmyk
f
466.2 282.48 mo
582.36 282.48 li
582.36 258.48 li
466.2 258.48 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
756.72 154.92 mo
872.88 154.92 li
872.88 119.64 li
756.72 119.64 li
cp
.474983 .269963 0 0 cmyk
f
756.72 154.92 mo
872.88 154.92 li
872.88 119.64 li
756.72 119.64 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
233.88 444 mo
233.88 456.24 li
231.6 456.24 mo
236.16 456.24 li
f
.48 lw
233.88 444 mo
233.88 456.24 li
231.6 456.24 mo
236.16 456.24 li
@
524.28 310.2 mo
524.28 322.92 li
522.12 322.92 mo
526.56 322.92 li
f
524.28 310.2 mo
524.28 322.92 li
522.12 322.92 mo
526.56 322.92 li
@
814.8 171.72 mo
814.8 203.76 li
812.52 203.76 mo
817.08 203.76 li
f
814.8 171.72 mo
814.8 203.76 li
812.52 203.76 mo
817.08 203.76 li
@
233.88 376.44 mo
233.88 363.48 li
231.6 363.48 mo
236.16 363.48 li
f
233.88 376.44 mo
233.88 363.48 li
231.6 363.48 mo
236.16 363.48 li
@
524.28 258.48 mo
524.28 218.64 li
522.12 218.64 mo
526.56 218.64 li
f
524.28 258.48 mo
524.28 218.64 li
522.12 218.64 mo
526.56 218.64 li
@
814.8 119.64 mo
814.8 87.12 li
812.52 87.12 mo
817.08 87.12 li
f
814.8 119.64 mo
814.8 87.12 li
812.52 87.12 mo
817.08 87.12 li
@
88.68 478.32 mo
88.68 17.16 li
1 /0 /CSD get_res sepcs
.463 sep
@
82.32 478.32 mo
88.68 478.32 li
82.32 412.44 mo
88.68 412.44 li
82.32 346.56 mo
88.68 346.56 li
82.32 280.68 mo
88.68 280.68 li
82.32 214.8 mo
88.68 214.8 li
82.32 148.92 mo
88.68 148.92 li
82.32 83.04 mo
88.68 83.04 li
82.32 17.16 mo
88.68 17.16 li
@
gsave
0 540 mo
960 540 li
960 -.00012207 li
0 -.00012207 li
cp
eclp
88.68 478.32 mo
960 478.32 li
@
grestore
gsave
0 540 mo
960 540 li
960 -.00012207 li
0 -.00012207 li
cp
eclp
88.68 478.32 mo
88.68 486.12 li
379.08 478.32 mo
379.08 486.12 li
669.6 478.32 mo
669.6 486.12 li
960 478.32 mo
960 486.12 li
@
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa)
%%Title: (OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-984 -440 1822 1060} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 25022 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300EE23D0BA079325E1D5F86AF2FE7DC374914003E
5DDB91552C283> |
19 <001C60D8A8C9B6605B97F773CB37EF105D6285754EBC81D65F6F04CC691C
7F5EE348066567CE3373FF864DFD63A083663665D3895BAA42E3A193D458B51D
F88FA0C902C3C8220A529A43AA1C484F6CF1F6572D25AD1CC6600451E844C2AD
F985B4EB8ED1481A42735624F1F4E8E1442A7ACD473BC46ABD8C9489DDB55FE3
ECEFD3636CDABD24A793C37AB191> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H /Identity-H 0 [/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa] ct_ComposeFont pop end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
57.6 481.8 mo
(\000\023)sh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
17 <001C60D8A8C9B80F37F28BBD69438B6F09441D6BA20ED3CF1C> |
24 <001C60D8A8C9B6605B98F4A588B7921F134D3EAF04976825544E780813E3
68563DF664FF0C21EECFC62F07E5777F98F69AE9850039681272737750D58250
F6D5750128ECB416C91E75435E76C871ECD8240079BB08971F8767F605B310D1
53BBD81AC61F6F3FA548C018E5D794> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 415.9 mo
(\000\023\000\021\000\030)
[11.178 6.31798 0 ]xsh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
20 <001C60D8A8C9B6605B97E3474607F65DA83467005204B5F48E11F4969E87
21827C7B7F47B5579624C0429CB1D21355B681041D4720> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18.024 0 0 -18.024 0 0 ]msf
57.6 349.99 mo
(\000\024)sh
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 284.11 mo
(\000\024\000\021\000\030)
[11.178 6.31798 0 ]xsh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
21 <001C60D8A8C9B6605B97B971C90101384E5F55BFDC60B70BA13CBEBD8079
87DEE773C6D32C924661DB9596D2057D023C05B990EDB59F8EE8FE5A9465DF9F
5C71FFEFFDBBC50880551E2ACA565AFE9EE26169EFE24A7FA44292793C21F963
028EE33626F245AD451978534A938D5D74D06B6686AFB07603> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
57.6 218.21 mo
(\000\025)sh
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 152.33 mo
(\000\025\000\021\000\030)
[11.178 6.31798 0 ]xsh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
22 <001C60D8A8C9B6605B98FACCBBA7A41C9903FD40C3E16D2A898429F24F9C
A57C4CC310A044D87F6AC87496A40150D342AC53D462CDCFD3AB53C69B171BF6
7E9C075978A02491CDA1EFE0732B776B4E0C85ED7D38AA8FB41D1DE87C4E57B9
505DD05BEB22DF4DCBA88C015FC9E527DB5A92F7B2A4FB6C778DAA4D8C1871B0
CB2DC1AA61BBF6BE683F456ACF25D2694817C2A28C0154DF6CBC3428D8DF1088
F28484EE9B3F> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
57.6 86.42 mo
(\000\026)sh
gsave
1.4305e-5 540 mo
960 540 li
960 0 li
1.4305e-5 0 li
cp
eclp
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [18 0 0 -18 0 0 ]msf
40.128 20.54 mo
(\000\026\000\021\000\030)
[11.178 6.31798 0 ]xsh
grestore
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 2 GetGlyphDirectory
57 <001C60D8A8C9B65EB4061D718A323BE4EF4290DD04AD0CDA2B821879EFFE
67DAABE7CD20069AB2B8> |
48 <001C60D8A8C9B6B278BE990173AD6C0E22647D0A5652DE280C08B9D3C865
3F826A97DE514189BD273CDC577DB44F6E0E0A4909CB2DCB9B8C22> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
210.41 517.296 mo
(\0009\0000\000\025)
[14.9987 18.2486 0 ]xsh
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
500.9 517.296 mo
(\0009\0000\000\026)
[14.9986 18.2487 0 ]xsh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
23 <001C60D8A8C9B6605B97A6AE26C2840C4859DD2A09849B51F566F11010AC
805F1394C7046187E470EAAB37E75A830745E66CED4DCDB5F72E2F64> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [21.96 0 0 -21.96 0 0 ]msf
791.4 517.296 mo
(\0009\0000\000\027)
[14.9987 18.2486 0 ]xsh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 13 GetGlyphDirectory
40 <001C60D8A8C9B7D103265A33C7CC3326FD272DE3AD7BB5679F6AF53833E5
CD3B8B30005D25983730F7796DDF59EF> |
91 <001C60D8A8C9B7EF322BCE77320BDDEB6C822497B72CA300CCF93D9341A7
1BF29803D36EA01124904658E1C9AD3CC24155EE375EACDCAE8E68F5C2> |
72 <001C60D8A8C9B7FA13770CFC4BD591DF3AB0AF3B0CB6F1468DF3C4AFB23D
89D1BD6457335337282A3A807895395283D2CC03BFE318BCDA8298FF0B583807
7F5C0F4B43A9FE700D8309664D9D16A412E719759495451E825DDD2DC785E628
CBAB0850792ABF21FC70277E417ABD4AEC78084F071A38D6A44C6E4EF4E9D965> |
70 <001C60D8A8C9B7A0860A10EE14C633A0E35024617AA18FE7C5F73EA10E3A
966B81E9B117280CB73D0958BA3904A74CEA3898CCC5105B24C9373B2B9D5F65
85131AC00F716247D6417A59CD37EF5A339ABBE2A32E50FF8A403B5E634B665D
17069F79753661A909FC75CA> |
88 <001C60D8A8C9B7D103263C4089F975C03491231F11322F547D764D4267BB
35C95B4CEDDEBD09F6B3ACC8936B6F35E64AC7927F5ACC16B3D854CA7DADD3CF
FF836C2CF195EBE111B6549201> |
87 <001C60D8A8C9B720585E08518638220EB29948A7CDC67C8FD4CAF4EF1C64
6C0F0981A87131B4C8461989EC899EC9B09660A3A1E84FC7803EA846ADC1CA20
12D24FC1312273D1B04325B244498EFB767DA5AE603A02AB40DDF7> |
76 <001C60D8A8C9B86C35768E6386EBACB0709F16C26B7ABBE2CC77F7E07980
9C035F8D> |
82 <001C60D8A8C9B7C9966B884BE9C0D5C0C05CFE5DDE80D55857339709E7C3
C81871A08BAA01A0CC0B6F68DF093FF8DA69FCAD1EE91107F721C73309F3F9AD
F16222D83E94C690C5A1CEB251E62B733C1B368F8B014CFDD1380DC31EFD84D0
3088E148A4D3C6D8D6F2D1FFEF8ECEC99CC3046788560EFAE72BC13DCAE820> |
81 <001C60D8A8C9B7D103263888219F8224AC718B443EA3A4063EEA2C7CD084
B5D8C40483F30FF91A969FF7F96A695B779336AF3A550239608758F3C28143C2
A80CC3F7630891A86C1AEC6578> |
3 <001C60D8A8C9B816D234> |
55 <001C60D8A8C9B67106D22B1FC95AF64B93B609D0CB390DD01C9845183FFF
F0CA84> |
80 <001C60D8A8C9B5C1FED98D123A4D8EA4D7157D9F7DA975E098E5A39124AC
0684560A4F67C6B8CF5E820C7C495A89D01CDDA59209942305FB2B0329C32EB4
386DB0AB5CE5224266A59989217E9892BA1DFB5061EC06BC39000E738802AE8B
A018D50521C7F9A25A1E4116FA0D5BD60FE45A46CEE465DF8E52D8069F6B86C0
CD7FF006D6> |
62 <001C60D8A8C9B76427D0768D23E1116581428765F0104D17A7A91E111213
4419779D29FD> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.352 421.87 mo
(\000\(\000[\000H\000F\000X\000W\000L\000R\000Q\000\003\0007\000L\000P\000H\000\003\000>)
[-14.8799 -13.104 -13.8479 -12.1681 -14.8319 -9.14395 -6.09595 -14.3279 -14.8799 -8.06393 -15.264 -6.09595 
-23.088 -13.8479 -8.15991 0 ]ysh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
86 <001C60D8A8C9B7A9C0DCF50E3D7303C37BF78CBBAD6419121CF744939E60
24432E6635CA7C808C4200814B866DE72AC329261E5FE27E5D3BC616ED3FA103
457221237978DD074F64E287CED175163A43F868FB5ECA516A2299C756E75421
2477950B7D7B7D803700A32384362EF2E75AAF4891FFC72ACCEBADC1D97AA7C2
5E0380D29A742C51A5937C8431A493C129076FDEF27564E01620D218337573FE
CF45233A421683> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.352 223.68 mo
(\000P\000V\000H\000F)
[-23.016 -12 -13.8479 0 ]ysh
%ADOBeginSubsetFont: OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa 1 GetGlyphDirectory
64 <001C60D8A8C9B76427D0565110CF2FB8EA848FD9E6045C01D0CF8450E39D
32FCBD8AA2> |
!
end
end end
%ADOEndSubsetFont
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H findfont [-1.056e-6 -24 -24 1.056e-6 0 0 ]msf
32.352 162.72 mo
(\000@)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa-Identity-H uf
/OWGKIF+#e3#83#a1#e3#82#a4#e3#83#aa#e3#82#aa /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF

%%EndDocument
 @endspecial 2144 1260 a(Figure)g(21:)35 b(Sync)n(hronization)25
b(of)h(m)n(ultiple)g(Rite)-6 b(VM)25 b(tasks)2069 1559
y(T)-6 b(able)26 b(2:)35 b(C)26 b(and)g(CDL)f(\034le)h(co)r(de)g(for)h
(the)e(n)n(um)n(b)r(er)f(of)j(Rite)-6 b(VMs)p 2724 1678
5 88 v 2739 1678 V 2891 1651 a(\(A\))p 3156 1678 V 300
w(\(B\))p 3572 1678 V 278 w(Di\033)p 2069 1682 1885 5
v 2238 1743 a(C)26 b(\(T)-6 b(otal\))p 2724 1769 5 88
v 2739 1769 V 233 w(8)p Fd(\002)p Fg(\013)p Fc(+)p Fp(134)p
3156 1769 V 200 w(130)p 3572 1769 V 218 w(8)p Fd(\002)p
Fg(\013)p Fc(+)p Fp(4)2116 1830 y(C)26 b(\(Mo)r(di\034cation\))p
2724 1856 V 2739 1856 V 129 w(10)p Fd(\002)p Fg(\013)p
Fd(\000)p Fp(2)p 3156 1856 V 257 w(0)p 3572 1856 V 237
w(10)p Fd(\002)p Fg(\013)p Fd(\000)p Fp(2)2316 1917 y(CDL)p
2724 1943 V 2739 1943 V 310 w(18)p Fd(\002)p Fg(\013)p
Fc(+)p Fp(25)p 3156 1943 V 96 w(18)p Fd(\002)p Fg(\013)p
Fc(+)p Fp(25)p 3572 1943 V 219 w(0)2116 2004 y Fb(\013)g
Fp(:)34 b Fh(the)22 b(n)n(um)n(b)r(er)e(of)i(Rite)-5
b(VM)2040 2274 y Fq(4.2)99 b(RiteVM)25 b(Scheduler)2115
2382 y Fp(A)g(comparison)i(of)f(the)f(application)i(execution)e(time)h
(with)g(sin-)2040 2469 y(gletasking,)k(co-routine,)f(and)e(m)n
(ultitasking)i(is)f(sho)n(wn)g(in)g(Figure)2040 2556
y(19.)55 b(A)31 b(program)i(with)f(100,000)j(lo)r(ops)e(w)n(as)g(used)f
(as)h(an)f(mrub)n(y)2040 2643 y(application)e(for)f(the)g(ev)l
(aluation)g(of)h(execution)e(time.)44 b(Here,)30 b(the)2040
2730 y(singletask)e(program)f(lo)r(op)r(ed)g(100,000)i(times)e(and)f
(the)g(m)n(ultitask)2040 2817 y(and)f(co-routine)h(programs)h(lo)r(op)r
(ed)f(50,000)i(times)e(for)h(eac)n(h)f(task.)2063 2982
y Fj(4.2.1)90 b(Execution)15 b(T)-5 b(ime)17 b(with)h(Singletasking)o
(,)f(Co-r)l(outine)o(,)2337 3069 y(and)22 b(Pr)l(oposed)d(Multitasking)
2115 3177 y Fp(In)j(Figure)h(19,)h(the)f(p)r(erio)r(dic)g(time)g(of)h
(the)e(p)r(erio)r(dic)h(handler)g(for)2040 3264 y(m)n(ultitasking)e(is)
g(1)g(msec.)34 b(This)21 b(sho)n(ws)h(that)e(the)g(prop)r(osed)h
(design)2040 3351 y(is)28 b(sup)r(erior)h(to)f(co-routine)g(in)g(terms)
g(of)g(execution)g(time.)41 b(More-)2040 3438 y(o)n(v)n(er,)21
b(dev)n(elop)r(ers)f(can)f(utilize)h(the)f(sc)n(heduler)h(practically)g
(b)r(ecause)2040 3526 y(the)30 b(Rite)-6 b(VM)29 b(sc)n(heduler)h(o)n
(v)n(erhead)g(is)h(appro)n(ximately)f(5\045.)48 b(The)2040
3613 y(sc)n(heduler)33 b(in)n(terrupts)f(and)h(switc)n(hes)h(tasks,)i
(whic)n(h)d(causes)h(this)2040 3700 y(o)n(v)n(erhead.)e(It)17
b(tak)n(es)g(appro)n(ximately)h(3)g Fg(\026)p Fp(sec)g(on)g(a)n(v)n
(erage)g(to)g(switc)n(h)2040 3787 y(tasks)26 b(once.)2063
3951 y Fj(4.2.2)90 b(P)-7 b(eriodic)21 b(T)-5 b(ime)22
b(Overhead)2115 4059 y Fp(Figure)29 b(20)g(sho)n(ws)g(the)f(execution)g
(time)h(of)g(m)n(ultitasking)f(with)2040 4146 y(the)23
b(p)r(erio)r(dic)h(handler.)33 b(The)23 b(lo)n(w)n(er)h(limit)g(of)g
(the)f(p)r(erio)r(dic)h(time)f(is)2040 4234 y(1)30 b(msec)g(due)f(to)h
(the)g(sp)r(eci\034cations)h(of)f(TOPPERS/HRP2,)h(i.e.,)2040
4321 y(the)17 b(R)-6 b(TOS.)17 b(The)g(execution)g(time)h(decreases)g
(as)g(the)f(p)r(erio)r(dic)h(time)2040 4408 y(increases,)32
b(b)r(ecause)e(the)g(n)n(um)n(b)r(er)e(of)i(switc)n(hed)g(tasks)g
(decreases.)2040 4495 y(Note)25 b(that)f(an)h(execution)f(time)h(of)h
(1)f(msec)g(is)h(appro)n(ximately)e(1\045)2040 4582 y(greater)34
b(than)f(that)g(of)i(8)e(msec.)59 b(The)33 b(Rite)-6
b(VM)33 b(sc)n(heduler)g(with)2040 4669 y(a)28 b(short)g(p)r(erio)r
(dic)h(time)f(can)g(execute)g(m)n(ultiple)g(tasks)g(e\033ectiv)n(ely)
2040 4757 y(b)r(ecause)h(the)e(p)r(erio)r(dic)i(time)g(o)n(v)n(erhead)e
(is)i(not)f(large.)43 b(Note)28 b(that)2040 4844 y(a)39
b(smaller)g(p)r(erio)r(dic)h(time)e(is)h(b)r(etter)f(for)h(m)n
(ultitasking)g(due)e(to)2040 4931 y(concurren)n(t)25
b(or)h(parallel)h(pro)r(cessing.)2040 5095 y Fq(4.3)99
b(Synchr)n(onization)21 b(of)e(Multiple)g(RiteVM)g(T)-9
b(asks)2115 5203 y Fp(T)j(o)35 b(execute)f(m)n(ultiple)g(mrub)n(y)f
(applications,)38 b(a)d(sync)n(hroniza-)2040 5290 y(tion)20
b(mec)n(hanism)g(for)h(Rite)-6 b(VM)19 b(tasks)i(is)f(implemen)n(ted)g
(in)f(the)h(pro-)2040 5378 y(p)r(osed)g(framew)n(ork.)34
b(W)-6 b(e)19 b(measured)h(the)f(time)h(from)h(the)e(execution)p
eop end
%%Page: 9 9
TeXDict begin 9 8 bop 998 6 a Fp(T)-6 b(able)26 b(3:)35
b(Comparison)27 b(of)f(prop)r(osed)g(and)g(previous)f(metho)r(ds)p
571 245 5 169 v 586 245 V 599 219 a(Blueto)r(oth)i(Loader)p
1200 245 V 1334 142 a(Call)1214 219 y(C)f(F)-6 b(unction)1665
128 y(Legacy)27 b(Co)r(de)f(of)1614 219 y(Em)n(b)r(edded)f(System)2411
142 y(VM)2260 219 y(Managemen)n(t)2812 142 y(VM)2714
219 y(Sc)n(heduler)3060 128 y(Sync)n(hronization)g(of)3162
219 y(Applications)127 b(Co-routine)p -152 249 4231 5
v -128 310 a(p)n(ython-on-a-c)n(hip)23 b([7])p 571 336
5 88 v 586 336 V 1200 336 V 3310 w Fa(X)-58 397 y Fp(Owl)j(system)g
([14])p 571 423 V 586 423 V 1200 423 V 894 w Fa(X)347
b Fp(P)n(artially)1787 b Fa(X)76 485 y Fp(eLua)25 b([3])p
571 511 V 586 511 V 1200 511 V 1027 w Fa(X)347 b Fp(P)n(artially)1787
b Fa(X)26 572 y Fp(Squirrel)25 b([9])p 571 598 V 586
598 V 1200 598 V 977 w Fa(X)2424 b(X)29 659 y Fp(mrub)n(y)24
b([26])p 571 685 V 586 685 V 1200 685 V 981 w Fa(X)2424
b(X)-140 746 y Fp(mrub)n(y)24 b(on)i(TECS)g([11])p 571
772 V 586 772 V 1200 772 V 812 w Fa(X)461 b(X)488 b(X)1351
b(X)-134 833 y Fp(Prop)r(osed)27 b(framew)n(ork)p 571
859 V 586 859 V 310 w Fa(X)p 1200 859 V 445 w(X)461 b(X)488
b(X)338 b(X)436 b(X)453 b(X)-152 1100 y Fp(of)23 b(the)f(\034rst)g
(Rite)-6 b(VM)22 b(task)g(to)h(the)e(execution)h(of)i(the)d(last)i
(Rite)-6 b(VM)-152 1187 y(task.)50 b(It)30 b(w)n(as)h(con\034rmed)f
(that)h(the)f(time)h(w)n(as)g(within)g(\(p)r(erio)r(dic)-152
1274 y(time\))p Fd(\002)p Fp(\(n)n(um)n(b)r(er)24 b(of)h(Rite)-6
b(VM)24 b(tasks)h Fd(\000)g Fp(1\).)34 b(Figure)25 b(21)h(sho)n(ws)f
(the)-152 1362 y(results)h(for)g(t)n(w)n(o,)g(three,)g(and)f(four)g
(Rite)-6 b(VM)25 b(tasks.)34 b(The)26 b(p)r(erio)r(dic)-152
1449 y(time)32 b(is)f(1)h(msec,)h(and)e(the)g(n)n(um)n(b)r(er)f(of)i
(Rite)-6 b(VMs)31 b(is)g(t)n(w)n(o,)j(three,)-152 1536
y(and)24 b(four.)34 b(As)24 b(sho)n(wn)g(in)g(Figure)g(21,)i(the)d
(time)h(is)h(within)f(1)g(msec,)-152 1623 y(2)29 b(msec,)g(and)f(3)g
(msec)h(resp)r(ectiv)n(ely)-6 b(,)29 b(whic)n(h)f(indicates)h
(successful)-152 1710 y(sync)n(hronization)d(of)h(m)n(ultiple)e(Rite)-6
b(VM)25 b(tasks.)-152 1880 y Fq(4.4)99 b(Bene\002ts)21
b(of)e(Component-Based)i(De)o(v)o(elopment)-77 1988 y
Fp(In)j(the)h(prop)r(osed)g(framew)n(ork,)h(Rite)-6 b(VMs,)25
b(the)f(Rite)-6 b(VM)25 b(sc)n(hed-)-152 2075 y(uler,)e(and)e(Ev)n(en)n
(t\035ags)g(are)h(implemen)n(ted)f(as)h(TECS)g(comp)r(onen)n(ts.)-152
2162 y(Dev)n(elop)r(ers)30 b(can)g(add)g(or)g(remo)n(v)n(e)g(the)f
(functionalities)j(easily)f(b)n(y)-152 2249 y(mo)r(difying)23
b(the)f(CDL)g(\034le.)34 b(Moreo)n(v)n(er,)24 b(CBD)e(decreases)h(co)r
(de)g(size)-152 2336 y(and)j(impro)n(v)n(es)f(pro)r(ductivit)n(y)g(and)
g(main)n(tainabilit)n(y)-6 b(.)-77 2424 y(T)g(o)27 b(demonstrate)h(the)
f(sup)r(eriorit)n(y)g(of)h(CBD,)f(a)h(comparison)g(of)-152
2511 y(the)h(n)n(um)n(b)r(er)f(of)h(lines)h(of)f(co)r(des)h(b)r(et)n(w)
n(een)f(t)n(w)n(o)g(C)g(and)g(CDL)f(\034les)-152 2598
y(is)g(sho)n(wn)g(in)f(T)-6 b(able)28 b(2.)41 b(In)26
b(T)-6 b(able)28 b(2,)h(\(A\))d(and)h(\(B\))h(represen)n(t)f(the)-152
2685 y(source)33 b(\034les)f(in)g(the)g(upp)r(er)f(and)h(lo)n(w)n(er)h
(parts)f(of)h(Figure)f(18,)j(re-)-152 2772 y(sp)r(ectiv)n(ely)-6
b(.)33 b(F)-6 b(or)20 b(C,)h(\(B\)'s)g(co)r(de)g(lines)g(do)f(not)g
(increase)i(ev)n(en)d(if)i(the)-152 2859 y(n)n(um)n(b)r(er)e(of)h(Rite)
-6 b(VMs)19 b(increases,)j(while)f(\(A\)'s)e(co)r(de)h(lines)g
(increase)-152 2947 y(as)27 b(the)f(n)n(um)n(b)r(er)f(of)i(Rite)-6
b(VMs)26 b(increases.)37 b(Note)26 b(that)g(\(B\)'s)h(C)g(\034le)-152
3034 y(can)f(b)r(e)f(utilized)h(without)g(mo)r(di\034cation)g
(regardless)i(of)e(the)f(n)n(um-)-152 3121 y(b)r(er)h(of)h(Rite)-6
b(VMs.)35 b(Moreo)n(v)n(er,)27 b(the)f(n)n(um)n(b)r(er)f(of)i(co)r(de)f
(lines)h(of)f(t)n(w)n(o)-152 3208 y(CDL)34 b(\034les)g(are)g(equal.)58
b(Skillful)35 b(CBD)f(yields)f(adv)l(an)n(tages)h(suc)n(h)-152
3295 y(as)26 b(the)f(decreased)h(n)n(um)n(b)r(er)e(of)i(lines)g(of)g
(co)r(des)g(and)f(non-mo)r(di\034ed)-152 3382 y(co)r(des,)h(whic)n(h)e
(facilitates)i(high)e(pro)r(ductivit)n(y)f(and)h(main)n(tainabil-)-152
3470 y(it)n(y)-6 b(.)-152 3701 y Fq(5.)100 b(RELA)-9
b(TED)26 b(W)o(ORK)-77 3808 y Fp(Op)r(en-source)20 b(run)n(time)f
(systems)i(for)g(scripting)g(languages)g(ha)n(v)n(e)-152
3896 y(b)r(een)e(prop)r(osed)f(previously)h(suc)n(h)f(p)n(ython-on-a-c)
n(hip)e([7],)21 b(the)d(Owl)-152 3983 y(system)h([14],)i(eLua)e([3],)i
(Squirrel)d([9],)k(mrub)n(y)17 b([26],)j([5],)h(and)d(mrub)n(y)-152
4070 y(on)26 b(TECS)g([11].)-77 4157 y Fk(python-on-a-chip:)58
b Fp(p)n(ython-on-a-c)n(hip)36 b(\(p14p\))i(is)h(a)g(Python)-152
4244 y(run)n(time)17 b(system)g(that)g(uses)g(a)h(reduced)e(Python)h
(VM)g(called)h(PyMite.)-152 4332 y(The)33 b(VM)f(runs)g(a)g
(signi\034can)n(t)h(subset)f(of)h(the)f(Python)g(language)-152
4419 y(with)c(few)g(resources)g(on)f(a)h(micro)r(con)n(troller.)41
b(p14p)28 b(can)f(also)i(run)-152 4506 y(m)n(ultiple)d(stac)n(kless)h
(green)f(threads.)-77 4593 y Fk(Owl)16 b(system:)32 b
Fp(The)20 b(Owl)h(system)g(is)g(an)f(em)n(b)r(edded)f(Python)h(run-)
-152 4680 y(time)30 b(system.)45 b(It)29 b(is)h(a)f(complete)h(system)f
(for)h(ARM)f(Cortex-M3)-152 4767 y(micro)r(con)n(trollers.)62
b(The)34 b(Owl)h(to)r(olc)n(hain)g(pro)r(duces)f(relo)r(catable)-152
4855 y(memory)23 b(images)i(that)e(are)h(directly)f(runnable)f(on)h
(the)g(micro)r(con-)-152 4942 y(troller)g(from)f(Python)e(co)r(de)i(ob)
t(jects.)34 b(Note)21 b(that)g(the)g(Owl)h(system)-152
5029 y(in)n(terpreter)k(is)g(the)f(same)i(as)f(that)f(of)i(p)n
(ython-on-a-c)n(hip.)-77 5116 y Fk(eLua:)36 b Fp(eLua)26
b(\(em)n(b)r(edded)g(Lua\))g(o\033ers)h(a)g(full)g(implemen)n(tation)
-152 5203 y(of)36 b(the)e(Lua)h(programming)h(language)g(for)f(em)n(b)r
(edded)f(systems.)-152 5290 y(Lua)28 b(is)g(one)g(of)h(the)e(most)h(p)r
(opular)g(scripting)g(languages)i(for)e(em-)-152 5378
y(b)r(edded)19 b(systems)h([4],)g([20].)34 b(Lua)20 b(supp)r(orts)f(a)h
(co-routine,)h(whic)n(h)e(is)2040 1100 y(referred)k(to)f(as)g(co)r(op)r
(erativ)n(e)h(m)n(ultitasking.)34 b(A)21 b(co-routine)h(in)g(Lua)2040
1187 y(is)32 b(used)f(as)g(an)h(indep)r(enden)n(tly)d(executed)i
(thread.)50 b(Note)31 b(that)g(a)2040 1274 y(co-routine)f(can)f(only)g
(susp)r(end)g(and)g(resume)h(m)n(ultiple)f(routines;)2040
1362 y(th)n(us,)37 b(a)f(Lua)f(co-routine)h(is)f(not)g(lik)n(e)h(m)n
(ultitasks)f(in)h(m)n(ultitask)2040 1449 y(systems.)2115
1536 y Fk(Squirr)o(el:)31 b Fp(Squirrel)24 b(is)h(an)f(ob)t(ject-orien)
n(ted)g(programming)i(lan-)2040 1623 y(guage)f(designed)f(as)g(a)h
(ligh)n(t)n(w)n(eigh)n(t)f(scripting)h(language)g(that)f(sat-)2040
1710 y(is\034es)37 b(the)f(real-time)i(requiremen)n(ts)e(of)h
(applications.)69 b(Squirrel)2040 1798 y(w)n(as)34 b(inspired)f(b)n(y)f
(Lua.)56 b(The)33 b(Squirrel)g(API)f(is)i(v)n(ery)e(similar)i(to)2040
1885 y(Lua)g(and)g(the)g(table)g(co)r(de)h(is)f(based)g(on)h(that)e(of)
i(Lua;)k(Squirrel)2040 1972 y(also)27 b(supp)r(orts)f(co-routines.)2115
2059 y Fk(mruby:)32 b Fp(mrub)n(y)-6 b(,)22 b(a)h(ligh)n(t)n(w)n(eigh)n
(t)g(implemen)n(tation)g(of)g(the)f(Rub)n(y)2040 2146
y(language,)27 b(has)d(b)r(een)h(prop)r(osed)f(for)i(em)n(b)r(edded)d
(systems.)35 b(mrub)n(y)2040 2233 y(programs)25 b(can)e(run)g(on)g(a)g
(Rite)-6 b(VM,)23 b(whic)n(h)h(is)g(the)f(VM)g(for)h(mrub)n(y)2040
2321 y(and)h(reads)h(the)f(mrub)n(y)f(b)n(yteco)r(de.)34
b(Note)26 b(that)f(the)g(Rite)-6 b(VM)25 b(only)2040
2408 y(supp)r(orts)31 b(a)g(single)g(thread.)49 b(In)30
b(addition,)j(mrub)n(y)c(supp)r(orts)i(co-)2040 2495
y(routines)26 b(but)f(do)r(es)h(not)f(supp)r(ort)h(m)n(ultitasking)g
(for)g(R)-6 b(TOSs.)2115 2582 y Fk(mruby)23 b(on)f(TECS:)30
b Fp(mrub)n(y)f(on)h(TECS)h(is)g(a)g(comp)r(onen)n(t-based)2040
2669 y(framew)n(ork)i(for)f(running)e(mrub)n(y)g(programs.)53
b(mrub)n(y)29 b(programs)2040 2756 y(on)j(TECS)i(can)e(b)r(e)g
(executed)g(appro)n(ximately)g(100)i(times)e(faster)2040
2844 y(than)e(standard)h(mrub)n(y)e(programs.)50 b(In)30
b(addition,)i(soft)n(w)n(are)g(can)2040 2931 y(b)r(e)f(dev)n(elop)r(ed)
g(using)h(CBD)g(with)f(mrub)n(y)f(on)i(TECS.)g(Although)2040
3018 y(m)n(ultitasking)h(has)g(b)r(een)f(supp)r(orted)g(in)h(the)f
(curren)n(t)g(mrub)n(y)g(on)2040 3105 y(TECS,)22 b(dev)n(elop)r(ers)f
(m)n(ust)f(b)r(e)h(familiar)h(with)f(the)g(functions)g(of)g(the)2040
3192 y(R)-6 b(TOS)28 b(to)g(use)h(m)n(ultitasking.)44
b(Co-routines)29 b(are)g(also)h(supp)r(orted)2040 3279
y(b)n(y)25 b(mrub)n(y)f(on)i(TECS.)2115 3367 y(T)-6 b(able)39
b(3)h(compares)g(the)f(prop)r(osed)g(framew)n(ork)h(to)g(previous)2040
3454 y(metho)r(ds.)62 b(The)35 b(prop)r(osed)g(framew)n(ork)h(implemen)
n(ts)f(all)g(of)h(the)2040 3541 y(features)j(sho)n(wn)e(in)h(the)f
(table.)71 b(In)37 b(particular,)k(the)c(prop)r(osed)2040
3628 y(framew)n(ork)29 b(supp)r(orts)f(the)f(loader,)i(the)f(VM)f(sc)n
(heduler,)i(and)e(ap-)2040 3715 y(plication)g(sync)n(hronization.)2040
3962 y Fq(6.)99 b(CONCLUSION)2115 4070 y Fp(This)27 b(pap)r(er)f
(presen)n(ts)h(an)f(extended)f(framew)n(ork)j(of)f(mrub)n(y)f(on)2040
4157 y(TECS,)42 b(i.e.,)j(the)40 b(prop)r(osed)h(framew)n(ork)h
(implemen)n(ts)f(a)g(Blue-)2040 4244 y(to)r(oth)31 b(loader)g(for)h
(mrub)n(y)d(b)n(yteco)r(de)h(and)g(a)h(Rite)-6 b(VM)29
b(sc)n(heduler.)2040 4332 y(The)34 b(Blueto)r(oth)h(loader)g(impro)n(v)
n(es)g(soft)n(w)n(are)h(dev)n(elopmen)n(t)d(e\036-)2040
4419 y(ciency)g(b)n(y)f(eliminating)j(the)e(need)f(to)i(rewrite)g(a)f
(storage/R)n(OM)2040 4506 y(device)c(and)f(restart)h(an)f(R)-6
b(TOS.)28 b(The)h(prop)r(osed)g(framew)n(ork)g(can)2040
4593 y(b)r(e)c(applied)g(to)g(v)l(arious)g(em)n(b)r(edded)f(systems)h
(b)r(ecause)g(the)g(loader)2040 4680 y(can)i(use)f(b)r(oth)g(Blueto)r
(oth)h(and)f(a)h(wired)g(serial)h(connection.)37 b(The)2040
4767 y(Rite)-6 b(VM)32 b(sc)n(heduler)g(simpli\034es)h(m)n(ultitasking)
g(compared)f(to)h(the)2040 4855 y(curren)n(t)d(mrub)n(y)f(on)h(TECS.)i
(Our)d(exp)r(erimen)n(tal)i(results)g(for)g(the)2040
4942 y(Blueto)r(oth)g(loader)g(and)f(Rite)-6 b(VM)29
b(sc)n(heduler)h(sho)n(w)h(their)f(adv)l(an-)2040 5029
y(tages.)38 b(The)26 b(Blueto)r(oth)h(loader)h(can)e(impro)n(v)n(e)g
(soft)n(w)n(are)i(dev)n(elop-)2040 5116 y(men)n(t)23
b(e\036ciency)h(on)f(mrub)n(y)f(on)i(TECS,)g(and)f(the)g(Rite)-6
b(VM)23 b(sc)n(hed-)2040 5203 y(uler)30 b(is)h(e\033ectiv)n(e)f(in)g
(terms)h(of)f(execution)g(time)h(and)f(ease)h(of)g(use)2040
5290 y(compared)20 b(to)g(singletasking)h(and)e(co-routines.)33
b(In)18 b(addition,)k(syn-)2040 5378 y(c)n(hronization)f(of)g(m)n
(ultiple)f(Rite)-6 b(VM)19 b(tasks)i(is)f(implemen)n(ted)g(in)g(the)p
eop end
%%Page: 10 10
TeXDict begin 10 9 bop -152 -69 a Fp(prop)r(osed)26 b(framew)n(ork.)-77
19 y(The)g(prop)r(osed)h(framew)n(ork)g(is)f(dev)n(elop)r(ed)g(using)g
(CBD.)h(In)e(ad-)-152 106 y(dition,)j(the)e(Rite)-6 b(VMs,)27
b(Rite)-6 b(VM)26 b(sc)n(heduler,)h(and)g(Ev)n(en)n(t\035ags)f(are)-152
193 y(implemen)n(ted)f(as)h(comp)r(onen)n(ts;)f(therefore,)h(dev)n
(elop)r(ers)g(can)f(add,)-152 280 y(remo)n(v)n(e,)19
b(or)f(reuse)f(their)g(functionalities)i(easily)f(as)g(required.)31
b(More-)-152 367 y(o)n(v)n(er,)c(dev)n(elop)r(ers)f(can)h(c)n(ho)r(ose)
g(fair)g(sc)n(heduling)g(or)f(\034xed-priorit)n(y)-152
454 y(sc)n(heduling)e(b)r(ecause)g(the)f(Rite)-6 b(VM)23
b(sc)n(heduler)g(can)h(b)r(e)f(added)g(and)-152 542 y(remo)n(v)n(ed)28
b(easily)-6 b(.)41 b(F)-6 b(or)28 b(soft)n(w)n(are)h(dev)n(elop)r(ed)e
(with)h(priorit)n(y-based)-152 629 y(sc)n(heduling,)19
b(dev)n(elop)r(ers)f(only)f(ha)n(v)n(e)f(to)i(remo)n(v)n(e)f(the)f
(Rite)-6 b(VM)17 b(sc)n(hed-)-152 716 y(uler.)53 b(Note)32
b(that)f(our)h(protot)n(yp)r(e)f(system)h(and)f(the)h(application)-152
803 y(programs)f(used)e(in)g(the)f(p)r(erformance)j(ev)l(aluation)e
(are)h(all)g(op)r(en-)-152 890 y(source)d(and)e(can)h(b)r(e)f(do)n
(wnloaded)h(from)h(our)e(w)n(ebsite)i([6].)-77 977 y(In)21
b(the)f(future,)j(CDL)e(\034les)g(for)h(the)f(Rite)-6
b(VM)21 b(and)g(mrub)n(y-TECS)-152 1065 y(bridge)30 b(will)g(b)r(e)f
(generated)h(automatically)h(using)e(a)h(plugin,)g(and)-152
1152 y(dev)n(elop)r(ers)20 b(will)g(b)r(e)f(able)g(to)h(transfer)g(b)n
(yteco)r(des)e(using)i(the)e(ZMO-)-152 1239 y(DEM)k(proto)r(col)g(on)f
(the)g(command)g(line.)34 b(Moreo)n(v)n(er,)23 b(w)n(e)e(will)i(sup-)
-152 1326 y(p)r(ort)i(mrub)n(y)f(libraries)i(as)f(mrbgems,)h(whic)n(h)f
(is)g(an)g(mrub)n(y)f(distri-)-152 1413 y(bution)h(pac)n(k)l(aging)h
(system.)-152 1618 y Fq(7.)100 b(A)-5 b(CKNO)g(WLEDGEMENT)-77
1725 y Fp(This)18 b(w)n(ork)f(w)n(as)h(supp)r(orted)f(b)n(y)f(JSPS)h
(KAKENHI)e(Gran)n(t)i(Num-)-152 1813 y(b)r(er)34 b(15H05305.)63
b(W)-6 b(e)33 b(w)n(ould)i(lik)n(e)f(to)h(thank)e(T)-6
b(akuy)n(a)33 b(Ishik)l(a)n(w)n(a,)-152 1900 y(Hiroshi)k(Mimaki,)j(and)
c(Kazuaki)g(T)-6 b(anak)l(a)36 b(for)h(supp)r(orting)f(this)-152
1987 y(researc)n(h.)-152 2191 y Fq(8.)100 b(REFERENCES)-113
2306 y Fp([1])38 b(A)n(UTOSAR.)24 b(h)n(ttp://www.autosar.org/.)-113
2401 y([2])38 b(class)27 b(Fib)r(er.)5 2488 y(h)n(ttp://do)r(cs.rub)n
(y-)t(lang.org/en/2.3.0/Fib)r(er.h)n(tml.)-113 2584 y([3])38
b(eLua.)26 b(h)n(ttp://www.eluapro)t(ject.net.)-113 2679
y([4])38 b(Lua.)26 b(h)n(ttp://www.lua.org/.)-113 2775
y([5])38 b(mrub)n(y.)25 b(h)n(ttps://gith)n(ub.com/mrub)n(y/mrub)n(y)q
(.)-113 2870 y([6])38 b(mrub)n(y-on-ev3rt+tecs.)5 2957
y(h)n(ttp://www.topp)r(ers.jp/tecs.h)n(tml#mrub)n(y_ev3rt.)-113
3053 y([7])g(p)n(ython-on-a-c)n(hip.)5 3140 y(h)n(ttp://co)r(de.go)r
(ogle.com/arc)n(hiv)n(e/p/p)n(ython-)t(on-)t(a-)t(c)n(hip/.)-113
3236 y([8])g(Rub)n(y.)24 b(h)n(ttps://www.rub)n(y-)t(lang.org/en/.)-113
3331 y([9])38 b(Squirrel.)26 b(h)n(ttp://www.squirrel-)t(lang.org/.)
-152 3427 y([10])39 b(TOPPERS)26 b(Pro)t(ject.)5 3514
y(h)n(ttp://www.topp)r(ers.jp/en/index.h)n(tml.)-152
3609 y([11])39 b(T.)26 b(Azumi,)g(Y.)g(Nagahara,)h(H.)e(Oy)n(ama,)h
(and)f(N.)h(Nishio.)5 3696 y(mrub)n(y)e(on)i(TECS:)h(Comp)r(onen)n
(t-Based)f(F)-6 b(ramew)n(ork)26 b(for)5 3784 y(Running)f(Script)g
(Program.)i(In)e(Pro)r(ceedings)i(of)g(the)e(18th)5 3871
y(IEEE)h(In)n(ternational)g(Symp)r(osium)f(on)h(Real-Time)5
3958 y(Computing)g(\(ISOR)n(C\),)f(pages)h(252\025259,)j(2015.)-152
4053 y([12])39 b(T.)26 b(Azumi,)g(H.)g(T)-6 b(ak)l(ada,)26
b(T.)g(Uk)l(ai,)f(and)h(H.)f(Oy)n(ama.)5 4141 y(Wheeled)h(In)n(v)n
(erted)e(P)n(endulum)h(with)g(Em)n(b)r(edded)5 4228 y(Comp)r(onen)n(t)h
(System:)34 b(A)25 b(Case)i(Study.)d(In)h(Pro)r(ceedings)i(of)5
4315 y(the)e(13th)h(IEEE)g(In)n(ternational)g(Symp)r(osium)f(on)5
4402 y(Ob)t(ject/Comp)r(onen)n(t/Service-Orien)n(ted)h(Real-Time)5
4489 y(Distributed)f(Computing)h(\(ISOR)n(C\),)f(pages)h(151\025155,)5
4576 y(2010.)-152 4672 y([13])39 b(T.)26 b(Azumi,)g(M.)g(Y)-6
b(amamoto,)27 b(Y.)e(K)n(ominami,)i(N.)e(T)-6 b(ak)l(agi,)5
4759 y(H.)26 b(Oy)n(ama,)f(and)h(H.)f(T)-6 b(ak)l(ada.)26
b(A)f(New)h(Sp)r(eci\034cation)g(of)5 4846 y(Soft)n(w)n(are)h(Comp)r
(onen)n(ts)f(for)g(Em)n(b)r(edded)f(Systems.)h(In)5 4933
y(Pro)r(ceedings)h(of)g(the)e(10th)h(IEEE)g(In)n(ternational)5
5021 y(Symp)r(osium)f(on)h(Ob)t(ject/Comp)r(onen)n(t/Service-Orien)n
(ted)5 5108 y(Real-Time)h(Distributed)e(Computing)h(\(ISOR)n(C\),)e
(pages)5 5195 y(46\02550,)k(2007.)-152 5290 y([14])39
b(T.)26 b(W.)g(Barr,)h(R.)e(Smith,)h(and)f(S.)h(Rixner.)f(Design)h(and)
5 5378 y(Implemen)n(tation)g(of)g(an)g(Em)n(b)r(edded)e(Python)h
(Run-Time)2197 -69 y(System.)g(In)g(Pro)r(ceedings)i(of)g(the)e(USENIX)
f(Ann)n(ual)2197 19 y(T)-6 b(ec)n(hnical)26 b(Conference)h(\(USENIX)d
(A)-6 b(TC)25 b(12\),)i(pages)2197 106 y(297\025308,)i(2012.)2040
201 y([15])39 b(B.)26 b(Bonakdarp)r(our)g(and)f(S.)h(S.)f(Kulk)l(arni.)
h(Comp)r(ositional)2197 288 y(v)n(eri\034cation)g(of)g(fault-toleran)n
(t)h(real-time)f(programs.)h(In)2197 376 y(Pro)r(ceedings)g(of)f(the)g
(Sev)n(en)n(th)e(A)n(CM)i(In)n(ternational)2197 463 y(Conference)h(on)e
(Em)n(b)r(edded)g(Soft)n(w)n(are,)i(EMSOFT)f('09,)2197
550 y(pages)g(29\02538,)i(2009.)2040 645 y([16])39 b(X.)25
b(Cai,)i(M.)g(R.)e(Lyu,)g(K.-F.)h(W)-6 b(ong,)26 b(and)f(R.)g(K)n(o.)
2197 733 y(Comp)r(onen)n(t-based)g(soft)n(w)n(are)j(engineering:)35
b(tec)n(hnologies,)2197 820 y(dev)n(elopmen)n(t)25 b(framew)n(orks,)i
(and)e(qualit)n(y)h(assurance)2197 907 y(sc)n(hemes.)g(In)f(Pro)r
(cessings)j(of)f(Sev)n(en)n(th)d(Asia-P)n(aci\034c)2197
994 y(Soft)n(w)n(are)j(Engineering)f(Conference)h(\(APSEC)f(2000\),)
2197 1081 y(pages)g(372\025379,)j(2000.)2040 1177 y([17])39
b(I.)26 b(Crnk)n(o)n(vic.)f(Comp)r(onen)n(t-based)h(Soft)n(w)n(are)g
(Engineering)2197 1264 y(for)g(Em)n(b)r(edded)f(Systems.)h(In)f(Pro)r
(ceedings)i(of)f(the)g(27th)2197 1351 y(In)n(ternational)g(Conference)h
(on)e(Soft)n(w)n(are)i(Engineering,)2197 1438 y(pages)f(712\025713,)j
(2005.)2040 1534 y([18])39 b(C.)26 b(F)-6 b(orsb)r(erg.)27
b(The)f(ZMODEM)g(In)n(ter)f(Application)g(File)2197 1621
y(T)-6 b(ransfer)27 b(Proto)r(col.)g(h)n(ttp:)2197 1708
y(//pauillac.inria.fr/~doligez/zmo)r(dem/)q(zmo)r(dem.txt,)2197
1795 y(1988.)2040 1891 y([19])39 b(G.)26 b(G\366ssler)h(and)f(L.)g
(A\263tef\240noaei.)h(Blaming)g(in)2197 1978 y(comp)r(onen)n(t-based)e
(real-time)h(systems.)h(In)e(Pro)r(ceedings)i(of)2197
2065 y(the)e(14th)h(In)n(ternational)g(Conference)h(on)e(Em)n(b)r
(edded)2197 2152 y(Soft)n(w)n(are,)i(EMSOFT)f('14,)h(2014.)2040
2248 y([20])39 b(R.)25 b(Ierusalimsc)n(h)n(y)-6 b(,)26
b(L.)g(H.)f(de)h(Figueiredo,)h(and)e(W.)h(Celes.)2197
2335 y(The)g(Ev)n(olution)g(of)g(Lua.)g(In)f(Pro)r(ceedings)i(of)f(the)
g(Third)2197 2422 y(A)n(CM)g(SIGPLAN)e(Conference)j(on)f(History)f(of)
2197 2509 y(Programming)i(Languages,)g(pages)g(2\0251\0252\02526,)i
(2007.)2040 2605 y([21])39 b(T.)26 b(Ishik)l(a)n(w)n(a,)g(T.)h(Azumi,)e
(H.)h(Oy)n(ama,)g(and)f(H.)g(T)-6 b(ak)l(ada.)2197 2692
y(HR-TECS:)25 b(Comp)r(onen)n(t)h(tec)n(hnology)g(for)g(em)n(b)r(edded)
2197 2779 y(systems)g(with)g(memory)f(protection.)i(In)e(Pro)r
(ceedings)i(of)2197 2866 y(the)e(16th)h(IEEE)g(In)n(ternational)g(Symp)
r(osium)f(on)2197 2953 y(Ob)t(ject/Comp)r(onen)n(t/Service-Orien)n(ted)
h(Real-Time)2197 3041 y(Distributed)f(Computing)h(\(ISOR)n(C\),)e
(pages)j(1\0258,)g(2013.)2040 3136 y([22])39 b(M.)26
b(k)n(erholm,)g(J.)g(Carlson,)i(J.)e(F)-6 b(redriksson,)26
b(H.)g(Hansson,)2197 3223 y(J.)g(H\345k)l(ansson,)g(A.)g(M\366ller,)h
(P)-6 b(.)26 b(P)n(ettersson,)g(and)g(M.)g(Tiv)n(oli.)2197
3310 y(The)g(SA)-9 b(VE)25 b(Approac)n(h)g(to)h(Comp)r(onen)n(t-based)
2197 3398 y(Dev)n(elopmen)n(t)f(of)h(V)-6 b(ehicular)26
b(Systems.)f(Journal)i(of)2197 3485 y(Systems)e(and)h(Soft)n(w)n(are,)h
(80\(5\):655\025667,)i(2007.)2040 3580 y([23])39 b(Y.)25
b(Li,)i(T.)f(Ishik)l(a)n(w)n(a,)g(Y.)g(Matsubara,)h(and)e(H.)g(T)-6
b(ak)l(ada.)26 b(A)2197 3667 y(Platform)h(for)g(LEGO)e(Mindstorms)i
(EV3)f(Based)g(on)g(an)2197 3755 y(R)-6 b(TOS)24 b(with)i(MMU)g(Supp)r
(ort.)f(OSPER)-6 b(T)25 b(2014,)j(pages)2197 3842 y(51\02559,)g(2014.)
2040 3937 y([24])39 b(A.)25 b(Ohno,)h(T.)g(Azumi,)g(and)f(N.)g(Nishio.)
i(TECS)2197 4024 y(Comp)r(onen)n(ts)f(Pro)n(viding)g(F)-6
b(unctionalities)27 b(of)f(OSEK)2197 4111 y(Sp)r(eci\034cations)g(for)h
(ITR)n(ON)d(OS.)h(Journal)i(of)f(Information)2197 4199
y(Pro)r(cessing,)i(22\(4\):584\025594,)i(2014.)2040 4294
y([25])39 b(H.)25 b(T)-6 b(ak)l(ada)26 b(and)f(K.)h(Sak)l(am)n(ura.)g
Fg(\026)p Fp(ITR)n(ON)e(for)j(Small-Scale)2197 4381 y(Em)n(b)r(edded)e
(Systems.)g(IEEE)h(Micro,)h(15\(6\):46\02554,)j(1995.)2040
4477 y([26])39 b(K.)26 b(T)-6 b(anak)l(a,)26 b(A.)f(D.)h(Naguman)n
(thri,)f(and)h(Y.)f(Matsumoto.)2197 4564 y(mrub)n(y)f(\025)i(Rapid)f
(Soft)n(w)n(are)i(Dev)n(elopmen)n(t)e(for)h(Em)n(b)r(edded)2197
4651 y(Systems.)g(In)f(Pro)r(ceedings)i(of)f(the)f(15th)h(In)n
(ternational)2197 4738 y(Conference)h(on)e(Computational)i(Science)f
(and)f(Its)2197 4825 y(Applications)h(\(ICCSA\),)g(pages)g(27\02532,)i
(2015.)2040 4921 y([27])39 b(TOPPERS.)26 b(TOPPERS/ASP)f(k)n(ernel.)
2197 5008 y(h)n(ttps://www.topp)r(ers.jp/en/asp-)t(k)n(ernel.h)n(tml.)
2040 5104 y([28])39 b(TOPPERS.)26 b(TOPPERS/HRP2)g(k)n(ernel.)2197
5191 y(h)n(ttp://www.topp)r(ers.jp/en/hrp2-)t(k)n(ernel.h)n(tml.)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
